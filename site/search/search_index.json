{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs \u00b6 For full documentation visit mkdocs.org . Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \u00b6 1 2 3 4 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. \\[e= \\frac 1 2 \\sum_{i=1}^n TD(v_i)\\] \\((v_{i,j-1}, v_{i,j}) \\in E, 1\\leq j \\leq m\\)","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"1 2 3 4 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. \\[e= \\frac 1 2 \\sum_{i=1}^n TD(v_i)\\] \\((v_{i,j-1}, v_{i,j}) \\in E, 1\\leq j \\leq m\\)","title":"Project layout"},{"location":"Go/Adavanced/Golang-16-%E5%B9%B6%E5%8F%91/","text":"\u5e76\u53d1 0-\u5e76\u53d1 \u00b6 goroutine \u00b6 Golang \u5e76\u53d1\u901a\u8fc7 goroutine \u5b9e\u73b0\uff0c\u7c7b\u4f3c\u4e8e\u7ebf\u7a0b\uff0c\u5c5e\u4e8e\u7528\u6237\u6001\u7684\u7ebf\u7a0b\u3002 goroutine \u5f00\u9500\u975e\u5e38\u5c0f\uff0c\u6240\u4ee5\u4e00\u4e2a\u7a0b\u5e8f\u5f00\u8f9f\u6570\u5343\u4e2a\u90fd\u6ca1\u95ee\u9898\u3002 Golang \u5728\u8bed\u8a00\u5c42\u9762\u5df2\u7ecf\u5185\u7f6e\u4e86\u8c03\u5ea6\u548c\u4e0a\u4e0b\u6587\u5207\u6362\u7684\u673a\u5236\uff0c\u4f1a\u667a\u80fd\u5730\u5c06 goroutine \u79cd\u7684\u4efb\u52a1\u5408\u7406\u5730\u5206\u914d\u7ed9\u6bcf\u4e2aCPU\u3002 \u5f53\u9700\u8981\u8ba9\u67d0\u4e2a\u4efb\u52a1\u5e76\u53d1\u7684\u6267\u884c\u65f6\uff0c\u53ea\u8981\u628a\u8fd9\u4e2a\u4efb\u52a1\u5305\u88c5\u6210\u4e00\u4e2a\u51fd\u6570\uff0c\u5f00\u542f\u4e00\u4e2a goroutine \u53bb\u6267\u884c\u8fd9\u4e2a\u51fd\u6570\u5373\u53ef\u3002 \u4e3b goroutine \u00b6 main() \u51fd\u6570\u81ea\u5df1\u672c\u8eab\u5c31\u5904\u4e8e \u4e3b goroutine \u3002 \u4e3b goroutine \u7ed3\u675f\u7684\u65f6\u5019\uff0c\u5176\u4ed6\u6267\u884c\u5b8c\u6bd5\u7684\u3001\u672a\u6267\u884c\u5b8c\u6bd5\u7684 \u5b50 goroutine \u4e5f\u4f1a\u4e00\u5e76\u88ab\u7ed3\u675f\u3002 \u4e3b goroutine \u7684\u4efb\u52a1\uff1a \u8bbe\u5b9a\u6bcf\u4e2a goroutine \u6240\u80fd\u7533\u8bf7\u7684\u6808\u7a7a\u95f4\u7684\u6700\u5927\u5c3a\u5bf8 \u3002 \u5728 32 \u4f4d\u7cfb\u7edf\u4e2d\u6700\u5927\u5c3a\u5bf8\u4e3a 250MB\uff0c64 \u4f4d\u7cfb\u7edf\u4e2d\u6700\u5927\u5c3a\u5bf8\u4e3a 1GB\u3002\u5982\u679c\u67d0\u4e2a goroutine \u7684\u5360\u7a7a\u95f4\u5c3a\u5bf8\u5927\u4e8e\u8fd9\u4e2a\u9650\u5236\uff0c\u5219\u8fd0\u884c\u65f6\u7cfb\u7edf\u4f1a\u5f15\u53d1\u4e00\u4e2a\u6808\u6ea2\u51fa\uff08Stack Overflow\uff09\u7684 panic \uff0c\u968f\u540e\u8fd9\u4e2a\u7a0b\u5e8f\u4e5f\u4f1a\u7ec8\u6b62\u3002 \u6267\u884c\u521d\u59cb\u5316\u5de5\u4f5c \uff1a \u521b\u5efa\u4e00\u4e2a\u7279\u6b8a\u7684 defer \u8bed\u53e5\uff0c\u7528\u4e8e \u4e3b goroutine \u9000\u51fa\u65f6\u505a\u5fc5\u8981\u7684\u5584\u540e\u5904\u7406\u3002\u56e0\u4e3a \u4e3b goroutine \u4e5f\u53ef\u80fd\u975e\u6b63\u5e38\u7ed3\u675f\u3002 \u542f\u52a8\u4e13\u7528\u4e8e GC(Garbage Clean) \u7684 goroutine \uff0c\u5e76\u8bbe\u7f6e GC \u53ef\u7528\u7684\u6807\u8bc6\u3002 \u6267\u884c main \u5305\u4e2d\u7684 init() \u51fd\u6570\u3002 \u6267\u884c main() \u51fd\u6570\u3002 \u5728 main() \u51fd\u6570\u7ed3\u675f\u540e\uff0c \u68c0\u67e5 \u4e3b goroutine \u662f\u5426\u5f15\u53d1\u4e86\u8fd0\u884c\u65f6 panic \uff0c\u5e76\u8fdb\u884c\u5fc5\u8981\u7684\u5904\u7406\u3002 \u6700\u540e\uff0c \u7ed3\u675f\u81ea\u5df1\u53ca\u5f53\u524d\u8fdb\u7a0b\u7684\u8fd0\u884c \u3002 \u4f7f\u7528 \u00b6 \u4e00\u4e2a goroutine \u5fc5\u5bf9\u5e94\u4e00\u4e2a\u51fd\u6570\uff0c\u53ef\u4ee5\u521b\u5efa\u591a\u4e2a goroutine \u53bb\u6267\u884c\u76f8\u540c\u7684\u51fd\u6570\u3002 \u53ea\u9700\u8981\u5728\u51fd\u6570\u8c03\u7528\u5904\u52a0\u4e0a go \u5173\u952e\u5b57\u4fee\u9970\uff0c\u5373\u53ef\u4e3a\u4e00\u4e2a\u51fd\u6570\u521b\u5efa\u4e00\u4e2a goroutine \u3002 \u5355\u4e2agoroutine \u00b6 \u4e32\u884c\u7a0b\u5e8f\uff1a func hello () { fmt . Println ( \"Hello World\" ) } func main () { hello () fmt . Println ( \"Main Function\" ) } // --------------------------------- // Output: Hello World Main Function goroutine \u5e76\u53d1\u7a0b\u5e8f\uff1a func hello () { fmt . Println ( \"Hello World\" ) } func main () { go hello () // \u4e3a hello() \u5f00\u542f\u4e00\u4e2a goroutine fmt . Println ( \"Main Function\" ) time . Sleep ( time . Second ) // \u8ba9\u4e3b\u7a0b\u5e8f\u4f11\u7720\u4e00\u4e0b } // --------------------------------- // Output: Hello World Main Function \u591a\u4e2agoroutine \u00b6 \u5728\u5355\u4e2a goroutine \u7684\u4f8b\u5b50\u4e2d\uff0c\u4e3a\u4e86\u9632\u6b62 \u4e3b goroutine \u5feb\u4e8e \u5b50 goroutine \u5b8c\u6210\uff0c\u5bfc\u81f4 \u5b50 goroutine \u6765\u4e0d\u53ca\u5b8c\u6210\u5c31\u9000\u51fa\u7a0b\u5e8f\uff0c\u5728 main() \u4e2d\u6dfb\u52a0\u4e86\u4e00\u6761 time.Sleep() \u3002\u867d\u7136\u6682\u65f6\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f46\u662f\u4e0d\u4f18\u96c5\uff0c\u4e5f\u4e0d\u79d1\u5b66\u3002 {% note info, \u6240\u4ee5\u6211\u4eec\u9700\u8981\u4f7f\u7528 sync.WaitGroup \u6765\u540c\u6b65\u591a\u4e2a goroutine \u3002 %} \u4f7f\u7528\u6b65\u9aa4\uff1a \u58f0\u660e\u4e00\u4e2a sync.WaitGroup \u5bf9\u8c61 \u6dfb\u52a0\u4e00\u4e2a\u8ba1\u6570\u5668 \u8c03\u7528 Wait() \u7b49\u5f85 \u5728 goroutine \u4e2d defer \u4fee\u9970 sync.WaitGroup \u7684 Done() \u65b9\u6cd5 package main import ( \"fmt\" \"sync\" ) var wg sync . WaitGroup // \u58f0\u660e\u4e00\u4e2a WaitGroup \u5bf9\u8c61 func main () { wg . Add ( 10 ) // \u6dfb\u52a0\u4e00\u4e2a\u8ba1\u6570\u5668 for i := 0 ; i < 10 ; i ++ { go hello ( i ) } fmt . Println ( \"Main Function\" ) wg . Wait () // \u7b49\u5f85\u8ba1\u6570\u5668\u5f52\u96f6\u518d\u5f80\u4e0b\u8d70 } func hello ( i int ) { defer wg . Done () // \u8ba1\u6570\u5668 -1 fmt . Println ( \"Hello \" , i ) } // ------------------------------- // Output: Hello 1 Hello 2 Hello 3 Hello 4 Main Function Hello 9 Hello 6 Hello 7 Hello 8 Hello 0 Hello 5","title":"16.\u5e76\u53d1"},{"location":"Go/Adavanced/Golang-16-%E5%B9%B6%E5%8F%91/#0-","text":"","title":"0-\u5e76\u53d1"},{"location":"Go/Adavanced/Golang-16-%E5%B9%B6%E5%8F%91/#goroutine","text":"Golang \u5e76\u53d1\u901a\u8fc7 goroutine \u5b9e\u73b0\uff0c\u7c7b\u4f3c\u4e8e\u7ebf\u7a0b\uff0c\u5c5e\u4e8e\u7528\u6237\u6001\u7684\u7ebf\u7a0b\u3002 goroutine \u5f00\u9500\u975e\u5e38\u5c0f\uff0c\u6240\u4ee5\u4e00\u4e2a\u7a0b\u5e8f\u5f00\u8f9f\u6570\u5343\u4e2a\u90fd\u6ca1\u95ee\u9898\u3002 Golang \u5728\u8bed\u8a00\u5c42\u9762\u5df2\u7ecf\u5185\u7f6e\u4e86\u8c03\u5ea6\u548c\u4e0a\u4e0b\u6587\u5207\u6362\u7684\u673a\u5236\uff0c\u4f1a\u667a\u80fd\u5730\u5c06 goroutine \u79cd\u7684\u4efb\u52a1\u5408\u7406\u5730\u5206\u914d\u7ed9\u6bcf\u4e2aCPU\u3002 \u5f53\u9700\u8981\u8ba9\u67d0\u4e2a\u4efb\u52a1\u5e76\u53d1\u7684\u6267\u884c\u65f6\uff0c\u53ea\u8981\u628a\u8fd9\u4e2a\u4efb\u52a1\u5305\u88c5\u6210\u4e00\u4e2a\u51fd\u6570\uff0c\u5f00\u542f\u4e00\u4e2a goroutine \u53bb\u6267\u884c\u8fd9\u4e2a\u51fd\u6570\u5373\u53ef\u3002","title":"goroutine"},{"location":"Go/Adavanced/Golang-16-%E5%B9%B6%E5%8F%91/#goroutine_1","text":"main() \u51fd\u6570\u81ea\u5df1\u672c\u8eab\u5c31\u5904\u4e8e \u4e3b goroutine \u3002 \u4e3b goroutine \u7ed3\u675f\u7684\u65f6\u5019\uff0c\u5176\u4ed6\u6267\u884c\u5b8c\u6bd5\u7684\u3001\u672a\u6267\u884c\u5b8c\u6bd5\u7684 \u5b50 goroutine \u4e5f\u4f1a\u4e00\u5e76\u88ab\u7ed3\u675f\u3002 \u4e3b goroutine \u7684\u4efb\u52a1\uff1a \u8bbe\u5b9a\u6bcf\u4e2a goroutine \u6240\u80fd\u7533\u8bf7\u7684\u6808\u7a7a\u95f4\u7684\u6700\u5927\u5c3a\u5bf8 \u3002 \u5728 32 \u4f4d\u7cfb\u7edf\u4e2d\u6700\u5927\u5c3a\u5bf8\u4e3a 250MB\uff0c64 \u4f4d\u7cfb\u7edf\u4e2d\u6700\u5927\u5c3a\u5bf8\u4e3a 1GB\u3002\u5982\u679c\u67d0\u4e2a goroutine \u7684\u5360\u7a7a\u95f4\u5c3a\u5bf8\u5927\u4e8e\u8fd9\u4e2a\u9650\u5236\uff0c\u5219\u8fd0\u884c\u65f6\u7cfb\u7edf\u4f1a\u5f15\u53d1\u4e00\u4e2a\u6808\u6ea2\u51fa\uff08Stack Overflow\uff09\u7684 panic \uff0c\u968f\u540e\u8fd9\u4e2a\u7a0b\u5e8f\u4e5f\u4f1a\u7ec8\u6b62\u3002 \u6267\u884c\u521d\u59cb\u5316\u5de5\u4f5c \uff1a \u521b\u5efa\u4e00\u4e2a\u7279\u6b8a\u7684 defer \u8bed\u53e5\uff0c\u7528\u4e8e \u4e3b goroutine \u9000\u51fa\u65f6\u505a\u5fc5\u8981\u7684\u5584\u540e\u5904\u7406\u3002\u56e0\u4e3a \u4e3b goroutine \u4e5f\u53ef\u80fd\u975e\u6b63\u5e38\u7ed3\u675f\u3002 \u542f\u52a8\u4e13\u7528\u4e8e GC(Garbage Clean) \u7684 goroutine \uff0c\u5e76\u8bbe\u7f6e GC \u53ef\u7528\u7684\u6807\u8bc6\u3002 \u6267\u884c main \u5305\u4e2d\u7684 init() \u51fd\u6570\u3002 \u6267\u884c main() \u51fd\u6570\u3002 \u5728 main() \u51fd\u6570\u7ed3\u675f\u540e\uff0c \u68c0\u67e5 \u4e3b goroutine \u662f\u5426\u5f15\u53d1\u4e86\u8fd0\u884c\u65f6 panic \uff0c\u5e76\u8fdb\u884c\u5fc5\u8981\u7684\u5904\u7406\u3002 \u6700\u540e\uff0c \u7ed3\u675f\u81ea\u5df1\u53ca\u5f53\u524d\u8fdb\u7a0b\u7684\u8fd0\u884c \u3002","title":"\u4e3b goroutine"},{"location":"Go/Adavanced/Golang-16-%E5%B9%B6%E5%8F%91/#_1","text":"\u4e00\u4e2a goroutine \u5fc5\u5bf9\u5e94\u4e00\u4e2a\u51fd\u6570\uff0c\u53ef\u4ee5\u521b\u5efa\u591a\u4e2a goroutine \u53bb\u6267\u884c\u76f8\u540c\u7684\u51fd\u6570\u3002 \u53ea\u9700\u8981\u5728\u51fd\u6570\u8c03\u7528\u5904\u52a0\u4e0a go \u5173\u952e\u5b57\u4fee\u9970\uff0c\u5373\u53ef\u4e3a\u4e00\u4e2a\u51fd\u6570\u521b\u5efa\u4e00\u4e2a goroutine \u3002","title":"\u4f7f\u7528"},{"location":"Go/Adavanced/Golang-16-%E5%B9%B6%E5%8F%91/#goroutine_2","text":"\u4e32\u884c\u7a0b\u5e8f\uff1a func hello () { fmt . Println ( \"Hello World\" ) } func main () { hello () fmt . Println ( \"Main Function\" ) } // --------------------------------- // Output: Hello World Main Function goroutine \u5e76\u53d1\u7a0b\u5e8f\uff1a func hello () { fmt . Println ( \"Hello World\" ) } func main () { go hello () // \u4e3a hello() \u5f00\u542f\u4e00\u4e2a goroutine fmt . Println ( \"Main Function\" ) time . Sleep ( time . Second ) // \u8ba9\u4e3b\u7a0b\u5e8f\u4f11\u7720\u4e00\u4e0b } // --------------------------------- // Output: Hello World Main Function","title":"\u5355\u4e2agoroutine"},{"location":"Go/Adavanced/Golang-16-%E5%B9%B6%E5%8F%91/#goroutine_3","text":"\u5728\u5355\u4e2a goroutine \u7684\u4f8b\u5b50\u4e2d\uff0c\u4e3a\u4e86\u9632\u6b62 \u4e3b goroutine \u5feb\u4e8e \u5b50 goroutine \u5b8c\u6210\uff0c\u5bfc\u81f4 \u5b50 goroutine \u6765\u4e0d\u53ca\u5b8c\u6210\u5c31\u9000\u51fa\u7a0b\u5e8f\uff0c\u5728 main() \u4e2d\u6dfb\u52a0\u4e86\u4e00\u6761 time.Sleep() \u3002\u867d\u7136\u6682\u65f6\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f46\u662f\u4e0d\u4f18\u96c5\uff0c\u4e5f\u4e0d\u79d1\u5b66\u3002 {% note info, \u6240\u4ee5\u6211\u4eec\u9700\u8981\u4f7f\u7528 sync.WaitGroup \u6765\u540c\u6b65\u591a\u4e2a goroutine \u3002 %} \u4f7f\u7528\u6b65\u9aa4\uff1a \u58f0\u660e\u4e00\u4e2a sync.WaitGroup \u5bf9\u8c61 \u6dfb\u52a0\u4e00\u4e2a\u8ba1\u6570\u5668 \u8c03\u7528 Wait() \u7b49\u5f85 \u5728 goroutine \u4e2d defer \u4fee\u9970 sync.WaitGroup \u7684 Done() \u65b9\u6cd5 package main import ( \"fmt\" \"sync\" ) var wg sync . WaitGroup // \u58f0\u660e\u4e00\u4e2a WaitGroup \u5bf9\u8c61 func main () { wg . Add ( 10 ) // \u6dfb\u52a0\u4e00\u4e2a\u8ba1\u6570\u5668 for i := 0 ; i < 10 ; i ++ { go hello ( i ) } fmt . Println ( \"Main Function\" ) wg . Wait () // \u7b49\u5f85\u8ba1\u6570\u5668\u5f52\u96f6\u518d\u5f80\u4e0b\u8d70 } func hello ( i int ) { defer wg . Done () // \u8ba1\u6570\u5668 -1 fmt . Println ( \"Hello \" , i ) } // ------------------------------- // Output: Hello 1 Hello 2 Hello 3 Hello 4 Main Function Hello 9 Hello 6 Hello 7 Hello 8 Hello 0 Hello 5","title":"\u591a\u4e2agoroutine"},{"location":"Go/Adavanced/Golang-17-Channel/","text":"\u4e0d\u8981\u901a\u8fc7\u5171\u4eab\u5185\u5b58\u6765\u901a\u4fe1\uff0c\u800c\u5e94\u8be5\u901a\u8fc7\u901a\u4fe1\u6765\u5171\u4eab\u5185\u5b58 1-channel \u00b6 {% note warning, \u6ce8\u610f\uff1a\u901a\u9053 channel \u662f\u5f15\u7528\u7c7b\u578b\uff01\uff01\uff01 %} channel \u7684\u4f5c\u7528 \uff1a \u5355\u7eaf\u7684\u5e76\u53d1\u6267\u884c\u51fd\u6570\u7684\u6ca1\u6709\u610f\u4e49\u7684\u3002\u51fd\u6570\u95f4\u9700\u8981\u4ea4\u6362\u6570\u636e\u624d\u80fd\u4f53\u73b0\u5e76\u53d1\u6267\u884c\u7684\u610f\u4e49\u3002 \u5c31\u50cf OS \u7684\u5e76\u53d1\u6027\u548c\u5171\u4eab\u6027\uff0c\u6ca1\u6709\u5e76\u53d1\u8c08\u4e0d\u4e0a\u5171\u4eab\uff0c\u6ca1\u6709\u5171\u4eab\u5e76\u53d1\u6ca1\u6709\u610f\u4e49\u3002 \u6240\u4ee5 channel \u5c31\u662f\u7528\u5728 goroutine \u4e4b\u95f4\u7684\u901a\u4fe1\u4e0a\u7684\u3002 Communicate through shared memory rather than through shared memory. ----- Golang Golang \u63d0\u5021**\u901a\u8fc7\u901a\u4fe1\u5171\u4eab\u5185\u5b58\u800c\u4e0d\u662f\u901a\u8fc7\u5171\u4eab\u5185\u5b58\u5b9e\u73b0\u901a\u4fe1**\u3002 goroutine \u662f\u7a0b\u5e8f\u5e76\u53d1\u7684\u6267\u884c\u4f53\uff0c channel \u5c31\u662f\u5b83\u4eec\u4e4b\u95f4\u7684\u901a\u4fe1\u7ba1\u9053\u3002 channel \u6709\u65f6\u5019\u7b80\u5199\u4e3a\uff1a chan \uff0c\u9075\u5faa FIFO \u5148\u8fdb\u5148\u51fa \u7684\u89c4\u5219\uff0c\u4fdd\u8bc1\u4e86\u6536\u53d1\u6570\u636e\u7684\u987a\u5e8f\u3002 \u6bcf\u4e00\u4e2a chan \u90fd\u662f\u4e00\u4e2a\u5177\u4f53\u7c7b\u578b\u7684\u7ba1\u9053\uff0c\u5373\u58f0\u660e channel \u65f6\u9700\u8981\u4e3a\u5176\u6307\u5b9a\u5143\u7d20\u7c7b\u578b\u3002 \u521b\u5efa channel \u00b6 var identifier chan T identifier = make ( chan T [, size ]) identifier := make ( chan T [, size ]) // \u77ed\u58f0\u660e chan \u7684\u521b\u5efa\u9700\u8981 make() \u5206\u914d\u5185\u5b58\u624d\u80fd\u4f7f\u7528\u3002\u5355\u7eaf\u7684\u58f0\u660e\u65f6\uff0c\u9ed8\u8ba4\u503c\u4e3a nil \u3002 \u5206\u914d\u5185\u5b58\u65f6\u53ef\u4ee5\u6307\u5b9a\u901a\u9053\u5927\u5c0f\uff0c\u4e5f\u5c31\u662f\u8fd9\u6761\u7ba1\u5b50\u7684\u5bb9\u91cf\u3002 func main () { var ch chan int // \u58f0\u660e\u901a\u9053\u53d8\u91cf fmt . Println ( ch ) // nil ch = make ( chan int ) // \u65e0\u7f13\u51b2\u533a\uff0c\u5206\u914d\u5185\u5b58 fmt . Println ( ch ) // 0xc0000d4000 ch2 := make ( chan int , 2 ) // \u6709\u7f13\u51b2\u533a fmt . Println ( ch2 ) // 0xc0000d5000 } \u5bf9\u4e8e\u65e0\u7f13\u51b2\u7684\u901a\u9053\uff1a\u4e00\u6b21\u53d1\u9001\u3001\u4e00\u6b21\u63a5\u6536\uff0c\u90fd\u662f\u963b\u585e\u7684 \u5bf9\u4e8e\u6709\u7f13\u51b2\u7684\u901a\u9053\uff1a \u53d1\u9001 ->\u7f13\u51b2\u533a\u6ee1\u4e86\uff0c\u624d\u4f1a\u963b\u585e\uff1b \u63a5\u6536 ->\u7f13\u51b2\u533a\u7a7a\u4e86\uff0c\u624d\u4f1a\u963b\u585e\u3002 \u65e0\u7f13\u51b2\u901a\u9053\u5c31\u597d\u50cf\u5feb\u9012\u5458\u9001\u5feb\u9012\uff0c\u53ea\u80fd\u5f53\u9762\u9001\u7ed9\u4f60\uff0c\u4f60\u7b7e\u6536\u4e4b\u524d\u4ed6\u5c31\u4e00\u76f4\u963b\u585e\u5728\u90a3\u91cc\u3002 \u6709\u7f13\u51b2\u901a\u9053\u5c31\u597d\u50cf\u6709\u4e86\u5feb\u9012\u67dc\uff0c\u653e\u5230\u5feb\u9012\u67dc\u91cc\u7b49\u4f60\u81ea\u5df1\u6765\u62ff\u3002\u5feb\u9012\u67dc\u6ee1\u4e86\u5feb\u9012\u5458\u4e5f\u53ea\u80fd\u7b49\u7740\uff0c\u963b\u585e\u5728\u90a3\u91cc\u3002 \u64cd\u4f5c channel \u00b6 \u901a\u9053\u6709 \u53d1\u9001\uff08\u901a\u9053\u8bfb\u5165\u6570\u636e\uff09 \u3001 \u63a5\u6536\uff08\u901a\u9053\u5199\u51fa\u6570\u636e\uff09 \u3001 \u5173\u95ed \u4e09\u79cd\u64cd\u4f5c ch := make ( chan int ) {% note info, \u53d1\u9001\u548c\u63a5\u6536\u6709\u70b9\u5bb9\u6613\u6df7\u6dc6\uff0c\u53ef\u4ee5\u8fd9\u4e48\u8bb0\uff1a \u5de6\u53d1\u53f3\u6536\u3001\u5de6\u5199\u53f3\u8bfb \u3002\u901a\u9053\u5728\u5de6\u8fb9\uff1a\u5411\u901a\u9053\u53d1\u9001\uff1b\u901a\u9053\u5728\u53f3\u8fb9\uff1a\u4ece\u901a\u9053\u63a5\u6536 %} \u53d1\u9001 \u00b6 \u5c06\u4e00\u4e2a\u503c\u53d1\u9001\u5230\u901a\u9053\u4e2d\uff08\u901a\u9053\u5199\u5165\u4e00\u4e2a\u503c\uff09\u3002 ch <- 10 // \u628a 10 \u53d1\u9001\u5230 ch \u4e2d \u63a5\u6536 \u00b6 \u4ece\u4e00\u4e2a\u901a\u9053\u4e2d\u63a5\u6536\u503c\uff08\u901a\u9053\u8bfb\u51fa\u4e00\u4e2a\u503c\uff09\u3002 x := <- ch // \u4ece ch \u4e2d\u63a5\u6536\u503c\u5e76\u8d4b\u503c\u7ed9\u53d8\u91cf x <- ch // \u4ece ch \u4e2d\u63a5\u6536\u503c\uff0c\u5ffd\u7565\u7ed3\u679c \u5173\u95ed \u00b6 \u8c03\u7528\u5185\u7f6e\u51fd\u6570 close() \u6765\u5173\u95ed\u901a\u9053\u3002 close ( ch ) \u5df2\u5173\u95ed\u7684\u901a\u9053\u4ecd\u7136\u53ef\u4ee5\u83b7\u53d6\u6570\u636e\u76f4\u5230\u901a\u9053\u4e3a\u7a7a \u5df2\u5173\u95ed\u7684\u901a\u9053\u6570\u636e\u53d6\u5b8c\u53ea\u4f1a\u63a5\u6536\u5230\u96f6\u503c \u5df2\u5173\u95ed\u7684\u901a\u9053\u518d\u53d1\u9001\u503c\u4f1a\u5bfc\u81f4 panic \u5173\u95ed\u5df2\u7ecf\u5173\u95ed\u7684\u901a\u9053\u4f1a\u5bfc\u81f4 panic \uff0c\u6700\u597d\u7528 new(sync.Once).Do(func() { close(ch) }) \u5173\u95ed \u5173\u4e8e\u5173\u95ed\u901a\u9053\u9700\u8981\u6ce8\u610f\u7684\u4e8b\u60c5\u662f\uff1a \u53ea\u6709\u5728\u901a\u77e5\u63a5\u6536\u65b9goroutine\u6240\u6709\u7684\u6570\u636e\u90fd\u53d1\u9001\u5b8c\u6bd5\u7684\u65f6\u5019\u624d\u9700\u8981\u5173\u95ed\u901a\u9053\u3002 \u901a\u9053\u662f\u53ef\u4ee5\u88ab\u5783\u573e\u56de\u6536\u673a\u5236\u56de\u6536\u7684\uff0c\u5b83\u548c\u5173\u95ed\u6587\u4ef6\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u5728\u7ed3\u675f\u64cd\u4f5c\u4e4b\u540e\u5173\u95ed\u6587\u4ef6\u662f\u5fc5\u987b\u8981\u505a\u7684\uff0c\u4f46\u5173\u95ed\u901a\u9053\u4e0d\u662f\u5fc5\u987b\u7684\u3002 \u5224\u65ad\u901a\u9053\u662f\u5426\u88ab\u5173\u95ed \u00b6 x, ok := <-ch \u4ece\u901a\u9053\u4e2d\u63a5\u6536\u503c\u65f6\uff0c\u4f1a\u8fd4\u56de\u4e24\u4e2a\u503c\uff1a\u4e00\u4e2a\u662f\u6570\u636e\uff0c\u4e00\u4e2a\u662f\u901a\u9053\u5f00\u542f\u72b6\u6001\u3002\u901a\u9053\u88ab\u5173\u95ed\u540e ok \u4e3a false \u3002 func main () { ch := make ( chan int , 3 ) ch <- 10 ch <- 20 ch <- 30 close ( ch ) for { x , ok := <- ch if ! ok { break } fmt . Println ( x ) } } // Output: 10 20 30 \u5355\u5411\u901a\u9053 \u00b6 \u6709\u65f6\u5019\u6211\u4eec\u4f1a\u5c06\u901a\u9053\u4f5c\u4e3a\u53c2\u6570\u5728\u591a\u4e2a\u4efb\u52a1\u51fd\u6570\u4e4b\u95f4\u4f20\u9012\uff0c\u901a\u5e38\u6211\u4eec\u5728\u4e0d\u540c\u7684\u4efb\u52a1\u51fd\u6570\u4e2d\u4f7f\u7528\u901a\u9053\u90fd\u4f1a\u5bf9\u5176\u8fdb\u884c\u9650\u5236\uff0c\u5982\u53ea\u80fd\u53d1\u9001\u6216\u63a5\u6536\u3002 \u4e0a\u9762\u4ecb\u7ecd\u7684\u90fd\u662f**\u53cc\u5411\u901a\u9053**\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u4f7f\u7528**\u5355\u5411\u901a\u9053**\u53ef\u4ee5\u5904\u7406\u8fd9\u79cd\u60c5\u51b5\uff08**\u5355\u5411\u901a\u9053**\u4e5f\u5e38\u7528\u4e8e\u53c2\u6570\uff09\u3002 <-chan T \u662f\u4e00\u4e2a**\u53ea\u8bfb**\u5355\u5411\u901a\u9053\uff0c\u53ea\u80fd\u4ece\u901a\u9053\u4e2d\u8bfb\u53d6\u6570\u636e\uff0c\u901a\u9053\u53ef\u4ee5\u6267\u884c**\u63a5\u6536**\u64cd\u4f5c\u4f46\u4e0d\u80fd\u6267\u884c\u53d1\u9001\u64cd\u4f5c\u3002 chan<- T \u662f\u4e00\u4e2a**\u53ea\u5199**\u5355\u9879\u901a\u9053\uff0c\u53ea\u80fd\u5411\u901a\u9053\u4e2d\u5199\u5165\u6570\u636e\uff0c\u901a\u9053\u53ef\u4ee5\u6267\u884c**\u53d1\u9001**\u64cd\u4f5c\u4f46\u4e0d\u80fd\u6267\u884c\u8bfb\u53d6\u64cd\u4f5c\u3002 \u5728\u51fd\u6570\u4f20\u53c2\u53ca\u4efb\u4f55\u8d4b\u503c\u64cd\u4f5c\u4e2d\u53ef\u4ee5\u5c06\u53cc\u5411\u901a\u9053\u8f6c\u6362\u4e3a\u5355\u5411\u901a\u9053\uff0c\u4f46\u53cd\u8fc7\u6765\u4e0d\u53ef\u4ee5\u3002 func producer ( out chan <- int ) { // \u751f\u4ea7\u8005\uff0c\u53ea\u80fd\u5411\u901a\u9053\u5199\u5165\u6570\u636e for i := 0 ; i < 100 ; i ++ { out <- i } close ( out ) } func consumer ( in <- chan int ) { // \u6d88\u8d39\u8005\uff0c\u53ea\u80fd\u4ece\u901a\u9053\u8bfb\u53d6\u6570\u636e for i := range in { fmt . Println ( i ) } } func main () { ch := make ( chan int , 100 ) go producer ( ch ) go consumer ( ch ) } \u901a\u9053\u603b\u7ed3 \u00b6 channel \u5e38\u89c1\u5f02\u5e38\u603b\u7ed3\uff1a \u5173\u95ed\u5df2\u7ecf\u5173\u95ed\u7684 channel \u4e5f\u4f1a\u5f15\u53d1 panic \u3002 worker pool \u00b6 Worker Pool \u662f\u4e00\u79cd\u6a21\u578b\uff0c\u5176\u4e2d\u56fa\u5b9a\u6570\u91cf\u7684 m \u4e2a worker\uff0c\u901a\u8fc7 worker \u961f\u5217\u4e2d\u7684 n \u4e2a\u4efb\u52a1\u5de5\u4f5c\u3002 worker \u4e00\u76f4\u6392\u5728\u961f\u5217\u4e2d\uff0c\u76f4\u5230 worker \u5b8c\u6210\u5176\u5f53\u524d\u4efb\u52a1\u5e76\u63d0\u51fa\u65b0\u4efb\u52a1\u4e3a\u6b62\u3002 \u5728 Golang \u4e2d worker \u4f7f\u7528 goroutine \u5b9e\u73b0\uff0c\u4efb\u52a1\u4f7f\u7528\u901a\u9053\u5b9e\u73b0\u3002 package main import ( \"fmt\" \"time\" ) func worker ( id int , jobs <- chan int , results chan <- int ) { for j := range jobs { fmt . Println ( \"worker:\" , id , \"start job:\" , j ) time . Sleep ( time . Second ) fmt . Println ( \"worker:\" , id , \"end job:\" , j ) results <- j * 2 } } func main () { jobs := make ( chan int , 100 ) results := make ( chan int , 100 ) // \u5f00\u542f3\u4e2agoroutine for w := 1 ; w <= 3 ; w ++ { go worker ( w , jobs , results ) } // 5\u4e2a\u4efb\u52a1 for j := 1 ; j <= 5 ; j ++ { jobs <- j } close ( jobs ) // close(results) for a := 1 ; a <= 5 ; a ++ { fmt . Println ( <- results ) } } select \u591a\u8def\u590d\u7528 \u00b6 select { case communication clause : statements case communication clause : statements ... default : /* \u53ef\u9009 */ statements } \u552f\u4e00\u4e00\u4e2a\u53ef\u7528\u7684\u901a\u9053\u4f1a\u88ab\u9009\u62e9\u3002 \u5982\u679c\u591a\u4e2a\u901a\u9053\u53ef\u7528\uff0c\u4f1a\u968f\u673a\u516c\u5e73\u5730\u9009\u62e9\u4e00\u4e2a\uff0c\u5176\u4ed6\u4e0d\u4f1a\u6267\u884c\u3002 \u5982\u679c\u6ca1\u6709\u901a\u9053\u53ef\u7528\uff0cdefault \u60c5\u51b5\u5c06\u88ab\u6267\u884c\u3002 \u5982\u679c\u6ca1\u6709 default\uff0cselect \u5c06\u4f1a\u963b\u585e\uff0c\u76f4\u5230\u67d0\u4e2a\u901a\u9053\u53ef\u4ee5\u8fd0\u884c\uff1bGolang \u4e0d\u4f1a\u91cd\u65b0\u5bf9 channel \u6216 \u503c\u8fdb\u884c\u6c42\u503c\u3002 func main () { ch := make ( chan int ) go func () { ch <- 10 fmt . Println ( \"\u6570\u636e\u5df2\u5199\u5165\" ) }() select { case x := <- ch : fmt . Println ( \"\u6570\u636e\u5df2\u8bfb\u51fa:\" , x ) default : fmt . Println ( \"default..\" ) } } // --------------------------------------- // Output: default .. \u7531\u4e8e goroutine \u6765\u4e0d\u53ca\u542f\u52a8\u5b8c\u6210\uff0c select \u5c31\u6267\u884c\u4e86\uff0c\u6b64\u65f6 case \u4e0d\u6ee1\u8db3\uff0c\u6240\u4ee5\u8fd0\u884c default \u3002 \u5982\u679c select \u4e4b\u524d\u7761\u7720\u4e00\u4e0b\uff0c\u7ed9 goroutine \u70b9\u65f6\u95f4\uff0c\u5c31\u53ef\u4ee5\u8fd0\u884c\u5230 case \u4e86\u3002 func main () { ch := make ( chan int ) go func () { ch <- 10 fmt . Println ( \"\u6570\u636e\u5df2\u5199\u5165\" ) }() time . Sleep ( 500 * time . Millisecond ) select { case x := <- ch : fmt . Println ( \"\u6570\u636e\u5df2\u8bfb\u51fa:\" , x ) default : fmt . Println ( \"default..\" ) } } // --------------------------------------- // Output: \u6570\u636e\u5df2\u5199\u5165 \u6570\u636e\u5df2\u8bfb\u51fa : 10","title":"17.Channel"},{"location":"Go/Adavanced/Golang-17-Channel/#1-channel","text":"{% note warning, \u6ce8\u610f\uff1a\u901a\u9053 channel \u662f\u5f15\u7528\u7c7b\u578b\uff01\uff01\uff01 %} channel \u7684\u4f5c\u7528 \uff1a \u5355\u7eaf\u7684\u5e76\u53d1\u6267\u884c\u51fd\u6570\u7684\u6ca1\u6709\u610f\u4e49\u7684\u3002\u51fd\u6570\u95f4\u9700\u8981\u4ea4\u6362\u6570\u636e\u624d\u80fd\u4f53\u73b0\u5e76\u53d1\u6267\u884c\u7684\u610f\u4e49\u3002 \u5c31\u50cf OS \u7684\u5e76\u53d1\u6027\u548c\u5171\u4eab\u6027\uff0c\u6ca1\u6709\u5e76\u53d1\u8c08\u4e0d\u4e0a\u5171\u4eab\uff0c\u6ca1\u6709\u5171\u4eab\u5e76\u53d1\u6ca1\u6709\u610f\u4e49\u3002 \u6240\u4ee5 channel \u5c31\u662f\u7528\u5728 goroutine \u4e4b\u95f4\u7684\u901a\u4fe1\u4e0a\u7684\u3002 Communicate through shared memory rather than through shared memory. ----- Golang Golang \u63d0\u5021**\u901a\u8fc7\u901a\u4fe1\u5171\u4eab\u5185\u5b58\u800c\u4e0d\u662f\u901a\u8fc7\u5171\u4eab\u5185\u5b58\u5b9e\u73b0\u901a\u4fe1**\u3002 goroutine \u662f\u7a0b\u5e8f\u5e76\u53d1\u7684\u6267\u884c\u4f53\uff0c channel \u5c31\u662f\u5b83\u4eec\u4e4b\u95f4\u7684\u901a\u4fe1\u7ba1\u9053\u3002 channel \u6709\u65f6\u5019\u7b80\u5199\u4e3a\uff1a chan \uff0c\u9075\u5faa FIFO \u5148\u8fdb\u5148\u51fa \u7684\u89c4\u5219\uff0c\u4fdd\u8bc1\u4e86\u6536\u53d1\u6570\u636e\u7684\u987a\u5e8f\u3002 \u6bcf\u4e00\u4e2a chan \u90fd\u662f\u4e00\u4e2a\u5177\u4f53\u7c7b\u578b\u7684\u7ba1\u9053\uff0c\u5373\u58f0\u660e channel \u65f6\u9700\u8981\u4e3a\u5176\u6307\u5b9a\u5143\u7d20\u7c7b\u578b\u3002","title":"1-channel"},{"location":"Go/Adavanced/Golang-17-Channel/#channel","text":"var identifier chan T identifier = make ( chan T [, size ]) identifier := make ( chan T [, size ]) // \u77ed\u58f0\u660e chan \u7684\u521b\u5efa\u9700\u8981 make() \u5206\u914d\u5185\u5b58\u624d\u80fd\u4f7f\u7528\u3002\u5355\u7eaf\u7684\u58f0\u660e\u65f6\uff0c\u9ed8\u8ba4\u503c\u4e3a nil \u3002 \u5206\u914d\u5185\u5b58\u65f6\u53ef\u4ee5\u6307\u5b9a\u901a\u9053\u5927\u5c0f\uff0c\u4e5f\u5c31\u662f\u8fd9\u6761\u7ba1\u5b50\u7684\u5bb9\u91cf\u3002 func main () { var ch chan int // \u58f0\u660e\u901a\u9053\u53d8\u91cf fmt . Println ( ch ) // nil ch = make ( chan int ) // \u65e0\u7f13\u51b2\u533a\uff0c\u5206\u914d\u5185\u5b58 fmt . Println ( ch ) // 0xc0000d4000 ch2 := make ( chan int , 2 ) // \u6709\u7f13\u51b2\u533a fmt . Println ( ch2 ) // 0xc0000d5000 } \u5bf9\u4e8e\u65e0\u7f13\u51b2\u7684\u901a\u9053\uff1a\u4e00\u6b21\u53d1\u9001\u3001\u4e00\u6b21\u63a5\u6536\uff0c\u90fd\u662f\u963b\u585e\u7684 \u5bf9\u4e8e\u6709\u7f13\u51b2\u7684\u901a\u9053\uff1a \u53d1\u9001 ->\u7f13\u51b2\u533a\u6ee1\u4e86\uff0c\u624d\u4f1a\u963b\u585e\uff1b \u63a5\u6536 ->\u7f13\u51b2\u533a\u7a7a\u4e86\uff0c\u624d\u4f1a\u963b\u585e\u3002 \u65e0\u7f13\u51b2\u901a\u9053\u5c31\u597d\u50cf\u5feb\u9012\u5458\u9001\u5feb\u9012\uff0c\u53ea\u80fd\u5f53\u9762\u9001\u7ed9\u4f60\uff0c\u4f60\u7b7e\u6536\u4e4b\u524d\u4ed6\u5c31\u4e00\u76f4\u963b\u585e\u5728\u90a3\u91cc\u3002 \u6709\u7f13\u51b2\u901a\u9053\u5c31\u597d\u50cf\u6709\u4e86\u5feb\u9012\u67dc\uff0c\u653e\u5230\u5feb\u9012\u67dc\u91cc\u7b49\u4f60\u81ea\u5df1\u6765\u62ff\u3002\u5feb\u9012\u67dc\u6ee1\u4e86\u5feb\u9012\u5458\u4e5f\u53ea\u80fd\u7b49\u7740\uff0c\u963b\u585e\u5728\u90a3\u91cc\u3002","title":"\u521b\u5efa channel"},{"location":"Go/Adavanced/Golang-17-Channel/#channel_1","text":"\u901a\u9053\u6709 \u53d1\u9001\uff08\u901a\u9053\u8bfb\u5165\u6570\u636e\uff09 \u3001 \u63a5\u6536\uff08\u901a\u9053\u5199\u51fa\u6570\u636e\uff09 \u3001 \u5173\u95ed \u4e09\u79cd\u64cd\u4f5c ch := make ( chan int ) {% note info, \u53d1\u9001\u548c\u63a5\u6536\u6709\u70b9\u5bb9\u6613\u6df7\u6dc6\uff0c\u53ef\u4ee5\u8fd9\u4e48\u8bb0\uff1a \u5de6\u53d1\u53f3\u6536\u3001\u5de6\u5199\u53f3\u8bfb \u3002\u901a\u9053\u5728\u5de6\u8fb9\uff1a\u5411\u901a\u9053\u53d1\u9001\uff1b\u901a\u9053\u5728\u53f3\u8fb9\uff1a\u4ece\u901a\u9053\u63a5\u6536 %}","title":"\u64cd\u4f5c channel"},{"location":"Go/Adavanced/Golang-17-Channel/#_1","text":"\u5c06\u4e00\u4e2a\u503c\u53d1\u9001\u5230\u901a\u9053\u4e2d\uff08\u901a\u9053\u5199\u5165\u4e00\u4e2a\u503c\uff09\u3002 ch <- 10 // \u628a 10 \u53d1\u9001\u5230 ch \u4e2d","title":"\u53d1\u9001"},{"location":"Go/Adavanced/Golang-17-Channel/#_2","text":"\u4ece\u4e00\u4e2a\u901a\u9053\u4e2d\u63a5\u6536\u503c\uff08\u901a\u9053\u8bfb\u51fa\u4e00\u4e2a\u503c\uff09\u3002 x := <- ch // \u4ece ch \u4e2d\u63a5\u6536\u503c\u5e76\u8d4b\u503c\u7ed9\u53d8\u91cf x <- ch // \u4ece ch \u4e2d\u63a5\u6536\u503c\uff0c\u5ffd\u7565\u7ed3\u679c","title":"\u63a5\u6536"},{"location":"Go/Adavanced/Golang-17-Channel/#_3","text":"\u8c03\u7528\u5185\u7f6e\u51fd\u6570 close() \u6765\u5173\u95ed\u901a\u9053\u3002 close ( ch ) \u5df2\u5173\u95ed\u7684\u901a\u9053\u4ecd\u7136\u53ef\u4ee5\u83b7\u53d6\u6570\u636e\u76f4\u5230\u901a\u9053\u4e3a\u7a7a \u5df2\u5173\u95ed\u7684\u901a\u9053\u6570\u636e\u53d6\u5b8c\u53ea\u4f1a\u63a5\u6536\u5230\u96f6\u503c \u5df2\u5173\u95ed\u7684\u901a\u9053\u518d\u53d1\u9001\u503c\u4f1a\u5bfc\u81f4 panic \u5173\u95ed\u5df2\u7ecf\u5173\u95ed\u7684\u901a\u9053\u4f1a\u5bfc\u81f4 panic \uff0c\u6700\u597d\u7528 new(sync.Once).Do(func() { close(ch) }) \u5173\u95ed \u5173\u4e8e\u5173\u95ed\u901a\u9053\u9700\u8981\u6ce8\u610f\u7684\u4e8b\u60c5\u662f\uff1a \u53ea\u6709\u5728\u901a\u77e5\u63a5\u6536\u65b9goroutine\u6240\u6709\u7684\u6570\u636e\u90fd\u53d1\u9001\u5b8c\u6bd5\u7684\u65f6\u5019\u624d\u9700\u8981\u5173\u95ed\u901a\u9053\u3002 \u901a\u9053\u662f\u53ef\u4ee5\u88ab\u5783\u573e\u56de\u6536\u673a\u5236\u56de\u6536\u7684\uff0c\u5b83\u548c\u5173\u95ed\u6587\u4ef6\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u5728\u7ed3\u675f\u64cd\u4f5c\u4e4b\u540e\u5173\u95ed\u6587\u4ef6\u662f\u5fc5\u987b\u8981\u505a\u7684\uff0c\u4f46\u5173\u95ed\u901a\u9053\u4e0d\u662f\u5fc5\u987b\u7684\u3002","title":"\u5173\u95ed"},{"location":"Go/Adavanced/Golang-17-Channel/#_4","text":"x, ok := <-ch \u4ece\u901a\u9053\u4e2d\u63a5\u6536\u503c\u65f6\uff0c\u4f1a\u8fd4\u56de\u4e24\u4e2a\u503c\uff1a\u4e00\u4e2a\u662f\u6570\u636e\uff0c\u4e00\u4e2a\u662f\u901a\u9053\u5f00\u542f\u72b6\u6001\u3002\u901a\u9053\u88ab\u5173\u95ed\u540e ok \u4e3a false \u3002 func main () { ch := make ( chan int , 3 ) ch <- 10 ch <- 20 ch <- 30 close ( ch ) for { x , ok := <- ch if ! ok { break } fmt . Println ( x ) } } // Output: 10 20 30","title":"\u5224\u65ad\u901a\u9053\u662f\u5426\u88ab\u5173\u95ed"},{"location":"Go/Adavanced/Golang-17-Channel/#_5","text":"\u6709\u65f6\u5019\u6211\u4eec\u4f1a\u5c06\u901a\u9053\u4f5c\u4e3a\u53c2\u6570\u5728\u591a\u4e2a\u4efb\u52a1\u51fd\u6570\u4e4b\u95f4\u4f20\u9012\uff0c\u901a\u5e38\u6211\u4eec\u5728\u4e0d\u540c\u7684\u4efb\u52a1\u51fd\u6570\u4e2d\u4f7f\u7528\u901a\u9053\u90fd\u4f1a\u5bf9\u5176\u8fdb\u884c\u9650\u5236\uff0c\u5982\u53ea\u80fd\u53d1\u9001\u6216\u63a5\u6536\u3002 \u4e0a\u9762\u4ecb\u7ecd\u7684\u90fd\u662f**\u53cc\u5411\u901a\u9053**\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u4f7f\u7528**\u5355\u5411\u901a\u9053**\u53ef\u4ee5\u5904\u7406\u8fd9\u79cd\u60c5\u51b5\uff08**\u5355\u5411\u901a\u9053**\u4e5f\u5e38\u7528\u4e8e\u53c2\u6570\uff09\u3002 <-chan T \u662f\u4e00\u4e2a**\u53ea\u8bfb**\u5355\u5411\u901a\u9053\uff0c\u53ea\u80fd\u4ece\u901a\u9053\u4e2d\u8bfb\u53d6\u6570\u636e\uff0c\u901a\u9053\u53ef\u4ee5\u6267\u884c**\u63a5\u6536**\u64cd\u4f5c\u4f46\u4e0d\u80fd\u6267\u884c\u53d1\u9001\u64cd\u4f5c\u3002 chan<- T \u662f\u4e00\u4e2a**\u53ea\u5199**\u5355\u9879\u901a\u9053\uff0c\u53ea\u80fd\u5411\u901a\u9053\u4e2d\u5199\u5165\u6570\u636e\uff0c\u901a\u9053\u53ef\u4ee5\u6267\u884c**\u53d1\u9001**\u64cd\u4f5c\u4f46\u4e0d\u80fd\u6267\u884c\u8bfb\u53d6\u64cd\u4f5c\u3002 \u5728\u51fd\u6570\u4f20\u53c2\u53ca\u4efb\u4f55\u8d4b\u503c\u64cd\u4f5c\u4e2d\u53ef\u4ee5\u5c06\u53cc\u5411\u901a\u9053\u8f6c\u6362\u4e3a\u5355\u5411\u901a\u9053\uff0c\u4f46\u53cd\u8fc7\u6765\u4e0d\u53ef\u4ee5\u3002 func producer ( out chan <- int ) { // \u751f\u4ea7\u8005\uff0c\u53ea\u80fd\u5411\u901a\u9053\u5199\u5165\u6570\u636e for i := 0 ; i < 100 ; i ++ { out <- i } close ( out ) } func consumer ( in <- chan int ) { // \u6d88\u8d39\u8005\uff0c\u53ea\u80fd\u4ece\u901a\u9053\u8bfb\u53d6\u6570\u636e for i := range in { fmt . Println ( i ) } } func main () { ch := make ( chan int , 100 ) go producer ( ch ) go consumer ( ch ) }","title":"\u5355\u5411\u901a\u9053"},{"location":"Go/Adavanced/Golang-17-Channel/#_6","text":"channel \u5e38\u89c1\u5f02\u5e38\u603b\u7ed3\uff1a \u5173\u95ed\u5df2\u7ecf\u5173\u95ed\u7684 channel \u4e5f\u4f1a\u5f15\u53d1 panic \u3002","title":"\u901a\u9053\u603b\u7ed3"},{"location":"Go/Adavanced/Golang-17-Channel/#worker-pool","text":"Worker Pool \u662f\u4e00\u79cd\u6a21\u578b\uff0c\u5176\u4e2d\u56fa\u5b9a\u6570\u91cf\u7684 m \u4e2a worker\uff0c\u901a\u8fc7 worker \u961f\u5217\u4e2d\u7684 n \u4e2a\u4efb\u52a1\u5de5\u4f5c\u3002 worker \u4e00\u76f4\u6392\u5728\u961f\u5217\u4e2d\uff0c\u76f4\u5230 worker \u5b8c\u6210\u5176\u5f53\u524d\u4efb\u52a1\u5e76\u63d0\u51fa\u65b0\u4efb\u52a1\u4e3a\u6b62\u3002 \u5728 Golang \u4e2d worker \u4f7f\u7528 goroutine \u5b9e\u73b0\uff0c\u4efb\u52a1\u4f7f\u7528\u901a\u9053\u5b9e\u73b0\u3002 package main import ( \"fmt\" \"time\" ) func worker ( id int , jobs <- chan int , results chan <- int ) { for j := range jobs { fmt . Println ( \"worker:\" , id , \"start job:\" , j ) time . Sleep ( time . Second ) fmt . Println ( \"worker:\" , id , \"end job:\" , j ) results <- j * 2 } } func main () { jobs := make ( chan int , 100 ) results := make ( chan int , 100 ) // \u5f00\u542f3\u4e2agoroutine for w := 1 ; w <= 3 ; w ++ { go worker ( w , jobs , results ) } // 5\u4e2a\u4efb\u52a1 for j := 1 ; j <= 5 ; j ++ { jobs <- j } close ( jobs ) // close(results) for a := 1 ; a <= 5 ; a ++ { fmt . Println ( <- results ) } }","title":"worker pool"},{"location":"Go/Adavanced/Golang-17-Channel/#select","text":"select { case communication clause : statements case communication clause : statements ... default : /* \u53ef\u9009 */ statements } \u552f\u4e00\u4e00\u4e2a\u53ef\u7528\u7684\u901a\u9053\u4f1a\u88ab\u9009\u62e9\u3002 \u5982\u679c\u591a\u4e2a\u901a\u9053\u53ef\u7528\uff0c\u4f1a\u968f\u673a\u516c\u5e73\u5730\u9009\u62e9\u4e00\u4e2a\uff0c\u5176\u4ed6\u4e0d\u4f1a\u6267\u884c\u3002 \u5982\u679c\u6ca1\u6709\u901a\u9053\u53ef\u7528\uff0cdefault \u60c5\u51b5\u5c06\u88ab\u6267\u884c\u3002 \u5982\u679c\u6ca1\u6709 default\uff0cselect \u5c06\u4f1a\u963b\u585e\uff0c\u76f4\u5230\u67d0\u4e2a\u901a\u9053\u53ef\u4ee5\u8fd0\u884c\uff1bGolang \u4e0d\u4f1a\u91cd\u65b0\u5bf9 channel \u6216 \u503c\u8fdb\u884c\u6c42\u503c\u3002 func main () { ch := make ( chan int ) go func () { ch <- 10 fmt . Println ( \"\u6570\u636e\u5df2\u5199\u5165\" ) }() select { case x := <- ch : fmt . Println ( \"\u6570\u636e\u5df2\u8bfb\u51fa:\" , x ) default : fmt . Println ( \"default..\" ) } } // --------------------------------------- // Output: default .. \u7531\u4e8e goroutine \u6765\u4e0d\u53ca\u542f\u52a8\u5b8c\u6210\uff0c select \u5c31\u6267\u884c\u4e86\uff0c\u6b64\u65f6 case \u4e0d\u6ee1\u8db3\uff0c\u6240\u4ee5\u8fd0\u884c default \u3002 \u5982\u679c select \u4e4b\u524d\u7761\u7720\u4e00\u4e0b\uff0c\u7ed9 goroutine \u70b9\u65f6\u95f4\uff0c\u5c31\u53ef\u4ee5\u8fd0\u884c\u5230 case \u4e86\u3002 func main () { ch := make ( chan int ) go func () { ch <- 10 fmt . Println ( \"\u6570\u636e\u5df2\u5199\u5165\" ) }() time . Sleep ( 500 * time . Millisecond ) select { case x := <- ch : fmt . Println ( \"\u6570\u636e\u5df2\u8bfb\u51fa:\" , x ) default : fmt . Println ( \"default..\" ) } } // --------------------------------------- // Output: \u6570\u636e\u5df2\u5199\u5165 \u6570\u636e\u5df2\u8bfb\u51fa : 10","title":"select \u591a\u8def\u590d\u7528"},{"location":"Go/Adavanced/Golang-18-%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8/","text":"\u5e76\u53d1\u5b89\u5168 1-\u5e76\u53d1\u5b89\u5168 \u00b6 \u7ade\u6001 \u00b6 \u7ade\u6001 \u662f\u6307\u591a\u4e2a goroutine \u6309\u67d0\u4e9b\u4ea4\u9519\u987a\u5e8f\u6267\u884c\u65f6\uff0c\u4e89\u62a2\u4f7f\u7528\u540c\u4e00\u4efd\u4e34\u754c\u8d44\u6e90\uff0c\u5bfc\u81f4\u7a0b\u5e8f\u65e0\u6cd5\u7ed9\u51fa\u6b63\u786e\u7684\u7ed3\u679c\u3002 **\u4e32\u884c\u7a0b\u5e8f**\u4e2d\uff08\u4e00\u4e2a\u7a0b\u5e8f\u53ea\u6709\u4e00\u4e2a goroutine \uff09\uff0c\u7a0b\u5e8f\u4e2d\u5404\u4e2a\u6b65\u9aa4\u7684\u6267\u884c\u987a\u5e8f\u7531\u7a0b\u5e8f\u903b\u8f91\u51b3\u5b9a\uff0c\u6240\u4ee5\u5355\u4e2a goroutine \u4e0d\u4f1a\u5f15\u53d1\u7ade\u6001\u95ee\u9898\u3002 **\u5e76\u53d1\u7a0b\u5e8f**\u4e2d\uff08\u4e00\u4e2a\u7a0b\u5e8f\u6709\u591a\u4e2a goroutine \uff09\uff0c\u6bcf\u4e2a goroutine \u7684\u6267\u884c\u987a\u5e8f\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u56e0\u6b64\u53ef\u80fd\u4f1a\u5e26\u6765\u7ade\u6001\u95ee\u9898\u3002 \u4f8b\u5982\uff1a package main import \"fmt\" var x int64 func add () { for i := 0 ; i < 5 _000_000 ; i ++ { x = x + 1 } } func main () { add () add () fmt . Println ( x ) // 10_000_000 } \u8fd9\u662f\u4e00\u4e2a\u4e32\u884c\u7a0b\u5e8f\uff0c\u6240\u4ee5\u6700\u7ec8\u7684\u7ed3\u679c\u662f\u6b63\u786e\u7684\u3002 \u4e0b\u9762\u5f00\u542f\u65b0\u7684 goroutine \u6267\u884c add() package main import ( \"fmt\" \"sync\" ) var ( x int64 wg sync . WaitGroup ) func add () { defer wg . Done () for i := 0 ; i < 5 _000_000 ; i ++ { x = x + 1 } } func main () { wg . Add ( 2 ) go add () go add () fmt . Println ( x ) // 5_872_265 wg . Wait () } \u4ece\u6253\u5370\u7ed3\u679c\u53ef\u4ee5\u770b\u51fa\u7ed3\u679c\u5e76\u4e0d\u6b63\u786e\uff0c\u8fd9\u662f\u56e0\u4e3a 3 \u4e2a goroutine \u4e89\u62a2\u7740\u4f7f\u7528 x \u8fd9\u4e2a\u4e34\u754c\u8d44\u6e90\uff0c\u6709\u53ef\u80fd\u6700\u7ec8\u7684 x \u7684\u7ed3\u679c\u662f\u6b63\u786e\u7684\uff0c\u4f46\u662f main() \u63d0\u524d\u62a2\u5230\u8d44\u6e90\u5c31\u6253\u5370\u51fa\u6765\u4e86\uff0c\u4e5f\u6709\u53ef\u80fd\u4e24\u4e2a \u5b50goroutine \u4e89\u62a2\u65f6\u5bfc\u81f4 x \u88ab\u5199\u4e71\u4e86\uff08\u53d1\u751f\u4e86\u7ade\u6001\uff09\u3002 \u907f\u514d\u7ade\u6001 \u00b6 \u7b2c\u4e00\u79cd\uff1a\u4e0d\u8981\u4fee\u6539\u53d8\u91cf\u3002\u8fd9\u79cd\u53ef\u4ee5\uff0c\u4f46\u4e0d\u73b0\u5b9e\uff0c\u56e0\u4e3a\u5b9e\u9645\u4e1a\u52a1\u4e2d\u5fc5\u7136\u6d89\u53ca\u540c\u65f6\u8bfb\u5199\u540c\u4e00\u4e2a\u53d8\u91cf\u7684\u573a\u666f\u3002\u53ea\u80fd\u8bf4\u5c3d\u91cf\u907f\u514d\u3002 \u7b2c\u4e8c\u79cd\uff1a\u4e0a\u9501 \u4e0a\u9501\u53ef\u4ee5\u5f88\u597d\u7684\u89e3\u51b3\u7ade\u6001\u95ee\u9898\uff0c\u4f46\u662f\u4f1a\u6709\u4e9b\u8bb8\u6027\u80fd\u4e0a\u7684\u635f\u5931\u3002 \u53d1\u751f\u7ade\u6001\u7684\u4e3b\u8981\u539f\u56e0\u662f\u56e0\u4e3a\uff1a\u591a\u4e2a goroutine \u4e89\u62a2\u8bfb\u5199\u540c\u4e00\u4e2a\u4e34\u754c\u8d44\u6e90\u3002\u8fd9\u4e2a\u4e34\u754c\u8d44\u6e90\u53ef\u4ee5\u662f\u6253\u5370\u673a\u3001\u5168\u5c40\u53d8\u91cf\u7b49\u7b49\u3002 \u4e3e\u4e2a\u6817\u5b50\uff0c \u4e00\u4e2a\u4eba\u5c31\u662f\u4e00\u4e2a goroutine \uff0c\u516c\u5171\u536b\u751f\u95f4\u5c31\u662f\u4e00\u79cd\u4e34\u754c\u8d44\u6e90\uff0c\u540c\u4e00\u65f6\u523b\u53ea\u80fd\u6709\u4e00\u4e2a\u4eba\u4f7f\u7528\uff08\u4e00\u4e2a\u4e34\u754c\u8d44\u6e90\uff0c\u540c\u4e00\u65f6\u523b\u53ea\u80fd\u6709\u4e00\u4e2a goroutine \u8bfb\u5199 \uff09\u3002\u591a\u4e2a\u4eba\u540c\u65f6\u4e89\u62a2\u4e00\u4e2a\u516c\u5171\u536b\u751f\u95f4\u80af\u5b9a\u51fa\u95ee\u9898\u3002 \u6240\u4ee5\u536b\u751f\u95f4\u8981\u52a0\u4e2a\u9501\uff0c\u8fdb\u53bb\u4f7f\u7528\u7684\u4eba\u4e0a\u9501\uff0c\u4f7f\u7528\u5b8c\u4e86\u5f00\u9501\u3002 \u4f7f\u7528\u4e34\u754c\u8d44\u6e90\u7684 goroutine \u7ed9\u4e34\u754c\u8d44\u6e90\u4e0a\u9501\uff0c\u4f7f\u7528\u5b8c\u4e86\u628a\u9501\u91ca\u653e\u3002 Golang \u4e2d\u7684 sync \u5305\u63d0\u4f9b\u4e86 Mutex \u548c RWMutex \u4e24\u79cd\u9501\u3002 sync.Mutex \u4e92\u65a5\u9501 \u00b6 type Mutex struct { state int32 sema uint32 } func ( m * Mutex ) Lock () {} func ( m * Mutex ) Unlock () {} Mutex \u975e\u5e38\u7b80\u5355\uff0c\u53ea\u6709 Lock() \u548c Unlock() \u4e24\u4e2a\u65b9\u6cd5\u3002 \u52a0\u9501 - Lock() \u7528\u4e8e\u52a0\u9501 - \u52a0\u9501\u89c4\u5219\uff1a - \u5982\u679c\u4e92\u65a5\u9501\u5df2\u7ecf\u88ab\u4e0a\u9501\u4e86\uff0c\u5219\u52a0\u9501\u64cd\u4f5c\u963b\u585e\uff0c\u76f4\u5230\u4e92\u65a5\u9501\u88ab\u89e3\u9501\u4ee5\u540e\u624d\u80fd\u4e0a\u9501\u3002 - \u5982\u679c\u4e92\u65a5\u9501\u6ca1\u6709\u88ab\u4e0a\u9501\uff0c\u90a3\u4e48\u4e0a\u9501\u6210\u529f\u3002 \u89e3\u9501 - Unlock() \u7528\u4e8e\u89e3\u9501 - \u89e3\u9501\u89c4\u5219\uff1a\u91ca\u653e\u4e92\u65a5\u9501 \u4e0a\u9501 \u00b6 \u4e0b\u9762\u6211\u4eec\u5bf9\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u4e89\u62a2\u4e34\u754c\u8d44\u6e90\u7684\u90e8\u5206\u4e0a\u9501\u3002 package main import ( \"fmt\" \"sync\" ) var ( x int64 wg sync . WaitGroup lock sync . Mutex ) func add () { defer wg . Done () for i := 0 ; i < 5 _000_000 ; i ++ { lock . Lock () // \u52a0\u9501 x = x + 1 lock . Unlock () // \u89e3\u9501 } } func main () { wg . Add ( 2 ) go add () go add () fmt . Println ( x ) // 10_000_000 wg . Wait () } \u5982\u6b64\u4e00\u6765\uff0c\u4e0d\u7ba1\u54ea\u4e2a \u5b50goroutine \u5f97\u5230\u8fd0\u884c\u7684\u673a\u4f1a\uff0c\u522b\u7684 goroutine \u90fd\u4e0d\u80fd\u8bbf\u95ee\u4e34\u754c\u8d44\u6e90\uff0c\u5f97\u7b49\u5230\u4e0a\u4e86\u9501\u7684 goroutine \u91ca\u653e\uff0c\u522b\u7684 goroutine \u624d\u80fd\u8bbf\u95ee\u3002 \u5ef6\u8fdf\u89e3\u9501 \u00b6 \u5982\u679c\u4e00\u4e2a goroutine \u4e0a\u4e86\u9501\u4e4b\u540e\u5fd8\u8bb0\u91ca\u653e\u9501\uff0c\u522b\u7684 goroutine \u662f\u6c38\u8fdc\u62ff\u4e0d\u5230\u9501\u7684\uff0c\u8fd8\u4f1a\u5bfc\u81f4\u6b7b\u9501\u3002 \u5728\u590d\u6742\u7684\u4ee3\u7801\u4e2d\uff0c\u5f88\u96be\u786e\u5b9a\u6240\u6709\u5206\u652f\u4e2d\u7684 Lock() \u548c Unlock() \u6210\u5bf9\u51fa\u73b0\uff0c\u6240\u4ee5\uff0c\u6700\u597d\u517b\u6210**\u9501\u6210\u5bf9\u5199\u3001\u5ef6\u8fdf\u89e3\u9501**\u7684\u4e60\u60ef\u3002 var x int var lock sync . Mutex func add () { lock . Lock () // \u4e0a\u9501 x = x + 1 defer lock . Unlock () // \u5ef6\u8fdf\u89e3\u9501\uff0c\u5728\u51fd\u6570\u8fd0\u884c\u7ed3\u675f\u4e4b\u540e\u4f1a\u81ea\u52a8\u89e3\u9501 return x } sync.RWMutex \u8bfb\u5199\u4e92\u65a5\u9501 \u00b6 type RWMutex struct { w Mutex // held if there are pending writers writerSem uint32 // semaphore for writers to wait for completing readers readerSem uint32 // semaphore for readers to wait for completing writers readerCount int32 // number of pending readers readerWait int32 // number of departing readers } // \u5199\u9501 func ( rw * RWMutex ) Lock () {} func ( rw * RWMutex ) Unlock () {} // \u8bfb\u9501 func ( rw * RWMutex ) RLock () {} func ( rw * RWMutex ) RUnlock () {} func ( rw * RWMutex ) RLocker () Locker {} \u8bfb\u5199\u4e92\u65a5\u9501\u9002\u7528\u4e8e**\u8bfb\u591a\u5199\u5c11**\u7684\u573a\u666f\u3002\u56e0\u4e3a\u5728\u4f7f\u7528 Mutex \u4e92\u65a5\u9501\u7684\u65f6\u5019\uff0c\u4e0d\u7ba1\u662f\u56e0\u4e3a\u8981\u53bb\u8bfb\u4e0a\u7684\u9501\u8fd8\u662f\u8981\u53bb\u5199\u4e0a\u7684\u9501\uff0c\u53ea\u8981\u4e00\u4e0a\u4e86\u9501\uff0c\u522b\u7684 goroutine \u5c31\u4e0d\u80fd\u4e0a\u9501\uff0c\u4e5f\u4e0d\u80fd\u8bfb\u5199\u3002 \u4e8e\u662f\u5728 \u8bfb\u591a\u5199\u5c11 \u7684\u573a\u666f\u4e0b\uff0c\u5bfc\u81f4\u5c11\u91cf\u5199\u64cd\u4f5c\u65f6\uff0c\u4e5f\u4e0d\u80fd\u8bfb\u3002\u6240\u4ee5\u8fd9\u79cd\u573a\u666f\u8981\u4f7f\u7528 \u8bfb\u5199\u4e92\u65a5\u9501 \u3002 \u5199\u9501 - Lock() \u51fd\u6570\u7528\u4e8e\u4e0a\u5199\u9501 - Unlock() \u51fd\u6570\u7528\u4e8e\u89e3\u5199\u9501 - \u52a0\u9501\u89c4\u5219\uff1a - \u5982\u679c\u5f53\u524d\u7684\u8bfb\u5199\u9501\u88ab\u4e0a\u9501\u4e86\uff0c\u5219 \u52a0\u5199\u9501 \u64cd\u4f5c\u963b\u585e\u76f4\u5230\u8bfb\u5199\u9501\u88ab\u91ca\u653e - \u5982\u679c\u5f53\u524d\u7684\u8bfb\u5199\u9501\u6ca1\u6709\u88ab\u9501\uff0c\u5219 \u52a0\u5199\u9501 \u6210\u529f - \u91ca\u653e\u89c4\u5219\uff1a\u76f4\u63a5\u91ca\u653e \u8bfb\u9501 - RLock() \u51fd\u6570\u7528\u4e8e\u4e0a\u8bfb\u9501 - RUnlock() \u51fd\u6570\u7528\u4e8e\u89e3\u8bfb\u9501 - \u52a0\u9501\u89c4\u5219\uff1a - \u5982\u679c\u5f53\u524d\u7684\u8bfb\u5199\u9501 \u6ca1\u6709\u88ab\u9501\uff0c\u5219 \u52a0\u8bfb\u9501 \u64cd\u4f5c\u6210\u529f - \u5982\u679c\u5f53\u524d\u7684\u8bfb\u5199\u9501 \u88ab\u4e0a\u4e86\u8bfb\u9501\uff0c\u5219 \u52a0\u8bfb\u9501 \u64cd\u4f5c\u6210\u529f - \u5982\u679c\u5f53\u524d\u7684\u8bfb\u5199\u9501 \u88ab\u4e0a\u4e86\u5199\u9501\uff0c\u5219 \u52a0\u8bfb\u9501 \u64cd\u4f5c\u963b\u585e\uff0c\u76f4\u5230\u8bfb\u5199\u9501\u88ab\u91ca\u653e eg\uff1a package main import ( \"fmt\" \"sync\" \"time\" ) var ( x int64 wg sync . WaitGroup rwlock sync . RWMutex // \u8bfb\u5199\u9501 ) func read () { defer wg . Done () rwlock . RLock () // \u52a0\u8bfb\u9501 time . Sleep ( time . Millisecond ) fmt . Println ( x ) defer rwlock . RUnlock () // \u89e3\u8bfb\u9501 } func write () { defer wg . Done () rwlock . Lock () // \u52a0\u5199\u9501 time . Sleep ( time . Millisecond * 5 ) x = x + 1 defer rwlock . Unlock () // \u89e3\u5199\u9501 } func main () { start := time . Now () for i := 0 ; i < 10 ; i ++ { wg . Add ( 1 ) go write () } for i := 0 ; i < 1000 ; i ++ { wg . Add ( 1 ) go read () } wg . Wait () fmt . Println ( time . Now (). Sub ( start )) } // -------------------------------------- // Output: ... 1 1 1 1 215.9568 ms Mutex \u548c RWMutex \u7684\u9009\u62e9 \u00b6 \u4ec5\u5728\u7edd\u5927\u90e8\u5206goroutine\u90fd\u5728**\u83b7\u53d6\u8bfb\u9501\u5e76\u4e14\u9501\u7ade\u4e89\u6bd4\u8f83\u6fc0\u70c8\u65f6**\uff08\u5373\uff0cgoroutine\u4e00\u822c\u90fd\u9700\u8981\u7b49\u5f85\u540e\u624d\u80fd\u83b7\u5230\u9501\uff09\uff0cRWMutex\u624d\u6709\u4f18\u52bf \u5426\u5219\uff0c \u4e00\u822c\u4f7f\u7528Mutex\u5373\u53ef sync.Once \u00b6 type Once struct { done uint32 m Mutex } func ( o * Once ) Do ( f func ()) { if atomic . LoadUint32 ( & o . done ) == 0 { o . doSlow ( f ) } } func ( o * Once ) doSlow ( f func ()) { o . m . Lock () defer o . m . Unlock () if o . done == 0 { defer atomic . StoreUint32 ( & o . done , 1 ) f () } } - Once \u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u91cc\u9762\u6709\u4e00\u628a Mutex \u9501 m \uff0c\u8fd8\u6709\u4e00\u4e2a done \u6807\u5fd7\u4f4d\u7528\u6765\u6807\u8bb0 f \u662f\u5426\u6267\u884c\u8fc7\u4e86\u3002\uff080\u672a\u6267\u884c\uff0c1\u5df2\u6267\u884c\uff09 - Once \u53ea\u6709\u4e00\u4e2a Do() \u65b9\u6cd5\uff0c\u5176\u4e2d\u68c0\u67e5\u4e86\u4e00\u4e0b\u6807\u5fd7\u4f4d\uff0c\u5982\u679c\u4e3a 0 \u8868\u793a f \u672a\u6267\u884c\u8fc7\uff0c\u8c03\u7528 doSlow() \uff1b\u975e 0 \u8868\u793a\u6267\u884c\u8fc7\u4e86\uff0c\u76f4\u63a5\u8fd4\u56de doSlow() \u4e2d\uff0c\u5148\u662f\u4e0a\u9501\uff0c\u7136\u540e\u68c0\u67e5 done \u6807\u5fd7\u4f4d\uff0c\u770b\u770b f \u662f\u5426\u6267\u884c\u8fc7\uff0c\u5982\u679c\u6ca1\u6709\u6267\u884c\uff0c\u5c31\u6267\u884c\uff0c\u7136\u540e\u6807\u5fd7\u4f4d\u7f6e\u4e3a 1\u3002 \u7528 sync.Once \u5199\u4e00\u4e2a\u5355\u4f8b\u6a21\u5f0f\uff1a package main import ( \"fmt\" \"sync\" ) type person struct { name string age int } var ( p * person once sync . Once ) // \u6784\u9020\u65b9\u6cd5\u4f7f\u7528 Once \u7684 Do \u65b9\u6cd5\u5b9e\u73b0 func NewSinglePerson ( name string , age int ) * person { once . Do ( func () { p = & person { name , age } }) return p } func main () { p1 := NewSinglePerson ( \"Boii\" , 18 ) p2 := NewSinglePerson ( \"Eva\" , 20 ) fmt . Printf ( \"%p\\n\" , p1 ) // 0xc0000044a0 fmt . Printf ( \"%p\\n\" , p2 ) // 0xc0000044a0 fmt . Printf ( \"%v\\n\" , p1 ) // &{Boii 18} fmt . Printf ( \"%v\\n\" , p2 ) // &{Boii 18} } sync.Map \u00b6 {% noteblock info %} type Map struct { mu Mutex read atomic . Value // readOnly dirty map [ interface {}] * entry misses int } // set func ( m * Map ) Store ( key , value interface {}) {} // get func ( m * Map ) Load ( key interface {}) ( value interface {}, ok bool ) {} // \u5220\u9664 func ( m * Map ) Delete ( key interface {}) {} // \u5148\u52a0\u8f7d\u770b\uff0c\u6709\u518d\u5220\u9664 func ( m * Map ) LoadAndDelete ( key interface {}) ( value interface {}, loaded bool ) {} // \u5148\u52a0\u8f7d\u770b\uff0c\u6ca1\u6709\u518d\u5b58\uff0c\u6709\u5c31\u4e0d\u5b58 func ( m * Map ) LoadOrStore ( key , value interface {}) ( actual interface {}, loaded bool ) {} // \u904d\u5386 func ( m * Map ) Range ( f func ( key , value interface {}) bool ) {} Golang \u4e2d\u5185\u7f6e\u7684 map \u4e0d\u662f\u5e76\u53d1\u5b89\u5168\u7684\uff0c\u5728\u5bf9 map \u5e76\u53d1\u5199\u7684\u65f6\u5019\u4f1a\u51fa\u73b0\u95ee\u9898\u3002 Golang \u7684 sync \u5305\u4e2d\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5f00\u7bb1\u5373\u7528\u7684\u5e76\u53d1\u5b89\u5168\u7248map\uff1a sync.Map \u3002 \u5f00\u7bb1\u5373\u7528\uff0c\u5373\u8868\u793a\u4e0d\u9700\u8981 make() \u51fd\u6570\u521d\u59cb\u5316\u5c31\u80fd\u76f4\u63a5\u4f7f\u7528\uff0c\u540c\u65f6\u5185\u7f6e\u4e86\u8bf8\u5982 Store\u3001Load\u3001Delete\u3001Range \u7b49\u64cd\u4f5c\u3002 {% endnoteblock %} \u5148\u770b\u5bf9\u5185\u7f6e map \u5e76\u53d1\u5199\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002 var m = make ( map [ string ] int ) var wg sync . WaitGroup func get ( key string ) int { return m [ key ] } func set ( key string , value int ) { m [ key ] = value } func call ( n int ) { defer wg . Done () key := strconv . Itoa ( n ) set ( key , n ) fmt . Printf ( \"k=:%v,v:=%v\\n\" , key , get ( key )) } func main () { for i := 0 ; i < 20 ; i ++ { wg . Add ( 1 ) go call ( i ) } wg . Wait () } // ------------------------------- // Output: fatal error : k =: 0 , v := 0 concurrent map writes k =: 19 , v := 19 fatal error : concurrent map writes ... \u91c7\u7528 \u5e76\u53d1\u5b89\u5168\u7248\uff1a var wg sync . WaitGroup var sm = sync . Map {} // \u58f0\u660e sync.Map \u53d8\u91cf func call ( n int ) { defer wg . Done () key := strconv . Itoa ( n ) sm . Store ( key , n ) // \u5199 value , _ := sm . Load ( key ) // \u8bfb fmt . Printf ( \"k=:%v,v:=%v\\n\" , key , value ) } func main () { for i := 0 ; i < 20 ; i ++ { wg . Add ( 1 ) go call ( i ) } wg . Wait () } // ------------------------------- // Output: k =: 19 , v := 19 k =: 10 , v := 10 k =: 11 , v := 11 k =: 2 , v := 2 k =: 15 , v := 15 k =: 3 , v := 3 k =: 12 , v := 12 k =: 0 , v := 0 k =: 13 , v := 13 k =: 18 , v := 18 k =: 14 , v := 14 k =: 6 , v := 6 k =: 4 , v := 4 k =: 5 , v := 5 k =: 8 , v := 8 k =: 7 , v := 7 k =: 9 , v := 9 k =: 1 , v := 1 k =: 17 , v := 17 k =: 16 , v := 16 \u539f\u5b50\u64cd\u4f5c \u00b6 \u4ee3\u7801\u4e2d\u7684\u52a0\u9501\u64cd\u4f5c\u56e0\u4e3a\u6d89\u53ca\u5185\u6838\u6001\u7684\u4e0a\u4e0b\u6587\u5207\u6362\u4f1a\u6bd4\u8f83\u8017\u65f6\u3001\u4ee3\u4ef7\u6bd4\u8f83\u9ad8\u3002 \u9488\u5bf9\u57fa\u672c\u6570\u636e\u7c7b\u578b\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528\u539f\u5b50\u64cd\u4f5c\u6765\u4fdd\u8bc1\u5e76\u53d1\u5b89\u5168\uff0c\u56e0\u4e3a\u539f\u5b50\u64cd\u4f5c\u662f Go \u8bed\u8a00\u63d0\u4f9b\u7684\u65b9\u6cd5\u5b83\u5728\u7528\u6237\u6001\u5c31\u53ef\u4ee5\u5b8c\u6210\uff0c \u56e0\u6b64\u6027\u80fd\u6bd4\u52a0\u9501\u64cd\u4f5c\u66f4\u597d\u3002Go\u8bed\u8a00\u4e2d\u539f\u5b50\u64cd\u4f5c\u7531\u5185\u7f6e\u7684\u6807\u51c6\u5e93 sync/atomic \u63d0\u4f9b\u3002 atomic \u5305 \u00b6 \u8bfb\u53d6\u64cd\u4f5c func LoadInt32(addr *int32) (val int32) func LoadInt64(addr *int64) (val int64) func LoadPointer(addr *unsafe.Pointer) (val unsafe.Pointer) func LoadUint32(addr *uint32) (val uint32) func LoadUint64(addr *uint64) (val uint64) func LoadUintptr(addr *uintptr) (val uintptr) \u5199\u5165\u64cd\u4f5c func StoreInt32(addr *int32, val int32) func StoreInt64(addr *int64, val int64) func StorePointer(addr *unsafe.Pointer, val unsafe.Pointer) func StoreUint32(addr *uint32, val uint32) func StoreUint64(addr *uint64, val uint64) func StoreUintptr(addr *uintptr, val uintptr) \u4fee\u6539\u64cd\u4f5c func AddInt32(addr *int32, delta int32) (new int32) func AddInt64(addr *int64, delta int64) (new int64) func AddUint32(addr *uint32, delta uint32) (new uint32) func AddUint64(addr *uint64, delta uint64) (new uint64) func AddUintptr(addr *uintptr, delta uintptr) (new uintptr) \u4ea4\u6362\u64cd\u4f5c func SwapInt32(addr *int32, new int32) (old int32) func SwapInt64(addr *int64, new int64) (old int64) func SwapPointer(addr *unsafe.Pointer, new unsafe.Pointer) (old unsafe.Pointer) func SwapUint32(addr *uint32, new uint32) (old uint32) func SwapUint64(addr *uint64, new uint64) (old uint64) func SwapUintptr(addr *uintptr, new uintptr) (old uintptr) \u6bd4\u8f83\u5e76\u4ea4\u6362\u64cd\u4f5c func CompareAndSwapInt32(addr *int32, old, new int32) (swapped bool) func CompareAndSwapInt64(addr *int64, old, new int64) (swapped bool) func CompareAndSwapPointer(addr *unsafe.Pointer, old, new unsafe.Pointer) (swapped bool) func CompareAndSwapUint32(addr *uint32, old, new uint32) (swapped bool) func CompareAndSwapUint64(addr *uint64, old, new uint64) (swapped bool) func CompareAndSwapUintptr(addr *uintptr, old, new uintptr) (swapped bool) package main import ( \"fmt\" \"sync\" \"sync/atomic\" \"time\" ) var ( lock sync . Mutex x , y , z int64 ) // \u975e\u5e76\u53d1\u5b89\u5168\u7248 func add () { x ++ } // \u52a0\u9501\u7248 func mutexAdd () { lock . Lock () defer lock . Unlock () y ++ } // \u539f\u5b50\u7248 func atomicAdd () { atomic . AddInt64 ( & z , 1 ) } func test ( f func ()) time . Duration { var wg sync . WaitGroup start := time . Now () for i := 0 ; i < 10000 ; i ++ { wg . Add ( 1 ) go func () { defer wg . Done () f () }() } wg . Wait () return time . Now (). Sub ( start ) } func main () { fmt . Println ( \"\u975e\u5e76\u53d1\u5b89\u5168\u7248:\" , x , test ( add )) fmt . Println ( \"\u52a0\u9501\u7248 :\" , y , test ( mutexAdd )) fmt . Println ( \"\u539f\u5b50\u64cd\u4f5c\u7248 :\" , z , test ( atomicAdd )) } // ------------------------------- // Output: \u975e\u5e76\u53d1\u5b89\u5168\u7248 : 9604 4.9936 ms \u52a0\u9501\u7248 : 10000 3.9898 ms \u539f\u5b50\u64cd\u4f5c\u7248 : 10000 2.9909 ms \u4ece\u7ed3\u679c\u53ef\u4ee5\u770b\u51fa\uff0c\u975e\u5e76\u53d1\u5b89\u5168\u7248\u8fde\u7ed3\u679c\u90fd\u4e0d\u5bf9\uff0c\u52a0\u9501\u7248\u5b89\u5168\uff0c\u539f\u5b50\u7248\u5b89\u5168\u4e14\u6548\u7387\u66f4\u9ad8\u3002 atomic \u5305\u63d0\u4f9b\u4e86\u5e95\u5c42\u7684\u539f\u5b50\u7ea7\u5185\u5b58\u64cd\u4f5c\uff0c\u5bf9\u4e8e\u540c\u6b65\u7b97\u6cd5\u7684\u5b9e\u73b0\u5f88\u6709\u7528\u3002\u8fd9\u4e9b\u51fd\u6570\u5fc5\u987b\u8c28\u614e\u5730\u4fdd\u8bc1\u6b63\u786e\u4f7f\u7528\u3002\u9664\u4e86\u67d0\u4e9b\u7279\u6b8a\u7684\u5e95\u5c42\u5e94\u7528\uff0c\u4f7f\u7528\u901a\u9053\u6216\u8005sync\u5305\u7684\u51fd\u6570/\u7c7b\u578b\u5b9e\u73b0\u540c\u6b65\u66f4\u597d\u3002","title":"18.\u5e76\u53d1\u5b89\u5168"},{"location":"Go/Adavanced/Golang-18-%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8/#1-","text":"","title":"1-\u5e76\u53d1\u5b89\u5168"},{"location":"Go/Adavanced/Golang-18-%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8/#_1","text":"\u7ade\u6001 \u662f\u6307\u591a\u4e2a goroutine \u6309\u67d0\u4e9b\u4ea4\u9519\u987a\u5e8f\u6267\u884c\u65f6\uff0c\u4e89\u62a2\u4f7f\u7528\u540c\u4e00\u4efd\u4e34\u754c\u8d44\u6e90\uff0c\u5bfc\u81f4\u7a0b\u5e8f\u65e0\u6cd5\u7ed9\u51fa\u6b63\u786e\u7684\u7ed3\u679c\u3002 **\u4e32\u884c\u7a0b\u5e8f**\u4e2d\uff08\u4e00\u4e2a\u7a0b\u5e8f\u53ea\u6709\u4e00\u4e2a goroutine \uff09\uff0c\u7a0b\u5e8f\u4e2d\u5404\u4e2a\u6b65\u9aa4\u7684\u6267\u884c\u987a\u5e8f\u7531\u7a0b\u5e8f\u903b\u8f91\u51b3\u5b9a\uff0c\u6240\u4ee5\u5355\u4e2a goroutine \u4e0d\u4f1a\u5f15\u53d1\u7ade\u6001\u95ee\u9898\u3002 **\u5e76\u53d1\u7a0b\u5e8f**\u4e2d\uff08\u4e00\u4e2a\u7a0b\u5e8f\u6709\u591a\u4e2a goroutine \uff09\uff0c\u6bcf\u4e2a goroutine \u7684\u6267\u884c\u987a\u5e8f\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u56e0\u6b64\u53ef\u80fd\u4f1a\u5e26\u6765\u7ade\u6001\u95ee\u9898\u3002 \u4f8b\u5982\uff1a package main import \"fmt\" var x int64 func add () { for i := 0 ; i < 5 _000_000 ; i ++ { x = x + 1 } } func main () { add () add () fmt . Println ( x ) // 10_000_000 } \u8fd9\u662f\u4e00\u4e2a\u4e32\u884c\u7a0b\u5e8f\uff0c\u6240\u4ee5\u6700\u7ec8\u7684\u7ed3\u679c\u662f\u6b63\u786e\u7684\u3002 \u4e0b\u9762\u5f00\u542f\u65b0\u7684 goroutine \u6267\u884c add() package main import ( \"fmt\" \"sync\" ) var ( x int64 wg sync . WaitGroup ) func add () { defer wg . Done () for i := 0 ; i < 5 _000_000 ; i ++ { x = x + 1 } } func main () { wg . Add ( 2 ) go add () go add () fmt . Println ( x ) // 5_872_265 wg . Wait () } \u4ece\u6253\u5370\u7ed3\u679c\u53ef\u4ee5\u770b\u51fa\u7ed3\u679c\u5e76\u4e0d\u6b63\u786e\uff0c\u8fd9\u662f\u56e0\u4e3a 3 \u4e2a goroutine \u4e89\u62a2\u7740\u4f7f\u7528 x \u8fd9\u4e2a\u4e34\u754c\u8d44\u6e90\uff0c\u6709\u53ef\u80fd\u6700\u7ec8\u7684 x \u7684\u7ed3\u679c\u662f\u6b63\u786e\u7684\uff0c\u4f46\u662f main() \u63d0\u524d\u62a2\u5230\u8d44\u6e90\u5c31\u6253\u5370\u51fa\u6765\u4e86\uff0c\u4e5f\u6709\u53ef\u80fd\u4e24\u4e2a \u5b50goroutine \u4e89\u62a2\u65f6\u5bfc\u81f4 x \u88ab\u5199\u4e71\u4e86\uff08\u53d1\u751f\u4e86\u7ade\u6001\uff09\u3002","title":"\u7ade\u6001"},{"location":"Go/Adavanced/Golang-18-%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8/#_2","text":"\u7b2c\u4e00\u79cd\uff1a\u4e0d\u8981\u4fee\u6539\u53d8\u91cf\u3002\u8fd9\u79cd\u53ef\u4ee5\uff0c\u4f46\u4e0d\u73b0\u5b9e\uff0c\u56e0\u4e3a\u5b9e\u9645\u4e1a\u52a1\u4e2d\u5fc5\u7136\u6d89\u53ca\u540c\u65f6\u8bfb\u5199\u540c\u4e00\u4e2a\u53d8\u91cf\u7684\u573a\u666f\u3002\u53ea\u80fd\u8bf4\u5c3d\u91cf\u907f\u514d\u3002 \u7b2c\u4e8c\u79cd\uff1a\u4e0a\u9501 \u4e0a\u9501\u53ef\u4ee5\u5f88\u597d\u7684\u89e3\u51b3\u7ade\u6001\u95ee\u9898\uff0c\u4f46\u662f\u4f1a\u6709\u4e9b\u8bb8\u6027\u80fd\u4e0a\u7684\u635f\u5931\u3002 \u53d1\u751f\u7ade\u6001\u7684\u4e3b\u8981\u539f\u56e0\u662f\u56e0\u4e3a\uff1a\u591a\u4e2a goroutine \u4e89\u62a2\u8bfb\u5199\u540c\u4e00\u4e2a\u4e34\u754c\u8d44\u6e90\u3002\u8fd9\u4e2a\u4e34\u754c\u8d44\u6e90\u53ef\u4ee5\u662f\u6253\u5370\u673a\u3001\u5168\u5c40\u53d8\u91cf\u7b49\u7b49\u3002 \u4e3e\u4e2a\u6817\u5b50\uff0c \u4e00\u4e2a\u4eba\u5c31\u662f\u4e00\u4e2a goroutine \uff0c\u516c\u5171\u536b\u751f\u95f4\u5c31\u662f\u4e00\u79cd\u4e34\u754c\u8d44\u6e90\uff0c\u540c\u4e00\u65f6\u523b\u53ea\u80fd\u6709\u4e00\u4e2a\u4eba\u4f7f\u7528\uff08\u4e00\u4e2a\u4e34\u754c\u8d44\u6e90\uff0c\u540c\u4e00\u65f6\u523b\u53ea\u80fd\u6709\u4e00\u4e2a goroutine \u8bfb\u5199 \uff09\u3002\u591a\u4e2a\u4eba\u540c\u65f6\u4e89\u62a2\u4e00\u4e2a\u516c\u5171\u536b\u751f\u95f4\u80af\u5b9a\u51fa\u95ee\u9898\u3002 \u6240\u4ee5\u536b\u751f\u95f4\u8981\u52a0\u4e2a\u9501\uff0c\u8fdb\u53bb\u4f7f\u7528\u7684\u4eba\u4e0a\u9501\uff0c\u4f7f\u7528\u5b8c\u4e86\u5f00\u9501\u3002 \u4f7f\u7528\u4e34\u754c\u8d44\u6e90\u7684 goroutine \u7ed9\u4e34\u754c\u8d44\u6e90\u4e0a\u9501\uff0c\u4f7f\u7528\u5b8c\u4e86\u628a\u9501\u91ca\u653e\u3002 Golang \u4e2d\u7684 sync \u5305\u63d0\u4f9b\u4e86 Mutex \u548c RWMutex \u4e24\u79cd\u9501\u3002","title":"\u907f\u514d\u7ade\u6001"},{"location":"Go/Adavanced/Golang-18-%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8/#syncmutex","text":"type Mutex struct { state int32 sema uint32 } func ( m * Mutex ) Lock () {} func ( m * Mutex ) Unlock () {} Mutex \u975e\u5e38\u7b80\u5355\uff0c\u53ea\u6709 Lock() \u548c Unlock() \u4e24\u4e2a\u65b9\u6cd5\u3002 \u52a0\u9501 - Lock() \u7528\u4e8e\u52a0\u9501 - \u52a0\u9501\u89c4\u5219\uff1a - \u5982\u679c\u4e92\u65a5\u9501\u5df2\u7ecf\u88ab\u4e0a\u9501\u4e86\uff0c\u5219\u52a0\u9501\u64cd\u4f5c\u963b\u585e\uff0c\u76f4\u5230\u4e92\u65a5\u9501\u88ab\u89e3\u9501\u4ee5\u540e\u624d\u80fd\u4e0a\u9501\u3002 - \u5982\u679c\u4e92\u65a5\u9501\u6ca1\u6709\u88ab\u4e0a\u9501\uff0c\u90a3\u4e48\u4e0a\u9501\u6210\u529f\u3002 \u89e3\u9501 - Unlock() \u7528\u4e8e\u89e3\u9501 - \u89e3\u9501\u89c4\u5219\uff1a\u91ca\u653e\u4e92\u65a5\u9501","title":"sync.Mutex \u4e92\u65a5\u9501"},{"location":"Go/Adavanced/Golang-18-%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8/#_3","text":"\u4e0b\u9762\u6211\u4eec\u5bf9\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u4e89\u62a2\u4e34\u754c\u8d44\u6e90\u7684\u90e8\u5206\u4e0a\u9501\u3002 package main import ( \"fmt\" \"sync\" ) var ( x int64 wg sync . WaitGroup lock sync . Mutex ) func add () { defer wg . Done () for i := 0 ; i < 5 _000_000 ; i ++ { lock . Lock () // \u52a0\u9501 x = x + 1 lock . Unlock () // \u89e3\u9501 } } func main () { wg . Add ( 2 ) go add () go add () fmt . Println ( x ) // 10_000_000 wg . Wait () } \u5982\u6b64\u4e00\u6765\uff0c\u4e0d\u7ba1\u54ea\u4e2a \u5b50goroutine \u5f97\u5230\u8fd0\u884c\u7684\u673a\u4f1a\uff0c\u522b\u7684 goroutine \u90fd\u4e0d\u80fd\u8bbf\u95ee\u4e34\u754c\u8d44\u6e90\uff0c\u5f97\u7b49\u5230\u4e0a\u4e86\u9501\u7684 goroutine \u91ca\u653e\uff0c\u522b\u7684 goroutine \u624d\u80fd\u8bbf\u95ee\u3002","title":"\u4e0a\u9501"},{"location":"Go/Adavanced/Golang-18-%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8/#_4","text":"\u5982\u679c\u4e00\u4e2a goroutine \u4e0a\u4e86\u9501\u4e4b\u540e\u5fd8\u8bb0\u91ca\u653e\u9501\uff0c\u522b\u7684 goroutine \u662f\u6c38\u8fdc\u62ff\u4e0d\u5230\u9501\u7684\uff0c\u8fd8\u4f1a\u5bfc\u81f4\u6b7b\u9501\u3002 \u5728\u590d\u6742\u7684\u4ee3\u7801\u4e2d\uff0c\u5f88\u96be\u786e\u5b9a\u6240\u6709\u5206\u652f\u4e2d\u7684 Lock() \u548c Unlock() \u6210\u5bf9\u51fa\u73b0\uff0c\u6240\u4ee5\uff0c\u6700\u597d\u517b\u6210**\u9501\u6210\u5bf9\u5199\u3001\u5ef6\u8fdf\u89e3\u9501**\u7684\u4e60\u60ef\u3002 var x int var lock sync . Mutex func add () { lock . Lock () // \u4e0a\u9501 x = x + 1 defer lock . Unlock () // \u5ef6\u8fdf\u89e3\u9501\uff0c\u5728\u51fd\u6570\u8fd0\u884c\u7ed3\u675f\u4e4b\u540e\u4f1a\u81ea\u52a8\u89e3\u9501 return x }","title":"\u5ef6\u8fdf\u89e3\u9501"},{"location":"Go/Adavanced/Golang-18-%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8/#syncrwmutex","text":"type RWMutex struct { w Mutex // held if there are pending writers writerSem uint32 // semaphore for writers to wait for completing readers readerSem uint32 // semaphore for readers to wait for completing writers readerCount int32 // number of pending readers readerWait int32 // number of departing readers } // \u5199\u9501 func ( rw * RWMutex ) Lock () {} func ( rw * RWMutex ) Unlock () {} // \u8bfb\u9501 func ( rw * RWMutex ) RLock () {} func ( rw * RWMutex ) RUnlock () {} func ( rw * RWMutex ) RLocker () Locker {} \u8bfb\u5199\u4e92\u65a5\u9501\u9002\u7528\u4e8e**\u8bfb\u591a\u5199\u5c11**\u7684\u573a\u666f\u3002\u56e0\u4e3a\u5728\u4f7f\u7528 Mutex \u4e92\u65a5\u9501\u7684\u65f6\u5019\uff0c\u4e0d\u7ba1\u662f\u56e0\u4e3a\u8981\u53bb\u8bfb\u4e0a\u7684\u9501\u8fd8\u662f\u8981\u53bb\u5199\u4e0a\u7684\u9501\uff0c\u53ea\u8981\u4e00\u4e0a\u4e86\u9501\uff0c\u522b\u7684 goroutine \u5c31\u4e0d\u80fd\u4e0a\u9501\uff0c\u4e5f\u4e0d\u80fd\u8bfb\u5199\u3002 \u4e8e\u662f\u5728 \u8bfb\u591a\u5199\u5c11 \u7684\u573a\u666f\u4e0b\uff0c\u5bfc\u81f4\u5c11\u91cf\u5199\u64cd\u4f5c\u65f6\uff0c\u4e5f\u4e0d\u80fd\u8bfb\u3002\u6240\u4ee5\u8fd9\u79cd\u573a\u666f\u8981\u4f7f\u7528 \u8bfb\u5199\u4e92\u65a5\u9501 \u3002 \u5199\u9501 - Lock() \u51fd\u6570\u7528\u4e8e\u4e0a\u5199\u9501 - Unlock() \u51fd\u6570\u7528\u4e8e\u89e3\u5199\u9501 - \u52a0\u9501\u89c4\u5219\uff1a - \u5982\u679c\u5f53\u524d\u7684\u8bfb\u5199\u9501\u88ab\u4e0a\u9501\u4e86\uff0c\u5219 \u52a0\u5199\u9501 \u64cd\u4f5c\u963b\u585e\u76f4\u5230\u8bfb\u5199\u9501\u88ab\u91ca\u653e - \u5982\u679c\u5f53\u524d\u7684\u8bfb\u5199\u9501\u6ca1\u6709\u88ab\u9501\uff0c\u5219 \u52a0\u5199\u9501 \u6210\u529f - \u91ca\u653e\u89c4\u5219\uff1a\u76f4\u63a5\u91ca\u653e \u8bfb\u9501 - RLock() \u51fd\u6570\u7528\u4e8e\u4e0a\u8bfb\u9501 - RUnlock() \u51fd\u6570\u7528\u4e8e\u89e3\u8bfb\u9501 - \u52a0\u9501\u89c4\u5219\uff1a - \u5982\u679c\u5f53\u524d\u7684\u8bfb\u5199\u9501 \u6ca1\u6709\u88ab\u9501\uff0c\u5219 \u52a0\u8bfb\u9501 \u64cd\u4f5c\u6210\u529f - \u5982\u679c\u5f53\u524d\u7684\u8bfb\u5199\u9501 \u88ab\u4e0a\u4e86\u8bfb\u9501\uff0c\u5219 \u52a0\u8bfb\u9501 \u64cd\u4f5c\u6210\u529f - \u5982\u679c\u5f53\u524d\u7684\u8bfb\u5199\u9501 \u88ab\u4e0a\u4e86\u5199\u9501\uff0c\u5219 \u52a0\u8bfb\u9501 \u64cd\u4f5c\u963b\u585e\uff0c\u76f4\u5230\u8bfb\u5199\u9501\u88ab\u91ca\u653e eg\uff1a package main import ( \"fmt\" \"sync\" \"time\" ) var ( x int64 wg sync . WaitGroup rwlock sync . RWMutex // \u8bfb\u5199\u9501 ) func read () { defer wg . Done () rwlock . RLock () // \u52a0\u8bfb\u9501 time . Sleep ( time . Millisecond ) fmt . Println ( x ) defer rwlock . RUnlock () // \u89e3\u8bfb\u9501 } func write () { defer wg . Done () rwlock . Lock () // \u52a0\u5199\u9501 time . Sleep ( time . Millisecond * 5 ) x = x + 1 defer rwlock . Unlock () // \u89e3\u5199\u9501 } func main () { start := time . Now () for i := 0 ; i < 10 ; i ++ { wg . Add ( 1 ) go write () } for i := 0 ; i < 1000 ; i ++ { wg . Add ( 1 ) go read () } wg . Wait () fmt . Println ( time . Now (). Sub ( start )) } // -------------------------------------- // Output: ... 1 1 1 1 215.9568 ms","title":"sync.RWMutex \u8bfb\u5199\u4e92\u65a5\u9501"},{"location":"Go/Adavanced/Golang-18-%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8/#mutex-rwmutex","text":"\u4ec5\u5728\u7edd\u5927\u90e8\u5206goroutine\u90fd\u5728**\u83b7\u53d6\u8bfb\u9501\u5e76\u4e14\u9501\u7ade\u4e89\u6bd4\u8f83\u6fc0\u70c8\u65f6**\uff08\u5373\uff0cgoroutine\u4e00\u822c\u90fd\u9700\u8981\u7b49\u5f85\u540e\u624d\u80fd\u83b7\u5230\u9501\uff09\uff0cRWMutex\u624d\u6709\u4f18\u52bf \u5426\u5219\uff0c \u4e00\u822c\u4f7f\u7528Mutex\u5373\u53ef","title":"Mutex \u548c RWMutex \u7684\u9009\u62e9"},{"location":"Go/Adavanced/Golang-18-%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8/#synconce","text":"type Once struct { done uint32 m Mutex } func ( o * Once ) Do ( f func ()) { if atomic . LoadUint32 ( & o . done ) == 0 { o . doSlow ( f ) } } func ( o * Once ) doSlow ( f func ()) { o . m . Lock () defer o . m . Unlock () if o . done == 0 { defer atomic . StoreUint32 ( & o . done , 1 ) f () } } - Once \u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u91cc\u9762\u6709\u4e00\u628a Mutex \u9501 m \uff0c\u8fd8\u6709\u4e00\u4e2a done \u6807\u5fd7\u4f4d\u7528\u6765\u6807\u8bb0 f \u662f\u5426\u6267\u884c\u8fc7\u4e86\u3002\uff080\u672a\u6267\u884c\uff0c1\u5df2\u6267\u884c\uff09 - Once \u53ea\u6709\u4e00\u4e2a Do() \u65b9\u6cd5\uff0c\u5176\u4e2d\u68c0\u67e5\u4e86\u4e00\u4e0b\u6807\u5fd7\u4f4d\uff0c\u5982\u679c\u4e3a 0 \u8868\u793a f \u672a\u6267\u884c\u8fc7\uff0c\u8c03\u7528 doSlow() \uff1b\u975e 0 \u8868\u793a\u6267\u884c\u8fc7\u4e86\uff0c\u76f4\u63a5\u8fd4\u56de doSlow() \u4e2d\uff0c\u5148\u662f\u4e0a\u9501\uff0c\u7136\u540e\u68c0\u67e5 done \u6807\u5fd7\u4f4d\uff0c\u770b\u770b f \u662f\u5426\u6267\u884c\u8fc7\uff0c\u5982\u679c\u6ca1\u6709\u6267\u884c\uff0c\u5c31\u6267\u884c\uff0c\u7136\u540e\u6807\u5fd7\u4f4d\u7f6e\u4e3a 1\u3002 \u7528 sync.Once \u5199\u4e00\u4e2a\u5355\u4f8b\u6a21\u5f0f\uff1a package main import ( \"fmt\" \"sync\" ) type person struct { name string age int } var ( p * person once sync . Once ) // \u6784\u9020\u65b9\u6cd5\u4f7f\u7528 Once \u7684 Do \u65b9\u6cd5\u5b9e\u73b0 func NewSinglePerson ( name string , age int ) * person { once . Do ( func () { p = & person { name , age } }) return p } func main () { p1 := NewSinglePerson ( \"Boii\" , 18 ) p2 := NewSinglePerson ( \"Eva\" , 20 ) fmt . Printf ( \"%p\\n\" , p1 ) // 0xc0000044a0 fmt . Printf ( \"%p\\n\" , p2 ) // 0xc0000044a0 fmt . Printf ( \"%v\\n\" , p1 ) // &{Boii 18} fmt . Printf ( \"%v\\n\" , p2 ) // &{Boii 18} }","title":"sync.Once"},{"location":"Go/Adavanced/Golang-18-%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8/#syncmap","text":"{% noteblock info %} type Map struct { mu Mutex read atomic . Value // readOnly dirty map [ interface {}] * entry misses int } // set func ( m * Map ) Store ( key , value interface {}) {} // get func ( m * Map ) Load ( key interface {}) ( value interface {}, ok bool ) {} // \u5220\u9664 func ( m * Map ) Delete ( key interface {}) {} // \u5148\u52a0\u8f7d\u770b\uff0c\u6709\u518d\u5220\u9664 func ( m * Map ) LoadAndDelete ( key interface {}) ( value interface {}, loaded bool ) {} // \u5148\u52a0\u8f7d\u770b\uff0c\u6ca1\u6709\u518d\u5b58\uff0c\u6709\u5c31\u4e0d\u5b58 func ( m * Map ) LoadOrStore ( key , value interface {}) ( actual interface {}, loaded bool ) {} // \u904d\u5386 func ( m * Map ) Range ( f func ( key , value interface {}) bool ) {} Golang \u4e2d\u5185\u7f6e\u7684 map \u4e0d\u662f\u5e76\u53d1\u5b89\u5168\u7684\uff0c\u5728\u5bf9 map \u5e76\u53d1\u5199\u7684\u65f6\u5019\u4f1a\u51fa\u73b0\u95ee\u9898\u3002 Golang \u7684 sync \u5305\u4e2d\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5f00\u7bb1\u5373\u7528\u7684\u5e76\u53d1\u5b89\u5168\u7248map\uff1a sync.Map \u3002 \u5f00\u7bb1\u5373\u7528\uff0c\u5373\u8868\u793a\u4e0d\u9700\u8981 make() \u51fd\u6570\u521d\u59cb\u5316\u5c31\u80fd\u76f4\u63a5\u4f7f\u7528\uff0c\u540c\u65f6\u5185\u7f6e\u4e86\u8bf8\u5982 Store\u3001Load\u3001Delete\u3001Range \u7b49\u64cd\u4f5c\u3002 {% endnoteblock %} \u5148\u770b\u5bf9\u5185\u7f6e map \u5e76\u53d1\u5199\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002 var m = make ( map [ string ] int ) var wg sync . WaitGroup func get ( key string ) int { return m [ key ] } func set ( key string , value int ) { m [ key ] = value } func call ( n int ) { defer wg . Done () key := strconv . Itoa ( n ) set ( key , n ) fmt . Printf ( \"k=:%v,v:=%v\\n\" , key , get ( key )) } func main () { for i := 0 ; i < 20 ; i ++ { wg . Add ( 1 ) go call ( i ) } wg . Wait () } // ------------------------------- // Output: fatal error : k =: 0 , v := 0 concurrent map writes k =: 19 , v := 19 fatal error : concurrent map writes ... \u91c7\u7528 \u5e76\u53d1\u5b89\u5168\u7248\uff1a var wg sync . WaitGroup var sm = sync . Map {} // \u58f0\u660e sync.Map \u53d8\u91cf func call ( n int ) { defer wg . Done () key := strconv . Itoa ( n ) sm . Store ( key , n ) // \u5199 value , _ := sm . Load ( key ) // \u8bfb fmt . Printf ( \"k=:%v,v:=%v\\n\" , key , value ) } func main () { for i := 0 ; i < 20 ; i ++ { wg . Add ( 1 ) go call ( i ) } wg . Wait () } // ------------------------------- // Output: k =: 19 , v := 19 k =: 10 , v := 10 k =: 11 , v := 11 k =: 2 , v := 2 k =: 15 , v := 15 k =: 3 , v := 3 k =: 12 , v := 12 k =: 0 , v := 0 k =: 13 , v := 13 k =: 18 , v := 18 k =: 14 , v := 14 k =: 6 , v := 6 k =: 4 , v := 4 k =: 5 , v := 5 k =: 8 , v := 8 k =: 7 , v := 7 k =: 9 , v := 9 k =: 1 , v := 1 k =: 17 , v := 17 k =: 16 , v := 16","title":"sync.Map"},{"location":"Go/Adavanced/Golang-18-%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8/#_5","text":"\u4ee3\u7801\u4e2d\u7684\u52a0\u9501\u64cd\u4f5c\u56e0\u4e3a\u6d89\u53ca\u5185\u6838\u6001\u7684\u4e0a\u4e0b\u6587\u5207\u6362\u4f1a\u6bd4\u8f83\u8017\u65f6\u3001\u4ee3\u4ef7\u6bd4\u8f83\u9ad8\u3002 \u9488\u5bf9\u57fa\u672c\u6570\u636e\u7c7b\u578b\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528\u539f\u5b50\u64cd\u4f5c\u6765\u4fdd\u8bc1\u5e76\u53d1\u5b89\u5168\uff0c\u56e0\u4e3a\u539f\u5b50\u64cd\u4f5c\u662f Go \u8bed\u8a00\u63d0\u4f9b\u7684\u65b9\u6cd5\u5b83\u5728\u7528\u6237\u6001\u5c31\u53ef\u4ee5\u5b8c\u6210\uff0c \u56e0\u6b64\u6027\u80fd\u6bd4\u52a0\u9501\u64cd\u4f5c\u66f4\u597d\u3002Go\u8bed\u8a00\u4e2d\u539f\u5b50\u64cd\u4f5c\u7531\u5185\u7f6e\u7684\u6807\u51c6\u5e93 sync/atomic \u63d0\u4f9b\u3002","title":"\u539f\u5b50\u64cd\u4f5c"},{"location":"Go/Adavanced/Golang-18-%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8/#atomic","text":"\u8bfb\u53d6\u64cd\u4f5c func LoadInt32(addr *int32) (val int32) func LoadInt64(addr *int64) (val int64) func LoadPointer(addr *unsafe.Pointer) (val unsafe.Pointer) func LoadUint32(addr *uint32) (val uint32) func LoadUint64(addr *uint64) (val uint64) func LoadUintptr(addr *uintptr) (val uintptr) \u5199\u5165\u64cd\u4f5c func StoreInt32(addr *int32, val int32) func StoreInt64(addr *int64, val int64) func StorePointer(addr *unsafe.Pointer, val unsafe.Pointer) func StoreUint32(addr *uint32, val uint32) func StoreUint64(addr *uint64, val uint64) func StoreUintptr(addr *uintptr, val uintptr) \u4fee\u6539\u64cd\u4f5c func AddInt32(addr *int32, delta int32) (new int32) func AddInt64(addr *int64, delta int64) (new int64) func AddUint32(addr *uint32, delta uint32) (new uint32) func AddUint64(addr *uint64, delta uint64) (new uint64) func AddUintptr(addr *uintptr, delta uintptr) (new uintptr) \u4ea4\u6362\u64cd\u4f5c func SwapInt32(addr *int32, new int32) (old int32) func SwapInt64(addr *int64, new int64) (old int64) func SwapPointer(addr *unsafe.Pointer, new unsafe.Pointer) (old unsafe.Pointer) func SwapUint32(addr *uint32, new uint32) (old uint32) func SwapUint64(addr *uint64, new uint64) (old uint64) func SwapUintptr(addr *uintptr, new uintptr) (old uintptr) \u6bd4\u8f83\u5e76\u4ea4\u6362\u64cd\u4f5c func CompareAndSwapInt32(addr *int32, old, new int32) (swapped bool) func CompareAndSwapInt64(addr *int64, old, new int64) (swapped bool) func CompareAndSwapPointer(addr *unsafe.Pointer, old, new unsafe.Pointer) (swapped bool) func CompareAndSwapUint32(addr *uint32, old, new uint32) (swapped bool) func CompareAndSwapUint64(addr *uint64, old, new uint64) (swapped bool) func CompareAndSwapUintptr(addr *uintptr, old, new uintptr) (swapped bool) package main import ( \"fmt\" \"sync\" \"sync/atomic\" \"time\" ) var ( lock sync . Mutex x , y , z int64 ) // \u975e\u5e76\u53d1\u5b89\u5168\u7248 func add () { x ++ } // \u52a0\u9501\u7248 func mutexAdd () { lock . Lock () defer lock . Unlock () y ++ } // \u539f\u5b50\u7248 func atomicAdd () { atomic . AddInt64 ( & z , 1 ) } func test ( f func ()) time . Duration { var wg sync . WaitGroup start := time . Now () for i := 0 ; i < 10000 ; i ++ { wg . Add ( 1 ) go func () { defer wg . Done () f () }() } wg . Wait () return time . Now (). Sub ( start ) } func main () { fmt . Println ( \"\u975e\u5e76\u53d1\u5b89\u5168\u7248:\" , x , test ( add )) fmt . Println ( \"\u52a0\u9501\u7248 :\" , y , test ( mutexAdd )) fmt . Println ( \"\u539f\u5b50\u64cd\u4f5c\u7248 :\" , z , test ( atomicAdd )) } // ------------------------------- // Output: \u975e\u5e76\u53d1\u5b89\u5168\u7248 : 9604 4.9936 ms \u52a0\u9501\u7248 : 10000 3.9898 ms \u539f\u5b50\u64cd\u4f5c\u7248 : 10000 2.9909 ms \u4ece\u7ed3\u679c\u53ef\u4ee5\u770b\u51fa\uff0c\u975e\u5e76\u53d1\u5b89\u5168\u7248\u8fde\u7ed3\u679c\u90fd\u4e0d\u5bf9\uff0c\u52a0\u9501\u7248\u5b89\u5168\uff0c\u539f\u5b50\u7248\u5b89\u5168\u4e14\u6548\u7387\u66f4\u9ad8\u3002 atomic \u5305\u63d0\u4f9b\u4e86\u5e95\u5c42\u7684\u539f\u5b50\u7ea7\u5185\u5b58\u64cd\u4f5c\uff0c\u5bf9\u4e8e\u540c\u6b65\u7b97\u6cd5\u7684\u5b9e\u73b0\u5f88\u6709\u7528\u3002\u8fd9\u4e9b\u51fd\u6570\u5fc5\u987b\u8c28\u614e\u5730\u4fdd\u8bc1\u6b63\u786e\u4f7f\u7528\u3002\u9664\u4e86\u67d0\u4e9b\u7279\u6b8a\u7684\u5e95\u5c42\u5e94\u7528\uff0c\u4f7f\u7528\u901a\u9053\u6216\u8005sync\u5305\u7684\u51fd\u6570/\u7c7b\u578b\u5b9e\u73b0\u540c\u6b65\u66f4\u597d\u3002","title":"atomic \u5305"},{"location":"Go/Adavanced/Golang-19-reflect/","text":"\u53cd\u5c04\u7684\u64cd\u4f5c 2-reflect \u00b6 \u5b98\u65b9Doc\u4e2d**Rob Pike**\u5b9a\u4e49\uff1a Reflection in computing is the ability of a program to examine its own structure, particularly through types; it\u2019s a form of metaprogramming. It\u2019s also a great source of confusion. \u5728\u8ba1\u7b97\u673a\u9886\u57df\uff0c\u53cd\u5c04\u662f\u4e00\u79cd\u8ba9\u7a0b\u5e8f\u2014\u2014\u4e3b\u8981\u662f\u901a\u8fc7\u7c7b\u578b\u2014\u2014\u7406\u89e3\u5176\u81ea\u8eab\u7ed3\u6784\u7684\u4e00\u79cd\u80fd\u529b\u3002\u5b83\u662f\u5143\u7f16\u7a0b\u7684\u7ec4\u6210\u4e4b\u4e00\uff0c\u540c\u65f6\u5b83\u4e5f\u662f\u4e00\u5927\u5f15\u4eba\u56f0\u60d1\u7684\u96be\u9898\u3002 **\u7ef4\u57fa\u767e\u79d1**\u5b9a\u4e49\uff1a \u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\uff0c\u53cd\u5c04\u662f\u6307\u8ba1\u7b97\u673a\u7a0b\u5e8f\u5728\u8fd0\u884c\u65f6\uff08Run time\uff09\u53ef\u4ee5\u8bbf\u95ee\u3001\u68c0\u6d4b\u548c\u4fee\u6539\u5b83\u672c\u8eab\u72b6\u6001\u6216\u884c\u4e3a\u7684\u4e00\u79cd\u80fd\u529b\u3002\u7528\u6bd4\u55bb\u6765\u8bf4\uff0c\u53cd\u5c04\u5c31\u662f\u7a0b\u5e8f\u5728\u8fd0\u884c\u7684\u65f6\u5019\u80fd\u591f\u201c\u89c2\u5bdf\u201d\u5e76\u4e14\u4fee\u6539\u81ea\u5df1\u7684\u884c\u4e3a\u3002 **\u300aGo \u8bed\u8a00\u5723\u7ecf\u300b**\u4e2d\u8fd9\u6837\u5b9a\u4e49\uff1a Go \u8bed\u8a00\u63d0\u4f9b\u4e86\u4e00\u79cd\u673a\u5236\u5728\u8fd0\u884c\u65f6\u66f4\u65b0\u53d8\u91cf\u548c\u68c0\u67e5\u5b83\u4eec\u7684\u503c\u3001\u8c03\u7528\u5b83\u4eec\u7684\u65b9\u6cd5\uff0c\u4f46\u662f\u5728\u7f16\u8bd1\u65f6\u5e76\u4e0d\u77e5\u9053\u8fd9\u4e9b\u53d8\u91cf\u7684\u5177\u4f53\u7c7b\u578b\uff0c\u8fd9\u79f0\u4e3a\u53cd\u5c04\u673a\u5236\u3002 \u53cd\u5c04\u5e94\u7528\u573a\u666f \u7531\u4e8e\u6ca1\u7ea6\u5b9a\u597d\uff0c\u6216\u8005\u4f20\u5165\u7684\u7c7b\u578b\u5f88\u591a\u3001\u8fd9\u4e9b\u7c7b\u578b\u4e0d\u80fd\u7edf\u4e00\u8868\u793a\uff0c\u5bfc\u81f4\u4e0d\u786e\u5b9a\u51fd\u6570\u53c2\u6570\u7c7b\u578b\uff0c\u5c31\u9700\u8981\u7528\u53cd\u5c04\u6765\u786e\u5b9a\u7c7b\u578b\u3002 \u9700\u8981\u6839\u636e\u67d0\u4e9b\u6761\u4ef6\uff0c\u5982\u7528\u6237\u7684\u8f93\u5165\uff0c\u6765\u51b3\u5b9a\u8c03\u7528\u54ea\u4e2a\u51fd\u6570\uff0c\u5219\u9700\u8981\u5728\u8fd0\u884c\u671f\u52a8\u6001\u5730\u6267\u884c\u51fd\u6570\u3002 \u4e0d\u5efa\u8bae\u7528\u53cd\u5c04\u7684\u7406\u7531 \u53cd\u5c04\u4ee3\u7801\u96be\u4ee5\u9605\u8bfb\uff0c\u964d\u4f4e\u4ee3\u7801\u53ef\u8bfb\u6027\u3002 \u9759\u6001\u8bed\u8a00\u7684\u4f18\u52bf\u4e4b\u4e00\u5728\u4e8e\u7f16\u8bd1\u671f\u5c31\u80fd\u53d1\u73b0\u4e00\u4e9b\u7c7b\u578b\u9519\u8bef\uff0c\u800c\u53cd\u5c04\u8fd9\u79cd\u8fd0\u884c\u671f\u7684\u602a\u7269\u4f1a\u5bfc\u81f4\u8fd9\u4e00\u4f18\u52bf\u7684\u5931\u53bb\u3002\u5305\u542b\u53cd\u5c04\u7684\u4ee3\u7801\u5f88\u53ef\u80fd\u8fd0\u884c\u5f88\u4e45\uff0c\u624d\u4f1a\u51fa\u9519\uff0c\u800c\u4e14\u7ecf\u5e38\u662f\u76f4\u63a5 panic \uff0c\u9020\u6210\u4e25\u91cd\u540e\u679c\u3002 \u53cd\u5c04\u5bf9\u6027\u80fd\u5f71\u54cd\u8f83\u5927\uff0c\u76f8\u6bd4\u6b63\u5e38\u4ee3\u7801\u6162\u51fa\u4e00\u4e24\u4e2a\u6570\u91cf\u7ea7\u3002 \u76f8\u5173\u57fa\u7840 \u00b6 Golang \u7684\u7c7b\u578b \u00b6 Golang \u7684\u7c7b\u578b\uff1a \u53d8\u91cf\u5305\u62ec \uff08type\uff0cvalue\uff09 \u4e24\u90e8\u5206 type \u5305\u62ec static type \u548c concrete type \u3002 static type \u5c31\u662f\u5728\u7f16\u7801\u65f6\u770b\u5f97\u89c1\u7684\u7c7b\u578b\uff0c\u5982\uff1aint\u3001string concrete type \u662f runtime \u7cfb\u7edf\u770b\u5f97\u89c1\u7684\u7c7b\u578b\u3002 \u7c7b\u578b\u80fd\u5426\u65ad\u8a00\u6210\u529f\uff0c\u53d6\u51b3\u4e8e\u53d8\u91cf\u7684 concrete type \u3002\u56e0\u6b64\uff0c\u4e00\u4e2a reader \u53d8\u91cf\u5982\u679c\u5b83\u7684 concrete type \u5b9e\u73b0\u4e86 write \u65b9\u6cd5\uff0creader \u4e5f\u53ef\u4ee5\u88ab\u65ad\u8a00\u4e3a writer\u3002 \u9759\u6001\u7c7b\u578b\u548c\u52a8\u6001\u7c7b\u578b \u00b6 \u5728\u53cd\u5c04\u7684\u6982\u5ff5\u4e2d\uff0c\u7f16\u8bd1\u65f6\u5c31\u77e5\u9053\u7684\u53d8\u91cf\u7c7b\u578b\u53eb**\u9759\u6001\u7c7b\u578b**\uff0c\u8fd0\u884c\u65f6\u624d\u77e5\u9053\u7684\u53d8\u91cf\u7c7b\u578b\u53eb**\u52a8\u6001\u7c7b\u578b**\u3002 \u9759\u6001\u7c7b\u578b\uff1a\u53d8\u91cf\u58f0\u660e\u65f6\u8d4b\u4e88\u7684\u7c7b\u578b\u3002 type Myint int // int \u5c31\u662f\u9759\u6001\u7c7b\u578b\uff0ctype \u662f static type type A struct { Name string // string \u5c31\u662f\u9759\u6001\u7c7b\u578b\uff0ctype \u662f static type } var i * int // *int \u5c31\u662f\u9759\u6001\u7c7b\u578b\uff0ctype \u662f static type \u52a8\u6001\u7c7b\u578b\uff1a\u8fd0\u884c\u65f6\u7ed9\u8fd9\u4e2a\u53d8\u91cf\u8d4b\u503c\u65f6\uff0c\u8fd9\u4e2a\u503c\u7684\u7c7b\u578b\u3002\u5982\u679c\u503c\u4e3a nil \u5219\u6ca1\u6709\u52a8\u6001\u7c7b\u578b\u3002 \u4e00\u4e2a\u53d8\u91cf\u7684\u52a8\u6001\u7c7b\u578b\u5728\u8fd0\u884c\u65f6\u53ef\u80fd\u6539\u53d8\uff0c\u5219\u4e3b\u8981\u4f9d\u8d56\u4e8e\u5b83\u7684\u8d4b\u503c\uff0c\u524d\u63d0\u662f\u8fd9\u4e2a\u53d8\u91cf\u662f\u63a5\u53e3\u7c7b\u578b\u3002 var A interface {} // \u9759\u6001\u7c7b\u578b interface{} A = 10 // \u9759\u6001\u7c7b\u578b interface{} \u52a8\u6001\u7c7b\u578b int A = \"String\" // \u9759\u6001\u7c7b\u578b interface{} \u52a8\u6001\u7c7b\u578b string var M * int A = M // \u9759\u6001\u7c7b\u578b interface{} \u52a8\u6001\u7c7b\u578b *int {% noteblock info %} Golang \u7684\u53cd\u5c04\u5c31\u662f\u5efa\u7acb\u5728\u7c7b\u578b\u4e4b\u4e0a\u7684\u3002 Golang \u53d8\u91cf\u7684\u6307\u5b9a\u7c7b\u578b\u662f\u9759\u6001\u7684\uff0c\u5728\u521b\u5efa\u53d8\u91cf\u7684\u65f6\u5019\u7c7b\u578b\u5c31\u5df2\u7ecf\u786e\u5b9a\uff0c\u5982\u6307\u5b9a int\u3001string \uff0c\u6240\u4ee5\u79f0\u4e4b\u4e3a static type \u3002 Golang \u53d8\u91cf\u7684\u6307\u5b9a\u7c7b\u578b\u662f interface \u7c7b\u578b\u76f8\u5173\u7684\uff0c\u5219\u7c7b\u578b\u5728\u8fd0\u884c\u671f\u624d\u80fd\u786e\u5b9a\uff0c\u6240\u4ee5\u79f0\u4e4b\u4e3a concrete type \u3002 \u53ea\u6709 interface \u7c7b\u578b\u624d\u6709\u53cd\u5c04\u4e00\u8bf4\u3002 {% endnoteblock %} interface \u7c7b\u578b \u00b6 Golang \u662f\u901a\u8fc7\u63a5\u53e3\u5b9e\u73b0\u7684\uff0c\u4efb\u4f55 \u63a5\u53e3\u503c \u90fd\u662f\u7531\u4e00\u4e2a \u5b9e\u9645\u7c7b\u578b \u548c \u5b9e\u9645\u7c7b\u578b\u7684\u503c \u4e24\u4e2a\u90e8\u5206\u7ec4\u6210\u7684\u3002 \u6bcf\u4e2a interface \u53d8\u91cf\u90fd\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684 pair \uff0c pair \u4e2d\u8bb0\u5f55\u4e86 type \u7684\u7c7b\u578b\u548c\u503c\uff1a pair -> (concrete type, value) concrete type \u662f\u5b9e\u9645\u53d8\u91cf\u7684\u7c7b\u578b\uff0c concrete value \u662f\u5b9e\u9645\u53d8\u91cf\u7684\u503c\u3002 \u4e00\u4e2a interface \u53d8\u91cf\u5305\u542b\u4e86 2 \u4e2a\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u5411\u5b9e\u9645\u503c\u7684\u7c7b\u578b\uff0c\u4e00\u4e2a\u6307\u5411\u5b9e\u9645\u503c\u3002 eg\uff1a\u6253\u5f00\u6587\u4ef6\u4f1a\u8fd4\u56de\u4e00\u4e2a *os.File \u53d8\u91cf\u3002 f , err := os . OpenFile ( \"/home/abc.txt\" , os . O_RDWR , 0777 ) var r io . Reader = f \u63a5\u53e3\u53d8\u91cf r \u7684 pair \u4fe1\u606f\u8bb0\u5f55\u5982\u4e0b\uff1a (f, *os.File) \u3002 pair \u5728\u63a5\u53e3\u53d8\u91cf\u7ba1\u9053\u8fde\u7eed\u8d4b\u503c\u8fc7\u7a0b\u4e2d\u662f\u4e0d\u53d8\u7684\uff0c\u5c06\u63a5\u53e3\u53d8\u91cf r \u8d4b\u503c\u7ed9\u53e6\u4e00\u4e2a\u63a5\u53e3\u53d8\u91cf w\uff0c\u4ed6\u4eec\u7684 pair \u662f\u76f8\u540c\u7684\u3002 var w io . Writer = r .( io . Writer ) \u63a5\u53e3\u53d8\u91cf w \u7684 pair \u4fe1\u606f\u8bb0\u5f55\u5982\u4e0b\uff1a (f, *os.File) \u3002\u5373\u4f7f w \u662f\u7a7a\u63a5\u53e3\u7c7b\u578b\uff0c pair \u4e5f\u662f\u4e0d\u53d8\u7684\u3002 {% noteblock info %} interface\u53ca\u5176pair\u7684\u5b58\u5728\uff0c\u662fGolang\u4e2d\u5b9e\u73b0\u53cd\u5c04\u7684\u524d\u63d0\uff0c\u7406\u89e3\u4e86pair\uff0c\u5c31\u66f4\u5bb9\u6613\u7406\u89e3\u53cd\u5c04\u3002 \u53cd\u5c04\u5c31\u662f\u7528\u6765\u68c0\u6d4b\u5b58\u50a8\u5728\u63a5\u53e3\u53d8\u91cf\u5185\u90e8 (\u7c7b\u578bconcrete type, \u503cvalue) pair\u5bf9\u7684\u4e00\u79cd\u673a\u5236\u3002 {% endnoteblock %} \u53cd\u5c04\u7684\u4f7f\u7528 \u00b6 reflect\u5305\u63d0\u4f9b\u4e86\u51e0\u4e2a\u91cd\u8981\u7c7b\u578b\u548c\u51fd\u6570\uff1a **reflect.Type\u63a5\u53e3**\u8868\u793a\u63a5\u53e3\u503c\u7684\"\u5177\u4f53\u7c7b\u578b\"\uff1b reflect.TypeOf() \u51fd\u6570\u8fd4\u56de\u7c7b\u578b\u7684\u540d\u79f0\uff0c\u4e5f\u5c31\u662f pair \u4e2d\u7684 type **reflect.Value\u7ed3\u6784**\u8868\u793a\u63a5\u53e3\u503c\u7684\"\u5177\u4f53\u7c7b\u578b\u7684\u503c\"\uff1b reflect.ValueOf() \u51fd\u6570\u8fd4\u56de\u5177\u4f53\u7c7b\u578b\u7684\u503c\uff0c\u4e5f\u5c31\u662f pair \u4e2d\u7684 value \u5148\u6709\u4e00\u4e2a\u63a5\u53e3\u7c7b\u578b\u7684\u53d8\u91cf \u628a\u63a5\u53e3\u53d8\u91cf\u8f6c\u5316\u6210 reflect \u5bf9\u8c61\uff08 reflect.Type \u6216 reflect.Value \uff09 \u6839\u636e\u4e0d\u540c\u60c5\u51b5\u8c03\u7528\u4e0d\u540c\u7684\u51fd\u6570 \u6700\u7b80\u5355\u7684\u57fa\u672c\u4f7f\u7528\uff1a package main import ( \"fmt\" \"reflect\" ) func main () { var x float64 = 1.23 t := reflect . TypeOf ( x ) /* \u5b9e\u4f8b\u5230type */ v := reflect . ValueOf ( x ) /* \u5b9e\u4f8b\u5230value */ fmt . Println ( t ) // float64 fmt . Println ( v ) // 1.23 } reflect.Type \u00b6 type Type interface { // Kind\u8fd4\u56de\u8be5\u63a5\u53e3\u7684\u5177\u4f53\u5206\u7c7b Kind () Kind // Name\u8fd4\u56de\u8be5\u7c7b\u578b\u5728\u81ea\u8eab\u5305\u5185\u7684\u7c7b\u578b\u540d\uff0c\u5982\u679c\u662f\u672a\u547d\u540d\u7c7b\u578b\u4f1a\u8fd4\u56de\"\" Name () string // PkgPath\u8fd4\u56de\u7c7b\u578b\u7684\u5305\u8def\u5f84\uff0c\u5373\u660e\u786e\u6307\u5b9a\u5305\u7684import\u8def\u5f84\uff0c\u5982\"encoding/base64\" // \u5982\u679c\u7c7b\u578b\u4e3a\u5185\u5efa\u7c7b\u578b(string, error)\u6216\u672a\u547d\u540d\u7c7b\u578b(*T, struct{}, []int)\uff0c\u4f1a\u8fd4\u56de\"\" PkgPath () string // \u8fd4\u56de\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\u8868\u793a\u3002\u8be5\u5b57\u7b26\u4e32\u53ef\u80fd\u4f1a\u4f7f\u7528\u77ed\u5305\u540d\uff08\u5982\u7528base64\u4ee3\u66ff\"encoding/base64\"\uff09 // \u4e5f\u4e0d\u4fdd\u8bc1\u6bcf\u4e2a\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\u8868\u793a\u4e0d\u540c\u3002\u5982\u679c\u8981\u6bd4\u8f83\u4e24\u4e2a\u7c7b\u578b\u662f\u5426\u76f8\u7b49\uff0c\u8bf7\u76f4\u63a5\u7528Type\u7c7b\u578b\u6bd4\u8f83\u3002 String () string // \u8fd4\u56de\u8981\u4fdd\u5b58\u4e00\u4e2a\u8be5\u7c7b\u578b\u7684\u503c\u9700\u8981\u591a\u5c11\u5b57\u8282\uff1b\u7c7b\u4f3cunsafe.Sizeof Size () uintptr // \u8fd4\u56de\u5f53\u4ece\u5185\u5b58\u4e2d\u7533\u8bf7\u4e00\u4e2a\u8be5\u7c7b\u578b\u503c\u65f6\uff0c\u4f1a\u5bf9\u9f50\u7684\u5b57\u8282\u6570 Align () int // \u8fd4\u56de\u5f53\u8be5\u7c7b\u578b\u4f5c\u4e3a\u7ed3\u6784\u4f53\u7684\u5b57\u6bb5\u65f6\uff0c\u4f1a\u5bf9\u9f50\u7684\u5b57\u8282\u6570 FieldAlign () int /* \u5224\u65ad\u76f8\u5173 */ // \u5982\u679c\u8be5\u7c7b\u578b\u5b9e\u73b0\u4e86u\u4ee3\u8868\u7684\u63a5\u53e3\uff0c\u4f1a\u8fd4\u56de\u771f Implements ( u Type ) bool // \u5982\u679c\u8be5\u7c7b\u578b\u7684\u503c\u53ef\u4ee5\u76f4\u63a5\u8d4b\u503c\u7ed9u\u4ee3\u8868\u7684\u7c7b\u578b\uff0c\u8fd4\u56de\u771f AssignableTo ( u Type ) bool // \u5982\u8be5\u7c7b\u578b\u7684\u503c\u53ef\u4ee5\u8f6c\u6362\u4e3au\u4ee3\u8868\u7684\u7c7b\u578b\uff0c\u8fd4\u56de\u771f ConvertibleTo ( u Type ) bool /* \u7c7b\u578b\u76f8\u5173 */ // \u8fd4\u56de\u8be5\u7c7b\u578b\u7684\u5b57\u4f4d\u6570\u3002\u5982\u679c\u8be5\u7c7b\u578b\u7684Kind\u4e0d\u662fInt\u3001Uint\u3001Float\u6216Complex\uff0c\u4f1apanic Bits () int // \u8fd4\u56dearray\u7c7b\u578b\u7684\u957f\u5ea6\uff0c\u5982\u975e\u6570\u7ec4\u7c7b\u578b\u5c06panic Len () int // \u8fd4\u56de\u8be5\u7c7b\u578b\u7684\u5143\u7d20\u7c7b\u578b\uff0c\u5982\u679c\u8be5\u7c7b\u578b\u7684Kind\u4e0d\u662fArray\u3001Chan\u3001Map\u3001Ptr\u6216Slice\uff0c\u4f1apanic Elem () Type // \u8fd4\u56demap\u7c7b\u578b\u7684\u952e\u7684\u7c7b\u578b\u3002\u5982\u975e\u6620\u5c04\u7c7b\u578b\u5c06panic Key () Type // \u8fd4\u56de\u4e00\u4e2achannel\u7c7b\u578b\u7684\u65b9\u5411\uff0c\u5982\u975e\u901a\u9053\u7c7b\u578b\u5c06\u4f1apanic ChanDir () ChanDir /* \u7ed3\u6784\u4f53\u76f8\u5173 */ // \u8fd4\u56destruct\u7c7b\u578b\u7684\u5b57\u6bb5\u6570\uff08\u533f\u540d\u5b57\u6bb5\u7b97\u4f5c\u4e00\u4e2a\u5b57\u6bb5\uff09\uff0c\u5982\u975e\u7ed3\u6784\u4f53\u7c7b\u578b\u5c06panic NumField () int // \u8fd4\u56destruct\u7c7b\u578b\u7684\u7b2ci\u4e2a\u5b57\u6bb5\u7684\u7c7b\u578b\uff0c\u5982\u975e\u7ed3\u6784\u4f53\u6216\u8005i\u4e0d\u5728[0, NumField())\u5185\u5c06\u4f1apanic Field ( i int ) StructField // \u8fd4\u56de\u7d22\u5f15\u5e8f\u5217\u6307\u5b9a\u7684\u5d4c\u5957\u5b57\u6bb5\u7684\u7c7b\u578b\uff0c // \u7b49\u4ef7\u4e8e\u7528\u7d22\u5f15\u4e2d\u6bcf\u4e2a\u503c\u94fe\u5f0f\u8c03\u7528\u672c\u65b9\u6cd5\uff0c\u5982\u975e\u7ed3\u6784\u4f53\u5c06\u4f1apanic FieldByIndex ( index [] int ) StructField // \u8fd4\u56de\u8be5\u7c7b\u578b\u540d\u4e3aname\u7684\u5b57\u6bb5\uff08\u4f1a\u67e5\u627e\u533f\u540d\u5b57\u6bb5\u53ca\u5176\u5b50\u5b57\u6bb5\uff09\uff0c // \u5e03\u5c14\u503c\u8bf4\u660e\u662f\u5426\u627e\u5230\uff0c\u5982\u975e\u7ed3\u6784\u4f53\u5c06panic FieldByName ( name string ) ( StructField , bool ) // \u8fd4\u56de\u8be5\u7c7b\u578b\u7b2c\u4e00\u4e2a\u5b57\u6bb5\u540d\u6ee1\u8db3\u51fd\u6570match\u7684\u5b57\u6bb5\uff0c\u5e03\u5c14\u503c\u8bf4\u660e\u662f\u5426\u627e\u5230\uff0c\u5982\u975e\u7ed3\u6784\u4f53\u5c06\u4f1apanic FieldByNameFunc ( match func ( string ) bool ) ( StructField , bool ) {} // \u8fd4\u56de\u8be5\u7c7b\u578b\u7684\u65b9\u6cd5public\u65b9\u6cd5\u7684\u6570\u76ee // \u533f\u540d\u5b57\u6bb5\u7684\u65b9\u6cd5\u4f1a\u88ab\u8ba1\u7b97\uff1b\u4e3b\u4f53\u7c7b\u578b\u7684\u65b9\u6cd5\u4f1a\u5c4f\u853d\u533f\u540d\u5b57\u6bb5\u7684\u540c\u540d\u65b9\u6cd5\uff1b // \u533f\u540d\u5b57\u6bb5\u5bfc\u81f4\u7684\u6b67\u4e49\u65b9\u6cd5\u4f1a\u6ee4\u9664 NumMethod () int // \u8fd4\u56de\u8be5\u7c7b\u578b\u65b9\u6cd5\u96c6\u4e2d\u7684\u7b2ci\u4e2a\u65b9\u6cd5\uff0ci\u4e0d\u5728[0, NumMethod())\u8303\u56f4\u5185\u65f6\uff0c\u5c06\u5bfc\u81f4panic // \u5bf9\u975e\u63a5\u53e3\u7c7b\u578bT\u6216*T\uff0c\u8fd4\u56de\u503c\u7684Type\u5b57\u6bb5\u548cFunc\u5b57\u6bb5\u63cf\u8ff0\u65b9\u6cd5\u7684\u672a\u7ed1\u5b9a\u51fd\u6570\u72b6\u6001 // \u5bf9\u63a5\u53e3\u7c7b\u578b\uff0c\u8fd4\u56de\u503c\u7684Type\u5b57\u6bb5\u63cf\u8ff0\u65b9\u6cd5\u7684\u7b7e\u540d\uff0cFunc\u5b57\u6bb5\u4e3anil Method ( int ) Method // \u6839\u636e\u65b9\u6cd5\u540d\u8fd4\u56de\u8be5\u7c7b\u578b\u65b9\u6cd5\u96c6\u4e2d\u7684\u65b9\u6cd5\uff0c\u4f7f\u7528\u4e00\u4e2a\u5e03\u5c14\u503c\u8bf4\u660e\u662f\u5426\u53d1\u73b0\u8be5\u65b9\u6cd5 // \u5bf9\u975e\u63a5\u53e3\u7c7b\u578bT\u6216*T\uff0c\u8fd4\u56de\u503c\u7684Type\u5b57\u6bb5\u548cFunc\u5b57\u6bb5\u63cf\u8ff0\u65b9\u6cd5\u7684\u672a\u7ed1\u5b9a\u51fd\u6570\u72b6\u6001 // \u5bf9\u63a5\u53e3\u7c7b\u578b\uff0c\u8fd4\u56de\u503c\u7684Type\u5b57\u6bb5\u63cf\u8ff0\u65b9\u6cd5\u7684\u7b7e\u540d\uff0cFunc\u5b57\u6bb5\u4e3anil MethodByName ( string ) ( Method , bool ) /* \u51fd\u6570\u76f8\u5173 */ // \u5982\u679c\u51fd\u6570\u7c7b\u578b\u7684\u6700\u540e\u4e00\u4e2a\u8f93\u5165\u53c2\u6570\u662f\"...\"\u5f62\u5f0f\u7684\u53c2\u6570\uff0cIsVariadic\u8fd4\u56de\u771f // \u5982\u679c\u8fd9\u6837\uff0ct.In(t.NumIn() - 1)\u8fd4\u56de\u53c2\u6570\u7684\u9690\u5f0f\u7684\u5b9e\u9645\u7c7b\u578b\uff08\u58f0\u660e\u7c7b\u578b\u7684\u5207\u7247\uff09 // \u5982\u975e\u51fd\u6570\u7c7b\u578b\u5c06panic IsVariadic () bool // \u8fd4\u56defunc\u7c7b\u578b\u7684\u53c2\u6570\u4e2a\u6570\uff0c\u5982\u679c\u4e0d\u662f\u51fd\u6570\uff0c\u5c06\u4f1apanic NumIn () int // \u8fd4\u56defunc\u7c7b\u578b\u7684\u8fd4\u56de\u503c\u4e2a\u6570\uff0c\u5982\u679c\u4e0d\u662f\u51fd\u6570\uff0c\u5c06\u4f1apanic NumOut () int // \u8fd4\u56defunc\u7c7b\u578b\u7684\u7b2ci\u4e2a\u53c2\u6570\u7684\u7c7b\u578b\uff0c\u5982\u975e\u51fd\u6570\u6216\u8005i\u4e0d\u5728[0, NumIn())\u5185\u5c06\u4f1apanic In ( i int ) Type // \u8fd4\u56defunc\u7c7b\u578b\u7684\u7b2ci\u4e2a\u8fd4\u56de\u503c\u7684\u7c7b\u578b\uff0c\u5982\u975e\u51fd\u6570\u6216\u8005i\u4e0d\u5728[0, NumOut())\u5185\u5c06\u4f1apanic Out ( i int ) Type } Kind \u6709 slice\u3001map\u3001ptr\u3001struct\u3001interface\u3001string\u3001Array\u3001Funtcion\u3001int \u6216\u5176\u4ed6\u57fa\u672c\u7c7b\u578b\u7ec4\u6210\u3002 Kind \u548c Type \u4e4b\u95f4\u8981\u505a\u597d\u533a\u5206\u3002 \u5982\uff1a\u5728 main() \u4e2d\u5b9a\u4e49 type Person struct {} \uff0c\u90a3\u4e48 Kind \u5c31\u662f struct \uff0c Type \u5c31\u662f main.Person \u3002 type Person struct { name string age int } func main () { pers := person { \"Boii\" , 18 } t := reflect . TypeOf ( pers ) v := reflect . ValueOf ( pers ) fmt . Println ( v ) // {Boii 18} fmt . Println ( t ) // main.person fmt . Println ( t . Name ()) // person fmt . Println ( t . Kind ()) // struct } reflect.Value \u00b6 // \u7c7b\u578b\u76f8\u5173 func ( v Value ) Addr () Value func ( v Value ) Bool () bool func ( v Value ) Bytes () [] byte func ( v Value ) Complex () complex128 func ( v Value ) Int () int64 func ( v Value ) Slice ( i , j int ) Value func ( v Value ) Slice3 ( i , j , k int ) Value func ( v Value ) String () string func ( v Value ) Uint () uint64 func ( v Value ) Pointer () uintptr func ( v Value ) UnsafeAddr () uintptr func ( v Value ) Kind () Kind func ( v Value ) Type () Type func ( v Value ) InterfaceData () [ 2 ] uintptr // \u51fd\u6570\u76f8\u5173 func ( v Value ) Call ( in [] Value ) [] Value func ( v Value ) CallSlice ( in [] Value ) [] Value // \u5224\u65ad\u76f8\u5173 func ( v Value ) CanAddr () bool func ( v Value ) CanInterface () bool func ( v Value ) CanSet () bool func ( v Value ) IsNil () bool func ( v Value ) IsValid () bool func ( v Value ) IsZero () bool func ( v Value ) OverflowComplex ( x complex128 ) bool func ( v Value ) OverflowFloat ( x float64 ) bool func ( v Value ) OverflowInt ( x int64 ) bool func ( v Value ) OverflowUint ( x uint64 ) bool // \u8f6c\u6362\u76f8\u5173 func ( v Value ) Convert ( t Type ) Value func ( v Value ) Interface () ( i interface {}) func ( v Value ) Elem () Value // struct \u76f8\u5173 func ( v Value ) NumField () int func ( v Value ) NumMethod () int func ( v Value ) Field ( i int ) Value func ( v Value ) FieldByIndex ( index [] int ) Value func ( v Value ) FieldByName ( name string ) Value func ( v Value ) FieldByNameFunc ( match func ( string ) bool ) Value func ( v Value ) Method ( i int ) Value func ( v Value ) MethodByName ( name string ) Value // Array\u3001Slice \u76f8\u5173 func ( v Value ) Index ( i int ) Value // Map \u76f8\u5173 func ( v Value ) MapIndex ( key Value ) Value func ( v Value ) MapKeys () [] Value func ( v Value ) MapRange () * MapIter // Array\u3001Slice\u3001Map \u76f8\u5173 func ( v Value ) Cap () int func ( v Value ) Len () int // \u901a\u9053\u76f8\u5173 func ( v Value ) Recv () ( x Value , ok bool ) func ( v Value ) Send ( x Value ) func ( v Value ) TryRecv () ( x Value , ok bool ) func ( v Value ) TrySend ( x Value ) bool func ( v Value ) Close () // \u6539\u503c\u76f8\u5173 func ( v Value ) Set ( x Value ) func ( v Value ) SetBool ( x bool ) func ( v Value ) SetBytes ( x [] byte ) func ( v Value ) SetCap ( n int ) func ( v Value ) SetComplex ( x complex128 ) func ( v Value ) SetFloat ( x float64 ) func ( v Value ) SetInt ( x int64 ) func ( v Value ) SetLen ( n int ) func ( v Value ) SetMapIndex ( key , elem Value ) func ( v Value ) SetPointer ( x unsafe . Pointer ) func ( v Value ) SetString ( x string ) func ( v Value ) SetUint ( x uint64 ) reflect \u4e2d\u7684\u7ed3\u6784\u4f53\u4e3b\u8981\u5305\u62ec\uff1a Type\uff0cValue\uff0cChanDir\uff0cKind\uff0cMapIter\uff0cMethod\uff0cSelectCase\uff0cSelectDir\uff0cSliceHeader\uff0cStringHeader\uff0cStructField\uff0cStructTag\uff0cValueError \u7b49\u3002\u5176\u4e2d\uff0cType \u548c Value \u4e4b\u524d\u5df2\u7ecf\u4ecb\u7ecd\u8fc7\u4e86\u3002 ChanDir \uff1a\u7ba1\u9053\u7684\u65b9\u5411\uff0c\u6709\u4e09\u4e2a\u503c\uff1a RecvDir / SendDir / BothDir \uff0c\u5206\u522b\u4e3a \u63a5\u53d7\uff0c\u53d1\u9001\uff0c\u53cc\u5411 \uff1b Kind \uff1aType\u4e2d\u7684\u7c7b\u578b\u4fe1\u606f\uff0c\u5305\u62ec\uff1aInvalid, Bool, Int, Int8, Int16, Int32, Int64, Uint, Uint8, Uint16, Uint32, Uint64, Uintptr, Float32, Float64, Complex64, Complex128, Array, Chan, Func, Interface, Map, Ptr, Slice, String, Struct, UnsafePointer\uff0c MapIter \uff1aMap\u7684\u8fed\u4ee3\u5668\uff0c\u5305\u62ec\u4e09\u4e2a\u65b9\u6cd5\uff1a Key\u3001Value\u3001Next \uff1b Method \uff1a\u63cf\u8ff0\u65b9\u6cd5\u7684\u4fe1\u606f\uff0c\u5305\u62ec\uff1a \u65b9\u6cd5\u540d\uff0c\u5305\u8def\u5f84\uff0c\u7c7b\u578b\uff0c\u51fd\u6570\uff0c\u6240\u5904\u7684\u4e0b\u6807 \uff1b SelectCase \uff1a\u63cf\u8ff0select \u64cd\u4f5c\u7684\u4fe1\u606f\uff0c case\u7684\u65b9\u5411SelectDir\uff0c\u4f7f\u7528\u7684Channel\uff0c\u53d1\u9001\u7684\u503cSend \uff1b SelectDir \uff1a\u63cf\u8ff0SelectCase\u4e2d\u7684\u65b9\u5411\uff0c\u6709\u4e09\u4e2a\u503c\uff1a SelectSend / SelectRecv / SelectDefault SliceHeader \uff1a\u63cf\u8ff0\u5207\u7247Slice\u7684\u4fe1\u606f\uff0c\u5305\u62ec**\u6307\u9488\uff0c\u957f\u5ea6\uff0c\u5bb9\u91cf**\uff1b StringHeader \uff1a\u63cf\u8ff0\u5b57\u7b26\u4e32string\u7684\u4fe1\u606f\uff0c\u5305\u62ec**\u6307\u9488\uff0c\u957f\u5ea6**\uff1b StructField \uff1a\u63cf\u8ff0\u7ed3\u6784\u4f53\u4e2d\u7684\u57dffield\u4e2d\u7684\u4fe1\u606f\uff0c\u5305\u62ec\uff1a \u57df\u540d\uff0c\u5305\u8def\u5f84\uff0c\u7c7b\u578b\uff0c\u6807\u7b7eTag\uff0c\u5728\u7ed3\u6784\u4f53\u4e2d\u7684\u504f\u79fb\u91cfoffset\uff0cType.FieldByIndex\u4e2d\u7684\u4e0b\u6807index\uff0c\u662f\u5426\u662f\u533f\u540d \uff1b StructTag \uff1a\u63cf\u8ff0\u6807\u7b7e\u4fe1\u606f\uff0c\u6709\u4e24\u4e2a\u65b9\u6cd5\uff1a Get\u3001Lookup \uff1b ValueError \uff1a\u5728\u8c03\u7528\u4e00\u4e2aValue\u4e0d\u652f\u6301\u7684\u65b9\u6cd5\u65f6\u4f1a\u62a5\u9519\uff0c\u5e76\u8bb0\u5f55\u5230ValueError\u4e2d\u3002 \u53cd\u5c04API \u00b6 \u4e0a\u56fe\u5f88\u597d\u7684\u6982\u62ec\u4e86 \u6240\u6709\u7684API Type \u8868\u793a reflect \u7684 Type \u7c7b\u578b\uff1a reflect.Type Value \u8868\u793a reflect \u7684 Value \u7c7b\u578b\uff1a reflect.Value interface{} \u8868\u793a\u63a5\u53e3\u5b9e\u4f8b\u3001\u4efb\u610f\u7c7b\u578b Special Type \u8868\u793a\u5176\u4ed6\u7279\u6b8a\u7c7b\u578b Type -> Value \uff1a\u901a\u8fc7 reflect \u5305\u7684\u9759\u6001\u65b9\u6cd5 New()\u3001NewAt()\u3001Zero() Value -> Type \uff1a\u901a\u8fc7 reflect\u5bf9\u8c61 \u7684 Type() \u65b9\u6cd5 interface{} -> Type \uff1a\u901a\u8fc7 reflect \u5305\u7684\u9759\u6001\u65b9\u6cd5 TypeOf() interface{} -> Value \uff1a\u901a\u8fc7 reflect \u5305\u7684\u9759\u6001\u65b9\u6cd5 ValueOf() Value -> interface{} \uff1a\u901a\u8fc7 reflect\u5bf9\u8c61 \u7684 Interface() \u65b9\u6cd5\uff0c\u5f97\u5230\u662f\u4e00\u4e2a\u9759\u6001\u7c7b\u578b \u4ece \u63a5\u53e3\u5b9e\u4f8b \u83b7\u53d6 Type \u00b6 {% noteblock info %} interface{} -> Type \uff1a\u901a\u8fc7 reflect \u5305\u7684\u9759\u6001\u65b9\u6cd5 TypeOf() func TypeOf ( i interface {}) Type {% endnoteblock %} eg\uff1a var x int = 10 t := reflect . TypeOf ( x ) fmt . Printf ( \"t\u7684\u503c\uff1a%v \\n\" , t ) // int fmt . Printf ( \"t\u7684\u7c7b\u578b\uff1a%T \\n\" , t ) // *reflect.rtype \u4ece \u63a5\u53e3\u5b9e\u4f8b \u83b7\u53d6 Value \u00b6 {% noteblock info %} interface{} -> Value \uff1a\u901a\u8fc7 reflect \u5305\u7684\u9759\u6001\u65b9\u6cd5 ValueOf() func ValueOf ( i interface {}) Value {% endnoteblock %} eg\uff1a var x int = 10 v := reflect . ValueOf ( x ) fmt . Printf ( \"t\u7684\u503c\uff1a%v \\n\" , v ) // 10 fmt . Printf ( \"t\u7684\u7c7b\u578b\uff1a%T \\n\" , v ) // reflect.Value \u4ece Type \u83b7\u53d6 Value \u00b6 {% noteblock info %} Type -> Value \uff1a\u901a\u8fc7 reflect \u5305\u7684\u9759\u6001\u65b9\u6cd5 New()\u3001NewAt()\u3001Zero() Type \u91cc\u9762\u53ea\u6709\u7c7b\u578b\u4fe1\u606f\uff0c\u6240\u4ee5\u76f4\u63a5\u4ece\u4e00\u4e2a Type \u63a5\u53e3\u53d8\u91cf\u91cc\u9762\u662f\u65e0\u6cd5\u83b7\u5f97\u5b9e\u4f8b\u7684 Value \u7684\uff0c\u4f46\u53ef\u4ee5\u901a\u8fc7\u8be5 Type \u6784\u5efa\u4e00\u4e2a\u65b0\u5b9e\u4f8b\u7684 Value\u3002 //New \u8fd4\u56de\u7684\u662f\u4e00\u4e2a Value\uff0c\u8be5 Value \u7684 type \u4e3a PtrTo(typ)\uff0c\u5373 Value \u7684 Type \u662f\u6307\u5b9a typ \u7684\u6307\u9488\u7c7b\u578b func New ( typ Type ) Value //Zero \u8fd4\u56de\u7684\u662f\u4e00\u4e2a typ \u7c7b\u578b\u7684\u96f6\u4f73\uff0c\u6ce8\u610f\u8fd4\u56de\u7684 Value \u4e0d\u80fd\u5bfb\u5740\uff0c\u4f4d\u4e0d\u53ef\u6539\u53d8 func Zero ( typ Type ) Value \u5982\u679c\u77e5\u9053\u4e00\u4e2a\u7c7b\u578b\u503c\u7684\u5e95\u5c42\u5b58\u653e\u5730\u5740\uff0c\u5219\u8fd8\u6709\u4e00\u4e2a\u51fd\u6570\u662f\u53ef\u4ee5\u4f9d\u636e type \u548c\u8be5\u5730\u5740\u503c\u6062\u590d\u51fa Value \u7684\uff1a func NewAt ( typ Type , p unsafe . Pointer ) Value {% endnoteblock %} var x int = 10 t := reflect . TypeOf ( x ) newX := reflect . New ( t ) // Type -> Value zeroX := reflect . Zero ( t ) // Type -> Value fmt . Println ( newX ) // 0xc000012090 fmt . Printf ( \"%v \\n\" , newX ) // 0xc000012090 fmt . Printf ( \"%T \\n\" , newX ) // reflect.Value fmt . Println ( zeroX ) // 0 fmt . Printf ( \"%v \\n\" , zeroX ) // 0 fmt . Printf ( \"%T \\n\" , zeroX ) // reflect.Value \u4ece Value \u83b7\u53d6 Type \u00b6 {% noteblock info %} Value -> Type \uff1a\u901a\u8fc7 reflect\u5bf9\u8c61 \u7684 Type() \u65b9\u6cd5 func ( v Value ) Type () Type {% endnoteblock %} eg\uff1a var x int = 10 v := reflect . ValueOf ( x ) t := v . Type () // value -> type fmt . Printf ( \"t\u7684\u503c\uff1a%v \\n\" , t ) // int fmt . Printf ( \"t\u7684\u7c7b\u578b\uff1a%T \\n\" , t ) // *reflect.rtype \u4ece Value \u83b7\u53d6 \u63a5\u53e3\u5b9e\u4f8b \u00b6 {% noteblock info %} Value -> interface{} \uff1a\u901a\u8fc7 reflect\u5bf9\u8c61 \u7684 Interface() \u65b9\u6cd5\uff0c\u5f97\u5230\u662f\u4e00\u4e2a\u9759\u6001\u7c7b\u578b //\u8be5\u65b9\u6cd5\u6700\u901a\u7528\uff0c\u7528\u6765\u5c06 Value \u8f6c\u6362\u4e3a\u7a7a\u63a5\u53e3\uff0c\u8be5\u7a7a\u63a5\u53e3\u5185\u90e8\u5b58\u653e\u5177\u4f53\u7c7b\u578b\u5b9e\u4f8b //\u53ef\u4ee5\u4f7f\u7528\u63a5\u53e3\u7c7b\u578b\u67e5\u8be2\u53bb\u8fd8\u539f\u4e3a\u5177\u4f53\u7684\u7c7b\u578b func ( v Value ) Interface () \uff08 i interface {}) //Value \u81ea\u8eab\u4e5f\u63d0\u4f9b\u4e30\u5bcc\u7684\u65b9\u6cd5\uff0c\u76f4\u63a5\u5c06 Value \u8f6c\u6362\u4e3a\u7b80\u5355\u7c7b\u578b\u5b9e\u4f8b\uff0c\u5982\u679c\u7c7b\u578b\u4e0d\u5339\u914d\uff0c\u5219\u76f4\u63a5\u5f15\u8d77 panic func ( v Value ) Bool () bool func ( v Value ) Float () float64 func ( v Value ) Int () int64 func ( v Value ) Uint () uint64 {% endnoteblock %} eg1\uff1a var x int = 10 v := reflect . ValueOf ( x ) iInt := v . Interface () vType := iInt .( int ) vInt := v . Int () fmt . Println ( iInt ) // 10 fmt . Printf ( \"%T \\n\" , iInt ) // int fmt . Println ( vType ) // 10 fmt . Printf ( \"%T \\n\" , vType ) // int fmt . Println ( vInt ) // 10 fmt . Printf ( \"%T \\n\" , vInt ) // int64 eg2\uff1a package main import ( \"fmt\" \"reflect\" ) func main () { var x float64 = 1.23 t := reflect . TypeOf ( x ) // \u83b7\u5f97 reflect.Type \u5bf9\u8c61 v := reflect . ValueOf ( x ) // \u83b7\u5f97 reflect.Value \u5bf9\u8c61 fmt . Println ( t ) // float64 fmt . Println ( v ) // 1.23 fmt . Println ( v . Kind ()) // float64 fmt . Println ( v . Type ()) // float64 /* value \u5230 type */ fmt . Println ( v . Float ()) // 1.23 /* value \u5230 \u5b9e\u4f8b */ /* value \u5230 \u5b9e\u4f8b */ v = reflect . ValueOf ( x ) // \u63a5\u53e3\u7c7b\u578b\u53d8\u91cf -> \u53cd\u5c04\u7c7b\u578b\u5bf9\u8c61 convertV := v . Interface ().( float64 ) // \u53cd\u5c04\u7c7b\u578b\u5bf9\u8c61 -> \u63a5\u53e3\u7c7b\u578b\u53d8\u91cf, \u53ef\u4ee5\u7406\u89e3\u4e3a \u5f3a\u5236\u8f6c\u6362 fmt . Println ( convertV ) // 1.23 p := reflect . ValueOf ( & x ) convertP := p . Interface ().( * float64 ) fmt . Println ( convertP ) // 0xc000012090 } \u6307\u9488\u7c7b\u578b \u4e0e \u503c\u7c7b\u578b\u7684\u8f6c\u6362 \u00b6 \u6307\u9488 -> \u503c \uff1a t.Elem() \uff0ct \u53ea\u53ef\u4ee5\u662f\u5f15\u7528\u7c7b\u578b \u6307\u9488 -> \u503c \uff1a v.Elem() \uff0cv \u53ea\u53ef\u4ee5\u662f\u6307\u9488 // t \u5fc5\u987b\u662f Array\u3001Chan\u3001Map\u3001Ptr\u3001Slice\uff0c\u5426\u5219\u4f1a\u5f15\u8d77 panic // Elem \u8fd4\u56de\u7684\u662f\u5176\u5185\u90e8\u5143\u7d20\u7684 Type func ( t * rtype ) Elem () Type eg\uff1a func main () { var x int = 10 var s [] int = [] int { 10 , 20 , 30 } // TypeOf\uff1a\u53ea\u63a5\u53d7\u5f15\u7528\u7c7b\u578b t1 := reflect . TypeOf ( s ) te1 := t1 . Elem () fmt . Println ( te1 ) // int fmt . Printf ( \"%T \\n\" , te1 ) // *reflect.rtype t2 := reflect . TypeOf ( & s ) te2 := t2 . Elem () fmt . Println ( te2 ) // []int fmt . Printf ( \"%T \\n\" , te2 ) // *reflect.rtype t3 := reflect . TypeOf ( x ) te3 := t3 . Elem () // panic: reflect: Elem of invalid type int t4 := reflect . TypeOf ( & x ) te4 := t4 . Elem () fmt . Println ( te4 ) // int fmt . Printf ( \"%T \\n\" , te4 ) // *reflect.rtype // ValueOf\uff1a\u53ea\u63a5\u53d7prt\u7c7b\u578b v1 := reflect . ValueOf ( s ) ve1 := v1 . Elem () // panic: reflect: call of reflect.Value.Elem on slice Value v2 := reflect . ValueOf ( & s ) ve2 := v2 . Elem () fmt . Println ( ve2 ) // [10 20 30] fmt . Printf ( \"%T \\n\" , ve2 ) // reflect.Value v3 := reflect . ValueOf ( x ) ve3 := v3 . Elem () // panic: reflect: call of reflect.Value.Elem on int Value v4 := reflect . ValueOf ( & x ) ve4 := v4 . Elem () fmt . Println ( ve4 ) // 10 fmt . Printf ( \"%T \\n\" , ve4 ) // reflect.Value } \u503c -> \u6307\u9488 \uff1a PtrTo(t) // PtrTo \u8fd4\u56de\u7684\u662f\u6307\u5411 t \u7684\u6307\u9488\u578b Type func PtrTo ( t Type ) Type eg\uff1a func main () { var x int = 10 var s [] int = [] int { 10 , 20 , 30 } xt := reflect . TypeOf ( x ) st := reflect . TypeOf ( s ) px := reflect . PtrTo ( xt ) ps := reflect . PtrTo ( st ) fmt . Println ( px ) // *int fmt . Println ( ps ) // *[]int } Value \u7684\u53ef\u4fee\u6539\u6027 \u00b6 //\u901a\u8fc7 CanSet \u5224\u65ad\u662f\u5426\u80fd\u4fee\u6539 func ( v Value ) CanSet () bool {} //\u901a\u8fc7 Set \u8fdb\u884c\u4fee\u6539 func ( v Value ) Set ( x Value ) {} func ( v Value ) SetBool ( x bool ) {} func ( v Value ) SetBytes ( x [] byte ) {} func ( v Value ) SetCap ( n int ) {} func ( v Value ) SetComplex ( x complex128 ) {} func ( v Value ) SetFloat ( x float64 ) {} func ( v Value ) SetInt ( x int64 ) {} func ( v Value ) SetLen ( n int ) {} func ( v Value ) SetMapIndex ( key , elem Value ) {} func ( v Value ) SetPointer ( x unsafe . Pointer ) {} func ( v Value ) SetString ( x string ) {} func ( v Value ) SetUint ( x uint64 ) {} eg\uff1a func main () { var x int = 10 var s [] int = [] int { 10 , 20 , 30 } vpx := reflect . ValueOf ( & x ) vepx := vpx . Elem () if vepx . CanSet () == true { // CanSet \u5224\u65ad vepx . SetInt ( 20 ) // Set \u8bbe\u7f6e } fmt . Println ( x ) // 20 vps := reflect . ValueOf ( & s ) veps := vps . Elem () if veps . CanSet () == true { // CanSet \u5224\u65ad veps . Index ( 1 ). SetInt ( 345 ) // Index \u83b7\u53d6\u5143\u7d20\uff0c\u7136\u540e\u8bbe\u7f6e } fmt . Println ( s ) // [10 345 30] } \u53cd\u5c04\u7ed3\u6784\u4f53 \u00b6 \u7ed3\u6784\u4f53\u76f8\u6bd4\u57fa\u672c\u7c7b\u578b\u7a0d\u5fae\u591a\u4e00\u70b9\u6b65\u9aa4\u3002 \u7b2c\u4e00\u6b65\uff0c\u4f20\u5165\u7ed3\u6784\u4f53\u6307\u9488\uff0c\u83b7\u53d6\u53ef\u4fee\u6539\u7684 reflect \u5bf9\u8c61 \u7b2c\u4e8c\u6b65\uff0c\u4f7f\u7528 Elem() \u83b7\u5f97\u5b57\u6bb5\u5217\u8868 \u7b2c\u4e09\u6b65\uff0c\u4f7f\u7528 Field() \u7cfb\u5217\u65b9\u6cd5 \u6216 Method() \u7cfb\u5217\u65b9\u6cd5\uff0c\u83b7\u5f97\u6307\u5b9a\u5b57\u6bb5\u6216\u65b9\u6cd5 \u7b2c\u56db\u6b65\uff0c\u4f7f\u7528 Set() \u7cfb\u5217\u65b9\u6cd5\u4fee\u6539\u6570\u503c \u6216 \u4f7f\u7528 Call() \u8c03\u7528\u7ed3\u6784\u4f53\u65b9\u6cd5 \u7ed3\u6784\u4f53\u7684 Type \u662f main.person \u7ed3\u6784\u4f53\u7684 Kind \u662f struct \u7ed3\u6784\u4f53\u7684 Name \u662f person NumField() \u53ef\u4ee5\u83b7\u5f97\u7ed3\u6784\u4f53\u5b57\u6bb5\u7684\u6570\u91cf NumMethod() \u53ef\u4ee5\u83b7\u5f97\u7ed3\u6784\u4f53\u65b9\u6cd5\u7684\u6570\u91cf\uff0c\u4f46\u53ea\u80fd\u83b7\u53d6 public \u65b9\u6cd5 Field(idx) \u53ef\u4ee5\u901a\u8fc7\u4e0b\u6807\u83b7\u5f97\u6307\u5b9a\u7684\u5b57\u6bb5 FieldByName(fieldName) \u53ef\u4ee5\u901a\u8fc7\u5b57\u6bb5\u540d\u5b57\u83b7\u5f97\u6307\u5b9a\u7684\u5b57\u6bb5 Method(idx) \u53ef\u4ee5\u901a\u8fc7\u4e0b\u6807\u83b7\u5f97\u6307\u5b9a\u7684\u65b9\u6cd5 MethodByName(methodName) \u53ef\u4ee5\u901a\u8fc7\u65b9\u6cd5\u540d\u83b7\u5f97\u6307\u5b9a\u7684\u65b9\u6cd5 NumIn() \u53ef\u4ee5\u83b7\u5f97\u53c2\u6570\u4e2a\u6570 NumOut() \u53ef\u4ee5\u83b7\u5f97\u8fd4\u56de\u503c\u4e2a\u6570 \u8bbf\u95ee\u64cd\u4f5c \u00b6 eg\uff1a\u8bbf\u95ee\u7ed3\u6784\u4f53\u7684\u5b57\u6bb5\u548c\u65b9\u6cd5 package main import ( \"fmt\" \"reflect\" ) type person struct { name string Age int } func ( p person ) Eat () { fmt . Println ( \"eat\" ) } func ( p person ) Run () { fmt . Println ( \"run\" ) } func ( p person ) gogogo () { fmt . Println ( \"go\" ) } func main () { pers := person { \"Boii\" , 18 } t := reflect . TypeOf ( pers ) v := reflect . ValueOf ( pers ) fmt . Println ( v ) // {Boii 18} fmt . Println ( t ) // main.person fmt . Println ( t . Name ()) // person fmt . Println ( t . Kind ()) // struct // \u83b7\u53d6\u5b57\u6bb5 // { Name PkgPath Type Tag Offset Index Anonymous} // { name main string 0 [0] false} // { Age main int 16 [1] false} for i := 0 ; i < t . NumField (); i ++ { field := t . Field ( i ) value := v . Field ( i ) fmt . Printf ( \"\u5b57\u6bb5\u540d\u79f0: %s\\t\u5b57\u6bb5\u7c7b\u578b: %s\\t\u5b57\u6bb5\u6570\u503c: %v\\n\" , field . Name , field . Type , value ) } // \u5b57\u6bb5\u540d\u79f0: name \u5b57\u6bb5\u7c7b\u578b: string \u5b57\u6bb5\u6570\u503c: Boii // \u5b57\u6bb5\u540d\u79f0: Age \u5b57\u6bb5\u7c7b\u578b: int \u5b57\u6bb5\u6570\u503c: 18 for i := 0 ; i < v . NumField (); i ++ { fmt . Println ( v . Field ( i )) // Boii // 18 } // \u83b7\u53d6\u65b9\u6cd5\uff0ct.NumMethod() \u53ea\u80fd\u83b7\u53d6\u5230 public \u65b9\u6cd5 // {Name PkgPath Type Func Index} // {Eat func(main.person, string) <func(main.person, string) Value> 0} // {Run func(main.person) <func(main.person) Value> 1} for i := 0 ; i < t . NumMethod (); i ++ { method := t . Method ( i ) fmt . Printf ( \"\u65b9\u6cd5\u540d\u79f0: %s\\t\u65b9\u6cd5\u7c7b\u578b: %v\\n\" , method . Name , method . Type ) } // \u65b9\u6cd5\u540d\u79f0: Eat \u65b9\u6cd5\u7c7b\u578b: func(main.person) // \u65b9\u6cd5\u540d\u79f0: Run \u65b9\u6cd5\u7c7b\u578b: func(main.person) for i := 0 ; i < v . NumMethod (); i ++ { fmt . Println ( v . Method ( i )) // 0x433600 // 0x433600 } } \u4fee\u6539\u64cd\u4f5c \u00b6 \u5982\u679c\u60f3\u8981\u5bf9\u7ed3\u6784\u4f53\u7684\u5b57\u6bb5\u7b49\u8fdb\u884c\u4fee\u6539\uff0c\u9700\u8981\u4f20\u5165\u7ed3\u6784\u4f53\u6307\u9488\u6765\u83b7\u5f97 reflect \u5bf9\u8c61\u3002 package main import ( \"fmt\" \"reflect\" ) type person struct { name string Age int } func ( p person ) Eat ( food string ) { fmt . Println ( \"eat\" , food ) } func ( p person ) Run () { fmt . Println ( \"run\" ) } func ( p person ) go () { fmt . Println ( \"go\" ) } func main () { pers := person { \"Boii\" , 18 } v := reflect . ValueOf ( & pers ). Elem () // panic: reflect: reflect.Value.SetString using value obtained using unexported field v . FieldByName ( \"name\" ). SetString ( \"Eva\" ) // \u4f20\u5165\u7ed3\u6784\u4f53\u6307\u9488\u4ee5\u540e\uff0cField \u53ea\u80fd\u8bbf\u95ee\u5230 public \u5b57\u6bb5 v . Field ( 1 ). SetInt ( 20 ) fmt . Println ( pers ) // {Boii 20} // \u8c03\u7528\u6709\u53c2\u65b9\u6cd5 v . Method ( 0 ). Call ([] reflect . Value { reflect . ValueOf ( \"apple\" )}) // eat apple // \u8c03\u7528\u65e0\u53c2\u65b9\u6cd5 v . Method ( 1 ). Call ( nil ) // run v . Method ( 1 ). Call ( make ([] reflect . Value , 0 )) // run } \u901a\u8fc7\u7ed3\u6784\u4f53\u6307\u9488\u83b7\u5f97\u7684 reflect \u5bf9\u8c61\uff0c\u8981\u6ce8\u610f3\u70b9 1. \u9700\u8981 Elem() \u65b9\u6cd5\u83b7\u53d6\u5230\u5143\u7d20\u5217\u8868 2. \u53ea\u80fd\u8bbf\u95ee\u5230 public \u7684 \u5b57\u6bb5\u548c\u65b9\u6cd5 \u901a\u8fc7 Call() \u53ef\u4ee5\u8c03\u7528\u7ed3\u6784\u4f53\u7684\u65b9\u6cd5\uff0c \u5982\u679c\u65e0\u53c2\uff0c\u53ef\u4ee5\u4f20\u5165 nil \u6216\u8005\u7a7a\u5207\u7247 \u5982\u679c\u6709\u53c2\uff0c\u9700\u4f20\u5165Value\u5207\u7247 []reflect.Value //\u6ca1\u6709\u53c2\u6570\uff0c\u76f4\u63a5\u5199nil . Call ( nil ) // \u6216\u8005 args1 := make ([] reflect . Value , 0 ) . Call ( args1 ) // \u6709\u53c2\u6570 args2 := [] reflect . Value { reflect . ValueOf ( \"\u53cd\u5c04\u673a\u5236\" ), reflect . ValueOf ( 100 ), ... } . Call ( args2 ) \u53cd\u5c04\u8c03\u7528\u51fd\u6570 \u00b6 \u53cd\u5c04\u8c03\u7528\u51fd\u6570\u548c \u8c03\u7528\u65b9\u6cd5\u5176\u5b9e\u5dee\u4e0d\u591a\uff0c\u53ef\u4ee5\u901a\u8fc7\u51fd\u6570\u540d\u83b7\u5f97 reflect \u5bf9\u8c61\uff0c\u4f7f\u7528 Call() \u8c03\u7528 package main import ( \"fmt\" \"reflect\" ) func main () { //\u51fd\u6570\u7684\u53cd\u5c04 f1 := fun1 value := reflect . ValueOf ( f1 ) fmt . Printf ( \"Kind : %s , Type : %s\\n\" , value . Kind (), value . Type ()) //Kind : func , Type : func() value2 := reflect . ValueOf ( fun2 ) fmt . Printf ( \"Kind : %s , Type : %s\\n\" , value2 . Kind (), value2 . Type ()) //Kind : func , Type : func(int, string) //\u901a\u8fc7\u53cd\u5c04\u8c03\u7528\u51fd\u6570 value . Call ( nil ) args := [] reflect . Value { reflect . ValueOf ( 100 ), reflect . ValueOf ( \"hello\" )} value2 . Call ( args ) } func fun1 (){ fmt . Println ( \"\u6211\u662f\u51fd\u6570fun1()\uff0c\u65e0\u53c2\u7684\u3002\u3002\" ) } func fun2 ( i int , s string ){ fmt . Println ( \"\u6211\u662f\u51fd\u6570fun2()\uff0c\u6709\u53c2\u6570\u3002\u3002\" , i , s ) }","title":"19.\u53cd\u5c04"},{"location":"Go/Adavanced/Golang-19-reflect/#2-reflect","text":"\u5b98\u65b9Doc\u4e2d**Rob Pike**\u5b9a\u4e49\uff1a Reflection in computing is the ability of a program to examine its own structure, particularly through types; it\u2019s a form of metaprogramming. It\u2019s also a great source of confusion. \u5728\u8ba1\u7b97\u673a\u9886\u57df\uff0c\u53cd\u5c04\u662f\u4e00\u79cd\u8ba9\u7a0b\u5e8f\u2014\u2014\u4e3b\u8981\u662f\u901a\u8fc7\u7c7b\u578b\u2014\u2014\u7406\u89e3\u5176\u81ea\u8eab\u7ed3\u6784\u7684\u4e00\u79cd\u80fd\u529b\u3002\u5b83\u662f\u5143\u7f16\u7a0b\u7684\u7ec4\u6210\u4e4b\u4e00\uff0c\u540c\u65f6\u5b83\u4e5f\u662f\u4e00\u5927\u5f15\u4eba\u56f0\u60d1\u7684\u96be\u9898\u3002 **\u7ef4\u57fa\u767e\u79d1**\u5b9a\u4e49\uff1a \u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\uff0c\u53cd\u5c04\u662f\u6307\u8ba1\u7b97\u673a\u7a0b\u5e8f\u5728\u8fd0\u884c\u65f6\uff08Run time\uff09\u53ef\u4ee5\u8bbf\u95ee\u3001\u68c0\u6d4b\u548c\u4fee\u6539\u5b83\u672c\u8eab\u72b6\u6001\u6216\u884c\u4e3a\u7684\u4e00\u79cd\u80fd\u529b\u3002\u7528\u6bd4\u55bb\u6765\u8bf4\uff0c\u53cd\u5c04\u5c31\u662f\u7a0b\u5e8f\u5728\u8fd0\u884c\u7684\u65f6\u5019\u80fd\u591f\u201c\u89c2\u5bdf\u201d\u5e76\u4e14\u4fee\u6539\u81ea\u5df1\u7684\u884c\u4e3a\u3002 **\u300aGo \u8bed\u8a00\u5723\u7ecf\u300b**\u4e2d\u8fd9\u6837\u5b9a\u4e49\uff1a Go \u8bed\u8a00\u63d0\u4f9b\u4e86\u4e00\u79cd\u673a\u5236\u5728\u8fd0\u884c\u65f6\u66f4\u65b0\u53d8\u91cf\u548c\u68c0\u67e5\u5b83\u4eec\u7684\u503c\u3001\u8c03\u7528\u5b83\u4eec\u7684\u65b9\u6cd5\uff0c\u4f46\u662f\u5728\u7f16\u8bd1\u65f6\u5e76\u4e0d\u77e5\u9053\u8fd9\u4e9b\u53d8\u91cf\u7684\u5177\u4f53\u7c7b\u578b\uff0c\u8fd9\u79f0\u4e3a\u53cd\u5c04\u673a\u5236\u3002 \u53cd\u5c04\u5e94\u7528\u573a\u666f \u7531\u4e8e\u6ca1\u7ea6\u5b9a\u597d\uff0c\u6216\u8005\u4f20\u5165\u7684\u7c7b\u578b\u5f88\u591a\u3001\u8fd9\u4e9b\u7c7b\u578b\u4e0d\u80fd\u7edf\u4e00\u8868\u793a\uff0c\u5bfc\u81f4\u4e0d\u786e\u5b9a\u51fd\u6570\u53c2\u6570\u7c7b\u578b\uff0c\u5c31\u9700\u8981\u7528\u53cd\u5c04\u6765\u786e\u5b9a\u7c7b\u578b\u3002 \u9700\u8981\u6839\u636e\u67d0\u4e9b\u6761\u4ef6\uff0c\u5982\u7528\u6237\u7684\u8f93\u5165\uff0c\u6765\u51b3\u5b9a\u8c03\u7528\u54ea\u4e2a\u51fd\u6570\uff0c\u5219\u9700\u8981\u5728\u8fd0\u884c\u671f\u52a8\u6001\u5730\u6267\u884c\u51fd\u6570\u3002 \u4e0d\u5efa\u8bae\u7528\u53cd\u5c04\u7684\u7406\u7531 \u53cd\u5c04\u4ee3\u7801\u96be\u4ee5\u9605\u8bfb\uff0c\u964d\u4f4e\u4ee3\u7801\u53ef\u8bfb\u6027\u3002 \u9759\u6001\u8bed\u8a00\u7684\u4f18\u52bf\u4e4b\u4e00\u5728\u4e8e\u7f16\u8bd1\u671f\u5c31\u80fd\u53d1\u73b0\u4e00\u4e9b\u7c7b\u578b\u9519\u8bef\uff0c\u800c\u53cd\u5c04\u8fd9\u79cd\u8fd0\u884c\u671f\u7684\u602a\u7269\u4f1a\u5bfc\u81f4\u8fd9\u4e00\u4f18\u52bf\u7684\u5931\u53bb\u3002\u5305\u542b\u53cd\u5c04\u7684\u4ee3\u7801\u5f88\u53ef\u80fd\u8fd0\u884c\u5f88\u4e45\uff0c\u624d\u4f1a\u51fa\u9519\uff0c\u800c\u4e14\u7ecf\u5e38\u662f\u76f4\u63a5 panic \uff0c\u9020\u6210\u4e25\u91cd\u540e\u679c\u3002 \u53cd\u5c04\u5bf9\u6027\u80fd\u5f71\u54cd\u8f83\u5927\uff0c\u76f8\u6bd4\u6b63\u5e38\u4ee3\u7801\u6162\u51fa\u4e00\u4e24\u4e2a\u6570\u91cf\u7ea7\u3002","title":"2-reflect"},{"location":"Go/Adavanced/Golang-19-reflect/#_1","text":"","title":"\u76f8\u5173\u57fa\u7840"},{"location":"Go/Adavanced/Golang-19-reflect/#golang","text":"Golang \u7684\u7c7b\u578b\uff1a \u53d8\u91cf\u5305\u62ec \uff08type\uff0cvalue\uff09 \u4e24\u90e8\u5206 type \u5305\u62ec static type \u548c concrete type \u3002 static type \u5c31\u662f\u5728\u7f16\u7801\u65f6\u770b\u5f97\u89c1\u7684\u7c7b\u578b\uff0c\u5982\uff1aint\u3001string concrete type \u662f runtime \u7cfb\u7edf\u770b\u5f97\u89c1\u7684\u7c7b\u578b\u3002 \u7c7b\u578b\u80fd\u5426\u65ad\u8a00\u6210\u529f\uff0c\u53d6\u51b3\u4e8e\u53d8\u91cf\u7684 concrete type \u3002\u56e0\u6b64\uff0c\u4e00\u4e2a reader \u53d8\u91cf\u5982\u679c\u5b83\u7684 concrete type \u5b9e\u73b0\u4e86 write \u65b9\u6cd5\uff0creader \u4e5f\u53ef\u4ee5\u88ab\u65ad\u8a00\u4e3a writer\u3002","title":"Golang \u7684\u7c7b\u578b"},{"location":"Go/Adavanced/Golang-19-reflect/#_2","text":"\u5728\u53cd\u5c04\u7684\u6982\u5ff5\u4e2d\uff0c\u7f16\u8bd1\u65f6\u5c31\u77e5\u9053\u7684\u53d8\u91cf\u7c7b\u578b\u53eb**\u9759\u6001\u7c7b\u578b**\uff0c\u8fd0\u884c\u65f6\u624d\u77e5\u9053\u7684\u53d8\u91cf\u7c7b\u578b\u53eb**\u52a8\u6001\u7c7b\u578b**\u3002 \u9759\u6001\u7c7b\u578b\uff1a\u53d8\u91cf\u58f0\u660e\u65f6\u8d4b\u4e88\u7684\u7c7b\u578b\u3002 type Myint int // int \u5c31\u662f\u9759\u6001\u7c7b\u578b\uff0ctype \u662f static type type A struct { Name string // string \u5c31\u662f\u9759\u6001\u7c7b\u578b\uff0ctype \u662f static type } var i * int // *int \u5c31\u662f\u9759\u6001\u7c7b\u578b\uff0ctype \u662f static type \u52a8\u6001\u7c7b\u578b\uff1a\u8fd0\u884c\u65f6\u7ed9\u8fd9\u4e2a\u53d8\u91cf\u8d4b\u503c\u65f6\uff0c\u8fd9\u4e2a\u503c\u7684\u7c7b\u578b\u3002\u5982\u679c\u503c\u4e3a nil \u5219\u6ca1\u6709\u52a8\u6001\u7c7b\u578b\u3002 \u4e00\u4e2a\u53d8\u91cf\u7684\u52a8\u6001\u7c7b\u578b\u5728\u8fd0\u884c\u65f6\u53ef\u80fd\u6539\u53d8\uff0c\u5219\u4e3b\u8981\u4f9d\u8d56\u4e8e\u5b83\u7684\u8d4b\u503c\uff0c\u524d\u63d0\u662f\u8fd9\u4e2a\u53d8\u91cf\u662f\u63a5\u53e3\u7c7b\u578b\u3002 var A interface {} // \u9759\u6001\u7c7b\u578b interface{} A = 10 // \u9759\u6001\u7c7b\u578b interface{} \u52a8\u6001\u7c7b\u578b int A = \"String\" // \u9759\u6001\u7c7b\u578b interface{} \u52a8\u6001\u7c7b\u578b string var M * int A = M // \u9759\u6001\u7c7b\u578b interface{} \u52a8\u6001\u7c7b\u578b *int {% noteblock info %} Golang \u7684\u53cd\u5c04\u5c31\u662f\u5efa\u7acb\u5728\u7c7b\u578b\u4e4b\u4e0a\u7684\u3002 Golang \u53d8\u91cf\u7684\u6307\u5b9a\u7c7b\u578b\u662f\u9759\u6001\u7684\uff0c\u5728\u521b\u5efa\u53d8\u91cf\u7684\u65f6\u5019\u7c7b\u578b\u5c31\u5df2\u7ecf\u786e\u5b9a\uff0c\u5982\u6307\u5b9a int\u3001string \uff0c\u6240\u4ee5\u79f0\u4e4b\u4e3a static type \u3002 Golang \u53d8\u91cf\u7684\u6307\u5b9a\u7c7b\u578b\u662f interface \u7c7b\u578b\u76f8\u5173\u7684\uff0c\u5219\u7c7b\u578b\u5728\u8fd0\u884c\u671f\u624d\u80fd\u786e\u5b9a\uff0c\u6240\u4ee5\u79f0\u4e4b\u4e3a concrete type \u3002 \u53ea\u6709 interface \u7c7b\u578b\u624d\u6709\u53cd\u5c04\u4e00\u8bf4\u3002 {% endnoteblock %}","title":"\u9759\u6001\u7c7b\u578b\u548c\u52a8\u6001\u7c7b\u578b"},{"location":"Go/Adavanced/Golang-19-reflect/#interface","text":"Golang \u662f\u901a\u8fc7\u63a5\u53e3\u5b9e\u73b0\u7684\uff0c\u4efb\u4f55 \u63a5\u53e3\u503c \u90fd\u662f\u7531\u4e00\u4e2a \u5b9e\u9645\u7c7b\u578b \u548c \u5b9e\u9645\u7c7b\u578b\u7684\u503c \u4e24\u4e2a\u90e8\u5206\u7ec4\u6210\u7684\u3002 \u6bcf\u4e2a interface \u53d8\u91cf\u90fd\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684 pair \uff0c pair \u4e2d\u8bb0\u5f55\u4e86 type \u7684\u7c7b\u578b\u548c\u503c\uff1a pair -> (concrete type, value) concrete type \u662f\u5b9e\u9645\u53d8\u91cf\u7684\u7c7b\u578b\uff0c concrete value \u662f\u5b9e\u9645\u53d8\u91cf\u7684\u503c\u3002 \u4e00\u4e2a interface \u53d8\u91cf\u5305\u542b\u4e86 2 \u4e2a\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u5411\u5b9e\u9645\u503c\u7684\u7c7b\u578b\uff0c\u4e00\u4e2a\u6307\u5411\u5b9e\u9645\u503c\u3002 eg\uff1a\u6253\u5f00\u6587\u4ef6\u4f1a\u8fd4\u56de\u4e00\u4e2a *os.File \u53d8\u91cf\u3002 f , err := os . OpenFile ( \"/home/abc.txt\" , os . O_RDWR , 0777 ) var r io . Reader = f \u63a5\u53e3\u53d8\u91cf r \u7684 pair \u4fe1\u606f\u8bb0\u5f55\u5982\u4e0b\uff1a (f, *os.File) \u3002 pair \u5728\u63a5\u53e3\u53d8\u91cf\u7ba1\u9053\u8fde\u7eed\u8d4b\u503c\u8fc7\u7a0b\u4e2d\u662f\u4e0d\u53d8\u7684\uff0c\u5c06\u63a5\u53e3\u53d8\u91cf r \u8d4b\u503c\u7ed9\u53e6\u4e00\u4e2a\u63a5\u53e3\u53d8\u91cf w\uff0c\u4ed6\u4eec\u7684 pair \u662f\u76f8\u540c\u7684\u3002 var w io . Writer = r .( io . Writer ) \u63a5\u53e3\u53d8\u91cf w \u7684 pair \u4fe1\u606f\u8bb0\u5f55\u5982\u4e0b\uff1a (f, *os.File) \u3002\u5373\u4f7f w \u662f\u7a7a\u63a5\u53e3\u7c7b\u578b\uff0c pair \u4e5f\u662f\u4e0d\u53d8\u7684\u3002 {% noteblock info %} interface\u53ca\u5176pair\u7684\u5b58\u5728\uff0c\u662fGolang\u4e2d\u5b9e\u73b0\u53cd\u5c04\u7684\u524d\u63d0\uff0c\u7406\u89e3\u4e86pair\uff0c\u5c31\u66f4\u5bb9\u6613\u7406\u89e3\u53cd\u5c04\u3002 \u53cd\u5c04\u5c31\u662f\u7528\u6765\u68c0\u6d4b\u5b58\u50a8\u5728\u63a5\u53e3\u53d8\u91cf\u5185\u90e8 (\u7c7b\u578bconcrete type, \u503cvalue) pair\u5bf9\u7684\u4e00\u79cd\u673a\u5236\u3002 {% endnoteblock %}","title":"interface \u7c7b\u578b"},{"location":"Go/Adavanced/Golang-19-reflect/#_3","text":"reflect\u5305\u63d0\u4f9b\u4e86\u51e0\u4e2a\u91cd\u8981\u7c7b\u578b\u548c\u51fd\u6570\uff1a **reflect.Type\u63a5\u53e3**\u8868\u793a\u63a5\u53e3\u503c\u7684\"\u5177\u4f53\u7c7b\u578b\"\uff1b reflect.TypeOf() \u51fd\u6570\u8fd4\u56de\u7c7b\u578b\u7684\u540d\u79f0\uff0c\u4e5f\u5c31\u662f pair \u4e2d\u7684 type **reflect.Value\u7ed3\u6784**\u8868\u793a\u63a5\u53e3\u503c\u7684\"\u5177\u4f53\u7c7b\u578b\u7684\u503c\"\uff1b reflect.ValueOf() \u51fd\u6570\u8fd4\u56de\u5177\u4f53\u7c7b\u578b\u7684\u503c\uff0c\u4e5f\u5c31\u662f pair \u4e2d\u7684 value \u5148\u6709\u4e00\u4e2a\u63a5\u53e3\u7c7b\u578b\u7684\u53d8\u91cf \u628a\u63a5\u53e3\u53d8\u91cf\u8f6c\u5316\u6210 reflect \u5bf9\u8c61\uff08 reflect.Type \u6216 reflect.Value \uff09 \u6839\u636e\u4e0d\u540c\u60c5\u51b5\u8c03\u7528\u4e0d\u540c\u7684\u51fd\u6570 \u6700\u7b80\u5355\u7684\u57fa\u672c\u4f7f\u7528\uff1a package main import ( \"fmt\" \"reflect\" ) func main () { var x float64 = 1.23 t := reflect . TypeOf ( x ) /* \u5b9e\u4f8b\u5230type */ v := reflect . ValueOf ( x ) /* \u5b9e\u4f8b\u5230value */ fmt . Println ( t ) // float64 fmt . Println ( v ) // 1.23 }","title":"\u53cd\u5c04\u7684\u4f7f\u7528"},{"location":"Go/Adavanced/Golang-19-reflect/#reflecttype","text":"type Type interface { // Kind\u8fd4\u56de\u8be5\u63a5\u53e3\u7684\u5177\u4f53\u5206\u7c7b Kind () Kind // Name\u8fd4\u56de\u8be5\u7c7b\u578b\u5728\u81ea\u8eab\u5305\u5185\u7684\u7c7b\u578b\u540d\uff0c\u5982\u679c\u662f\u672a\u547d\u540d\u7c7b\u578b\u4f1a\u8fd4\u56de\"\" Name () string // PkgPath\u8fd4\u56de\u7c7b\u578b\u7684\u5305\u8def\u5f84\uff0c\u5373\u660e\u786e\u6307\u5b9a\u5305\u7684import\u8def\u5f84\uff0c\u5982\"encoding/base64\" // \u5982\u679c\u7c7b\u578b\u4e3a\u5185\u5efa\u7c7b\u578b(string, error)\u6216\u672a\u547d\u540d\u7c7b\u578b(*T, struct{}, []int)\uff0c\u4f1a\u8fd4\u56de\"\" PkgPath () string // \u8fd4\u56de\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\u8868\u793a\u3002\u8be5\u5b57\u7b26\u4e32\u53ef\u80fd\u4f1a\u4f7f\u7528\u77ed\u5305\u540d\uff08\u5982\u7528base64\u4ee3\u66ff\"encoding/base64\"\uff09 // \u4e5f\u4e0d\u4fdd\u8bc1\u6bcf\u4e2a\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\u8868\u793a\u4e0d\u540c\u3002\u5982\u679c\u8981\u6bd4\u8f83\u4e24\u4e2a\u7c7b\u578b\u662f\u5426\u76f8\u7b49\uff0c\u8bf7\u76f4\u63a5\u7528Type\u7c7b\u578b\u6bd4\u8f83\u3002 String () string // \u8fd4\u56de\u8981\u4fdd\u5b58\u4e00\u4e2a\u8be5\u7c7b\u578b\u7684\u503c\u9700\u8981\u591a\u5c11\u5b57\u8282\uff1b\u7c7b\u4f3cunsafe.Sizeof Size () uintptr // \u8fd4\u56de\u5f53\u4ece\u5185\u5b58\u4e2d\u7533\u8bf7\u4e00\u4e2a\u8be5\u7c7b\u578b\u503c\u65f6\uff0c\u4f1a\u5bf9\u9f50\u7684\u5b57\u8282\u6570 Align () int // \u8fd4\u56de\u5f53\u8be5\u7c7b\u578b\u4f5c\u4e3a\u7ed3\u6784\u4f53\u7684\u5b57\u6bb5\u65f6\uff0c\u4f1a\u5bf9\u9f50\u7684\u5b57\u8282\u6570 FieldAlign () int /* \u5224\u65ad\u76f8\u5173 */ // \u5982\u679c\u8be5\u7c7b\u578b\u5b9e\u73b0\u4e86u\u4ee3\u8868\u7684\u63a5\u53e3\uff0c\u4f1a\u8fd4\u56de\u771f Implements ( u Type ) bool // \u5982\u679c\u8be5\u7c7b\u578b\u7684\u503c\u53ef\u4ee5\u76f4\u63a5\u8d4b\u503c\u7ed9u\u4ee3\u8868\u7684\u7c7b\u578b\uff0c\u8fd4\u56de\u771f AssignableTo ( u Type ) bool // \u5982\u8be5\u7c7b\u578b\u7684\u503c\u53ef\u4ee5\u8f6c\u6362\u4e3au\u4ee3\u8868\u7684\u7c7b\u578b\uff0c\u8fd4\u56de\u771f ConvertibleTo ( u Type ) bool /* \u7c7b\u578b\u76f8\u5173 */ // \u8fd4\u56de\u8be5\u7c7b\u578b\u7684\u5b57\u4f4d\u6570\u3002\u5982\u679c\u8be5\u7c7b\u578b\u7684Kind\u4e0d\u662fInt\u3001Uint\u3001Float\u6216Complex\uff0c\u4f1apanic Bits () int // \u8fd4\u56dearray\u7c7b\u578b\u7684\u957f\u5ea6\uff0c\u5982\u975e\u6570\u7ec4\u7c7b\u578b\u5c06panic Len () int // \u8fd4\u56de\u8be5\u7c7b\u578b\u7684\u5143\u7d20\u7c7b\u578b\uff0c\u5982\u679c\u8be5\u7c7b\u578b\u7684Kind\u4e0d\u662fArray\u3001Chan\u3001Map\u3001Ptr\u6216Slice\uff0c\u4f1apanic Elem () Type // \u8fd4\u56demap\u7c7b\u578b\u7684\u952e\u7684\u7c7b\u578b\u3002\u5982\u975e\u6620\u5c04\u7c7b\u578b\u5c06panic Key () Type // \u8fd4\u56de\u4e00\u4e2achannel\u7c7b\u578b\u7684\u65b9\u5411\uff0c\u5982\u975e\u901a\u9053\u7c7b\u578b\u5c06\u4f1apanic ChanDir () ChanDir /* \u7ed3\u6784\u4f53\u76f8\u5173 */ // \u8fd4\u56destruct\u7c7b\u578b\u7684\u5b57\u6bb5\u6570\uff08\u533f\u540d\u5b57\u6bb5\u7b97\u4f5c\u4e00\u4e2a\u5b57\u6bb5\uff09\uff0c\u5982\u975e\u7ed3\u6784\u4f53\u7c7b\u578b\u5c06panic NumField () int // \u8fd4\u56destruct\u7c7b\u578b\u7684\u7b2ci\u4e2a\u5b57\u6bb5\u7684\u7c7b\u578b\uff0c\u5982\u975e\u7ed3\u6784\u4f53\u6216\u8005i\u4e0d\u5728[0, NumField())\u5185\u5c06\u4f1apanic Field ( i int ) StructField // \u8fd4\u56de\u7d22\u5f15\u5e8f\u5217\u6307\u5b9a\u7684\u5d4c\u5957\u5b57\u6bb5\u7684\u7c7b\u578b\uff0c // \u7b49\u4ef7\u4e8e\u7528\u7d22\u5f15\u4e2d\u6bcf\u4e2a\u503c\u94fe\u5f0f\u8c03\u7528\u672c\u65b9\u6cd5\uff0c\u5982\u975e\u7ed3\u6784\u4f53\u5c06\u4f1apanic FieldByIndex ( index [] int ) StructField // \u8fd4\u56de\u8be5\u7c7b\u578b\u540d\u4e3aname\u7684\u5b57\u6bb5\uff08\u4f1a\u67e5\u627e\u533f\u540d\u5b57\u6bb5\u53ca\u5176\u5b50\u5b57\u6bb5\uff09\uff0c // \u5e03\u5c14\u503c\u8bf4\u660e\u662f\u5426\u627e\u5230\uff0c\u5982\u975e\u7ed3\u6784\u4f53\u5c06panic FieldByName ( name string ) ( StructField , bool ) // \u8fd4\u56de\u8be5\u7c7b\u578b\u7b2c\u4e00\u4e2a\u5b57\u6bb5\u540d\u6ee1\u8db3\u51fd\u6570match\u7684\u5b57\u6bb5\uff0c\u5e03\u5c14\u503c\u8bf4\u660e\u662f\u5426\u627e\u5230\uff0c\u5982\u975e\u7ed3\u6784\u4f53\u5c06\u4f1apanic FieldByNameFunc ( match func ( string ) bool ) ( StructField , bool ) {} // \u8fd4\u56de\u8be5\u7c7b\u578b\u7684\u65b9\u6cd5public\u65b9\u6cd5\u7684\u6570\u76ee // \u533f\u540d\u5b57\u6bb5\u7684\u65b9\u6cd5\u4f1a\u88ab\u8ba1\u7b97\uff1b\u4e3b\u4f53\u7c7b\u578b\u7684\u65b9\u6cd5\u4f1a\u5c4f\u853d\u533f\u540d\u5b57\u6bb5\u7684\u540c\u540d\u65b9\u6cd5\uff1b // \u533f\u540d\u5b57\u6bb5\u5bfc\u81f4\u7684\u6b67\u4e49\u65b9\u6cd5\u4f1a\u6ee4\u9664 NumMethod () int // \u8fd4\u56de\u8be5\u7c7b\u578b\u65b9\u6cd5\u96c6\u4e2d\u7684\u7b2ci\u4e2a\u65b9\u6cd5\uff0ci\u4e0d\u5728[0, NumMethod())\u8303\u56f4\u5185\u65f6\uff0c\u5c06\u5bfc\u81f4panic // \u5bf9\u975e\u63a5\u53e3\u7c7b\u578bT\u6216*T\uff0c\u8fd4\u56de\u503c\u7684Type\u5b57\u6bb5\u548cFunc\u5b57\u6bb5\u63cf\u8ff0\u65b9\u6cd5\u7684\u672a\u7ed1\u5b9a\u51fd\u6570\u72b6\u6001 // \u5bf9\u63a5\u53e3\u7c7b\u578b\uff0c\u8fd4\u56de\u503c\u7684Type\u5b57\u6bb5\u63cf\u8ff0\u65b9\u6cd5\u7684\u7b7e\u540d\uff0cFunc\u5b57\u6bb5\u4e3anil Method ( int ) Method // \u6839\u636e\u65b9\u6cd5\u540d\u8fd4\u56de\u8be5\u7c7b\u578b\u65b9\u6cd5\u96c6\u4e2d\u7684\u65b9\u6cd5\uff0c\u4f7f\u7528\u4e00\u4e2a\u5e03\u5c14\u503c\u8bf4\u660e\u662f\u5426\u53d1\u73b0\u8be5\u65b9\u6cd5 // \u5bf9\u975e\u63a5\u53e3\u7c7b\u578bT\u6216*T\uff0c\u8fd4\u56de\u503c\u7684Type\u5b57\u6bb5\u548cFunc\u5b57\u6bb5\u63cf\u8ff0\u65b9\u6cd5\u7684\u672a\u7ed1\u5b9a\u51fd\u6570\u72b6\u6001 // \u5bf9\u63a5\u53e3\u7c7b\u578b\uff0c\u8fd4\u56de\u503c\u7684Type\u5b57\u6bb5\u63cf\u8ff0\u65b9\u6cd5\u7684\u7b7e\u540d\uff0cFunc\u5b57\u6bb5\u4e3anil MethodByName ( string ) ( Method , bool ) /* \u51fd\u6570\u76f8\u5173 */ // \u5982\u679c\u51fd\u6570\u7c7b\u578b\u7684\u6700\u540e\u4e00\u4e2a\u8f93\u5165\u53c2\u6570\u662f\"...\"\u5f62\u5f0f\u7684\u53c2\u6570\uff0cIsVariadic\u8fd4\u56de\u771f // \u5982\u679c\u8fd9\u6837\uff0ct.In(t.NumIn() - 1)\u8fd4\u56de\u53c2\u6570\u7684\u9690\u5f0f\u7684\u5b9e\u9645\u7c7b\u578b\uff08\u58f0\u660e\u7c7b\u578b\u7684\u5207\u7247\uff09 // \u5982\u975e\u51fd\u6570\u7c7b\u578b\u5c06panic IsVariadic () bool // \u8fd4\u56defunc\u7c7b\u578b\u7684\u53c2\u6570\u4e2a\u6570\uff0c\u5982\u679c\u4e0d\u662f\u51fd\u6570\uff0c\u5c06\u4f1apanic NumIn () int // \u8fd4\u56defunc\u7c7b\u578b\u7684\u8fd4\u56de\u503c\u4e2a\u6570\uff0c\u5982\u679c\u4e0d\u662f\u51fd\u6570\uff0c\u5c06\u4f1apanic NumOut () int // \u8fd4\u56defunc\u7c7b\u578b\u7684\u7b2ci\u4e2a\u53c2\u6570\u7684\u7c7b\u578b\uff0c\u5982\u975e\u51fd\u6570\u6216\u8005i\u4e0d\u5728[0, NumIn())\u5185\u5c06\u4f1apanic In ( i int ) Type // \u8fd4\u56defunc\u7c7b\u578b\u7684\u7b2ci\u4e2a\u8fd4\u56de\u503c\u7684\u7c7b\u578b\uff0c\u5982\u975e\u51fd\u6570\u6216\u8005i\u4e0d\u5728[0, NumOut())\u5185\u5c06\u4f1apanic Out ( i int ) Type } Kind \u6709 slice\u3001map\u3001ptr\u3001struct\u3001interface\u3001string\u3001Array\u3001Funtcion\u3001int \u6216\u5176\u4ed6\u57fa\u672c\u7c7b\u578b\u7ec4\u6210\u3002 Kind \u548c Type \u4e4b\u95f4\u8981\u505a\u597d\u533a\u5206\u3002 \u5982\uff1a\u5728 main() \u4e2d\u5b9a\u4e49 type Person struct {} \uff0c\u90a3\u4e48 Kind \u5c31\u662f struct \uff0c Type \u5c31\u662f main.Person \u3002 type Person struct { name string age int } func main () { pers := person { \"Boii\" , 18 } t := reflect . TypeOf ( pers ) v := reflect . ValueOf ( pers ) fmt . Println ( v ) // {Boii 18} fmt . Println ( t ) // main.person fmt . Println ( t . Name ()) // person fmt . Println ( t . Kind ()) // struct }","title":"reflect.Type"},{"location":"Go/Adavanced/Golang-19-reflect/#reflectvalue","text":"// \u7c7b\u578b\u76f8\u5173 func ( v Value ) Addr () Value func ( v Value ) Bool () bool func ( v Value ) Bytes () [] byte func ( v Value ) Complex () complex128 func ( v Value ) Int () int64 func ( v Value ) Slice ( i , j int ) Value func ( v Value ) Slice3 ( i , j , k int ) Value func ( v Value ) String () string func ( v Value ) Uint () uint64 func ( v Value ) Pointer () uintptr func ( v Value ) UnsafeAddr () uintptr func ( v Value ) Kind () Kind func ( v Value ) Type () Type func ( v Value ) InterfaceData () [ 2 ] uintptr // \u51fd\u6570\u76f8\u5173 func ( v Value ) Call ( in [] Value ) [] Value func ( v Value ) CallSlice ( in [] Value ) [] Value // \u5224\u65ad\u76f8\u5173 func ( v Value ) CanAddr () bool func ( v Value ) CanInterface () bool func ( v Value ) CanSet () bool func ( v Value ) IsNil () bool func ( v Value ) IsValid () bool func ( v Value ) IsZero () bool func ( v Value ) OverflowComplex ( x complex128 ) bool func ( v Value ) OverflowFloat ( x float64 ) bool func ( v Value ) OverflowInt ( x int64 ) bool func ( v Value ) OverflowUint ( x uint64 ) bool // \u8f6c\u6362\u76f8\u5173 func ( v Value ) Convert ( t Type ) Value func ( v Value ) Interface () ( i interface {}) func ( v Value ) Elem () Value // struct \u76f8\u5173 func ( v Value ) NumField () int func ( v Value ) NumMethod () int func ( v Value ) Field ( i int ) Value func ( v Value ) FieldByIndex ( index [] int ) Value func ( v Value ) FieldByName ( name string ) Value func ( v Value ) FieldByNameFunc ( match func ( string ) bool ) Value func ( v Value ) Method ( i int ) Value func ( v Value ) MethodByName ( name string ) Value // Array\u3001Slice \u76f8\u5173 func ( v Value ) Index ( i int ) Value // Map \u76f8\u5173 func ( v Value ) MapIndex ( key Value ) Value func ( v Value ) MapKeys () [] Value func ( v Value ) MapRange () * MapIter // Array\u3001Slice\u3001Map \u76f8\u5173 func ( v Value ) Cap () int func ( v Value ) Len () int // \u901a\u9053\u76f8\u5173 func ( v Value ) Recv () ( x Value , ok bool ) func ( v Value ) Send ( x Value ) func ( v Value ) TryRecv () ( x Value , ok bool ) func ( v Value ) TrySend ( x Value ) bool func ( v Value ) Close () // \u6539\u503c\u76f8\u5173 func ( v Value ) Set ( x Value ) func ( v Value ) SetBool ( x bool ) func ( v Value ) SetBytes ( x [] byte ) func ( v Value ) SetCap ( n int ) func ( v Value ) SetComplex ( x complex128 ) func ( v Value ) SetFloat ( x float64 ) func ( v Value ) SetInt ( x int64 ) func ( v Value ) SetLen ( n int ) func ( v Value ) SetMapIndex ( key , elem Value ) func ( v Value ) SetPointer ( x unsafe . Pointer ) func ( v Value ) SetString ( x string ) func ( v Value ) SetUint ( x uint64 ) reflect \u4e2d\u7684\u7ed3\u6784\u4f53\u4e3b\u8981\u5305\u62ec\uff1a Type\uff0cValue\uff0cChanDir\uff0cKind\uff0cMapIter\uff0cMethod\uff0cSelectCase\uff0cSelectDir\uff0cSliceHeader\uff0cStringHeader\uff0cStructField\uff0cStructTag\uff0cValueError \u7b49\u3002\u5176\u4e2d\uff0cType \u548c Value \u4e4b\u524d\u5df2\u7ecf\u4ecb\u7ecd\u8fc7\u4e86\u3002 ChanDir \uff1a\u7ba1\u9053\u7684\u65b9\u5411\uff0c\u6709\u4e09\u4e2a\u503c\uff1a RecvDir / SendDir / BothDir \uff0c\u5206\u522b\u4e3a \u63a5\u53d7\uff0c\u53d1\u9001\uff0c\u53cc\u5411 \uff1b Kind \uff1aType\u4e2d\u7684\u7c7b\u578b\u4fe1\u606f\uff0c\u5305\u62ec\uff1aInvalid, Bool, Int, Int8, Int16, Int32, Int64, Uint, Uint8, Uint16, Uint32, Uint64, Uintptr, Float32, Float64, Complex64, Complex128, Array, Chan, Func, Interface, Map, Ptr, Slice, String, Struct, UnsafePointer\uff0c MapIter \uff1aMap\u7684\u8fed\u4ee3\u5668\uff0c\u5305\u62ec\u4e09\u4e2a\u65b9\u6cd5\uff1a Key\u3001Value\u3001Next \uff1b Method \uff1a\u63cf\u8ff0\u65b9\u6cd5\u7684\u4fe1\u606f\uff0c\u5305\u62ec\uff1a \u65b9\u6cd5\u540d\uff0c\u5305\u8def\u5f84\uff0c\u7c7b\u578b\uff0c\u51fd\u6570\uff0c\u6240\u5904\u7684\u4e0b\u6807 \uff1b SelectCase \uff1a\u63cf\u8ff0select \u64cd\u4f5c\u7684\u4fe1\u606f\uff0c case\u7684\u65b9\u5411SelectDir\uff0c\u4f7f\u7528\u7684Channel\uff0c\u53d1\u9001\u7684\u503cSend \uff1b SelectDir \uff1a\u63cf\u8ff0SelectCase\u4e2d\u7684\u65b9\u5411\uff0c\u6709\u4e09\u4e2a\u503c\uff1a SelectSend / SelectRecv / SelectDefault SliceHeader \uff1a\u63cf\u8ff0\u5207\u7247Slice\u7684\u4fe1\u606f\uff0c\u5305\u62ec**\u6307\u9488\uff0c\u957f\u5ea6\uff0c\u5bb9\u91cf**\uff1b StringHeader \uff1a\u63cf\u8ff0\u5b57\u7b26\u4e32string\u7684\u4fe1\u606f\uff0c\u5305\u62ec**\u6307\u9488\uff0c\u957f\u5ea6**\uff1b StructField \uff1a\u63cf\u8ff0\u7ed3\u6784\u4f53\u4e2d\u7684\u57dffield\u4e2d\u7684\u4fe1\u606f\uff0c\u5305\u62ec\uff1a \u57df\u540d\uff0c\u5305\u8def\u5f84\uff0c\u7c7b\u578b\uff0c\u6807\u7b7eTag\uff0c\u5728\u7ed3\u6784\u4f53\u4e2d\u7684\u504f\u79fb\u91cfoffset\uff0cType.FieldByIndex\u4e2d\u7684\u4e0b\u6807index\uff0c\u662f\u5426\u662f\u533f\u540d \uff1b StructTag \uff1a\u63cf\u8ff0\u6807\u7b7e\u4fe1\u606f\uff0c\u6709\u4e24\u4e2a\u65b9\u6cd5\uff1a Get\u3001Lookup \uff1b ValueError \uff1a\u5728\u8c03\u7528\u4e00\u4e2aValue\u4e0d\u652f\u6301\u7684\u65b9\u6cd5\u65f6\u4f1a\u62a5\u9519\uff0c\u5e76\u8bb0\u5f55\u5230ValueError\u4e2d\u3002","title":"reflect.Value"},{"location":"Go/Adavanced/Golang-19-reflect/#api","text":"\u4e0a\u56fe\u5f88\u597d\u7684\u6982\u62ec\u4e86 \u6240\u6709\u7684API Type \u8868\u793a reflect \u7684 Type \u7c7b\u578b\uff1a reflect.Type Value \u8868\u793a reflect \u7684 Value \u7c7b\u578b\uff1a reflect.Value interface{} \u8868\u793a\u63a5\u53e3\u5b9e\u4f8b\u3001\u4efb\u610f\u7c7b\u578b Special Type \u8868\u793a\u5176\u4ed6\u7279\u6b8a\u7c7b\u578b Type -> Value \uff1a\u901a\u8fc7 reflect \u5305\u7684\u9759\u6001\u65b9\u6cd5 New()\u3001NewAt()\u3001Zero() Value -> Type \uff1a\u901a\u8fc7 reflect\u5bf9\u8c61 \u7684 Type() \u65b9\u6cd5 interface{} -> Type \uff1a\u901a\u8fc7 reflect \u5305\u7684\u9759\u6001\u65b9\u6cd5 TypeOf() interface{} -> Value \uff1a\u901a\u8fc7 reflect \u5305\u7684\u9759\u6001\u65b9\u6cd5 ValueOf() Value -> interface{} \uff1a\u901a\u8fc7 reflect\u5bf9\u8c61 \u7684 Interface() \u65b9\u6cd5\uff0c\u5f97\u5230\u662f\u4e00\u4e2a\u9759\u6001\u7c7b\u578b","title":"\u53cd\u5c04API"},{"location":"Go/Adavanced/Golang-19-reflect/#type","text":"{% noteblock info %} interface{} -> Type \uff1a\u901a\u8fc7 reflect \u5305\u7684\u9759\u6001\u65b9\u6cd5 TypeOf() func TypeOf ( i interface {}) Type {% endnoteblock %} eg\uff1a var x int = 10 t := reflect . TypeOf ( x ) fmt . Printf ( \"t\u7684\u503c\uff1a%v \\n\" , t ) // int fmt . Printf ( \"t\u7684\u7c7b\u578b\uff1a%T \\n\" , t ) // *reflect.rtype","title":"\u4ece \u63a5\u53e3\u5b9e\u4f8b \u83b7\u53d6 Type"},{"location":"Go/Adavanced/Golang-19-reflect/#value","text":"{% noteblock info %} interface{} -> Value \uff1a\u901a\u8fc7 reflect \u5305\u7684\u9759\u6001\u65b9\u6cd5 ValueOf() func ValueOf ( i interface {}) Value {% endnoteblock %} eg\uff1a var x int = 10 v := reflect . ValueOf ( x ) fmt . Printf ( \"t\u7684\u503c\uff1a%v \\n\" , v ) // 10 fmt . Printf ( \"t\u7684\u7c7b\u578b\uff1a%T \\n\" , v ) // reflect.Value","title":"\u4ece \u63a5\u53e3\u5b9e\u4f8b \u83b7\u53d6 Value"},{"location":"Go/Adavanced/Golang-19-reflect/#type-value","text":"{% noteblock info %} Type -> Value \uff1a\u901a\u8fc7 reflect \u5305\u7684\u9759\u6001\u65b9\u6cd5 New()\u3001NewAt()\u3001Zero() Type \u91cc\u9762\u53ea\u6709\u7c7b\u578b\u4fe1\u606f\uff0c\u6240\u4ee5\u76f4\u63a5\u4ece\u4e00\u4e2a Type \u63a5\u53e3\u53d8\u91cf\u91cc\u9762\u662f\u65e0\u6cd5\u83b7\u5f97\u5b9e\u4f8b\u7684 Value \u7684\uff0c\u4f46\u53ef\u4ee5\u901a\u8fc7\u8be5 Type \u6784\u5efa\u4e00\u4e2a\u65b0\u5b9e\u4f8b\u7684 Value\u3002 //New \u8fd4\u56de\u7684\u662f\u4e00\u4e2a Value\uff0c\u8be5 Value \u7684 type \u4e3a PtrTo(typ)\uff0c\u5373 Value \u7684 Type \u662f\u6307\u5b9a typ \u7684\u6307\u9488\u7c7b\u578b func New ( typ Type ) Value //Zero \u8fd4\u56de\u7684\u662f\u4e00\u4e2a typ \u7c7b\u578b\u7684\u96f6\u4f73\uff0c\u6ce8\u610f\u8fd4\u56de\u7684 Value \u4e0d\u80fd\u5bfb\u5740\uff0c\u4f4d\u4e0d\u53ef\u6539\u53d8 func Zero ( typ Type ) Value \u5982\u679c\u77e5\u9053\u4e00\u4e2a\u7c7b\u578b\u503c\u7684\u5e95\u5c42\u5b58\u653e\u5730\u5740\uff0c\u5219\u8fd8\u6709\u4e00\u4e2a\u51fd\u6570\u662f\u53ef\u4ee5\u4f9d\u636e type \u548c\u8be5\u5730\u5740\u503c\u6062\u590d\u51fa Value \u7684\uff1a func NewAt ( typ Type , p unsafe . Pointer ) Value {% endnoteblock %} var x int = 10 t := reflect . TypeOf ( x ) newX := reflect . New ( t ) // Type -> Value zeroX := reflect . Zero ( t ) // Type -> Value fmt . Println ( newX ) // 0xc000012090 fmt . Printf ( \"%v \\n\" , newX ) // 0xc000012090 fmt . Printf ( \"%T \\n\" , newX ) // reflect.Value fmt . Println ( zeroX ) // 0 fmt . Printf ( \"%v \\n\" , zeroX ) // 0 fmt . Printf ( \"%T \\n\" , zeroX ) // reflect.Value","title":"\u4ece Type \u83b7\u53d6 Value"},{"location":"Go/Adavanced/Golang-19-reflect/#value-type","text":"{% noteblock info %} Value -> Type \uff1a\u901a\u8fc7 reflect\u5bf9\u8c61 \u7684 Type() \u65b9\u6cd5 func ( v Value ) Type () Type {% endnoteblock %} eg\uff1a var x int = 10 v := reflect . ValueOf ( x ) t := v . Type () // value -> type fmt . Printf ( \"t\u7684\u503c\uff1a%v \\n\" , t ) // int fmt . Printf ( \"t\u7684\u7c7b\u578b\uff1a%T \\n\" , t ) // *reflect.rtype","title":"\u4ece Value \u83b7\u53d6 Type"},{"location":"Go/Adavanced/Golang-19-reflect/#value_1","text":"{% noteblock info %} Value -> interface{} \uff1a\u901a\u8fc7 reflect\u5bf9\u8c61 \u7684 Interface() \u65b9\u6cd5\uff0c\u5f97\u5230\u662f\u4e00\u4e2a\u9759\u6001\u7c7b\u578b //\u8be5\u65b9\u6cd5\u6700\u901a\u7528\uff0c\u7528\u6765\u5c06 Value \u8f6c\u6362\u4e3a\u7a7a\u63a5\u53e3\uff0c\u8be5\u7a7a\u63a5\u53e3\u5185\u90e8\u5b58\u653e\u5177\u4f53\u7c7b\u578b\u5b9e\u4f8b //\u53ef\u4ee5\u4f7f\u7528\u63a5\u53e3\u7c7b\u578b\u67e5\u8be2\u53bb\u8fd8\u539f\u4e3a\u5177\u4f53\u7684\u7c7b\u578b func ( v Value ) Interface () \uff08 i interface {}) //Value \u81ea\u8eab\u4e5f\u63d0\u4f9b\u4e30\u5bcc\u7684\u65b9\u6cd5\uff0c\u76f4\u63a5\u5c06 Value \u8f6c\u6362\u4e3a\u7b80\u5355\u7c7b\u578b\u5b9e\u4f8b\uff0c\u5982\u679c\u7c7b\u578b\u4e0d\u5339\u914d\uff0c\u5219\u76f4\u63a5\u5f15\u8d77 panic func ( v Value ) Bool () bool func ( v Value ) Float () float64 func ( v Value ) Int () int64 func ( v Value ) Uint () uint64 {% endnoteblock %} eg1\uff1a var x int = 10 v := reflect . ValueOf ( x ) iInt := v . Interface () vType := iInt .( int ) vInt := v . Int () fmt . Println ( iInt ) // 10 fmt . Printf ( \"%T \\n\" , iInt ) // int fmt . Println ( vType ) // 10 fmt . Printf ( \"%T \\n\" , vType ) // int fmt . Println ( vInt ) // 10 fmt . Printf ( \"%T \\n\" , vInt ) // int64 eg2\uff1a package main import ( \"fmt\" \"reflect\" ) func main () { var x float64 = 1.23 t := reflect . TypeOf ( x ) // \u83b7\u5f97 reflect.Type \u5bf9\u8c61 v := reflect . ValueOf ( x ) // \u83b7\u5f97 reflect.Value \u5bf9\u8c61 fmt . Println ( t ) // float64 fmt . Println ( v ) // 1.23 fmt . Println ( v . Kind ()) // float64 fmt . Println ( v . Type ()) // float64 /* value \u5230 type */ fmt . Println ( v . Float ()) // 1.23 /* value \u5230 \u5b9e\u4f8b */ /* value \u5230 \u5b9e\u4f8b */ v = reflect . ValueOf ( x ) // \u63a5\u53e3\u7c7b\u578b\u53d8\u91cf -> \u53cd\u5c04\u7c7b\u578b\u5bf9\u8c61 convertV := v . Interface ().( float64 ) // \u53cd\u5c04\u7c7b\u578b\u5bf9\u8c61 -> \u63a5\u53e3\u7c7b\u578b\u53d8\u91cf, \u53ef\u4ee5\u7406\u89e3\u4e3a \u5f3a\u5236\u8f6c\u6362 fmt . Println ( convertV ) // 1.23 p := reflect . ValueOf ( & x ) convertP := p . Interface ().( * float64 ) fmt . Println ( convertP ) // 0xc000012090 }","title":"\u4ece Value \u83b7\u53d6 \u63a5\u53e3\u5b9e\u4f8b"},{"location":"Go/Adavanced/Golang-19-reflect/#_4","text":"\u6307\u9488 -> \u503c \uff1a t.Elem() \uff0ct \u53ea\u53ef\u4ee5\u662f\u5f15\u7528\u7c7b\u578b \u6307\u9488 -> \u503c \uff1a v.Elem() \uff0cv \u53ea\u53ef\u4ee5\u662f\u6307\u9488 // t \u5fc5\u987b\u662f Array\u3001Chan\u3001Map\u3001Ptr\u3001Slice\uff0c\u5426\u5219\u4f1a\u5f15\u8d77 panic // Elem \u8fd4\u56de\u7684\u662f\u5176\u5185\u90e8\u5143\u7d20\u7684 Type func ( t * rtype ) Elem () Type eg\uff1a func main () { var x int = 10 var s [] int = [] int { 10 , 20 , 30 } // TypeOf\uff1a\u53ea\u63a5\u53d7\u5f15\u7528\u7c7b\u578b t1 := reflect . TypeOf ( s ) te1 := t1 . Elem () fmt . Println ( te1 ) // int fmt . Printf ( \"%T \\n\" , te1 ) // *reflect.rtype t2 := reflect . TypeOf ( & s ) te2 := t2 . Elem () fmt . Println ( te2 ) // []int fmt . Printf ( \"%T \\n\" , te2 ) // *reflect.rtype t3 := reflect . TypeOf ( x ) te3 := t3 . Elem () // panic: reflect: Elem of invalid type int t4 := reflect . TypeOf ( & x ) te4 := t4 . Elem () fmt . Println ( te4 ) // int fmt . Printf ( \"%T \\n\" , te4 ) // *reflect.rtype // ValueOf\uff1a\u53ea\u63a5\u53d7prt\u7c7b\u578b v1 := reflect . ValueOf ( s ) ve1 := v1 . Elem () // panic: reflect: call of reflect.Value.Elem on slice Value v2 := reflect . ValueOf ( & s ) ve2 := v2 . Elem () fmt . Println ( ve2 ) // [10 20 30] fmt . Printf ( \"%T \\n\" , ve2 ) // reflect.Value v3 := reflect . ValueOf ( x ) ve3 := v3 . Elem () // panic: reflect: call of reflect.Value.Elem on int Value v4 := reflect . ValueOf ( & x ) ve4 := v4 . Elem () fmt . Println ( ve4 ) // 10 fmt . Printf ( \"%T \\n\" , ve4 ) // reflect.Value } \u503c -> \u6307\u9488 \uff1a PtrTo(t) // PtrTo \u8fd4\u56de\u7684\u662f\u6307\u5411 t \u7684\u6307\u9488\u578b Type func PtrTo ( t Type ) Type eg\uff1a func main () { var x int = 10 var s [] int = [] int { 10 , 20 , 30 } xt := reflect . TypeOf ( x ) st := reflect . TypeOf ( s ) px := reflect . PtrTo ( xt ) ps := reflect . PtrTo ( st ) fmt . Println ( px ) // *int fmt . Println ( ps ) // *[]int }","title":"\u6307\u9488\u7c7b\u578b \u4e0e \u503c\u7c7b\u578b\u7684\u8f6c\u6362"},{"location":"Go/Adavanced/Golang-19-reflect/#value_2","text":"//\u901a\u8fc7 CanSet \u5224\u65ad\u662f\u5426\u80fd\u4fee\u6539 func ( v Value ) CanSet () bool {} //\u901a\u8fc7 Set \u8fdb\u884c\u4fee\u6539 func ( v Value ) Set ( x Value ) {} func ( v Value ) SetBool ( x bool ) {} func ( v Value ) SetBytes ( x [] byte ) {} func ( v Value ) SetCap ( n int ) {} func ( v Value ) SetComplex ( x complex128 ) {} func ( v Value ) SetFloat ( x float64 ) {} func ( v Value ) SetInt ( x int64 ) {} func ( v Value ) SetLen ( n int ) {} func ( v Value ) SetMapIndex ( key , elem Value ) {} func ( v Value ) SetPointer ( x unsafe . Pointer ) {} func ( v Value ) SetString ( x string ) {} func ( v Value ) SetUint ( x uint64 ) {} eg\uff1a func main () { var x int = 10 var s [] int = [] int { 10 , 20 , 30 } vpx := reflect . ValueOf ( & x ) vepx := vpx . Elem () if vepx . CanSet () == true { // CanSet \u5224\u65ad vepx . SetInt ( 20 ) // Set \u8bbe\u7f6e } fmt . Println ( x ) // 20 vps := reflect . ValueOf ( & s ) veps := vps . Elem () if veps . CanSet () == true { // CanSet \u5224\u65ad veps . Index ( 1 ). SetInt ( 345 ) // Index \u83b7\u53d6\u5143\u7d20\uff0c\u7136\u540e\u8bbe\u7f6e } fmt . Println ( s ) // [10 345 30] }","title":"Value \u7684\u53ef\u4fee\u6539\u6027"},{"location":"Go/Adavanced/Golang-19-reflect/#_5","text":"\u7ed3\u6784\u4f53\u76f8\u6bd4\u57fa\u672c\u7c7b\u578b\u7a0d\u5fae\u591a\u4e00\u70b9\u6b65\u9aa4\u3002 \u7b2c\u4e00\u6b65\uff0c\u4f20\u5165\u7ed3\u6784\u4f53\u6307\u9488\uff0c\u83b7\u53d6\u53ef\u4fee\u6539\u7684 reflect \u5bf9\u8c61 \u7b2c\u4e8c\u6b65\uff0c\u4f7f\u7528 Elem() \u83b7\u5f97\u5b57\u6bb5\u5217\u8868 \u7b2c\u4e09\u6b65\uff0c\u4f7f\u7528 Field() \u7cfb\u5217\u65b9\u6cd5 \u6216 Method() \u7cfb\u5217\u65b9\u6cd5\uff0c\u83b7\u5f97\u6307\u5b9a\u5b57\u6bb5\u6216\u65b9\u6cd5 \u7b2c\u56db\u6b65\uff0c\u4f7f\u7528 Set() \u7cfb\u5217\u65b9\u6cd5\u4fee\u6539\u6570\u503c \u6216 \u4f7f\u7528 Call() \u8c03\u7528\u7ed3\u6784\u4f53\u65b9\u6cd5 \u7ed3\u6784\u4f53\u7684 Type \u662f main.person \u7ed3\u6784\u4f53\u7684 Kind \u662f struct \u7ed3\u6784\u4f53\u7684 Name \u662f person NumField() \u53ef\u4ee5\u83b7\u5f97\u7ed3\u6784\u4f53\u5b57\u6bb5\u7684\u6570\u91cf NumMethod() \u53ef\u4ee5\u83b7\u5f97\u7ed3\u6784\u4f53\u65b9\u6cd5\u7684\u6570\u91cf\uff0c\u4f46\u53ea\u80fd\u83b7\u53d6 public \u65b9\u6cd5 Field(idx) \u53ef\u4ee5\u901a\u8fc7\u4e0b\u6807\u83b7\u5f97\u6307\u5b9a\u7684\u5b57\u6bb5 FieldByName(fieldName) \u53ef\u4ee5\u901a\u8fc7\u5b57\u6bb5\u540d\u5b57\u83b7\u5f97\u6307\u5b9a\u7684\u5b57\u6bb5 Method(idx) \u53ef\u4ee5\u901a\u8fc7\u4e0b\u6807\u83b7\u5f97\u6307\u5b9a\u7684\u65b9\u6cd5 MethodByName(methodName) \u53ef\u4ee5\u901a\u8fc7\u65b9\u6cd5\u540d\u83b7\u5f97\u6307\u5b9a\u7684\u65b9\u6cd5 NumIn() \u53ef\u4ee5\u83b7\u5f97\u53c2\u6570\u4e2a\u6570 NumOut() \u53ef\u4ee5\u83b7\u5f97\u8fd4\u56de\u503c\u4e2a\u6570","title":"\u53cd\u5c04\u7ed3\u6784\u4f53"},{"location":"Go/Adavanced/Golang-19-reflect/#_6","text":"eg\uff1a\u8bbf\u95ee\u7ed3\u6784\u4f53\u7684\u5b57\u6bb5\u548c\u65b9\u6cd5 package main import ( \"fmt\" \"reflect\" ) type person struct { name string Age int } func ( p person ) Eat () { fmt . Println ( \"eat\" ) } func ( p person ) Run () { fmt . Println ( \"run\" ) } func ( p person ) gogogo () { fmt . Println ( \"go\" ) } func main () { pers := person { \"Boii\" , 18 } t := reflect . TypeOf ( pers ) v := reflect . ValueOf ( pers ) fmt . Println ( v ) // {Boii 18} fmt . Println ( t ) // main.person fmt . Println ( t . Name ()) // person fmt . Println ( t . Kind ()) // struct // \u83b7\u53d6\u5b57\u6bb5 // { Name PkgPath Type Tag Offset Index Anonymous} // { name main string 0 [0] false} // { Age main int 16 [1] false} for i := 0 ; i < t . NumField (); i ++ { field := t . Field ( i ) value := v . Field ( i ) fmt . Printf ( \"\u5b57\u6bb5\u540d\u79f0: %s\\t\u5b57\u6bb5\u7c7b\u578b: %s\\t\u5b57\u6bb5\u6570\u503c: %v\\n\" , field . Name , field . Type , value ) } // \u5b57\u6bb5\u540d\u79f0: name \u5b57\u6bb5\u7c7b\u578b: string \u5b57\u6bb5\u6570\u503c: Boii // \u5b57\u6bb5\u540d\u79f0: Age \u5b57\u6bb5\u7c7b\u578b: int \u5b57\u6bb5\u6570\u503c: 18 for i := 0 ; i < v . NumField (); i ++ { fmt . Println ( v . Field ( i )) // Boii // 18 } // \u83b7\u53d6\u65b9\u6cd5\uff0ct.NumMethod() \u53ea\u80fd\u83b7\u53d6\u5230 public \u65b9\u6cd5 // {Name PkgPath Type Func Index} // {Eat func(main.person, string) <func(main.person, string) Value> 0} // {Run func(main.person) <func(main.person) Value> 1} for i := 0 ; i < t . NumMethod (); i ++ { method := t . Method ( i ) fmt . Printf ( \"\u65b9\u6cd5\u540d\u79f0: %s\\t\u65b9\u6cd5\u7c7b\u578b: %v\\n\" , method . Name , method . Type ) } // \u65b9\u6cd5\u540d\u79f0: Eat \u65b9\u6cd5\u7c7b\u578b: func(main.person) // \u65b9\u6cd5\u540d\u79f0: Run \u65b9\u6cd5\u7c7b\u578b: func(main.person) for i := 0 ; i < v . NumMethod (); i ++ { fmt . Println ( v . Method ( i )) // 0x433600 // 0x433600 } }","title":"\u8bbf\u95ee\u64cd\u4f5c"},{"location":"Go/Adavanced/Golang-19-reflect/#_7","text":"\u5982\u679c\u60f3\u8981\u5bf9\u7ed3\u6784\u4f53\u7684\u5b57\u6bb5\u7b49\u8fdb\u884c\u4fee\u6539\uff0c\u9700\u8981\u4f20\u5165\u7ed3\u6784\u4f53\u6307\u9488\u6765\u83b7\u5f97 reflect \u5bf9\u8c61\u3002 package main import ( \"fmt\" \"reflect\" ) type person struct { name string Age int } func ( p person ) Eat ( food string ) { fmt . Println ( \"eat\" , food ) } func ( p person ) Run () { fmt . Println ( \"run\" ) } func ( p person ) go () { fmt . Println ( \"go\" ) } func main () { pers := person { \"Boii\" , 18 } v := reflect . ValueOf ( & pers ). Elem () // panic: reflect: reflect.Value.SetString using value obtained using unexported field v . FieldByName ( \"name\" ). SetString ( \"Eva\" ) // \u4f20\u5165\u7ed3\u6784\u4f53\u6307\u9488\u4ee5\u540e\uff0cField \u53ea\u80fd\u8bbf\u95ee\u5230 public \u5b57\u6bb5 v . Field ( 1 ). SetInt ( 20 ) fmt . Println ( pers ) // {Boii 20} // \u8c03\u7528\u6709\u53c2\u65b9\u6cd5 v . Method ( 0 ). Call ([] reflect . Value { reflect . ValueOf ( \"apple\" )}) // eat apple // \u8c03\u7528\u65e0\u53c2\u65b9\u6cd5 v . Method ( 1 ). Call ( nil ) // run v . Method ( 1 ). Call ( make ([] reflect . Value , 0 )) // run } \u901a\u8fc7\u7ed3\u6784\u4f53\u6307\u9488\u83b7\u5f97\u7684 reflect \u5bf9\u8c61\uff0c\u8981\u6ce8\u610f3\u70b9 1. \u9700\u8981 Elem() \u65b9\u6cd5\u83b7\u53d6\u5230\u5143\u7d20\u5217\u8868 2. \u53ea\u80fd\u8bbf\u95ee\u5230 public \u7684 \u5b57\u6bb5\u548c\u65b9\u6cd5 \u901a\u8fc7 Call() \u53ef\u4ee5\u8c03\u7528\u7ed3\u6784\u4f53\u7684\u65b9\u6cd5\uff0c \u5982\u679c\u65e0\u53c2\uff0c\u53ef\u4ee5\u4f20\u5165 nil \u6216\u8005\u7a7a\u5207\u7247 \u5982\u679c\u6709\u53c2\uff0c\u9700\u4f20\u5165Value\u5207\u7247 []reflect.Value //\u6ca1\u6709\u53c2\u6570\uff0c\u76f4\u63a5\u5199nil . Call ( nil ) // \u6216\u8005 args1 := make ([] reflect . Value , 0 ) . Call ( args1 ) // \u6709\u53c2\u6570 args2 := [] reflect . Value { reflect . ValueOf ( \"\u53cd\u5c04\u673a\u5236\" ), reflect . ValueOf ( 100 ), ... } . Call ( args2 )","title":"\u4fee\u6539\u64cd\u4f5c"},{"location":"Go/Adavanced/Golang-19-reflect/#_8","text":"\u53cd\u5c04\u8c03\u7528\u51fd\u6570\u548c \u8c03\u7528\u65b9\u6cd5\u5176\u5b9e\u5dee\u4e0d\u591a\uff0c\u53ef\u4ee5\u901a\u8fc7\u51fd\u6570\u540d\u83b7\u5f97 reflect \u5bf9\u8c61\uff0c\u4f7f\u7528 Call() \u8c03\u7528 package main import ( \"fmt\" \"reflect\" ) func main () { //\u51fd\u6570\u7684\u53cd\u5c04 f1 := fun1 value := reflect . ValueOf ( f1 ) fmt . Printf ( \"Kind : %s , Type : %s\\n\" , value . Kind (), value . Type ()) //Kind : func , Type : func() value2 := reflect . ValueOf ( fun2 ) fmt . Printf ( \"Kind : %s , Type : %s\\n\" , value2 . Kind (), value2 . Type ()) //Kind : func , Type : func(int, string) //\u901a\u8fc7\u53cd\u5c04\u8c03\u7528\u51fd\u6570 value . Call ( nil ) args := [] reflect . Value { reflect . ValueOf ( 100 ), reflect . ValueOf ( \"hello\" )} value2 . Call ( args ) } func fun1 (){ fmt . Println ( \"\u6211\u662f\u51fd\u6570fun1()\uff0c\u65e0\u53c2\u7684\u3002\u3002\" ) } func fun2 ( i int , s string ){ fmt . Println ( \"\u6211\u662f\u51fd\u6570fun2()\uff0c\u6709\u53c2\u6570\u3002\u3002\" , i , s ) }","title":"\u53cd\u5c04\u8c03\u7528\u51fd\u6570"},{"location":"Go/Basic/Golang-0-%E6%80%BB%E5%8F%99/","text":"Go \u662f\u4e00\u95e8\u597d\u8bed\u8a00\u5417\uff1f 0-\u603b\u53d9 \u00b6 \u7279\u6027 \u00b6 \u7b80\u5316\u95ee\u9898\uff0c\u6613\u4e8e\u5b66\u4e60 \u5185\u5b58\u7ba1\u7406\uff0c\u7b80\u6d01\u8bed\u6cd5\uff0c\u6613\u4e8e\u4f7f\u7528 \u5feb\u901f\u7f16\u8bd1\uff0c\u9ad8\u6548\u5f00\u53d1 \u9ad8\u6548\u6267\u884c \u5e76\u53d1\u652f\u6301\uff0c\u8f7b\u677e\u9a7e\u9a6d \u9759\u6001\u7c7b\u578b \u6807\u51c6\u7c7b\u5e93\uff0c\u89c4\u8303\u7edf\u4e00 \u6613\u4e8e\u90e8\u7f72 \u6587\u6863\u5168\u9762 \u514d\u8d39\u5f00\u6e90 \u73af\u5883\u53d8\u91cf \u00b6 GOROOT \uff1aGo\u7684\u5b89\u88c5\u4f4d\u7f6e\uff0c\u9ed8\u8ba4 $HOME/go GOPATH \uff1a\u5de5\u4f5c\u76ee\u5f55\uff0c\u5728\u8fd9\u4e0b\u9762\u5199\u4ee3\u7801 GOBIN \uff1a\u7f16\u8bd1\u5668\u548c\u94fe\u63a5\u5668\u7684\u5b89\u88c5\u4f4d\u7f6e\uff0c\u9ed8\u8ba4 $GOROOT/bin GOOS \uff1a\u8fd0\u884cGo\u7684\u64cd\u4f5c\u7cfb\u7edf\uff1b \u53d6\u503c\uff1a[darwin | freebsd | linux | windows] GOARCH \uff1a\u8fd0\u884cGo\u7684\u5904\u7406\u5668\u67b6\u6784\uff1b \u53d6\u503c\uff1a[386 | amd64 | arm] GOARM \uff1a\u4e13\u95e8\u9488\u5bf9\u57fa\u4e8e arm \u67b6\u6784\u7684\u5904\u7406\u5668\uff0c\u9ed8\u8ba4\u4e3a 6\uff1b \u53d6\u503c\uff1a[5 | 6] Hello World \u00b6 // src/Hello/main.go package main // \u58f0\u660e mian \u5305\uff0c\u8868\u660e\u5f53\u524d\u662f\u4e00\u4e2a\u53ef\u6267\u884c\u7a0b\u5e8f import \"fmt\" // \u5bfc\u5165\u5185\u7f6e fmt \u5305 func main () { // main \u51fd\u6570\uff0c\u7a0b\u5e8f\u6267\u884c\u5165\u53e3 fmt . Println ( \"Hello World!\" ) // \u5728\u7ec8\u7aef\u6253\u5370 Hello World\uff01 } package main \u5b9a\u4e49\u4e86\u5305\u540d\u3002\u5fc5\u987b\u5728\u6e90\u6587\u4ef6\u4e2d\u975e\u6ce8\u91ca\u7684\u7b2c\u4e00\u884c\u6307\u660e\u8fd9\u4e2a\u6587\u4ef6\u5c5e\u4e8e\u54ea\u4e2a\u5305\uff0c\u5982\uff1apackage main\u3002 package main\u8868\u793a\u4e00\u4e2a\u53ef\u72ec\u7acb\u6267\u884c\u7684\u7a0b\u5e8f\uff0c \u6bcf\u4e2a Go \u5e94\u7528\u7a0b\u5e8f\u90fd\u5305\u542b\u4e00\u4e2a\u540d\u4e3a main \u7684\u5305 \u3002 import \"fmt\" \u544a\u8bc9 Go \u7f16\u8bd1\u5668\u8fd9\u4e2a\u7a0b\u5e8f\u9700\u8981\u4f7f\u7528 fmt \u5305\uff08\u7684\u51fd\u6570\uff0c\u6216\u5176\u4ed6\u5143\u7d20\uff09\uff0cfmt \u5305\u5b9e\u73b0\u4e86\u683c\u5f0f\u5316 IO\uff08\u8f93\u5165/\u8f93\u51fa\uff09\u7684\u51fd\u6570\u3002 func main() \u662f\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u7684\u51fd\u6570\u3002main \u51fd\u6570\u662f\u6bcf\u4e00\u4e2a\u53ef\u6267\u884c\u7a0b\u5e8f\u6240\u5fc5\u987b\u5305\u542b\u7684\uff0c\u4e00\u822c\u6765\u8bf4\u90fd\u662f\u5728\u542f\u52a8\u540e\u7b2c\u4e00\u4e2a\u6267\u884c\u7684\u51fd\u6570\uff08\u5982\u679c\u6709 init() \u51fd\u6570\u5219\u4f1a\u5148\u6267\u884c init() \u51fd\u6570\uff09\u3002 fmt.Println(...) \u53ef\u4ee5\u5c06\u5b57\u7b26\u4e32\u8f93\u51fa\u5230\u63a7\u5236\u53f0\uff0c\u5e76\u5728\u6700\u540e\u81ea\u52a8\u589e\u52a0\u6362\u884c\u5b57\u7b26 \\n\u3002\u4f7f\u7528 fmt.Print(\"hello, world\\n\") \u53ef\u4ee5\u5f97\u5230\u76f8\u540c\u7684\u7ed3\u679c\u3002 \u5728 Go \u4e2d\uff0c\u5de6\u5927\u62ec\u53f7\u4e0d\u80fd\u5355\u72ec\u4e00\u884c\uff0c\u8fd9\u4f1a\u7f16\u8bd1\u4e0d\u4e86 \u5bf9\u7f29\u8fdb\u6ca1\u6709\u8981\u6c42\uff0c\u53ef\u4ee5\u7528 go fmt \u6587\u4ef6\u540d.go \u547d\u4ee4\u5c06\u6587\u4ef6\u683c\u5f0f\u5316 \u6bcf\u4e2a\u8bed\u53e5\u72ec\u5360\u4e00\u884c\uff0c\u4e0d\u9700\u8981\u52a0\u5206\u53f7 \u5927\u90e8\u5206\u8bed\u53e5\u53ea\u80fd\u5199\u5728 {} \u5185\uff0c {} \u5916\u53ea\u80fd\u505a\u4e00\u4e9b\u58f0\u660e\u53d8\u91cf\u3001\u51fd\u6570\u3001\u7ed3\u6784\u4f53\u7684\u5de5\u4f5c\u3002 \u53d8\u91cf\u58f0\u660e\u4e86\u4e0d\u4f7f\u7528\u4e5f\u662f**\u4e0d\u5141\u8bb8**\u7684 \u8fd0\u884c \u00b6 \u5728\u6587\u4ef6\u76ee\u5f55\u4e0b\uff0c\u53ef\u4ee5\u8fd0\u884c go build \u547d\u4ee4\uff0c\u7f16\u8bd1\u4e4b\u540e\u4f1a\u5728\u76ee\u5f55\u4e0b\u751f\u6210\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6 Hello.exe \uff0c\u8f93\u5165\u6587\u4ef6\u540d\u5373\u53ef\u4ee5\u8fd0\u884c\u3002 $ go build $ ./Hello Hello World! \u5982\u679c\u4e0d\u5728\u6587\u4ef6\u76ee\u5f55\u4e0b\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 go build \u9879\u76ee\u540d\u79f0 \u547d\u4ee4\uff0c\u7f16\u8bd1\u4e4b\u540e\u4f1a\u5728\u6240\u5728\u76ee\u5f55\u4e0b\u751f\u6210\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6 Hello.exe \u3002 $ cd .. $ go build Hello $ ./Hello Hello World! \u4e5f\u53ef\u4ee5\u4f7f\u7528 -o \u53c2\u6570\u6765\u6307\u5b9a\u53ef\u6267\u884c\u6587\u4ef6\u7684\u540d\u5b57 $ go build -o haha.exe $ ./haha Hello World! \u8fd8\u53ef\u4ee5\u4f7f\u7528 go run \u6587\u4ef6\u540d.go \u547d\u4ee4\u6765\u6267\u884c\uff0c\u4f46\u4e0d\u4f1a\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6\u3002 $ cd src/Hello $ go run main.go Hello World! init \u51fd\u6570 \u00b6 \u6bcf\u4e2a\u6e90\u6587\u4ef6\u90fd\u53ea\u80fd\u5305\u542b\u4e00\u4e2a init \u51fd\u6570\u3002 \u5b83\u4e0d\u80fd\u88ab\u4eba\u4e3a\u8c03\u7528\uff0c\u800c\u662f\u5728\u6bcf\u4e2a\u5305\u5b8c\u6210\u521d\u59cb\u5316\u540e\u81ea\u52a8\u6267\u884c\uff0c\u5e76\u4e14\u6267\u884c\u4f18\u5148\u7ea7\u6bd4 main \u51fd\u6570\u9ad8\u3002 \u53ef\u4ee5\u5c06\u6570\u636e\u68c0\u9a8c\u6216\u4fee\u590d\u7684\u5de5\u4f5c\u653e\u5728 init\u51fd\u6570\u4e2d\uff0c\u8fd9\u6837\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u4e4b\u524d\u5c31\u4f1a\u5148\u4fee\u590d\u6216\u68c0\u9a8c\u6570\u636e\uff0c\u4fdd\u8bc1\u7a0b\u5e8f\u72b6\u6001\u6b63\u786e\u6027\u3002 package main import ( \"fmt\" \"math\" ) var Pi float64 func init () { Pi = 4 * math . Atan ( 1 ) fmt . Println ( \"init()\" ) } func main () { fmt . Println ( \"main()\" ) } \u8f93\u51fa\uff1a $ go run main.go init () main () $","title":"0.\u603b\u53d9"},{"location":"Go/Basic/Golang-0-%E6%80%BB%E5%8F%99/#0-","text":"","title":"0-\u603b\u53d9"},{"location":"Go/Basic/Golang-0-%E6%80%BB%E5%8F%99/#_1","text":"\u7b80\u5316\u95ee\u9898\uff0c\u6613\u4e8e\u5b66\u4e60 \u5185\u5b58\u7ba1\u7406\uff0c\u7b80\u6d01\u8bed\u6cd5\uff0c\u6613\u4e8e\u4f7f\u7528 \u5feb\u901f\u7f16\u8bd1\uff0c\u9ad8\u6548\u5f00\u53d1 \u9ad8\u6548\u6267\u884c \u5e76\u53d1\u652f\u6301\uff0c\u8f7b\u677e\u9a7e\u9a6d \u9759\u6001\u7c7b\u578b \u6807\u51c6\u7c7b\u5e93\uff0c\u89c4\u8303\u7edf\u4e00 \u6613\u4e8e\u90e8\u7f72 \u6587\u6863\u5168\u9762 \u514d\u8d39\u5f00\u6e90","title":"\u7279\u6027"},{"location":"Go/Basic/Golang-0-%E6%80%BB%E5%8F%99/#_2","text":"GOROOT \uff1aGo\u7684\u5b89\u88c5\u4f4d\u7f6e\uff0c\u9ed8\u8ba4 $HOME/go GOPATH \uff1a\u5de5\u4f5c\u76ee\u5f55\uff0c\u5728\u8fd9\u4e0b\u9762\u5199\u4ee3\u7801 GOBIN \uff1a\u7f16\u8bd1\u5668\u548c\u94fe\u63a5\u5668\u7684\u5b89\u88c5\u4f4d\u7f6e\uff0c\u9ed8\u8ba4 $GOROOT/bin GOOS \uff1a\u8fd0\u884cGo\u7684\u64cd\u4f5c\u7cfb\u7edf\uff1b \u53d6\u503c\uff1a[darwin | freebsd | linux | windows] GOARCH \uff1a\u8fd0\u884cGo\u7684\u5904\u7406\u5668\u67b6\u6784\uff1b \u53d6\u503c\uff1a[386 | amd64 | arm] GOARM \uff1a\u4e13\u95e8\u9488\u5bf9\u57fa\u4e8e arm \u67b6\u6784\u7684\u5904\u7406\u5668\uff0c\u9ed8\u8ba4\u4e3a 6\uff1b \u53d6\u503c\uff1a[5 | 6]","title":"\u73af\u5883\u53d8\u91cf"},{"location":"Go/Basic/Golang-0-%E6%80%BB%E5%8F%99/#hello-world","text":"// src/Hello/main.go package main // \u58f0\u660e mian \u5305\uff0c\u8868\u660e\u5f53\u524d\u662f\u4e00\u4e2a\u53ef\u6267\u884c\u7a0b\u5e8f import \"fmt\" // \u5bfc\u5165\u5185\u7f6e fmt \u5305 func main () { // main \u51fd\u6570\uff0c\u7a0b\u5e8f\u6267\u884c\u5165\u53e3 fmt . Println ( \"Hello World!\" ) // \u5728\u7ec8\u7aef\u6253\u5370 Hello World\uff01 } package main \u5b9a\u4e49\u4e86\u5305\u540d\u3002\u5fc5\u987b\u5728\u6e90\u6587\u4ef6\u4e2d\u975e\u6ce8\u91ca\u7684\u7b2c\u4e00\u884c\u6307\u660e\u8fd9\u4e2a\u6587\u4ef6\u5c5e\u4e8e\u54ea\u4e2a\u5305\uff0c\u5982\uff1apackage main\u3002 package main\u8868\u793a\u4e00\u4e2a\u53ef\u72ec\u7acb\u6267\u884c\u7684\u7a0b\u5e8f\uff0c \u6bcf\u4e2a Go \u5e94\u7528\u7a0b\u5e8f\u90fd\u5305\u542b\u4e00\u4e2a\u540d\u4e3a main \u7684\u5305 \u3002 import \"fmt\" \u544a\u8bc9 Go \u7f16\u8bd1\u5668\u8fd9\u4e2a\u7a0b\u5e8f\u9700\u8981\u4f7f\u7528 fmt \u5305\uff08\u7684\u51fd\u6570\uff0c\u6216\u5176\u4ed6\u5143\u7d20\uff09\uff0cfmt \u5305\u5b9e\u73b0\u4e86\u683c\u5f0f\u5316 IO\uff08\u8f93\u5165/\u8f93\u51fa\uff09\u7684\u51fd\u6570\u3002 func main() \u662f\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u7684\u51fd\u6570\u3002main \u51fd\u6570\u662f\u6bcf\u4e00\u4e2a\u53ef\u6267\u884c\u7a0b\u5e8f\u6240\u5fc5\u987b\u5305\u542b\u7684\uff0c\u4e00\u822c\u6765\u8bf4\u90fd\u662f\u5728\u542f\u52a8\u540e\u7b2c\u4e00\u4e2a\u6267\u884c\u7684\u51fd\u6570\uff08\u5982\u679c\u6709 init() \u51fd\u6570\u5219\u4f1a\u5148\u6267\u884c init() \u51fd\u6570\uff09\u3002 fmt.Println(...) \u53ef\u4ee5\u5c06\u5b57\u7b26\u4e32\u8f93\u51fa\u5230\u63a7\u5236\u53f0\uff0c\u5e76\u5728\u6700\u540e\u81ea\u52a8\u589e\u52a0\u6362\u884c\u5b57\u7b26 \\n\u3002\u4f7f\u7528 fmt.Print(\"hello, world\\n\") \u53ef\u4ee5\u5f97\u5230\u76f8\u540c\u7684\u7ed3\u679c\u3002 \u5728 Go \u4e2d\uff0c\u5de6\u5927\u62ec\u53f7\u4e0d\u80fd\u5355\u72ec\u4e00\u884c\uff0c\u8fd9\u4f1a\u7f16\u8bd1\u4e0d\u4e86 \u5bf9\u7f29\u8fdb\u6ca1\u6709\u8981\u6c42\uff0c\u53ef\u4ee5\u7528 go fmt \u6587\u4ef6\u540d.go \u547d\u4ee4\u5c06\u6587\u4ef6\u683c\u5f0f\u5316 \u6bcf\u4e2a\u8bed\u53e5\u72ec\u5360\u4e00\u884c\uff0c\u4e0d\u9700\u8981\u52a0\u5206\u53f7 \u5927\u90e8\u5206\u8bed\u53e5\u53ea\u80fd\u5199\u5728 {} \u5185\uff0c {} \u5916\u53ea\u80fd\u505a\u4e00\u4e9b\u58f0\u660e\u53d8\u91cf\u3001\u51fd\u6570\u3001\u7ed3\u6784\u4f53\u7684\u5de5\u4f5c\u3002 \u53d8\u91cf\u58f0\u660e\u4e86\u4e0d\u4f7f\u7528\u4e5f\u662f**\u4e0d\u5141\u8bb8**\u7684","title":"Hello World"},{"location":"Go/Basic/Golang-0-%E6%80%BB%E5%8F%99/#_3","text":"\u5728\u6587\u4ef6\u76ee\u5f55\u4e0b\uff0c\u53ef\u4ee5\u8fd0\u884c go build \u547d\u4ee4\uff0c\u7f16\u8bd1\u4e4b\u540e\u4f1a\u5728\u76ee\u5f55\u4e0b\u751f\u6210\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6 Hello.exe \uff0c\u8f93\u5165\u6587\u4ef6\u540d\u5373\u53ef\u4ee5\u8fd0\u884c\u3002 $ go build $ ./Hello Hello World! \u5982\u679c\u4e0d\u5728\u6587\u4ef6\u76ee\u5f55\u4e0b\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 go build \u9879\u76ee\u540d\u79f0 \u547d\u4ee4\uff0c\u7f16\u8bd1\u4e4b\u540e\u4f1a\u5728\u6240\u5728\u76ee\u5f55\u4e0b\u751f\u6210\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6 Hello.exe \u3002 $ cd .. $ go build Hello $ ./Hello Hello World! \u4e5f\u53ef\u4ee5\u4f7f\u7528 -o \u53c2\u6570\u6765\u6307\u5b9a\u53ef\u6267\u884c\u6587\u4ef6\u7684\u540d\u5b57 $ go build -o haha.exe $ ./haha Hello World! \u8fd8\u53ef\u4ee5\u4f7f\u7528 go run \u6587\u4ef6\u540d.go \u547d\u4ee4\u6765\u6267\u884c\uff0c\u4f46\u4e0d\u4f1a\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6\u3002 $ cd src/Hello $ go run main.go Hello World!","title":"\u8fd0\u884c"},{"location":"Go/Basic/Golang-0-%E6%80%BB%E5%8F%99/#init","text":"\u6bcf\u4e2a\u6e90\u6587\u4ef6\u90fd\u53ea\u80fd\u5305\u542b\u4e00\u4e2a init \u51fd\u6570\u3002 \u5b83\u4e0d\u80fd\u88ab\u4eba\u4e3a\u8c03\u7528\uff0c\u800c\u662f\u5728\u6bcf\u4e2a\u5305\u5b8c\u6210\u521d\u59cb\u5316\u540e\u81ea\u52a8\u6267\u884c\uff0c\u5e76\u4e14\u6267\u884c\u4f18\u5148\u7ea7\u6bd4 main \u51fd\u6570\u9ad8\u3002 \u53ef\u4ee5\u5c06\u6570\u636e\u68c0\u9a8c\u6216\u4fee\u590d\u7684\u5de5\u4f5c\u653e\u5728 init\u51fd\u6570\u4e2d\uff0c\u8fd9\u6837\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u4e4b\u524d\u5c31\u4f1a\u5148\u4fee\u590d\u6216\u68c0\u9a8c\u6570\u636e\uff0c\u4fdd\u8bc1\u7a0b\u5e8f\u72b6\u6001\u6b63\u786e\u6027\u3002 package main import ( \"fmt\" \"math\" ) var Pi float64 func init () { Pi = 4 * math . Atan ( 1 ) fmt . Println ( \"init()\" ) } func main () { fmt . Println ( \"main()\" ) } \u8f93\u51fa\uff1a $ go run main.go init () main () $","title":"init \u51fd\u6570"},{"location":"Go/Basic/Golang-1-%E5%9F%BA%E7%A1%80/","text":"\u57fa\u7840\u8bed\u6cd5 1-\u57fa\u7840 \u00b6 \u6807\u8bc6\u7b26 \u00b6 [ _ | A-Z | a-z | 0-9 ] \u4e0d\u80fd\u6570\u5b57\u5f00\u5934 \u4e0d\u80fd\u4e0e\u5173\u952e\u5b57\u548c\u4fdd\u7559\u5b57\u51b2\u7a81 \u5173\u952e\u5b57 \u00b6 Go \u4e2d\u670925\u4e2a\u5173\u952e\u5b57 break default func interface select case defer go map struct chan else goto package switch const fallthrough if range type continue for import return var 37\u4e2a\u4fdd\u7559\u5b57 Constants : true false iota nil Types : int int8 int16 int32 int64 uint uint8 uint16 uint32 uint64 uintptr float32 float64 complex128 complex64 bool byte rune string error Functions : make len cap new append copy close delete complex real imag panic recover \u53d8\u91cf \u00b6 \u58f0\u660e \u00b6 var \u53d8\u91cf\u540d \u53d8\u91cf\u7c7b\u578b \u53d8\u91cf\u58f0\u660e\u4ee5\u5173\u952e\u5b57 var \u5f00\u5934\uff0c\u7c7b\u578b\u653e\u5728\u540e\u9762\uff0c\u65e0\u9700\u5206\u53f7 var name string var age int var isEmpty bool \u6279\u91cf\u58f0\u660e \u00b6 \u6bcf\u4e2a\u53d8\u91cf\u5199\u4e00\u4e2a var \u592a\u9ebb\u70e6\uff0cgo \u652f\u6301\u6279\u91cf\u58f0\u660e var ( name string age int isEmpty bool ) var num1 , num2 , num3 int \u521d\u59cb\u5316 \u00b6 go \u58f0\u660e\u53d8\u91cf\u65f6\uff0c\u4f1a\u81ea\u52a8\u5bf9\u53d8\u91cf\u5bf9\u5e94\u7684\u5185\u5b58\u533a\u57df\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u6bcf\u4e2a\u53d8\u91cf\u90fd\u4f1a\u88ab\u521d\u59cb\u5316\u6210\u9ed8\u8ba4\u503c\u3002 eg\uff1a\u6574\u578b\u548c\u6d6e\u70b9\u578b\u53d8\u91cf\u9ed8\u8ba4\u503c\u662f 0 \uff0c\u5b57\u7b26\u4e32\u53d8\u91cf\u9ed8\u8ba4\u503c\u662f \u7a7a\u5b57\u7b26\u4e32 \uff0c\u5e03\u5c14\u7c7b\u578b\u53d8\u91cf\u9ed8\u8ba4\u503c\u662f false \uff0c\u5207\u7247\u3001\u51fd\u6570\u3001\u6307\u9488\u53d8\u91cf\u9ed8\u8ba4\u662f nil \u3002 \u540c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u58f0\u660e\u53d8\u91cf\u65f6\u4e3a\u5176\u6307\u5b9a\u521d\u59cb\u503c\uff0c\u683c\u5f0f\u5982\u4e0b\uff1a var \u53d8\u91cf\u540d \u7c7b\u578b = \u8868\u8fbe\u5f0f eg\uff1a var name string = \"Boii\" var age int = 18 \u6216\u8005\u4e00\u6b21\u521d\u59cb\u5316\u591a\u4e2a\u53d8\u91cf\u3002eg\uff1a var name , age = \"Boii\" , 18 Go \u8bed\u8a00\u5177\u6709\u7684\u8fd9\u79cd\u7279\u6027\uff0c\u4f7f\u5f97\u4ea4\u6362\u4e24\u4e2a\u53d8\u91cf\u975e\u5e38\u65b9\u4fbf\uff0c\u53ef\u4ee5\u7b80\u5355\u5730\u4f7f\u7528 a, b = b, a \u5b8c\u6210\u4ea4\u6362\u4e24\u4e2a\u53d8\u91cf\u7684\u503c\u3002 \u7c7b\u578b\u63a8\u5bfc \u00b6 \u7c7b\u578b\u63a8\u5bfc\u6307\u7684\u662f**\u6ca1\u6709\u663e\u793a\u7684\u5199\u660e\u7c7b\u578b\uff0c\u7f16\u8bd1\u5668\u4f1a\u901a\u8fc7\u7b49\u53f7\u53f3\u8fb9\u7684\u503c\u6765\u63a8\u5bfc\u51fa\u7c7b\u578b**\uff0c\u7136\u540e\u5b8c\u6210\u521d\u59cb\u5316\u5de5\u4f5c\u3002 var name = \"Boii\" var age = 18 height := 180 \u4ea4\u6362\u53d8\u91cf \u00b6 a , b := 10 , 15 a , b = b , a fmt . Println ( a , b ) // 15 10 \u77ed\u53d8\u91cf\u58f0\u660e \u00b6 \u5728\u51fd\u6570\u5185\u90e8\uff0c\u53ef\u4ee5\u7528\u66f4\u7b80\u7565\u7684\u65b9\u5f0f := \u58f0\u660e\u5e76\u521d\u59cb\u5316\u53d8\u91cf\uff0c\u4f46\u8fd9\u79cd\u65b9\u5f0f**\u53ea\u80fd\u58f0\u660e\u5c40\u90e8\u53d8\u91cf** package main import \"fmt\" var m = 100 // \u58f0\u660e\u5168\u5c40\u53d8\u91cf m func main () { n := 10 // \u58f0\u660e\u5c40\u90e8\u53d8\u91cf n m := 200 // \u58f0\u660e\u5c40\u90e8\u53d8\u91cf m fmt . Println ( m , n ) } // ---------------------------------------- // Output: 200 10 \u533f\u540d\u53d8\u91cf \u00b6 \u4f7f\u7528\u591a\u91cd\u8d4b\u503c\u65f6\uff0c\u60f3\u8981\u5ffd\u7565\u67d0\u4e2a\u503c\uff0c\u53ef\u4ee5\u4f7f\u7528 \u533f\u540d\u53d8\u91cf\uff0c\u4e5f\u5c31\u662f\u4e00\u4e2a\u4e0b\u5212\u7ebf _ \u8868\u793a\u3002eg\uff1a func foo () ( int , string ) { return 18 , \"Boii\" } func main () { x , _ := foo () fmt . Println ( \"x =\" , x ) } // ---------------------------------------- // Output: 18 \u533f\u540d\u53d8\u91cf\u4e0d\u5360\u7528\u547d\u540d\u7a7a\u95f4\uff0c\u4e0d\u4f1a\u5206\u914d\u5185\u5b58\uff0c\u6240\u4ee5\u533f\u540d\u53d8\u91cf\u4e4b\u95f4\u4e0d\u5b58\u5728\u91cd\u590d\u58f0\u660e\uff0c\u4e14\u533f\u540d\u53d8\u91cf\u65e0\u6cd5\u62ff\u6765\u4f7f\u7528\uff0c\u53ea\u80fd\u7528\u6765\u627f\u63a5\u4e0d\u60f3\u8981\u7684\u503c\u3002 \u603b\u7ed3 \u00b6 \u51fd\u6570\u5916\u7684\u6bcf\u4e2a\u8bed\u53e5\u90fd\u5fc5\u987b\u4ee5\u5173\u952e\u5b57\u5f00\u59cb\uff08var\u3001const\u3001func\u7b49\uff09 := \u4e0d\u80fd\u5728\u51fd\u6570\u5916\u4f7f\u7528 _ \u591a\u7528\u4e8e\u5360\u4f4d\uff0c\u8868\u793a\u5ffd\u7565\u503c \u5e38\u91cf \u00b6 \u5e38\u91cf\u662f\u7a0b\u5e8f\u8fd0\u884c\u671f\u95f4\u4e0d\u4f1a\u6539\u53d8\u7684\u90a3\u4e9b\u503c\u3002 \u53d8\u91cf\u58f0\u660e\u662f\u7528 var \uff0c\u5e38\u91cf\u58f0\u660e\u662f\u7528 const \u5e38\u91cf\u5728\u5b9a\u4e49\u7684\u65f6\u5019\u5fc5\u987b\u8d4b\u503c const PI = 3.14156 const E = 2.7182 \u6279\u91cf\u58f0\u660e const ( PI = 3.14156 E = 2.7182 ) \u6279\u91cf\u58f0\u660e\u65f6\uff0c\u5982\u679c\u7701\u7565\u4e86\u8d4b\u503c\u5219\u8868\u793a\u4e0e\u4e0a\u9762\u4e00\u884c\u7684\u503c\u76f8\u540c\u3002eg\uff1a const ( a = 100 b c = 3.33 d e ) \u4f8b\u5b50\u4e2d\uff0c\u5e38\u91cf a \u548c b \u7684\u503c\u90fd\u662f 100\uff0c c \u3001 d \u3001 e \u7684\u503c\u90fd\u662f 3.33 iota \u00b6 iota \u662fgo\u8bed\u8a00\u4e2d\u7684**\u5e38\u91cf\u8ba1\u6570\u5668**\uff0c\u53ea\u80fd\u5728\u5e38\u91cf\u7684\u8868\u8fbe\u5f0f\u4e2d\u4f7f\u7528\u3002 iota \u5728const \u5173\u952e\u5b57\u51fa\u73b0\u65f6\u5c06\u88ab\u91cd\u7f6e\u4e3a 0 \u3002 const \u4e2d\u6bcf\u65b0\u589e\u4e00\u884c\u5e38\u91cf\u58f0\u660e\uff0c\u5c06\u4f7f iota +1 iota \u53ef\u7406\u89e3\u4e3aconst \u5757\u4e2d\u7684\u884c\u7d22\u5f15 \u4f7f\u7528iota\u80fd\u7b80\u5316\u5b9a\u4e49\uff0c\u5728\u679a\u4e3e\u65f6\u5f88\u65b9\u4fbf const ( n1 = iota // 0 n2 // 1 n3 // 2 n4 // 3 ) func main () { fmt . Println ( n1 , n2 , n3 , n4 ) } // ---------------------------------------- // Output: 0 1 2 3 \u8fd8\u6709\u51e0\u4e2a\u6bd4\u8f83\u7ecf\u5178\u7684\u4f8b\u5b50: \u533f\u540d\u53d8\u91cf\u63d2\u961f const ( n1 = iota // 0 n2 // 1 _ n4 // 3 ) \u58f0\u660e\u4e2d\u95f4\u63d2\u961f const ( n1 = iota // 0 n2 = 100 // 100 n3 = iota // 2 n4 // 3 n5 // 4 ) const n6 = iota // 0 \u5b9a\u4e49\u6570\u91cf\u7ea7 const ( _ = iota KB = 1 << ( 10 * iota ) // 10*1 == 10 MB = 1 << ( 10 * iota ) // 10*2 == 20 GB = 1 << ( 10 * iota ) // 10*3 == 30 TB = 1 << ( 10 * iota ) // 10*4 == 40 PB = 1 << ( 10 * iota ) // 10*5 == 50 ) \u591a\u4e2a iota \u5b9a\u4e49\u5728\u4e00\u884c const ( a , b = iota + 1 , iota + 2 //1,2 c , d //2,3 e , f //3,4 ) func main () { fmt . Println ( a , b , c , d , e , f ) } // ---------------------------------------- // Output: 1 2 2 3 3 4 iota \u53ea\u6709\u5728\u65b0\u8d77\u4e00\u884c\u624d\u4f1a\u81ea\u589e iota \u53ea\u6709\u9047\u5230\u65b0\u7684 const \u624d\u4f1a\u91cd\u7f6e iota \u662f\u4ece 0 \u5f00\u59cb\u7684\u3002 \u503c\u7c7b\u578b\u548c\u5f15\u7528\u7c7b\u578b \u00b6 \u503c\u7c7b\u578b \uff1a int float bool string \u6307\u9488 \uff0c\u4f7f\u7528\u8fd9\u4e9b\u7c7b\u578b\u7684\u53d8\u91cf\u76f4\u63a5\u6307\u5411\u5b58\u5728\u5185\u5b58\u4e2d\u7684\u503c\uff0c\u5b58\u50a8\u5728\u6808\u4e2d\u3002 j = i \u5f15\u7528\u7c7b\u578b \uff1a slices\u3001maps\u3001channel \uff0c\u88ab\u5f15\u7528\u7684\u53d8\u91cf\u4f1a\u5b58\u50a8\u5728\u5806\u4e2d\uff0c\u4ee5\u4fbf\u5783\u573e\u56de\u6536\u3002 r1 = r2","title":"1.\u57fa\u7840"},{"location":"Go/Basic/Golang-1-%E5%9F%BA%E7%A1%80/#1-","text":"","title":"1-\u57fa\u7840"},{"location":"Go/Basic/Golang-1-%E5%9F%BA%E7%A1%80/#_1","text":"[ _ | A-Z | a-z | 0-9 ] \u4e0d\u80fd\u6570\u5b57\u5f00\u5934 \u4e0d\u80fd\u4e0e\u5173\u952e\u5b57\u548c\u4fdd\u7559\u5b57\u51b2\u7a81","title":"\u6807\u8bc6\u7b26"},{"location":"Go/Basic/Golang-1-%E5%9F%BA%E7%A1%80/#_2","text":"Go \u4e2d\u670925\u4e2a\u5173\u952e\u5b57 break default func interface select case defer go map struct chan else goto package switch const fallthrough if range type continue for import return var 37\u4e2a\u4fdd\u7559\u5b57 Constants : true false iota nil Types : int int8 int16 int32 int64 uint uint8 uint16 uint32 uint64 uintptr float32 float64 complex128 complex64 bool byte rune string error Functions : make len cap new append copy close delete complex real imag panic recover","title":"\u5173\u952e\u5b57"},{"location":"Go/Basic/Golang-1-%E5%9F%BA%E7%A1%80/#_3","text":"","title":"\u53d8\u91cf"},{"location":"Go/Basic/Golang-1-%E5%9F%BA%E7%A1%80/#_4","text":"var \u53d8\u91cf\u540d \u53d8\u91cf\u7c7b\u578b \u53d8\u91cf\u58f0\u660e\u4ee5\u5173\u952e\u5b57 var \u5f00\u5934\uff0c\u7c7b\u578b\u653e\u5728\u540e\u9762\uff0c\u65e0\u9700\u5206\u53f7 var name string var age int var isEmpty bool","title":"\u58f0\u660e"},{"location":"Go/Basic/Golang-1-%E5%9F%BA%E7%A1%80/#_5","text":"\u6bcf\u4e2a\u53d8\u91cf\u5199\u4e00\u4e2a var \u592a\u9ebb\u70e6\uff0cgo \u652f\u6301\u6279\u91cf\u58f0\u660e var ( name string age int isEmpty bool ) var num1 , num2 , num3 int","title":"\u6279\u91cf\u58f0\u660e"},{"location":"Go/Basic/Golang-1-%E5%9F%BA%E7%A1%80/#_6","text":"go \u58f0\u660e\u53d8\u91cf\u65f6\uff0c\u4f1a\u81ea\u52a8\u5bf9\u53d8\u91cf\u5bf9\u5e94\u7684\u5185\u5b58\u533a\u57df\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u6bcf\u4e2a\u53d8\u91cf\u90fd\u4f1a\u88ab\u521d\u59cb\u5316\u6210\u9ed8\u8ba4\u503c\u3002 eg\uff1a\u6574\u578b\u548c\u6d6e\u70b9\u578b\u53d8\u91cf\u9ed8\u8ba4\u503c\u662f 0 \uff0c\u5b57\u7b26\u4e32\u53d8\u91cf\u9ed8\u8ba4\u503c\u662f \u7a7a\u5b57\u7b26\u4e32 \uff0c\u5e03\u5c14\u7c7b\u578b\u53d8\u91cf\u9ed8\u8ba4\u503c\u662f false \uff0c\u5207\u7247\u3001\u51fd\u6570\u3001\u6307\u9488\u53d8\u91cf\u9ed8\u8ba4\u662f nil \u3002 \u540c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u58f0\u660e\u53d8\u91cf\u65f6\u4e3a\u5176\u6307\u5b9a\u521d\u59cb\u503c\uff0c\u683c\u5f0f\u5982\u4e0b\uff1a var \u53d8\u91cf\u540d \u7c7b\u578b = \u8868\u8fbe\u5f0f eg\uff1a var name string = \"Boii\" var age int = 18 \u6216\u8005\u4e00\u6b21\u521d\u59cb\u5316\u591a\u4e2a\u53d8\u91cf\u3002eg\uff1a var name , age = \"Boii\" , 18 Go \u8bed\u8a00\u5177\u6709\u7684\u8fd9\u79cd\u7279\u6027\uff0c\u4f7f\u5f97\u4ea4\u6362\u4e24\u4e2a\u53d8\u91cf\u975e\u5e38\u65b9\u4fbf\uff0c\u53ef\u4ee5\u7b80\u5355\u5730\u4f7f\u7528 a, b = b, a \u5b8c\u6210\u4ea4\u6362\u4e24\u4e2a\u53d8\u91cf\u7684\u503c\u3002","title":"\u521d\u59cb\u5316"},{"location":"Go/Basic/Golang-1-%E5%9F%BA%E7%A1%80/#_7","text":"\u7c7b\u578b\u63a8\u5bfc\u6307\u7684\u662f**\u6ca1\u6709\u663e\u793a\u7684\u5199\u660e\u7c7b\u578b\uff0c\u7f16\u8bd1\u5668\u4f1a\u901a\u8fc7\u7b49\u53f7\u53f3\u8fb9\u7684\u503c\u6765\u63a8\u5bfc\u51fa\u7c7b\u578b**\uff0c\u7136\u540e\u5b8c\u6210\u521d\u59cb\u5316\u5de5\u4f5c\u3002 var name = \"Boii\" var age = 18 height := 180","title":"\u7c7b\u578b\u63a8\u5bfc"},{"location":"Go/Basic/Golang-1-%E5%9F%BA%E7%A1%80/#_8","text":"a , b := 10 , 15 a , b = b , a fmt . Println ( a , b ) // 15 10","title":"\u4ea4\u6362\u53d8\u91cf"},{"location":"Go/Basic/Golang-1-%E5%9F%BA%E7%A1%80/#_9","text":"\u5728\u51fd\u6570\u5185\u90e8\uff0c\u53ef\u4ee5\u7528\u66f4\u7b80\u7565\u7684\u65b9\u5f0f := \u58f0\u660e\u5e76\u521d\u59cb\u5316\u53d8\u91cf\uff0c\u4f46\u8fd9\u79cd\u65b9\u5f0f**\u53ea\u80fd\u58f0\u660e\u5c40\u90e8\u53d8\u91cf** package main import \"fmt\" var m = 100 // \u58f0\u660e\u5168\u5c40\u53d8\u91cf m func main () { n := 10 // \u58f0\u660e\u5c40\u90e8\u53d8\u91cf n m := 200 // \u58f0\u660e\u5c40\u90e8\u53d8\u91cf m fmt . Println ( m , n ) } // ---------------------------------------- // Output: 200 10","title":"\u77ed\u53d8\u91cf\u58f0\u660e"},{"location":"Go/Basic/Golang-1-%E5%9F%BA%E7%A1%80/#_10","text":"\u4f7f\u7528\u591a\u91cd\u8d4b\u503c\u65f6\uff0c\u60f3\u8981\u5ffd\u7565\u67d0\u4e2a\u503c\uff0c\u53ef\u4ee5\u4f7f\u7528 \u533f\u540d\u53d8\u91cf\uff0c\u4e5f\u5c31\u662f\u4e00\u4e2a\u4e0b\u5212\u7ebf _ \u8868\u793a\u3002eg\uff1a func foo () ( int , string ) { return 18 , \"Boii\" } func main () { x , _ := foo () fmt . Println ( \"x =\" , x ) } // ---------------------------------------- // Output: 18 \u533f\u540d\u53d8\u91cf\u4e0d\u5360\u7528\u547d\u540d\u7a7a\u95f4\uff0c\u4e0d\u4f1a\u5206\u914d\u5185\u5b58\uff0c\u6240\u4ee5\u533f\u540d\u53d8\u91cf\u4e4b\u95f4\u4e0d\u5b58\u5728\u91cd\u590d\u58f0\u660e\uff0c\u4e14\u533f\u540d\u53d8\u91cf\u65e0\u6cd5\u62ff\u6765\u4f7f\u7528\uff0c\u53ea\u80fd\u7528\u6765\u627f\u63a5\u4e0d\u60f3\u8981\u7684\u503c\u3002","title":"\u533f\u540d\u53d8\u91cf"},{"location":"Go/Basic/Golang-1-%E5%9F%BA%E7%A1%80/#_11","text":"\u51fd\u6570\u5916\u7684\u6bcf\u4e2a\u8bed\u53e5\u90fd\u5fc5\u987b\u4ee5\u5173\u952e\u5b57\u5f00\u59cb\uff08var\u3001const\u3001func\u7b49\uff09 := \u4e0d\u80fd\u5728\u51fd\u6570\u5916\u4f7f\u7528 _ \u591a\u7528\u4e8e\u5360\u4f4d\uff0c\u8868\u793a\u5ffd\u7565\u503c","title":"\u603b\u7ed3"},{"location":"Go/Basic/Golang-1-%E5%9F%BA%E7%A1%80/#_12","text":"\u5e38\u91cf\u662f\u7a0b\u5e8f\u8fd0\u884c\u671f\u95f4\u4e0d\u4f1a\u6539\u53d8\u7684\u90a3\u4e9b\u503c\u3002 \u53d8\u91cf\u58f0\u660e\u662f\u7528 var \uff0c\u5e38\u91cf\u58f0\u660e\u662f\u7528 const \u5e38\u91cf\u5728\u5b9a\u4e49\u7684\u65f6\u5019\u5fc5\u987b\u8d4b\u503c const PI = 3.14156 const E = 2.7182 \u6279\u91cf\u58f0\u660e const ( PI = 3.14156 E = 2.7182 ) \u6279\u91cf\u58f0\u660e\u65f6\uff0c\u5982\u679c\u7701\u7565\u4e86\u8d4b\u503c\u5219\u8868\u793a\u4e0e\u4e0a\u9762\u4e00\u884c\u7684\u503c\u76f8\u540c\u3002eg\uff1a const ( a = 100 b c = 3.33 d e ) \u4f8b\u5b50\u4e2d\uff0c\u5e38\u91cf a \u548c b \u7684\u503c\u90fd\u662f 100\uff0c c \u3001 d \u3001 e \u7684\u503c\u90fd\u662f 3.33","title":"\u5e38\u91cf"},{"location":"Go/Basic/Golang-1-%E5%9F%BA%E7%A1%80/#iota","text":"iota \u662fgo\u8bed\u8a00\u4e2d\u7684**\u5e38\u91cf\u8ba1\u6570\u5668**\uff0c\u53ea\u80fd\u5728\u5e38\u91cf\u7684\u8868\u8fbe\u5f0f\u4e2d\u4f7f\u7528\u3002 iota \u5728const \u5173\u952e\u5b57\u51fa\u73b0\u65f6\u5c06\u88ab\u91cd\u7f6e\u4e3a 0 \u3002 const \u4e2d\u6bcf\u65b0\u589e\u4e00\u884c\u5e38\u91cf\u58f0\u660e\uff0c\u5c06\u4f7f iota +1 iota \u53ef\u7406\u89e3\u4e3aconst \u5757\u4e2d\u7684\u884c\u7d22\u5f15 \u4f7f\u7528iota\u80fd\u7b80\u5316\u5b9a\u4e49\uff0c\u5728\u679a\u4e3e\u65f6\u5f88\u65b9\u4fbf const ( n1 = iota // 0 n2 // 1 n3 // 2 n4 // 3 ) func main () { fmt . Println ( n1 , n2 , n3 , n4 ) } // ---------------------------------------- // Output: 0 1 2 3 \u8fd8\u6709\u51e0\u4e2a\u6bd4\u8f83\u7ecf\u5178\u7684\u4f8b\u5b50: \u533f\u540d\u53d8\u91cf\u63d2\u961f const ( n1 = iota // 0 n2 // 1 _ n4 // 3 ) \u58f0\u660e\u4e2d\u95f4\u63d2\u961f const ( n1 = iota // 0 n2 = 100 // 100 n3 = iota // 2 n4 // 3 n5 // 4 ) const n6 = iota // 0 \u5b9a\u4e49\u6570\u91cf\u7ea7 const ( _ = iota KB = 1 << ( 10 * iota ) // 10*1 == 10 MB = 1 << ( 10 * iota ) // 10*2 == 20 GB = 1 << ( 10 * iota ) // 10*3 == 30 TB = 1 << ( 10 * iota ) // 10*4 == 40 PB = 1 << ( 10 * iota ) // 10*5 == 50 ) \u591a\u4e2a iota \u5b9a\u4e49\u5728\u4e00\u884c const ( a , b = iota + 1 , iota + 2 //1,2 c , d //2,3 e , f //3,4 ) func main () { fmt . Println ( a , b , c , d , e , f ) } // ---------------------------------------- // Output: 1 2 2 3 3 4 iota \u53ea\u6709\u5728\u65b0\u8d77\u4e00\u884c\u624d\u4f1a\u81ea\u589e iota \u53ea\u6709\u9047\u5230\u65b0\u7684 const \u624d\u4f1a\u91cd\u7f6e iota \u662f\u4ece 0 \u5f00\u59cb\u7684\u3002","title":"iota"},{"location":"Go/Basic/Golang-1-%E5%9F%BA%E7%A1%80/#_13","text":"\u503c\u7c7b\u578b \uff1a int float bool string \u6307\u9488 \uff0c\u4f7f\u7528\u8fd9\u4e9b\u7c7b\u578b\u7684\u53d8\u91cf\u76f4\u63a5\u6307\u5411\u5b58\u5728\u5185\u5b58\u4e2d\u7684\u503c\uff0c\u5b58\u50a8\u5728\u6808\u4e2d\u3002 j = i \u5f15\u7528\u7c7b\u578b \uff1a slices\u3001maps\u3001channel \uff0c\u88ab\u5f15\u7528\u7684\u53d8\u91cf\u4f1a\u5b58\u50a8\u5728\u5806\u4e2d\uff0c\u4ee5\u4fbf\u5783\u573e\u56de\u6536\u3002 r1 = r2","title":"\u503c\u7c7b\u578b\u548c\u5f15\u7528\u7c7b\u578b"},{"location":"Go/Basic/Golang-10-%E7%BB%93%E6%9E%84%E4%BD%93/","text":"\u7ed3\u6784\u4f53\u7684\u521b\u5efa\u4e0e\u4f7f\u7528 10-\u7ed3\u6784\u4f53 \u00b6 Go\u8bed\u8a00\u4e2d\u6ca1\u6709\u201c\u7c7b\u201d\u7684\u6982\u5ff5\uff0c\u4e5f\u4e0d\u652f\u6301\u201c\u7c7b\u201d\u7684\u7ee7\u627f\u7b49\u9762\u5411\u5bf9\u8c61\u7684\u6982\u5ff5\u3002Go\u8bed\u8a00\u4e2d\u901a\u8fc7\u7ed3\u6784\u4f53\u7684\u5185\u5d4c\u518d\u914d\u5408\u63a5\u53e3\u6bd4\u9762\u5411\u5bf9\u8c61\u5177\u6709\u66f4\u9ad8\u7684\u6269\u5c55\u6027\u548c\u7075\u6d3b\u6027\u3002 \u5f53\u6211\u4eec\u60f3\u8868\u793a\u4e00\u4e9b\u4e8b\u7269\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u57fa\u672c\u6570\u636e\u7c7b\u578b\u8868\u793a\u5176\u5404\u9879\u57fa\u672c\u5c5e\u6027\uff0c\u901a\u8fc7\u7ed3\u6784\u4f53\u5c06\u5176\u7ec4\u5408\u8d77\u6765\u3002\u5728 Go \u4e2d\u53ef\u4ee5\u901a\u8fc7 struct \u5b9e\u73b0\u9762\u5411\u5bf9\u8c61\u3002 \u5b9a\u4e49 \u00b6 {% note warning, \u6ce8\u610f\uff1a\u7ed3\u6784\u4f53\u662f\u503c\u7c7b\u578b\uff01\uff01\uff01 %} \u4f7f\u7528 type \u548c struct \u6765\u5b9a\u4e49\u7ed3\u6784\u4f53\u3002 \u57fa\u672c\u8bed\u6cd5\u5982\u4e0b\uff1a type structT struct { field1 T field2 T ... } structT \uff1a\u6807\u8bc6\u53ea\u5b9a\u4e49\u7ed3\u6784\u4f53\u540d\u79f0\uff0c\u540c\u4e00\u5305\u5185\u4e0d\u80fd\u91cd\u590d\u3002 field \uff1a\u7ed3\u6784\u7684\u57fa\u672c\u5c5e\u6027\u7684\u540d\u5b57\uff0c\u7ed3\u6784\u4f53\u4e2d\u7684\u5b57\u6bb5\u540d\u4e0d\u80fd\u91cd\u590d T \uff1a\u5b57\u6bb5\u7684\u5177\u4f53\u7c7b\u578b eg\uff1a type person struct { name string age int8 city string } \u540c\u7c7b\u578b\u5b57\u6bb5\u53ef\u4ee5\u5199\u5728\u4e00\u884c type person struct { name , city string age int8 } \u901a\u8fc7\u4ee5\u4e0a\u4ee3\u7801\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a person \u7684\u81ea\u5b9a\u4e49\u7c7b\u578b\uff0c\u5b83\u6709 name \u3001 age \u3001 city \u4e09\u4e2a\u5b57\u6bb5\uff0c\u8868\u793a\u4eba\u7684\u59d3\u540d\u3001\u5e74\u9f84\u3001\u57ce\u5e02\u4e09\u4e2a\u5c5e\u6027\u3002 \u8fd9\u6837\u5c31\u53ef\u4ee5\u901a\u8fc7 person \u8fd9\u4e2a\u7ed3\u6784\u4f53\u5f88\u65b9\u4fbf\u7684\u5728\u7a0b\u5e8f\u4e2d\u8868\u793a\u548c\u5b58\u50a8\u4eba\u7684\u4fe1\u606f\u4e86\u3002 \u5728\u5b9a\u4e49\u7ed3\u6784\u4f53\u65f6\uff0c\u5efa\u8bae\u5404\u4e2a\u5b57\u6bb5\u6309\u5b57\u6bb5\u7c7b\u578b\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u6709\u52a9\u4e8e \u5185\u5b58\u5bf9\u9f50 \u3002 \u7c7b\u578b\u5927\u5c0f\u53c2\u8003 \u300a\u6570\u636e\u7c7b\u578b\u300b\u4e00\u7ae0 Go \u5185\u7f6e\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b\u7528\u6765\u63cf\u8ff0\u4e00\u4e2a\u503c\uff0c\u800c\u7ed3\u6784\u4f53\u7528\u6765\u63cf\u8ff0\u4e00\u7ec4\u503c\uff0c\u672c\u8d28\u4e0a\u662f\u4e00\u79cd\u805a\u5408\u578b\u6570\u636e\u7c7b\u578b\u3002 \u4e00\u4e2a\u7ed3\u6784\u4f53\u5c31\u50cf Java \u4e2d\u7684\u4e00\u4e2a\u7c7b\uff0c\u4e0d\u8fc7 Java \u4e2d\u7684\u7c7b\u8fd8\u6709\u6784\u9020\u51fd\u6570\u3001\u65b9\u6cd5\u7b49\uff0c\u8fd9\u4e9b Go \u7684\u7ed3\u6784\u4f53\u4e00\u6837\u53ef\u4ee5\u5b9e\u73b0\uff0c\u65b9\u5f0f\u6709\u4e9b\u4e0d\u540c \u5b9e\u4f8b\u5316 \u00b6 \u53ea\u6709\u5f53\u7ed3\u6784\u4f53\u5b9e\u4f8b\u5316\u65f6\uff0c\u624d\u4f1a\u771f\u6b63\u5730\u5206\u914d\u5185\u5b58\u3002\u5373\u5fc5\u987b\u5b9e\u4f8b\u5316\u540e\u624d\u80fd\u4f7f\u7528\u7ed3\u6784\u4f53\u7684\u5b57\u6bb5\u3002 \u7ed3\u6784\u4f53\u672c\u8eab\u4e5f\u662f\u4e00\u79cd\u6570\u636e\u7c7b\u578b\uff0c\u6211\u4eec\u53ef\u4ee5\u50cf\u58f0\u660e\u57fa\u672c\u6570\u636e\u7c7b\u578b\u4e00\u6837\u58f0\u660e\u7ed3\u6784\u4f53 // \u65b9\u5f0f1 var identifier structT identifier . field1 = value1 identifier . field2 = value2 ... identifier \uff1a\u7ed3\u6784\u4f53\u5b9e\u4f8b\u540d\u79f0 structT \uff1a\u7ed3\u6784\u4f53\u7c7b\u578b field \uff1a\u7ed3\u6784\u4f53\u5b57\u6bb5 \u65b9\u5f0f1\uff1a\u57fa\u672c\u5b9e\u4f8b\u5316 \u00b6 type person struct { name string city string age int8 } func main () { // \u65b9\u5f0f1 var p1 person p1 . city = \"SWA\" p1 . name = \"Boii\" fmt . Printf ( \"p1 = %v \\n\" , p1 ) // p1 = {Boii 0 SWA} fmt . Printf ( \"p1 = %#v \\n\" , p1 ) // p1 = main.person{name:\"Boii\", age:0, city:\"SWA\"} } \u4ed4\u7ec6\u89c2\u5bdf\uff1a - \u65b9\u5f0f1\u58f0\u660e\u4ee5\u540e\u9010\u4e00\u7ed9\u6bcf\u4e2a\u5b57\u6bb5\u8d4b\u503c\uff0c\u53ef\u4ee5\u7ed3\u6784\u4f53\u4e2d\u5b9a\u4e49\u5b57\u6bb5\u65f6\u7684\u987a\u5e8f\uff0c\u6ca1\u6709\u8d4b\u503c\u7684\u5b57\u6bb5\u9ed8\u8ba4\u4e3a\u96f6\u503c - \u65b9\u5f0f2 \u548c \u65b9\u5f0f3\u5728\u8d4b\u503c\u7684\u65f6\u5019\u9700\u8981\u6240\u6709\u5b57\u6bb5\u90fd\u8d4b\u503c\uff0c\u4e14\u9700\u8981\u6309\u987a\u5e8f\u3002 - \u901a\u8fc7 . \u53ef\u4ee5\u8bbf\u95ee\u7ed3\u6784\u4f53\u4e2d\u7684\u5b57\u6bb5\uff0c\u4f8b\u5982 p1.city . \u65b9\u5f0f2\uff1anew(T) \u7ed3\u6784\u4f53\u6307\u9488 \u00b6 \u901a\u8fc7 new() \u53ef\u4ee5\u5bf9\u7ed3\u6784\u4f53\u5b9e\u4f8b\u5316\uff0c\u5f97\u5230\u7684\u662f\u7ed3\u6784\u4f53\u6307\u9488\uff0c\u5176\u5404\u4e2a\u5b57\u6bb5\u90fd\u4e3a\u96f6\u503c\u3002 type person struct { name string city string age int8 } func main () { var p1 = new ( person ) fmt . Printf ( \"%T \\n\" , p1 ) // *main.person fmt . Printf ( \"p1 = %#v \\n\" , p1 ) // p1 = &main.person{name:\"\", age:0, city:\"\"} p1 . name = \"Boii\" fmt . Printf ( \"p1 = %#v \\n\" , p1 ) // p1 = &main.person{name:\"Boii\", age:0, city:\"\"} } \u6ce8\u610f \uff1aGo \u4e2d\u7684\u7ed3\u6784\u4f53\u6307\u9488\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 . \u6765\u8bbf\u95ee\u7ed3\u6784\u4f53\u6210\u5458\u3002 p1.name = \"Boii\" \u76f8\u5f53\u4e8e (*p1).name = \"Boii\" \uff0c\u8fd9\u662f Go \u7684\u8bed\u6cd5\u7cd6\u3002 \u65b9\u5f0f3\uff1a&T{} \u53d6\u7ed3\u6784\u4f53\u5730\u5740 \u00b6 \u4f7f\u7528 & \u5bf9\u7ed3\u6784\u4f53\u53d6\u5730\u5740\u64cd\u4f5c\u76f8\u5f53\u4e8e\u5bf9\u8be5\u7ed3\u6784\u4f53\u7c7b\u578b\u8fdb\u884c\u4e86\u4e00\u6b21 new \u5b9e\u4f8b\u5316\u64cd\u4f5c\u3002 type person struct { name string city string age int8 } func main () { var p2 = & person { \"Boii\" , 10 , \"SWA\" } fmt . Printf ( \"%T \\n\" , p2 ) // *main.person fmt . Printf ( \"p2 = %#v \\n\" , p2 ) // p = &main.person{name:\"Boii\", age:10, city:\"SWA\"} p3 := & person {} p3 . name = \"Candy\" p3 . age = 10 p3 . city = \"SWA\" fmt . Printf ( \"%T \\n\" , p3 ) // *main.person fmt . Printf ( \"p3 = %#v \\n\" , p3 ) // p = &main.person{name:\"Candy\", age:10, city:\"SWA\"} } \u6240\u4ee5\uff1a new(Type) \u548c &Type{} \u662f\u7b49\u4ef7\u7684\u3002 \u533f\u540d\u7ed3\u6784\u4f53 \u00b6 \u5728\u5b9a\u4e49\u4e00\u4e9b\u4e34\u65f6\u6570\u636e\u7ed3\u6784\u7b49\u573a\u666f\u4e0b\u8fd8\u53ef\u4ee5\u4f7f\u7528\u533f\u540d\u7ed3\u6784\u4f53\u3002 func main () { // \u5b9a\u4e49\u533f\u540d\u7ed3\u6784\u4f53 // \u5b57\u6bb5\u4e4b\u95f4\u7528 \u5206\u53f7 \u9694\u5f00 var user struct { name string ; age int8 } // \u901a\u8fc7\u7ed3\u6784\u4f53\u5b9e\u4f8b\u4f7f\u7528\u533f\u540d\u7ed3\u6784\u4f53 user . name = \"Boii\" user . age = 18 fmt . Printf ( \"%v \\n\" , user ) // {Boii 18} fmt . Printf ( \"%#v \\n\" , user ) // struct { name string; age int8 }{name:\"Boii\", age:18} // \u76f8\u540c\u7c7b\u578b\u53ef\u4ee5\u7b80\u5199 var stu struct { name string ; ID , age int } // \u89c4\u8303\u5199\u6cd5 var stud struct { name string ID , age int } } \u521d\u59cb\u5316 \u00b6 \u7ed3\u6784\u4f53\u6ca1\u6709\u521d\u59cb\u5316\u7684\u65f6\u5019\uff0c\u6210\u5458\u53d8\u91cf\u90fd\u662f\u5bf9\u5e94\u7c7b\u578b\u7684\u96f6\u503c\uff0c\u8fd9\u70b9\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u5df2\u7ecf\u6709\u6240\u4f53\u73b0\u3002 type stu struct { name string age int8 ID int8 } func main () { var s1 stu fmt . Printf ( \"s1 = %#v \\n\" , s1 ) // s1 = main.stu{name:\"\", age:0, ID:0} } \u4f7f\u7528\u952e\u503c\u5bf9\u7684\u65b9\u5f0f\u521d\u59cb\u5316 \u00b6 identifier := structT { field1 : value1 , field2 : value2 , ... } var identifier = structT { field1 : value1 , field2 : value2 , ... } s2 := stu { name : \"Boii\" , age : 18 , } fmt . Printf ( \"s2 = %#v \\n\" , s2 ) // s2 = main.stu{name:\"Boii\", age:18, ID:0} var s3 = stu { name : \"Eva\" , age : 18 , } fmt . Printf ( \"s3 = %#v \\n\" , s3 ) // s3 = main.stu{name:\"Eva\", age:18, ID:0} \u4f7f\u7528\u952e\u503c\u5bf9\u7684\u65b9\u5f0f\u53ef\u4ee5\u4e0d\u6309\u7ed3\u6784\u4f53\u5b9a\u4e49\u65f6\u5b57\u6bb5\u7684\u987a\u5e8f\uff0c\u53ef\u4ee5\u4e0d\u521d\u59cb\u5316\u6bcf\u4e00\u4e2a\u5b57\u6bb5\uff0c\u6ca1\u88ab\u521d\u59cb\u5316\u7684\u5b57\u6bb5\u5c31\u9ed8\u8ba4\u4e3a\u96f6\u503c\u3002 \u6ce8\u610f\u6700\u540e\u4e00\u4e2a\u5b57\u6bb5\u4e5f\u8981\u52a0\u4e0a\u9017\u53f7 , \u3002 s3 := & stu { age : 18 , ID : 101 , } fmt . Printf ( \"s3 = %#v \\n\" , s3 ) // s3 = &main.stu{name:\"\", age:18, ID:101} \u4e5f\u53ef\u4ee5\u5bf9\u7ed3\u6784\u4f53\u6307\u9488\u8fdb\u884c\u952e\u503c\u5bf9\u521d\u59cb\u5316 \u4f7f\u7528\u503c\u5217\u8868\u7684\u65b9\u5f0f\u521d\u59cb\u5316 \u00b6 \u521d\u59cb\u5316\u7ed3\u6784\u4f53\u7684\u65f6\u5019\u53ef\u4ee5\u7b80\u5199\uff0c\u4e0d\u5199\u952e\uff0c\u53ea\u5199\u503c\u3002 identifier := structT { value1 , value2 , ... } var identifier = structT { value1 , value2 , ... } eg\uff1a s4 := stu { \"Boii\" , 18 , 102 , } fmt . Printf ( \"s4 = %#v \\n\" , s4 ) // s4 = main.stu{name:\"Boii\", age:18, ID:102} \u4f7f\u7528\u8fd9\u79cd\u8981\u6ce8\u610f\uff1a 1. \u5fc5\u987b\u521d\u59cb\u5316\u7ed3\u6784\u4f53\u91cc\u6240\u6709\u5b57\u6bb5 2. \u521d\u59cb\u503c\u586b\u5145\u987a\u5e8f\u5fc5\u987b\u548c\u5b57\u6bb5\u5728\u7ed3\u6784\u4f53\u4e2d\u58f0\u660e\u7684\u987a\u5e8f\u4e00\u81f4 3. \u4e0d\u80fd\u548c\u952e\u503c\u5bf9\u7684\u521d\u59cb\u5316\u65b9\u5f0f\u6df7\u7528 \u4e00\u70b9\u7ec6\u8282 \u00b6 \u521d\u59cb\u5316\u65f6\uff0c\u5982\u679c\u503c\u5199\u6210\u591a\u884c\uff0c\u5219\u6700\u540e\u4e00\u4e2a\u4e5f\u8981\u5e26\u4e0a\u9017\u53f7 , ; \u5982\u679c\u5199\u6210\u4e00\u884c\uff0c\u5219\u6700\u540e\u4e00\u4e2a\u53ef\u4ee5\u4e0d\u5e26\u9017\u53f7 , ; \u4e5f\u53ef\u4ee5\u5e26\u4e0a\u9017\u53f7\u3002 type Person struct { name string age int sex string } func main () { p1 := Person { \"Boii\" , 18 , \"male\" , } p2 := Person { name : \"Boii\" , sex : \"male\" , age : 18 , } p3 := Person { \"Boii\" , 18 , \"male\" } p4 := Person { name : \"Boii\" , sex : \"male\" , age : 18 , } } \u65b9\u6cd5\u548c\u63a5\u6536\u8005 \u00b6 \u4f8b\u5982\u4e0b\u9762\u7684\u901a\u5f0f\uff0c\u65b9\u6cd5\u540d\u524d\u9762\u7684**\u63a5\u6536\u8005\u53d8\u91cf\u548c\u63a5\u6536\u8005\u7c7b\u578b**\uff0c\u5c31\u662f\u4e00\u79cd\u9650\u5b9a\u3002 // \u65b9\u6cd5 func ( \u63a5\u6536\u8005\u53d8\u91cf \u63a5\u6536\u8005\u7c7b\u578b ) \u65b9\u6cd5\u540d ( \u53c2\u6570\u5217\u8868 ) ( \u8fd4\u56de\u53c2\u6570 ) { \u65b9\u6cd5\u4f53 } // \u5bf9\u6bd4\uff1a\u51fd\u6570 func \u51fd\u6570\u540d ( \u53c2\u6570\u5217\u8868 ) ( \u8fd4\u56de\u53c2\u6570 ) { \u51fd\u6570\u4f53 } \u63a5\u6536\u8005\u6307\u7684\u5c31\u662f\u88ab\u5141\u8bb8\u8c03\u7528\u7684\u8c03\u7528\u8005 \u3002\u6ce8\u610f\u7406\u89e3\uff1a\u4e0b\u9762\u5c06\u4ee5\u63a5\u6536\u8005\u4ee3\u66ff\u8c03\u7528\u8005\u7684\u8bf4\u6cd5\u3002 \u63a5\u6536\u8005\u53d8\u91cf \uff1a\u547d\u540d\u65f6\uff0c\u5b98\u65b9\u5efa\u8bae\u4f7f\u7528\u63a5\u6536\u8005\u7c7b\u578b\u9996\u4e2a\u5b57\u6bcd\u5c0f\u5199\u3002eg\uff1a p Person \u3001 c Connector \u63a5\u6536\u8005\u7c7b\u578b \uff1a\u63a5\u6536\u8005\u7c7b\u578b\u548c\u53c2\u6570\u76f8\u4f3c\uff0c\u53ef\u4ee5\u662f\u6307\u9488\u7c7b\u578b\u6216\u975e\u6307\u9488\u7c7b\u578b \u65b9\u6cd5\u540d\u3001\u53c2\u6570\u5217\u8868\u3001\u8fd4\u56de\u53c2\u6570 \uff1a\u5177\u4f53\u683c\u5f0f\u4e0e\u51fd\u6570\u5b9a\u4e49\u76f8\u540c // Dog \u7ed3\u6784\u4f53 type Dog struct { name string age int8 } // NewDog \u6784\u9020\u51fd\u6570 func NewDog ( name string , age int8 ) * Dog { return & Dog { name , age } } // Run Dog\u5954\u8dd1\u7684\u65b9\u6cd5 // \u9650\u5b9a\u4e86 Dog \u7ed3\u6784\u4f53\u7c7b\u578b\u624d\u53ef\u4ee5\u8c03\u7528\u6b64\u65b9\u6cd5 func ( d Dog ) Run ( distance int ) { fmt . Printf ( \"%d \u5c81\u7684\u72d7\u72d7 %s \u8dd1\u4e86 %d \u7c73\\n\" , d . age , d . name , distance ) } func main () { boby := NewDog ( \"Boby\" , 2 ) boby . Run ( 100 ) doge := Dog { \"Doge\" , 3 } doge . Run ( 12 ) } // ------------------------------------------------- // Output: 2 \u5c81\u7684\u72d7\u72d7 Boby \u8dd1\u4e86 100 \u7c73 3 \u5c81\u7684\u72d7\u72d7 Doge \u8dd1\u4e86 12 \u7c73 \u6307\u9488\u7c7b\u578b\u7684\u63a5\u6536\u8005 \u00b6 \u5982\u679c\u6307\u5b9a\u6307\u9488\u7c7b\u578b\u7684\u63a5\u6536\u8005\uff0c\u5728\u65b9\u6cd5\u5185\u4fee\u6539\u63a5\u6536\u8005\u7684\u6210\u5458\u53d8\u91cf\uff0c\u5219**\u7ed3\u675f\u65b9\u6cd5\u540e\u4fee\u6539\u4f9d\u7136\u6709\u6548**\u3002 \u4f8b\u5982\u6211\u4eec\u4e3a Dog \u6dfb\u52a0\u4e00\u4e2a setAge \u65b9\u6cd5\uff1a func ( d * Dog ) SetAge ( newAge int8 ) { d . age = newAge } func main () { boby := NewDog ( \"Boby\" , 2 ) fmt . Println ( boby . age ) // 2 boby . SetAge ( 10 ) fmt . Println ( boby . age ) // 10 } \u503c\u7c7b\u578b\u7684\u63a5\u6536\u8005 \u00b6 \u5f53\u65b9\u6cd5\u4f5c\u7528\u4e8e\u503c\u7c7b\u578b\u63a5\u6536\u8005\u65f6\uff0cGo \u4f1a\u5728\u8fd0\u884c\u65f6\u5c06\u63a5\u6536\u8005\u7684\u503c\u590d\u5236\u4e00\u4efd\u3002\u4e0d\u8fc7**\u5728\u65b9\u6cd5\u5185\u5bf9\u63a5\u6536\u8005\u7684\u4fee\u6539\u53ea\u662f\u5bf9\u526f\u672c\u7684\u4fee\u6539**\uff0c\u4e0d\u4f1a\u5f71\u54cd\u63a5\u6536\u8005\u3002 \u4f46\u662f\u5728\u7f16\u8bd1\u5668\u4e2d\uff0c\u4e00\u4e2a\u7ed3\u6784\u4f53\u201c\u503c\u5b9e\u73b0\u201d\u4e86\u4e00\u4e2a\u65b9\u6cd5\uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u5e2e\u4f60\u591a\u6765\u4e00\u6b21\u201c\u6307\u9488\u5b9e\u73b0\u201d\u3002 \u5373\u503c\u5b9e\u73b0 = \u503c\u5b9e\u73b0 + \u6307\u9488\u5b9e\u73b0\uff1b\u6307\u9488\u5b9e\u73b0 = \u6307\u9488\u5b9e\u73b0\u3002 \u8fd9\u4e00\u70b9\u5728\u63a5\u53e3\u4e2d\u6709\u533a\u522b\u3002 func ( d Dog ) SetAge ( newAge int8 ) { d . age = newAge } func main () { boby := NewDog ( \"Boby\" , 2 ) fmt . Println ( boby . age ) // 2 boby . SetAge ( 10 ) fmt . Println ( boby . age ) // 2 } \u4e24\u79cd\u7c7b\u578b\u63a5\u6536\u8005\u7684\u5dee\u5f02 \u00b6 \u503c\u63a5\u6536\u8005\u65b9\u6cd5\uff08Value receiver method\uff09\u548c\u6307\u9488\u63a5\u6536\u8005\u65b9\u6cd5\uff08Pointer receiver method\uff09\uff0c\u90fd\u53ef\u4ee5\u88ab\u7ed3\u6784\u4f53\u53d8\u91cf\uff08struct variable\uff09\u6216\u7ed3\u6784\u4f53\uff08struct pointer\uff09\u6307\u9488\u8c03\u7528\u3002 \u503c\u63a5\u6536\u8005\u65b9\u6cd5\u4e2d\uff0c\u5bf9\u63a5\u6536\u8005\u7684\u4fee\u6539\uff0c**\u4e0d\u4f1a**\u5f71\u54cd\u8c03\u7528\u8005\u3002 \u6307\u9488\u63a5\u6536\u8005\u65b9\u6cd5\u4e2d\uff0c\u5bf9\u63a5\u6536\u8005\u7684\u4fee\u6539\uff0c**\u4f1a**\u5f71\u54cd\u8c03\u7528\u8005\u3002 type A struct { age int } func ( a A ) read () { a . age = 50 } func ( a * A ) write ( n int ) { a . age = n } func main () { aV := A { age : 10 } aP := & A { age : 10 } aV . read () fmt . Println ( aV . age ) // 10 aV . write ( 15 ) fmt . Println ( aV . age ) // 15 aP . read () fmt . Println ( aP . age ) // 10 aP . write ( 18 ) fmt . Println ( aP . age ) // 18 } \u5728\u4e0a\u8ff0\u6817\u5b50\u4e2d\uff0c aP \u662f\u7ed3\u6784\u4f53\u6307\u9488\uff0c\u5728 aP \u8c03\u7528\u503c\u65b9\u6cd5 aP.read() \u65f6\uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u8f6c\u6362\u4e3a (*aP).read() \uff1b aV \u662f\u7ed3\u6784\u4f53\u53d8\u91cf\uff0c\u5728 aV \u8c03\u7528\u6307\u9488\u65b9\u6cd5 aV.write() \u65f6\uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u8f6c\u6362\u4e3a (&aV).write(15) \u3002 \u503c\u63a5\u6536\u8005\u65b9\u6cd5 \u6307\u9488\u63a5\u6536\u8005\u65b9\u6cd5 \u7ed3\u6784\u4f53\u53d8\u91cf\u8c03\u7528\u8005 \u53ef\u4ee5\u8c03\u7528\uff0c\u7c7b\u4f3c\u4e8e\u4f20\u503c \u53ef\u4ee5\u8c03\u7528\uff0c\u76f8\u5f53\u4e8e (&aV).write(15) \u7ed3\u6784\u4f53\u6307\u9488\u8c03\u7528\u8005 \u53ef\u4ee5\u8c03\u7528\uff0c\u76f8\u5f53\u4e8e (*aP).read() \u53ef\u4ee5\u8c03\u7528\uff0c\u7c7b\u4f3c\u4e0e\u4f20\u6307\u9488\uff0c\u6240\u4ee5\u4f1a\u5f71\u54cd\u8c03\u7528\u8005 \u4fee\u6539 \u4e0d\u5f71\u54cd\u8c03\u7528\u8005 \u5f71\u54cd\u8c03\u7528\u8005 \u5982\u4f55\u9009\u62e9 \u00b6 \u8981\u770b\u7c7b\u578b\u7684\u672c\u8d28\u3002\u5982\u679c\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b\u7684\u5b9e\u4f8b\uff0c\u5e94\u8be5\u662f\u72ec\u4e00\u4efd\u7684\uff0c\u90a3\u4e48\u5c31\u5e94\u8be5\u7528\u6307\u9488\u63a5\u6536\u8005\u65b9\u6cd5\u3002 \u4f8b\u5982\uff0c\u6587\u4ef6\u7ed3\u6784\u4f53\u3002\u6bcf\u4e2a\u6587\u4ef6\u90fd\u662f\u72ec\u4e00\u4efd\u7684\uff0c\u5bf9\u5e94\u5730\uff0c\u6587\u4ef6\u7ed3\u6784\u4f53\u8fd4\u56de\u4e00\u4e2a\u6587\u4ef6\u5bf9\u8c61\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u5e94\u8be5\u552f\u4e00\u7684\u4ee3\u8868\u8fd9\u4e2a\u6587\u4ef6\uff0c\u6240\u4ee5\u6587\u4ef6\u7ed3\u6784\u4f53\u7684\u65b9\u6cd5\u5e94\u8be5\u4f7f\u7528\u6307\u9488\u63a5\u6536\u8005\u65b9\u6cd5\u3002 \u4efb\u610f\u7c7b\u578b\u6dfb\u52a0\u65b9\u6cd5 \u00b6 \u5728 Go \u4e2d\uff0c\u63a5\u6536\u8005\u7c7b\u578b\u53ef\u4ee5\u662f\u4efb\u4f55\u7c7b\u578b\uff0c\u4e0d\u4ec5\u4ec5\u662f\u7ed3\u6784\u4f53\uff0c\u4efb\u4f55\u7c7b\u578b\u90fd\u53ef\u4ee5\u62e5\u6709\u65b9\u6cd5\u3002 type Status int // \u81ea\u5b9a\u4e49\u7c7b\u578b func ( s Status ) say () { fmt . Println ( \"OK\" ) } func main () { var s Status s . say () } \u6ce8\u610f \uff1a \u975e\u672c\u5730\u7c7b\u578b\u4e0d\u80fd\u5b9a\u4e49\u65b9\u6cd5\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u4e0d\u80fd\u7ed9\u522b\u7684\u5305\u7684\u7c7b\u578b\u5b9a\u4e49\u65b9\u6cd5\u3002 \u5185\u5b58\u5e03\u5c40 \u00b6 \u5728 Go \u4e2d\uff0c\u7ed3\u6784\u4f53\u548c\u5b83\u6240\u5305\u542b\u7684\u6570\u636e\u5728\u5185\u5b58\u4e2d\u662f\u4ee5\u8fde\u7eed\u5757\u7684\u5f62\u5f0f\u5b58\u5728\u7684\uff0c\u5373\u4f7f\u7ed3\u6784\u4f53\u4e2d\u5d4c\u5957\u4e86\u7ed3\u6784\u4f53\u4e5f\u4e00\u6837\u3002 type person struct { name string age int8 } type stu1 struct { ID int8 info person depart string } type stu2 struct { ID int8 info * person depart string } \u533f\u540d\u5b57\u6bb5 \u00b6 Go \u4e2d\u7684\u7ed3\u6784\u4f53\u5141\u8bb8\u58f0\u660e\u65f6\u53ea\u6709\u7c7b\u578b\u800c\u6ca1\u6709\u540d\u5b57\uff0c\u8fd9\u6837\u7684\u5b57\u6bb5\u53eb\u505a\u533f\u540d\u5b57\u6bb5 type stu struct { string int8 } func main () { s1 := stu { \"Boii\" , 18 , } fmt . Printf ( \"%#v\\n\" , s1 ) // main.stu{string:\"Boii\", int8:18} fmt . Println ( s1 . string , s1 . int8 ) // Boii 18 } \u533f\u540d\u5b57\u6bb5\u9ed8\u8ba4\u91c7\u7528\u7c7b\u578b\u4f5c\u4e3a\u5b57\u6bb5\u540d\uff0c\u540c\u4e00\u4e2a\u7ed3\u6784\u4f53\u4e2d\u4e00\u79cd\u7c7b\u578b\u53ea\u80fd\u6709\u4e00\u4e2a\u533f\u540d\u5b57\u6bb5\u3002 \u6240\u4ee5\u4e0a\u9762\u7684\u7ed3\u6784\u4f53\u7b49\u4ef7\u4e8e\uff1a type stu struct { string string int8 int8 } \u5d4c\u5957\u7ed3\u6784\u4f53 \u00b6 \u5d4c\u5957\u7ed3\u6784\u4f53\uff0c\u7b80\u5355\u8bf4\u5c31\u662f\u5957\u5a03 type person struct { name string age int8 } // \u5a03\u5a032 type stu struct { ID int8 info person // \u5957\u5a03\u5a031 depart string } func main () { stuA := stu { ID : 101 , info : person { \"Alice\" , 18 , }, depart : \"CA\" , } fmt . Printf ( \"%#v\\n\" , stuA ) // main.stu{ID:1, info:main.person{name:\"Boii\", age:18}, depart:\"CA\"} } \u5982\u679c\u7ed3\u6784\u4f53\u592a\u5927\uff0c\u62c5\u5fc3\u5f00\u9500\u7684\u8bdd\uff0c\u53ef\u4ee5\u7528\u7ed3\u6784\u4f53\u6307\u9488 // \u5a03\u5a031 type person struct { name string age int8 } // \u5a03\u5a032 type stu2 struct { ID int8 info * person // \u5957\u5a03\u5a031\u7684\u6307\u9488 depart string } func main () { stuB := stu2 { ID : 102 , info : & person { \"Boii\" , 20 , }, depart : \"SE\" , } fmt . Printf ( \"%#v\\n\" , stuB ) // main.stu2{ID:1, info:(*main.person)(0xc0000044a0), depart:\"CA\"} } \u7528\u7ed3\u6784\u4f53\u548c\u7ed3\u6784\u4f53\u6307\u9488\u7684\u5dee\u522b\u5982\u4e0b\u56fe\uff1a \u663e\u7136\u5f53\u7ed3\u6784\u4f53\u8f83\u5927\u7684\u65f6\u5019\uff0c\u4f7f\u7528\u7ed3\u6784\u4f53\u6307\u9488\u7684\u64cd\u4f5c\u5f00\u9500\u4f1a\u5f88\u5c0f\u3002 \u5d4c\u5957\u7ed3\u6784\u4f53\u7684\u533f\u540d\u5b57\u6bb5 \u00b6 type addr struct { province string city string } type user struct { name string age int8 addr // \u533f\u540d\u5b57\u6bb5 } func main () { var userA user userA . name = \"Boii\" userA . age = 18 userA . addr . province = \"GD\" // \u533f\u540d\u5b57\u6bb5\u9ed8\u8ba4\u4f7f\u7528\u7c7b\u578b\u540d\u4f5c\u4e3a\u5b57\u6bb5\u540d userA . city = \"SWA\" // \u533f\u540d\u5b57\u6bb5\u53ef\u4ee5\u7701\u7565 fmt . Printf ( \"%#v \\n\" , userA ) // main.user{name:\"Boii\", age:18, addr:main.addr{province:\"GD\", city:\"SWA\"}} } \u5d4c\u5957\u7ed3\u6784\u4f53\u547d\u540d\u51b2\u7a81 \u00b6 \u5f53\u5d4c\u5957\u7ed3\u6784\u4f53\u51fa\u73b0\u547d\u540d\u51b2\u7a81\u7684\u65f6\u5019\uff0c\u53ea\u8981\u4e0d\u7701\u7565\uff0c\u628a\u5173\u7cfb\u94fe\u5199\u6e05\u695a\u5c31\u6ca1\u4e8b\u4e86\u3002 type addr struct { province string city string createTime string // \u547d\u540d\u51b2\u7a81 } type user struct { name string age int8 addr // \u533f\u540d\u5b57\u6bb5 createTime string // \u547d\u540d\u51b2\u7a81 } func main () { var userA user userA . name = \"Boii\" userA . age = 18 userA . addr . province = \"GD\" userA . city = \"SWA\" // \u547d\u540d\u51b2\u7a81\u5b57\u6bb5 userA . createTime = \"2020\" // \u5173\u7cfb\u94fe\u5199\u6e05\u695a userA . addr . createTime = \"2021\" // \u5173\u7cfb\u94fe\u5199\u6e05\u695a fmt . Printf ( \"%#v \\n\" , userA ) // main.user{name:\"Boii\", age:18, addr:main.addr{province:\"GD\", city:\"SWA\", createTime:\"2021\"}, createTime:\"2020\"} } \u7ed3\u6784\u4f53\u7684\u7ee7\u627f \u00b6 \u5728\u9762\u5411\u5bf9\u8c61\u4e2d\uff0c\u7ee7\u627f\u6307\u7684\u662f\u5b50\u7c7b\u53ef\u4ee5\u62e5\u6709\u7236\u7c7b\u6240\u6709\u975e\u79c1\u6709\u5c5e\u6027\u548c\u65b9\u6cd5\u3002 Go \u4e2d\u4f7f\u7528\u7ed3\u6784\u4f53\u5d4c\u5957\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u4e2d\u9762\u5411\u5bf9\u8c61\u7684\u7ee7\u627f\u3002 \u65b9\u6cd5\u662f\u901a\u8fc7\u5728 \"\u5b50\u7ed3\u6784\u4f53\" \u4e2d\u5d4c\u5957 \"\u7236\u7ed3\u6784\u4f53\" \uff0c\u8fd9\u6837 \"\u5b50\u7ed3\u6784\u4f53\" \u5c31\u62e5\u6709 \"\u7236\u7ed3\u6784\u4f53\" \u7684\u5c5e\u6027\u4e86 \u7ed3\u5408\u4e0a\u9762 \u201c\u5d4c\u5957\u7ed3\u6784\u4f53\u7684\u533f\u540d\u5b57\u6bb5\u201d \u4e2d\u7684\u4f8b\u5b50\uff0c\u65e0\u547d\u540d\u51b2\u7a81\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7 \u5b50\u7ed3\u6784\u4f53\u5b9e\u4f8b.\u7236\u7ed3\u6784\u4f53\u5c5e\u6027 \u8c03\u7528\u7684\u7279\u6027\uff0c\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u7f16\u5199\u51fa\u9002\u5408 \"\u5b50\u7ed3\u6784\u4f53\" \u7684\u65b9\u6cd5\u3002 // animal \u52a8\u7269 type animal struct { name string } // dog \u72d7 type dog struct { variety string * animal // \u5b50\u7ed3\u6784\u4f53\u5d4c\u5957\u7236\u7ed3\u6784\u4f53\u5b9e\u73b0\u7ee7\u627f\uff0c\u5fc5\u987b\u4f7f\u7528\u533f\u540d\u5b57\u6bb5 } func ( d * dog ) bark () { // dog \u6ca1\u6709 name \u5c5e\u6027\uff0c\u4f46\u662f\u5185\u5d4c\u7684 animal \u6709 fmt . Printf ( \"%s \u6b63\u5728\u6c6a\u6c6a\u6c6a~\" , d . name ) } func main () { doge := & dog { variety : \"Doge\" , animal : & animal { // \u6ce8\u610f\u5d4c\u5957\u7684\u662f\u7ed3\u6784\u4f53\u6307\u9488 name : \"Boby\" , }, } doge . bark () // Boby \u6b63\u5728\u6c6a\u6c6a\u6c6a~ } \u7ed3\u6784\u4f53\u6807\u7b7e Tag \u00b6 Tag \u662f\u7ed3\u6784\u4f53\u7684\u5143\u4fe1\u606f\uff0c\u53ef\u4ee5\u5728\u8fd0\u884c\u7684\u65f6\u5019\u901a\u8fc7\u53cd\u5c04\u673a\u5236\u8bfb\u53d6\u3002\u6240\u4ee5\u53ea\u6709\u9996\u5b57\u6bcd\u5927\u5199\u7684\u53ef\u88ab\u5bfc\u51fa\u7684\u53d8\u91cf\u80fd\u88ab\u53cd\u5c04\u8bfb\u53d6\uff0c\u8f6c\u6210JSON\u3002 Tag \u5728\u7ed3\u6784\u4f53\u5b57\u6bb5\u7684\u540e\u65b9\u5b9a\u4e49\uff0c\u7531\u4e00\u5bf9**\u53cd\u5f15\u53f7**\u5305\u8d77\u6765\u3002 eg\uff1a type person struct { Name string `json:\"name\"` } \u4e00\u4e2a Tag \u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u952e\u503c\u5bf9\u7ec4\u6210\u3002 **\u952e\u503c\u5bf9**\u4e4b\u95f4\u4f7f\u7528\u7a7a\u683c\u5206\u9694 **\u952e**\u4e0e**\u503c**\u4e4b\u95f4\u4f7f\u7528\u5192\u53f7\u5206\u9694\uff0c\u4e0d\u80fd\u6709\u7a7a\u683c \u503c\u4f7f\u7528\u53cc\u5f15\u53f7\u62ec\u8d77\u6765\u3002 \u503c\u4e3a - \u65f6\u8be5\u5b57\u6bb5\u4e0d\u4f1a\u88ab\u5e8f\u5217\u5316 \u7f16\u5199 Tag \u65f6\u5fc5\u987b\u4e25\u683c\u9075\u5b88\u952e\u503c\u5bf9\u7684\u89c4\u5219\u3002\u7ed3\u6784\u4f53\u6807\u7b7e\u7684\u89e3\u6790\u5bb9\u9519\u80fd\u529b\u5f88\u5dee\uff0c\u5199\u9519\u4e86\u7f16\u8bd1\u671f\u548c\u8fd0\u884c\u671f\u90fd\u4e0d\u4f1a\u63d0\u793a\u4efb\u4f55\u9519\u8bef\uff0c\u53cd\u5c04\u4e5f\u65e0\u6cd5\u6b63\u786e\u53d6\u503c\u3002 \u7ed3\u6784\u4f53\u5e8f\u5217\u5316 \u00b6 \u5e8f\u5217\u5316\uff08struct -> JSON\uff09 \uff1a\u7ed3\u6784\u4f53\u5bf9\u8c61 \u8f6c\u6210 JSON\u683c\u5f0f\u5b57\u7b26\u4e32 \u53cd\u5e8f\u5217\u5316\uff08JSON -> struct\uff09 \uff1aJSON\u683c\u5f0f\u5b57\u7b26\u4e32 \u8f6c\u6210 \u7ed3\u6784\u4f53\u5bf9\u8c61 \u4f7f\u7528 encoding/json \u5b8c\u6210\u3002 import \"encoding/json\" // \u5e8f\u5217\u5316\u51fd\u6570\uff0cstruct -> JSON func Marshal ( v interface {}) ([] byte , error ) {} // \u53cd\u5e8f\u5217\u5316\u51fd\u6570\uff0cJSON -> struct func Unmarshal ( data [] byte , v interface {}) error {} eg\uff1a package main import ( \"encoding/json\" \"fmt\" ) // 1. \u5e8f\u5217\u5316 encode\uff1a\u628a\u7ed3\u6784\u4f53\u53d8\u91cf -> json\u683c\u5f0f\u7684\u5b57\u7b26\u4e32 // 2. \u53cd\u5e8f\u5217\u5316 decode\uff1ajson\u683c\u5f0f\u7684\u5b57\u7b26\u4e32 -> \u7ed3\u6784\u4f53\u53d8\u91cf type person struct { Name string `json:\"name\" db:\"name\" ini:\"name\"` Age int `json:\"age\"` Sex string Addr string `json:\"-\"` // value \u4e3a \"-\" \u65f6\u4e0d\u5e8f\u5217\u5316 } func main () { p1 := person { \"Boii\" , 18 , \"male\" } /* \u5e8f\u5217\u5316 */ b , err := json . Marshal ( p1 ) if err != nil { fmt . Println ( err ) } fmt . Println ( string ( b )) // {\"name\":\"Boii\",\"age\":18,\"Sex\":\"male\"} fmt . Printf ( \"%T \\n\" , b ) // []uint8 /* \u53cd\u5e8f\u5217\u5316 */ str := `{\"name\":\"Eva\",\"age\":18}` var p2 person json . Unmarshal ([] byte ( str ), & p2 ) fmt . Printf ( \"%#v \\n\" , p2 ) // main.person{Name:\"Eva\", Age:18, Sex:\"\"} fmt . Printf ( \"%T \\n\" , p2 ) // main.person } \u5e8f\u5217\u5316\u65f6\uff0ckey \u4f1a\u4f18\u5148\u9009\u62e9\u5b57\u6bb5\u7684 Tag \u4e2d\u6307\u5b9a\u7684 key {% note warning, \u7ed3\u6784\u4f53\u4e2d\u975e public \u7684\u5b57\u6bb5\u4e0d\u4f1a\u88ab\u5e8f\u5217\u5316 %} \u7ed3\u6784\u4f53\u7684\u6df1\u6d45\u62f7\u8d1d \u00b6 {% noteblock info %} \u6df1\u62f7\u8d1d\uff1a\u5373**\u4e3a\u65b0\u7684\u5bf9\u8c61\u5206\u914d\u4e86\u5185\u5b58**\uff0c\u5bf9\u65b0\u5bf9\u8c61\u7684\u4fee\u6539\u4e0d\u4f1a\u5f71\u54cd\u65e7\u5bf9\u8c61 \u6d45\u62f7\u8d1d\uff1a\u5373**\u590d\u5236\u4e86\u65e7\u5bf9\u8c61\u7684\u5730\u5740**\uff0c\u5bf9\u65b0\u5bf9\u8c61\u7684\u4fee\u6539\u4f1a\u5f71\u54cd\u65e7\u5bf9\u8c61 \u503c\u7c7b\u578b\u90fd\u662f\u6df1\u62f7\u8d1d \u5f15\u7528\u7c7b\u578b\u90fd\u662f\u6d45\u62f7\u8d1d {% endnoteblock %} \u770b\u61c2\u4ee5\u4e0a\u4e24\u53e5\u8bdd\uff0c\u7ed3\u6784\u4f53\u7684\u6df1\u6d45\u62f7\u8d1d\u5c31\u5f88\u5bb9\u6613\u5b9e\u73b0\u4e86 package main import \"fmt\" type Person struct { name string age int } func main () { // \u7ed3\u6784\u4f53\u7684\u6df1\u62f7\u8d1d person1 := Person { \"Boii\" , 18 } person2 := person1 // \u6df1\u62f7\u8d1d fmt . Println ( person1 ) // {Boii 18} fmt . Println ( person2 ) // {Boii 18} person2 . age = 20 fmt . Println ( person1 ) // {Boii 18} fmt . Println ( person2 ) // {Boii 20} // \u7ed3\u6784\u4f53\u7684\u6d45\u62f7\u8d1d person3 := & person1 // \u6d45\u62f7\u8d1d person3 . age = 20 fmt . Println ( person1 ) // {Boii 20} fmt . Println ( person3 ) // &{Boii 20} } \u7ed3\u6784\u4f53\u662f\u503c\u7c7b\u578b\uff0c\u76f4\u63a5\u8d4b\u503c\u7684\u65f6\u5019\u662f\u6df1\u62f7\u8d1d\uff0c\u8d4b\u503c\u4e00\u4e2a\u6307\u9488\u5219\u662f\u6d45\u62f7\u8d1d","title":"10.\u7ed3\u6784\u4f53"},{"location":"Go/Basic/Golang-10-%E7%BB%93%E6%9E%84%E4%BD%93/#10-","text":"Go\u8bed\u8a00\u4e2d\u6ca1\u6709\u201c\u7c7b\u201d\u7684\u6982\u5ff5\uff0c\u4e5f\u4e0d\u652f\u6301\u201c\u7c7b\u201d\u7684\u7ee7\u627f\u7b49\u9762\u5411\u5bf9\u8c61\u7684\u6982\u5ff5\u3002Go\u8bed\u8a00\u4e2d\u901a\u8fc7\u7ed3\u6784\u4f53\u7684\u5185\u5d4c\u518d\u914d\u5408\u63a5\u53e3\u6bd4\u9762\u5411\u5bf9\u8c61\u5177\u6709\u66f4\u9ad8\u7684\u6269\u5c55\u6027\u548c\u7075\u6d3b\u6027\u3002 \u5f53\u6211\u4eec\u60f3\u8868\u793a\u4e00\u4e9b\u4e8b\u7269\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u57fa\u672c\u6570\u636e\u7c7b\u578b\u8868\u793a\u5176\u5404\u9879\u57fa\u672c\u5c5e\u6027\uff0c\u901a\u8fc7\u7ed3\u6784\u4f53\u5c06\u5176\u7ec4\u5408\u8d77\u6765\u3002\u5728 Go \u4e2d\u53ef\u4ee5\u901a\u8fc7 struct \u5b9e\u73b0\u9762\u5411\u5bf9\u8c61\u3002","title":"10-\u7ed3\u6784\u4f53"},{"location":"Go/Basic/Golang-10-%E7%BB%93%E6%9E%84%E4%BD%93/#_1","text":"{% note warning, \u6ce8\u610f\uff1a\u7ed3\u6784\u4f53\u662f\u503c\u7c7b\u578b\uff01\uff01\uff01 %} \u4f7f\u7528 type \u548c struct \u6765\u5b9a\u4e49\u7ed3\u6784\u4f53\u3002 \u57fa\u672c\u8bed\u6cd5\u5982\u4e0b\uff1a type structT struct { field1 T field2 T ... } structT \uff1a\u6807\u8bc6\u53ea\u5b9a\u4e49\u7ed3\u6784\u4f53\u540d\u79f0\uff0c\u540c\u4e00\u5305\u5185\u4e0d\u80fd\u91cd\u590d\u3002 field \uff1a\u7ed3\u6784\u7684\u57fa\u672c\u5c5e\u6027\u7684\u540d\u5b57\uff0c\u7ed3\u6784\u4f53\u4e2d\u7684\u5b57\u6bb5\u540d\u4e0d\u80fd\u91cd\u590d T \uff1a\u5b57\u6bb5\u7684\u5177\u4f53\u7c7b\u578b eg\uff1a type person struct { name string age int8 city string } \u540c\u7c7b\u578b\u5b57\u6bb5\u53ef\u4ee5\u5199\u5728\u4e00\u884c type person struct { name , city string age int8 } \u901a\u8fc7\u4ee5\u4e0a\u4ee3\u7801\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a person \u7684\u81ea\u5b9a\u4e49\u7c7b\u578b\uff0c\u5b83\u6709 name \u3001 age \u3001 city \u4e09\u4e2a\u5b57\u6bb5\uff0c\u8868\u793a\u4eba\u7684\u59d3\u540d\u3001\u5e74\u9f84\u3001\u57ce\u5e02\u4e09\u4e2a\u5c5e\u6027\u3002 \u8fd9\u6837\u5c31\u53ef\u4ee5\u901a\u8fc7 person \u8fd9\u4e2a\u7ed3\u6784\u4f53\u5f88\u65b9\u4fbf\u7684\u5728\u7a0b\u5e8f\u4e2d\u8868\u793a\u548c\u5b58\u50a8\u4eba\u7684\u4fe1\u606f\u4e86\u3002 \u5728\u5b9a\u4e49\u7ed3\u6784\u4f53\u65f6\uff0c\u5efa\u8bae\u5404\u4e2a\u5b57\u6bb5\u6309\u5b57\u6bb5\u7c7b\u578b\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u6709\u52a9\u4e8e \u5185\u5b58\u5bf9\u9f50 \u3002 \u7c7b\u578b\u5927\u5c0f\u53c2\u8003 \u300a\u6570\u636e\u7c7b\u578b\u300b\u4e00\u7ae0 Go \u5185\u7f6e\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b\u7528\u6765\u63cf\u8ff0\u4e00\u4e2a\u503c\uff0c\u800c\u7ed3\u6784\u4f53\u7528\u6765\u63cf\u8ff0\u4e00\u7ec4\u503c\uff0c\u672c\u8d28\u4e0a\u662f\u4e00\u79cd\u805a\u5408\u578b\u6570\u636e\u7c7b\u578b\u3002 \u4e00\u4e2a\u7ed3\u6784\u4f53\u5c31\u50cf Java \u4e2d\u7684\u4e00\u4e2a\u7c7b\uff0c\u4e0d\u8fc7 Java \u4e2d\u7684\u7c7b\u8fd8\u6709\u6784\u9020\u51fd\u6570\u3001\u65b9\u6cd5\u7b49\uff0c\u8fd9\u4e9b Go \u7684\u7ed3\u6784\u4f53\u4e00\u6837\u53ef\u4ee5\u5b9e\u73b0\uff0c\u65b9\u5f0f\u6709\u4e9b\u4e0d\u540c","title":"\u5b9a\u4e49"},{"location":"Go/Basic/Golang-10-%E7%BB%93%E6%9E%84%E4%BD%93/#_2","text":"\u53ea\u6709\u5f53\u7ed3\u6784\u4f53\u5b9e\u4f8b\u5316\u65f6\uff0c\u624d\u4f1a\u771f\u6b63\u5730\u5206\u914d\u5185\u5b58\u3002\u5373\u5fc5\u987b\u5b9e\u4f8b\u5316\u540e\u624d\u80fd\u4f7f\u7528\u7ed3\u6784\u4f53\u7684\u5b57\u6bb5\u3002 \u7ed3\u6784\u4f53\u672c\u8eab\u4e5f\u662f\u4e00\u79cd\u6570\u636e\u7c7b\u578b\uff0c\u6211\u4eec\u53ef\u4ee5\u50cf\u58f0\u660e\u57fa\u672c\u6570\u636e\u7c7b\u578b\u4e00\u6837\u58f0\u660e\u7ed3\u6784\u4f53 // \u65b9\u5f0f1 var identifier structT identifier . field1 = value1 identifier . field2 = value2 ... identifier \uff1a\u7ed3\u6784\u4f53\u5b9e\u4f8b\u540d\u79f0 structT \uff1a\u7ed3\u6784\u4f53\u7c7b\u578b field \uff1a\u7ed3\u6784\u4f53\u5b57\u6bb5","title":"\u5b9e\u4f8b\u5316"},{"location":"Go/Basic/Golang-10-%E7%BB%93%E6%9E%84%E4%BD%93/#1","text":"type person struct { name string city string age int8 } func main () { // \u65b9\u5f0f1 var p1 person p1 . city = \"SWA\" p1 . name = \"Boii\" fmt . Printf ( \"p1 = %v \\n\" , p1 ) // p1 = {Boii 0 SWA} fmt . Printf ( \"p1 = %#v \\n\" , p1 ) // p1 = main.person{name:\"Boii\", age:0, city:\"SWA\"} } \u4ed4\u7ec6\u89c2\u5bdf\uff1a - \u65b9\u5f0f1\u58f0\u660e\u4ee5\u540e\u9010\u4e00\u7ed9\u6bcf\u4e2a\u5b57\u6bb5\u8d4b\u503c\uff0c\u53ef\u4ee5\u7ed3\u6784\u4f53\u4e2d\u5b9a\u4e49\u5b57\u6bb5\u65f6\u7684\u987a\u5e8f\uff0c\u6ca1\u6709\u8d4b\u503c\u7684\u5b57\u6bb5\u9ed8\u8ba4\u4e3a\u96f6\u503c - \u65b9\u5f0f2 \u548c \u65b9\u5f0f3\u5728\u8d4b\u503c\u7684\u65f6\u5019\u9700\u8981\u6240\u6709\u5b57\u6bb5\u90fd\u8d4b\u503c\uff0c\u4e14\u9700\u8981\u6309\u987a\u5e8f\u3002 - \u901a\u8fc7 . \u53ef\u4ee5\u8bbf\u95ee\u7ed3\u6784\u4f53\u4e2d\u7684\u5b57\u6bb5\uff0c\u4f8b\u5982 p1.city .","title":"\u65b9\u5f0f1\uff1a\u57fa\u672c\u5b9e\u4f8b\u5316"},{"location":"Go/Basic/Golang-10-%E7%BB%93%E6%9E%84%E4%BD%93/#2newt","text":"\u901a\u8fc7 new() \u53ef\u4ee5\u5bf9\u7ed3\u6784\u4f53\u5b9e\u4f8b\u5316\uff0c\u5f97\u5230\u7684\u662f\u7ed3\u6784\u4f53\u6307\u9488\uff0c\u5176\u5404\u4e2a\u5b57\u6bb5\u90fd\u4e3a\u96f6\u503c\u3002 type person struct { name string city string age int8 } func main () { var p1 = new ( person ) fmt . Printf ( \"%T \\n\" , p1 ) // *main.person fmt . Printf ( \"p1 = %#v \\n\" , p1 ) // p1 = &main.person{name:\"\", age:0, city:\"\"} p1 . name = \"Boii\" fmt . Printf ( \"p1 = %#v \\n\" , p1 ) // p1 = &main.person{name:\"Boii\", age:0, city:\"\"} } \u6ce8\u610f \uff1aGo \u4e2d\u7684\u7ed3\u6784\u4f53\u6307\u9488\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 . \u6765\u8bbf\u95ee\u7ed3\u6784\u4f53\u6210\u5458\u3002 p1.name = \"Boii\" \u76f8\u5f53\u4e8e (*p1).name = \"Boii\" \uff0c\u8fd9\u662f Go \u7684\u8bed\u6cd5\u7cd6\u3002","title":"\u65b9\u5f0f2\uff1anew(T) \u7ed3\u6784\u4f53\u6307\u9488"},{"location":"Go/Basic/Golang-10-%E7%BB%93%E6%9E%84%E4%BD%93/#3t","text":"\u4f7f\u7528 & \u5bf9\u7ed3\u6784\u4f53\u53d6\u5730\u5740\u64cd\u4f5c\u76f8\u5f53\u4e8e\u5bf9\u8be5\u7ed3\u6784\u4f53\u7c7b\u578b\u8fdb\u884c\u4e86\u4e00\u6b21 new \u5b9e\u4f8b\u5316\u64cd\u4f5c\u3002 type person struct { name string city string age int8 } func main () { var p2 = & person { \"Boii\" , 10 , \"SWA\" } fmt . Printf ( \"%T \\n\" , p2 ) // *main.person fmt . Printf ( \"p2 = %#v \\n\" , p2 ) // p = &main.person{name:\"Boii\", age:10, city:\"SWA\"} p3 := & person {} p3 . name = \"Candy\" p3 . age = 10 p3 . city = \"SWA\" fmt . Printf ( \"%T \\n\" , p3 ) // *main.person fmt . Printf ( \"p3 = %#v \\n\" , p3 ) // p = &main.person{name:\"Candy\", age:10, city:\"SWA\"} } \u6240\u4ee5\uff1a new(Type) \u548c &Type{} \u662f\u7b49\u4ef7\u7684\u3002","title":"\u65b9\u5f0f3\uff1a&amp;T{} \u53d6\u7ed3\u6784\u4f53\u5730\u5740"},{"location":"Go/Basic/Golang-10-%E7%BB%93%E6%9E%84%E4%BD%93/#_3","text":"\u5728\u5b9a\u4e49\u4e00\u4e9b\u4e34\u65f6\u6570\u636e\u7ed3\u6784\u7b49\u573a\u666f\u4e0b\u8fd8\u53ef\u4ee5\u4f7f\u7528\u533f\u540d\u7ed3\u6784\u4f53\u3002 func main () { // \u5b9a\u4e49\u533f\u540d\u7ed3\u6784\u4f53 // \u5b57\u6bb5\u4e4b\u95f4\u7528 \u5206\u53f7 \u9694\u5f00 var user struct { name string ; age int8 } // \u901a\u8fc7\u7ed3\u6784\u4f53\u5b9e\u4f8b\u4f7f\u7528\u533f\u540d\u7ed3\u6784\u4f53 user . name = \"Boii\" user . age = 18 fmt . Printf ( \"%v \\n\" , user ) // {Boii 18} fmt . Printf ( \"%#v \\n\" , user ) // struct { name string; age int8 }{name:\"Boii\", age:18} // \u76f8\u540c\u7c7b\u578b\u53ef\u4ee5\u7b80\u5199 var stu struct { name string ; ID , age int } // \u89c4\u8303\u5199\u6cd5 var stud struct { name string ID , age int } }","title":"\u533f\u540d\u7ed3\u6784\u4f53"},{"location":"Go/Basic/Golang-10-%E7%BB%93%E6%9E%84%E4%BD%93/#_4","text":"\u7ed3\u6784\u4f53\u6ca1\u6709\u521d\u59cb\u5316\u7684\u65f6\u5019\uff0c\u6210\u5458\u53d8\u91cf\u90fd\u662f\u5bf9\u5e94\u7c7b\u578b\u7684\u96f6\u503c\uff0c\u8fd9\u70b9\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u5df2\u7ecf\u6709\u6240\u4f53\u73b0\u3002 type stu struct { name string age int8 ID int8 } func main () { var s1 stu fmt . Printf ( \"s1 = %#v \\n\" , s1 ) // s1 = main.stu{name:\"\", age:0, ID:0} }","title":"\u521d\u59cb\u5316"},{"location":"Go/Basic/Golang-10-%E7%BB%93%E6%9E%84%E4%BD%93/#_5","text":"identifier := structT { field1 : value1 , field2 : value2 , ... } var identifier = structT { field1 : value1 , field2 : value2 , ... } s2 := stu { name : \"Boii\" , age : 18 , } fmt . Printf ( \"s2 = %#v \\n\" , s2 ) // s2 = main.stu{name:\"Boii\", age:18, ID:0} var s3 = stu { name : \"Eva\" , age : 18 , } fmt . Printf ( \"s3 = %#v \\n\" , s3 ) // s3 = main.stu{name:\"Eva\", age:18, ID:0} \u4f7f\u7528\u952e\u503c\u5bf9\u7684\u65b9\u5f0f\u53ef\u4ee5\u4e0d\u6309\u7ed3\u6784\u4f53\u5b9a\u4e49\u65f6\u5b57\u6bb5\u7684\u987a\u5e8f\uff0c\u53ef\u4ee5\u4e0d\u521d\u59cb\u5316\u6bcf\u4e00\u4e2a\u5b57\u6bb5\uff0c\u6ca1\u88ab\u521d\u59cb\u5316\u7684\u5b57\u6bb5\u5c31\u9ed8\u8ba4\u4e3a\u96f6\u503c\u3002 \u6ce8\u610f\u6700\u540e\u4e00\u4e2a\u5b57\u6bb5\u4e5f\u8981\u52a0\u4e0a\u9017\u53f7 , \u3002 s3 := & stu { age : 18 , ID : 101 , } fmt . Printf ( \"s3 = %#v \\n\" , s3 ) // s3 = &main.stu{name:\"\", age:18, ID:101} \u4e5f\u53ef\u4ee5\u5bf9\u7ed3\u6784\u4f53\u6307\u9488\u8fdb\u884c\u952e\u503c\u5bf9\u521d\u59cb\u5316","title":"\u4f7f\u7528\u952e\u503c\u5bf9\u7684\u65b9\u5f0f\u521d\u59cb\u5316"},{"location":"Go/Basic/Golang-10-%E7%BB%93%E6%9E%84%E4%BD%93/#_6","text":"\u521d\u59cb\u5316\u7ed3\u6784\u4f53\u7684\u65f6\u5019\u53ef\u4ee5\u7b80\u5199\uff0c\u4e0d\u5199\u952e\uff0c\u53ea\u5199\u503c\u3002 identifier := structT { value1 , value2 , ... } var identifier = structT { value1 , value2 , ... } eg\uff1a s4 := stu { \"Boii\" , 18 , 102 , } fmt . Printf ( \"s4 = %#v \\n\" , s4 ) // s4 = main.stu{name:\"Boii\", age:18, ID:102} \u4f7f\u7528\u8fd9\u79cd\u8981\u6ce8\u610f\uff1a 1. \u5fc5\u987b\u521d\u59cb\u5316\u7ed3\u6784\u4f53\u91cc\u6240\u6709\u5b57\u6bb5 2. \u521d\u59cb\u503c\u586b\u5145\u987a\u5e8f\u5fc5\u987b\u548c\u5b57\u6bb5\u5728\u7ed3\u6784\u4f53\u4e2d\u58f0\u660e\u7684\u987a\u5e8f\u4e00\u81f4 3. \u4e0d\u80fd\u548c\u952e\u503c\u5bf9\u7684\u521d\u59cb\u5316\u65b9\u5f0f\u6df7\u7528","title":"\u4f7f\u7528\u503c\u5217\u8868\u7684\u65b9\u5f0f\u521d\u59cb\u5316"},{"location":"Go/Basic/Golang-10-%E7%BB%93%E6%9E%84%E4%BD%93/#_7","text":"\u521d\u59cb\u5316\u65f6\uff0c\u5982\u679c\u503c\u5199\u6210\u591a\u884c\uff0c\u5219\u6700\u540e\u4e00\u4e2a\u4e5f\u8981\u5e26\u4e0a\u9017\u53f7 , ; \u5982\u679c\u5199\u6210\u4e00\u884c\uff0c\u5219\u6700\u540e\u4e00\u4e2a\u53ef\u4ee5\u4e0d\u5e26\u9017\u53f7 , ; \u4e5f\u53ef\u4ee5\u5e26\u4e0a\u9017\u53f7\u3002 type Person struct { name string age int sex string } func main () { p1 := Person { \"Boii\" , 18 , \"male\" , } p2 := Person { name : \"Boii\" , sex : \"male\" , age : 18 , } p3 := Person { \"Boii\" , 18 , \"male\" } p4 := Person { name : \"Boii\" , sex : \"male\" , age : 18 , } }","title":"\u4e00\u70b9\u7ec6\u8282"},{"location":"Go/Basic/Golang-10-%E7%BB%93%E6%9E%84%E4%BD%93/#_8","text":"\u4f8b\u5982\u4e0b\u9762\u7684\u901a\u5f0f\uff0c\u65b9\u6cd5\u540d\u524d\u9762\u7684**\u63a5\u6536\u8005\u53d8\u91cf\u548c\u63a5\u6536\u8005\u7c7b\u578b**\uff0c\u5c31\u662f\u4e00\u79cd\u9650\u5b9a\u3002 // \u65b9\u6cd5 func ( \u63a5\u6536\u8005\u53d8\u91cf \u63a5\u6536\u8005\u7c7b\u578b ) \u65b9\u6cd5\u540d ( \u53c2\u6570\u5217\u8868 ) ( \u8fd4\u56de\u53c2\u6570 ) { \u65b9\u6cd5\u4f53 } // \u5bf9\u6bd4\uff1a\u51fd\u6570 func \u51fd\u6570\u540d ( \u53c2\u6570\u5217\u8868 ) ( \u8fd4\u56de\u53c2\u6570 ) { \u51fd\u6570\u4f53 } \u63a5\u6536\u8005\u6307\u7684\u5c31\u662f\u88ab\u5141\u8bb8\u8c03\u7528\u7684\u8c03\u7528\u8005 \u3002\u6ce8\u610f\u7406\u89e3\uff1a\u4e0b\u9762\u5c06\u4ee5\u63a5\u6536\u8005\u4ee3\u66ff\u8c03\u7528\u8005\u7684\u8bf4\u6cd5\u3002 \u63a5\u6536\u8005\u53d8\u91cf \uff1a\u547d\u540d\u65f6\uff0c\u5b98\u65b9\u5efa\u8bae\u4f7f\u7528\u63a5\u6536\u8005\u7c7b\u578b\u9996\u4e2a\u5b57\u6bcd\u5c0f\u5199\u3002eg\uff1a p Person \u3001 c Connector \u63a5\u6536\u8005\u7c7b\u578b \uff1a\u63a5\u6536\u8005\u7c7b\u578b\u548c\u53c2\u6570\u76f8\u4f3c\uff0c\u53ef\u4ee5\u662f\u6307\u9488\u7c7b\u578b\u6216\u975e\u6307\u9488\u7c7b\u578b \u65b9\u6cd5\u540d\u3001\u53c2\u6570\u5217\u8868\u3001\u8fd4\u56de\u53c2\u6570 \uff1a\u5177\u4f53\u683c\u5f0f\u4e0e\u51fd\u6570\u5b9a\u4e49\u76f8\u540c // Dog \u7ed3\u6784\u4f53 type Dog struct { name string age int8 } // NewDog \u6784\u9020\u51fd\u6570 func NewDog ( name string , age int8 ) * Dog { return & Dog { name , age } } // Run Dog\u5954\u8dd1\u7684\u65b9\u6cd5 // \u9650\u5b9a\u4e86 Dog \u7ed3\u6784\u4f53\u7c7b\u578b\u624d\u53ef\u4ee5\u8c03\u7528\u6b64\u65b9\u6cd5 func ( d Dog ) Run ( distance int ) { fmt . Printf ( \"%d \u5c81\u7684\u72d7\u72d7 %s \u8dd1\u4e86 %d \u7c73\\n\" , d . age , d . name , distance ) } func main () { boby := NewDog ( \"Boby\" , 2 ) boby . Run ( 100 ) doge := Dog { \"Doge\" , 3 } doge . Run ( 12 ) } // ------------------------------------------------- // Output: 2 \u5c81\u7684\u72d7\u72d7 Boby \u8dd1\u4e86 100 \u7c73 3 \u5c81\u7684\u72d7\u72d7 Doge \u8dd1\u4e86 12 \u7c73","title":"\u65b9\u6cd5\u548c\u63a5\u6536\u8005"},{"location":"Go/Basic/Golang-10-%E7%BB%93%E6%9E%84%E4%BD%93/#_9","text":"\u5982\u679c\u6307\u5b9a\u6307\u9488\u7c7b\u578b\u7684\u63a5\u6536\u8005\uff0c\u5728\u65b9\u6cd5\u5185\u4fee\u6539\u63a5\u6536\u8005\u7684\u6210\u5458\u53d8\u91cf\uff0c\u5219**\u7ed3\u675f\u65b9\u6cd5\u540e\u4fee\u6539\u4f9d\u7136\u6709\u6548**\u3002 \u4f8b\u5982\u6211\u4eec\u4e3a Dog \u6dfb\u52a0\u4e00\u4e2a setAge \u65b9\u6cd5\uff1a func ( d * Dog ) SetAge ( newAge int8 ) { d . age = newAge } func main () { boby := NewDog ( \"Boby\" , 2 ) fmt . Println ( boby . age ) // 2 boby . SetAge ( 10 ) fmt . Println ( boby . age ) // 10 }","title":"\u6307\u9488\u7c7b\u578b\u7684\u63a5\u6536\u8005"},{"location":"Go/Basic/Golang-10-%E7%BB%93%E6%9E%84%E4%BD%93/#_10","text":"\u5f53\u65b9\u6cd5\u4f5c\u7528\u4e8e\u503c\u7c7b\u578b\u63a5\u6536\u8005\u65f6\uff0cGo \u4f1a\u5728\u8fd0\u884c\u65f6\u5c06\u63a5\u6536\u8005\u7684\u503c\u590d\u5236\u4e00\u4efd\u3002\u4e0d\u8fc7**\u5728\u65b9\u6cd5\u5185\u5bf9\u63a5\u6536\u8005\u7684\u4fee\u6539\u53ea\u662f\u5bf9\u526f\u672c\u7684\u4fee\u6539**\uff0c\u4e0d\u4f1a\u5f71\u54cd\u63a5\u6536\u8005\u3002 \u4f46\u662f\u5728\u7f16\u8bd1\u5668\u4e2d\uff0c\u4e00\u4e2a\u7ed3\u6784\u4f53\u201c\u503c\u5b9e\u73b0\u201d\u4e86\u4e00\u4e2a\u65b9\u6cd5\uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u5e2e\u4f60\u591a\u6765\u4e00\u6b21\u201c\u6307\u9488\u5b9e\u73b0\u201d\u3002 \u5373\u503c\u5b9e\u73b0 = \u503c\u5b9e\u73b0 + \u6307\u9488\u5b9e\u73b0\uff1b\u6307\u9488\u5b9e\u73b0 = \u6307\u9488\u5b9e\u73b0\u3002 \u8fd9\u4e00\u70b9\u5728\u63a5\u53e3\u4e2d\u6709\u533a\u522b\u3002 func ( d Dog ) SetAge ( newAge int8 ) { d . age = newAge } func main () { boby := NewDog ( \"Boby\" , 2 ) fmt . Println ( boby . age ) // 2 boby . SetAge ( 10 ) fmt . Println ( boby . age ) // 2 }","title":"\u503c\u7c7b\u578b\u7684\u63a5\u6536\u8005"},{"location":"Go/Basic/Golang-10-%E7%BB%93%E6%9E%84%E4%BD%93/#_11","text":"\u503c\u63a5\u6536\u8005\u65b9\u6cd5\uff08Value receiver method\uff09\u548c\u6307\u9488\u63a5\u6536\u8005\u65b9\u6cd5\uff08Pointer receiver method\uff09\uff0c\u90fd\u53ef\u4ee5\u88ab\u7ed3\u6784\u4f53\u53d8\u91cf\uff08struct variable\uff09\u6216\u7ed3\u6784\u4f53\uff08struct pointer\uff09\u6307\u9488\u8c03\u7528\u3002 \u503c\u63a5\u6536\u8005\u65b9\u6cd5\u4e2d\uff0c\u5bf9\u63a5\u6536\u8005\u7684\u4fee\u6539\uff0c**\u4e0d\u4f1a**\u5f71\u54cd\u8c03\u7528\u8005\u3002 \u6307\u9488\u63a5\u6536\u8005\u65b9\u6cd5\u4e2d\uff0c\u5bf9\u63a5\u6536\u8005\u7684\u4fee\u6539\uff0c**\u4f1a**\u5f71\u54cd\u8c03\u7528\u8005\u3002 type A struct { age int } func ( a A ) read () { a . age = 50 } func ( a * A ) write ( n int ) { a . age = n } func main () { aV := A { age : 10 } aP := & A { age : 10 } aV . read () fmt . Println ( aV . age ) // 10 aV . write ( 15 ) fmt . Println ( aV . age ) // 15 aP . read () fmt . Println ( aP . age ) // 10 aP . write ( 18 ) fmt . Println ( aP . age ) // 18 } \u5728\u4e0a\u8ff0\u6817\u5b50\u4e2d\uff0c aP \u662f\u7ed3\u6784\u4f53\u6307\u9488\uff0c\u5728 aP \u8c03\u7528\u503c\u65b9\u6cd5 aP.read() \u65f6\uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u8f6c\u6362\u4e3a (*aP).read() \uff1b aV \u662f\u7ed3\u6784\u4f53\u53d8\u91cf\uff0c\u5728 aV \u8c03\u7528\u6307\u9488\u65b9\u6cd5 aV.write() \u65f6\uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u8f6c\u6362\u4e3a (&aV).write(15) \u3002 \u503c\u63a5\u6536\u8005\u65b9\u6cd5 \u6307\u9488\u63a5\u6536\u8005\u65b9\u6cd5 \u7ed3\u6784\u4f53\u53d8\u91cf\u8c03\u7528\u8005 \u53ef\u4ee5\u8c03\u7528\uff0c\u7c7b\u4f3c\u4e8e\u4f20\u503c \u53ef\u4ee5\u8c03\u7528\uff0c\u76f8\u5f53\u4e8e (&aV).write(15) \u7ed3\u6784\u4f53\u6307\u9488\u8c03\u7528\u8005 \u53ef\u4ee5\u8c03\u7528\uff0c\u76f8\u5f53\u4e8e (*aP).read() \u53ef\u4ee5\u8c03\u7528\uff0c\u7c7b\u4f3c\u4e0e\u4f20\u6307\u9488\uff0c\u6240\u4ee5\u4f1a\u5f71\u54cd\u8c03\u7528\u8005 \u4fee\u6539 \u4e0d\u5f71\u54cd\u8c03\u7528\u8005 \u5f71\u54cd\u8c03\u7528\u8005","title":"\u4e24\u79cd\u7c7b\u578b\u63a5\u6536\u8005\u7684\u5dee\u5f02"},{"location":"Go/Basic/Golang-10-%E7%BB%93%E6%9E%84%E4%BD%93/#_12","text":"\u8981\u770b\u7c7b\u578b\u7684\u672c\u8d28\u3002\u5982\u679c\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b\u7684\u5b9e\u4f8b\uff0c\u5e94\u8be5\u662f\u72ec\u4e00\u4efd\u7684\uff0c\u90a3\u4e48\u5c31\u5e94\u8be5\u7528\u6307\u9488\u63a5\u6536\u8005\u65b9\u6cd5\u3002 \u4f8b\u5982\uff0c\u6587\u4ef6\u7ed3\u6784\u4f53\u3002\u6bcf\u4e2a\u6587\u4ef6\u90fd\u662f\u72ec\u4e00\u4efd\u7684\uff0c\u5bf9\u5e94\u5730\uff0c\u6587\u4ef6\u7ed3\u6784\u4f53\u8fd4\u56de\u4e00\u4e2a\u6587\u4ef6\u5bf9\u8c61\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u5e94\u8be5\u552f\u4e00\u7684\u4ee3\u8868\u8fd9\u4e2a\u6587\u4ef6\uff0c\u6240\u4ee5\u6587\u4ef6\u7ed3\u6784\u4f53\u7684\u65b9\u6cd5\u5e94\u8be5\u4f7f\u7528\u6307\u9488\u63a5\u6536\u8005\u65b9\u6cd5\u3002","title":"\u5982\u4f55\u9009\u62e9"},{"location":"Go/Basic/Golang-10-%E7%BB%93%E6%9E%84%E4%BD%93/#_13","text":"\u5728 Go \u4e2d\uff0c\u63a5\u6536\u8005\u7c7b\u578b\u53ef\u4ee5\u662f\u4efb\u4f55\u7c7b\u578b\uff0c\u4e0d\u4ec5\u4ec5\u662f\u7ed3\u6784\u4f53\uff0c\u4efb\u4f55\u7c7b\u578b\u90fd\u53ef\u4ee5\u62e5\u6709\u65b9\u6cd5\u3002 type Status int // \u81ea\u5b9a\u4e49\u7c7b\u578b func ( s Status ) say () { fmt . Println ( \"OK\" ) } func main () { var s Status s . say () } \u6ce8\u610f \uff1a \u975e\u672c\u5730\u7c7b\u578b\u4e0d\u80fd\u5b9a\u4e49\u65b9\u6cd5\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u4e0d\u80fd\u7ed9\u522b\u7684\u5305\u7684\u7c7b\u578b\u5b9a\u4e49\u65b9\u6cd5\u3002","title":"\u4efb\u610f\u7c7b\u578b\u6dfb\u52a0\u65b9\u6cd5"},{"location":"Go/Basic/Golang-10-%E7%BB%93%E6%9E%84%E4%BD%93/#_14","text":"\u5728 Go \u4e2d\uff0c\u7ed3\u6784\u4f53\u548c\u5b83\u6240\u5305\u542b\u7684\u6570\u636e\u5728\u5185\u5b58\u4e2d\u662f\u4ee5\u8fde\u7eed\u5757\u7684\u5f62\u5f0f\u5b58\u5728\u7684\uff0c\u5373\u4f7f\u7ed3\u6784\u4f53\u4e2d\u5d4c\u5957\u4e86\u7ed3\u6784\u4f53\u4e5f\u4e00\u6837\u3002 type person struct { name string age int8 } type stu1 struct { ID int8 info person depart string } type stu2 struct { ID int8 info * person depart string }","title":"\u5185\u5b58\u5e03\u5c40"},{"location":"Go/Basic/Golang-10-%E7%BB%93%E6%9E%84%E4%BD%93/#_15","text":"Go \u4e2d\u7684\u7ed3\u6784\u4f53\u5141\u8bb8\u58f0\u660e\u65f6\u53ea\u6709\u7c7b\u578b\u800c\u6ca1\u6709\u540d\u5b57\uff0c\u8fd9\u6837\u7684\u5b57\u6bb5\u53eb\u505a\u533f\u540d\u5b57\u6bb5 type stu struct { string int8 } func main () { s1 := stu { \"Boii\" , 18 , } fmt . Printf ( \"%#v\\n\" , s1 ) // main.stu{string:\"Boii\", int8:18} fmt . Println ( s1 . string , s1 . int8 ) // Boii 18 } \u533f\u540d\u5b57\u6bb5\u9ed8\u8ba4\u91c7\u7528\u7c7b\u578b\u4f5c\u4e3a\u5b57\u6bb5\u540d\uff0c\u540c\u4e00\u4e2a\u7ed3\u6784\u4f53\u4e2d\u4e00\u79cd\u7c7b\u578b\u53ea\u80fd\u6709\u4e00\u4e2a\u533f\u540d\u5b57\u6bb5\u3002 \u6240\u4ee5\u4e0a\u9762\u7684\u7ed3\u6784\u4f53\u7b49\u4ef7\u4e8e\uff1a type stu struct { string string int8 int8 }","title":"\u533f\u540d\u5b57\u6bb5"},{"location":"Go/Basic/Golang-10-%E7%BB%93%E6%9E%84%E4%BD%93/#_16","text":"\u5d4c\u5957\u7ed3\u6784\u4f53\uff0c\u7b80\u5355\u8bf4\u5c31\u662f\u5957\u5a03 type person struct { name string age int8 } // \u5a03\u5a032 type stu struct { ID int8 info person // \u5957\u5a03\u5a031 depart string } func main () { stuA := stu { ID : 101 , info : person { \"Alice\" , 18 , }, depart : \"CA\" , } fmt . Printf ( \"%#v\\n\" , stuA ) // main.stu{ID:1, info:main.person{name:\"Boii\", age:18}, depart:\"CA\"} } \u5982\u679c\u7ed3\u6784\u4f53\u592a\u5927\uff0c\u62c5\u5fc3\u5f00\u9500\u7684\u8bdd\uff0c\u53ef\u4ee5\u7528\u7ed3\u6784\u4f53\u6307\u9488 // \u5a03\u5a031 type person struct { name string age int8 } // \u5a03\u5a032 type stu2 struct { ID int8 info * person // \u5957\u5a03\u5a031\u7684\u6307\u9488 depart string } func main () { stuB := stu2 { ID : 102 , info : & person { \"Boii\" , 20 , }, depart : \"SE\" , } fmt . Printf ( \"%#v\\n\" , stuB ) // main.stu2{ID:1, info:(*main.person)(0xc0000044a0), depart:\"CA\"} } \u7528\u7ed3\u6784\u4f53\u548c\u7ed3\u6784\u4f53\u6307\u9488\u7684\u5dee\u522b\u5982\u4e0b\u56fe\uff1a \u663e\u7136\u5f53\u7ed3\u6784\u4f53\u8f83\u5927\u7684\u65f6\u5019\uff0c\u4f7f\u7528\u7ed3\u6784\u4f53\u6307\u9488\u7684\u64cd\u4f5c\u5f00\u9500\u4f1a\u5f88\u5c0f\u3002","title":"\u5d4c\u5957\u7ed3\u6784\u4f53"},{"location":"Go/Basic/Golang-10-%E7%BB%93%E6%9E%84%E4%BD%93/#_17","text":"type addr struct { province string city string } type user struct { name string age int8 addr // \u533f\u540d\u5b57\u6bb5 } func main () { var userA user userA . name = \"Boii\" userA . age = 18 userA . addr . province = \"GD\" // \u533f\u540d\u5b57\u6bb5\u9ed8\u8ba4\u4f7f\u7528\u7c7b\u578b\u540d\u4f5c\u4e3a\u5b57\u6bb5\u540d userA . city = \"SWA\" // \u533f\u540d\u5b57\u6bb5\u53ef\u4ee5\u7701\u7565 fmt . Printf ( \"%#v \\n\" , userA ) // main.user{name:\"Boii\", age:18, addr:main.addr{province:\"GD\", city:\"SWA\"}} }","title":"\u5d4c\u5957\u7ed3\u6784\u4f53\u7684\u533f\u540d\u5b57\u6bb5"},{"location":"Go/Basic/Golang-10-%E7%BB%93%E6%9E%84%E4%BD%93/#_18","text":"\u5f53\u5d4c\u5957\u7ed3\u6784\u4f53\u51fa\u73b0\u547d\u540d\u51b2\u7a81\u7684\u65f6\u5019\uff0c\u53ea\u8981\u4e0d\u7701\u7565\uff0c\u628a\u5173\u7cfb\u94fe\u5199\u6e05\u695a\u5c31\u6ca1\u4e8b\u4e86\u3002 type addr struct { province string city string createTime string // \u547d\u540d\u51b2\u7a81 } type user struct { name string age int8 addr // \u533f\u540d\u5b57\u6bb5 createTime string // \u547d\u540d\u51b2\u7a81 } func main () { var userA user userA . name = \"Boii\" userA . age = 18 userA . addr . province = \"GD\" userA . city = \"SWA\" // \u547d\u540d\u51b2\u7a81\u5b57\u6bb5 userA . createTime = \"2020\" // \u5173\u7cfb\u94fe\u5199\u6e05\u695a userA . addr . createTime = \"2021\" // \u5173\u7cfb\u94fe\u5199\u6e05\u695a fmt . Printf ( \"%#v \\n\" , userA ) // main.user{name:\"Boii\", age:18, addr:main.addr{province:\"GD\", city:\"SWA\", createTime:\"2021\"}, createTime:\"2020\"} }","title":"\u5d4c\u5957\u7ed3\u6784\u4f53\u547d\u540d\u51b2\u7a81"},{"location":"Go/Basic/Golang-10-%E7%BB%93%E6%9E%84%E4%BD%93/#_19","text":"\u5728\u9762\u5411\u5bf9\u8c61\u4e2d\uff0c\u7ee7\u627f\u6307\u7684\u662f\u5b50\u7c7b\u53ef\u4ee5\u62e5\u6709\u7236\u7c7b\u6240\u6709\u975e\u79c1\u6709\u5c5e\u6027\u548c\u65b9\u6cd5\u3002 Go \u4e2d\u4f7f\u7528\u7ed3\u6784\u4f53\u5d4c\u5957\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u4e2d\u9762\u5411\u5bf9\u8c61\u7684\u7ee7\u627f\u3002 \u65b9\u6cd5\u662f\u901a\u8fc7\u5728 \"\u5b50\u7ed3\u6784\u4f53\" \u4e2d\u5d4c\u5957 \"\u7236\u7ed3\u6784\u4f53\" \uff0c\u8fd9\u6837 \"\u5b50\u7ed3\u6784\u4f53\" \u5c31\u62e5\u6709 \"\u7236\u7ed3\u6784\u4f53\" \u7684\u5c5e\u6027\u4e86 \u7ed3\u5408\u4e0a\u9762 \u201c\u5d4c\u5957\u7ed3\u6784\u4f53\u7684\u533f\u540d\u5b57\u6bb5\u201d \u4e2d\u7684\u4f8b\u5b50\uff0c\u65e0\u547d\u540d\u51b2\u7a81\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7 \u5b50\u7ed3\u6784\u4f53\u5b9e\u4f8b.\u7236\u7ed3\u6784\u4f53\u5c5e\u6027 \u8c03\u7528\u7684\u7279\u6027\uff0c\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u7f16\u5199\u51fa\u9002\u5408 \"\u5b50\u7ed3\u6784\u4f53\" \u7684\u65b9\u6cd5\u3002 // animal \u52a8\u7269 type animal struct { name string } // dog \u72d7 type dog struct { variety string * animal // \u5b50\u7ed3\u6784\u4f53\u5d4c\u5957\u7236\u7ed3\u6784\u4f53\u5b9e\u73b0\u7ee7\u627f\uff0c\u5fc5\u987b\u4f7f\u7528\u533f\u540d\u5b57\u6bb5 } func ( d * dog ) bark () { // dog \u6ca1\u6709 name \u5c5e\u6027\uff0c\u4f46\u662f\u5185\u5d4c\u7684 animal \u6709 fmt . Printf ( \"%s \u6b63\u5728\u6c6a\u6c6a\u6c6a~\" , d . name ) } func main () { doge := & dog { variety : \"Doge\" , animal : & animal { // \u6ce8\u610f\u5d4c\u5957\u7684\u662f\u7ed3\u6784\u4f53\u6307\u9488 name : \"Boby\" , }, } doge . bark () // Boby \u6b63\u5728\u6c6a\u6c6a\u6c6a~ }","title":"\u7ed3\u6784\u4f53\u7684\u7ee7\u627f"},{"location":"Go/Basic/Golang-10-%E7%BB%93%E6%9E%84%E4%BD%93/#tag","text":"Tag \u662f\u7ed3\u6784\u4f53\u7684\u5143\u4fe1\u606f\uff0c\u53ef\u4ee5\u5728\u8fd0\u884c\u7684\u65f6\u5019\u901a\u8fc7\u53cd\u5c04\u673a\u5236\u8bfb\u53d6\u3002\u6240\u4ee5\u53ea\u6709\u9996\u5b57\u6bcd\u5927\u5199\u7684\u53ef\u88ab\u5bfc\u51fa\u7684\u53d8\u91cf\u80fd\u88ab\u53cd\u5c04\u8bfb\u53d6\uff0c\u8f6c\u6210JSON\u3002 Tag \u5728\u7ed3\u6784\u4f53\u5b57\u6bb5\u7684\u540e\u65b9\u5b9a\u4e49\uff0c\u7531\u4e00\u5bf9**\u53cd\u5f15\u53f7**\u5305\u8d77\u6765\u3002 eg\uff1a type person struct { Name string `json:\"name\"` } \u4e00\u4e2a Tag \u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u952e\u503c\u5bf9\u7ec4\u6210\u3002 **\u952e\u503c\u5bf9**\u4e4b\u95f4\u4f7f\u7528\u7a7a\u683c\u5206\u9694 **\u952e**\u4e0e**\u503c**\u4e4b\u95f4\u4f7f\u7528\u5192\u53f7\u5206\u9694\uff0c\u4e0d\u80fd\u6709\u7a7a\u683c \u503c\u4f7f\u7528\u53cc\u5f15\u53f7\u62ec\u8d77\u6765\u3002 \u503c\u4e3a - \u65f6\u8be5\u5b57\u6bb5\u4e0d\u4f1a\u88ab\u5e8f\u5217\u5316 \u7f16\u5199 Tag \u65f6\u5fc5\u987b\u4e25\u683c\u9075\u5b88\u952e\u503c\u5bf9\u7684\u89c4\u5219\u3002\u7ed3\u6784\u4f53\u6807\u7b7e\u7684\u89e3\u6790\u5bb9\u9519\u80fd\u529b\u5f88\u5dee\uff0c\u5199\u9519\u4e86\u7f16\u8bd1\u671f\u548c\u8fd0\u884c\u671f\u90fd\u4e0d\u4f1a\u63d0\u793a\u4efb\u4f55\u9519\u8bef\uff0c\u53cd\u5c04\u4e5f\u65e0\u6cd5\u6b63\u786e\u53d6\u503c\u3002","title":"\u7ed3\u6784\u4f53\u6807\u7b7e Tag"},{"location":"Go/Basic/Golang-10-%E7%BB%93%E6%9E%84%E4%BD%93/#_20","text":"\u5e8f\u5217\u5316\uff08struct -> JSON\uff09 \uff1a\u7ed3\u6784\u4f53\u5bf9\u8c61 \u8f6c\u6210 JSON\u683c\u5f0f\u5b57\u7b26\u4e32 \u53cd\u5e8f\u5217\u5316\uff08JSON -> struct\uff09 \uff1aJSON\u683c\u5f0f\u5b57\u7b26\u4e32 \u8f6c\u6210 \u7ed3\u6784\u4f53\u5bf9\u8c61 \u4f7f\u7528 encoding/json \u5b8c\u6210\u3002 import \"encoding/json\" // \u5e8f\u5217\u5316\u51fd\u6570\uff0cstruct -> JSON func Marshal ( v interface {}) ([] byte , error ) {} // \u53cd\u5e8f\u5217\u5316\u51fd\u6570\uff0cJSON -> struct func Unmarshal ( data [] byte , v interface {}) error {} eg\uff1a package main import ( \"encoding/json\" \"fmt\" ) // 1. \u5e8f\u5217\u5316 encode\uff1a\u628a\u7ed3\u6784\u4f53\u53d8\u91cf -> json\u683c\u5f0f\u7684\u5b57\u7b26\u4e32 // 2. \u53cd\u5e8f\u5217\u5316 decode\uff1ajson\u683c\u5f0f\u7684\u5b57\u7b26\u4e32 -> \u7ed3\u6784\u4f53\u53d8\u91cf type person struct { Name string `json:\"name\" db:\"name\" ini:\"name\"` Age int `json:\"age\"` Sex string Addr string `json:\"-\"` // value \u4e3a \"-\" \u65f6\u4e0d\u5e8f\u5217\u5316 } func main () { p1 := person { \"Boii\" , 18 , \"male\" } /* \u5e8f\u5217\u5316 */ b , err := json . Marshal ( p1 ) if err != nil { fmt . Println ( err ) } fmt . Println ( string ( b )) // {\"name\":\"Boii\",\"age\":18,\"Sex\":\"male\"} fmt . Printf ( \"%T \\n\" , b ) // []uint8 /* \u53cd\u5e8f\u5217\u5316 */ str := `{\"name\":\"Eva\",\"age\":18}` var p2 person json . Unmarshal ([] byte ( str ), & p2 ) fmt . Printf ( \"%#v \\n\" , p2 ) // main.person{Name:\"Eva\", Age:18, Sex:\"\"} fmt . Printf ( \"%T \\n\" , p2 ) // main.person } \u5e8f\u5217\u5316\u65f6\uff0ckey \u4f1a\u4f18\u5148\u9009\u62e9\u5b57\u6bb5\u7684 Tag \u4e2d\u6307\u5b9a\u7684 key {% note warning, \u7ed3\u6784\u4f53\u4e2d\u975e public \u7684\u5b57\u6bb5\u4e0d\u4f1a\u88ab\u5e8f\u5217\u5316 %}","title":"\u7ed3\u6784\u4f53\u5e8f\u5217\u5316"},{"location":"Go/Basic/Golang-10-%E7%BB%93%E6%9E%84%E4%BD%93/#_21","text":"{% noteblock info %} \u6df1\u62f7\u8d1d\uff1a\u5373**\u4e3a\u65b0\u7684\u5bf9\u8c61\u5206\u914d\u4e86\u5185\u5b58**\uff0c\u5bf9\u65b0\u5bf9\u8c61\u7684\u4fee\u6539\u4e0d\u4f1a\u5f71\u54cd\u65e7\u5bf9\u8c61 \u6d45\u62f7\u8d1d\uff1a\u5373**\u590d\u5236\u4e86\u65e7\u5bf9\u8c61\u7684\u5730\u5740**\uff0c\u5bf9\u65b0\u5bf9\u8c61\u7684\u4fee\u6539\u4f1a\u5f71\u54cd\u65e7\u5bf9\u8c61 \u503c\u7c7b\u578b\u90fd\u662f\u6df1\u62f7\u8d1d \u5f15\u7528\u7c7b\u578b\u90fd\u662f\u6d45\u62f7\u8d1d {% endnoteblock %} \u770b\u61c2\u4ee5\u4e0a\u4e24\u53e5\u8bdd\uff0c\u7ed3\u6784\u4f53\u7684\u6df1\u6d45\u62f7\u8d1d\u5c31\u5f88\u5bb9\u6613\u5b9e\u73b0\u4e86 package main import \"fmt\" type Person struct { name string age int } func main () { // \u7ed3\u6784\u4f53\u7684\u6df1\u62f7\u8d1d person1 := Person { \"Boii\" , 18 } person2 := person1 // \u6df1\u62f7\u8d1d fmt . Println ( person1 ) // {Boii 18} fmt . Println ( person2 ) // {Boii 18} person2 . age = 20 fmt . Println ( person1 ) // {Boii 18} fmt . Println ( person2 ) // {Boii 20} // \u7ed3\u6784\u4f53\u7684\u6d45\u62f7\u8d1d person3 := & person1 // \u6d45\u62f7\u8d1d person3 . age = 20 fmt . Println ( person1 ) // {Boii 20} fmt . Println ( person3 ) // &{Boii 20} } \u7ed3\u6784\u4f53\u662f\u503c\u7c7b\u578b\uff0c\u76f4\u63a5\u8d4b\u503c\u7684\u65f6\u5019\u662f\u6df1\u62f7\u8d1d\uff0c\u8d4b\u503c\u4e00\u4e2a\u6307\u9488\u5219\u662f\u6d45\u62f7\u8d1d","title":"\u7ed3\u6784\u4f53\u7684\u6df1\u6d45\u62f7\u8d1d"},{"location":"Go/Basic/Golang-11-%E5%8C%85/","text":"\u5305\u7684\u4f7f\u7528 11-\u5305 \u00b6 \u5728\u5de5\u7a0b\u5316\u7684Go\u8bed\u8a00\u5f00\u53d1\u9879\u76ee\u4e2d\uff0cGo\u8bed\u8a00\u7684\u6e90\u7801\u590d\u7528\u662f\u5efa\u7acb\u5728\u5305\uff08package\uff09\u57fa\u7840\u4e4b\u4e0a\u7684\u3002\u672c\u6587\u4ecb\u7ecd\u4e86Go\u8bed\u8a00\u4e2d\u5982\u4f55\u5b9a\u4e49\u5305\u3001\u5982\u4f55\u5bfc\u51fa\u5305\u7684\u5185\u5bb9\u53ca\u5982\u4f55\u5bfc\u5165\u5176\u4ed6\u5305\u3002 \u5305\uff08package\uff09\u662f\u591a\u4e2a Go \u6e90\u7801\u7684\u96c6\u5408\uff0c\u662f\u4e00\u79cd\u9ad8\u7ea7\u7684\u4ee3\u7801\u590d\u7528\u65b9\u6848\uff0c\u4f8b\u5982 Go \u5c31\u63d0\u4f9b\u4e86\u5f88\u591a\u5185\u7f6e\u5305\uff0c\u5982 fmt \u3001 os \u3001 io \u7b49\u3002 \u5b9a\u4e49\u5305 \u00b6 \u4e00\u4e2a\u5305\u53ef\u4ee5\u7b80\u5355\u7406\u89e3\u4e3a\u4e00\u4e2a\u5b58\u653e .go \u6587\u4ef6\u7684\u76ee\u5f55\u3002 \u8be5\u76ee\u5f55\u4e0b\u9762\u6240\u6709\u7684go\u6587\u4ef6\u90fd\u8981\u518d\u4ee3\u7801\u7b2c\u4e00\u884c\u6dfb\u52a0 package \u5305\u540d \uff0c\u58f0\u660e\u8be5\u6587\u4ef6\u5f52\u5c5e\u7684\u5305\u3002 \u6ce8\u610f \uff1a 1. \u4e00\u4e2a\u76ee\u5f55\u4e0b\u9762\u76f4\u63a5\u5305\u542b\u7684\u6587\u4ef6\u53ea\u80fd\u5f52\u5c5e\u4e00\u4e2a package 2. \u540c\u4e00\u4e2a package \u7684\u6587\u4ef6\u4e0d\u80fd\u653e\u5728\u591a\u4e2a\u76ee\u5f55\u4e0b 3. \u5305\u540d\u53ef\u4ee5\u4e0d\u548c\u76ee\u5f55\u540d\u4e00\u6837\uff0c\u4f46\u4e0d\u80fd\u5305\u542b - \u7b26\u53f7 4. main \u5305 \u4e3a\u7a0b\u5e8f\u7684\u5165\u53e3\u5305\uff0c\u8fd9\u79cd\u5305\u7f16\u8bd1\u540e\u4f1a\u5f97\u5230\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6 5. \u7f16\u8bd1\u4e0d\u542b main \u5305 \u7684\u6e90\u4ee3\u7801\u4e0d\u4f1a\u5f97\u5230\u53ef\u6267\u884c\u6587\u4ef6 demo \u251c\u2500\u2500 utils \u2502 \u251c\u2500\u2500 calc.go // package utils \u2502 \u2514\u2500\u2500 data.go // package utils \u251c\u2500\u2500 log \u2502 \u251c\u2500\u2500 debug.go // package log \u2502 \u2514\u2500\u2500 info.go // package log \u251c\u2500\u2500 main.go // package main \u2514\u2500\u2500 test.go // package main \u53ef\u89c1\u6027 \u00b6 \u5728\u4e00\u4e2a\u5305\u4e2d\u5f15\u7528\u53e6\u5916\u4e00\u4e2a\u5305\u91cc\u7684\u6807\u8bc6\u7b26\uff08\u53d8\u91cf\u3001\u51fd\u6570\u3001\u7c7b\u578b\u7b49\uff09\uff0c\u8be5\u6807\u8bc6\u7b26\u5fc5\u987b\u662f\u5bf9\u5916\u53ef\u89c1\u7684\uff0c\u5373\u9996\u5b57\u6bcd\u5927\u5199\u7684\u3002 package model import \"fmt\" var a = 100 // \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5916\u90e8\u5305\u4e0d\u53ef\u89c1\uff0c\u53ea\u80fd\u5728\u5f53\u524d\u5305\u5185\u4f7f\u7528 const PI = 3.14 // \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5916\u90e8\u5305\u53ef\u89c1\uff0c\u53ef\u5728\u5176\u4ed6\u5305\u4e2d\u4f7f\u7528 type person struct { // \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5916\u90e8\u5305\u4e0d\u53ef\u89c1\uff0c\u53ea\u80fd\u5728\u5f53\u524d\u5305\u5185\u4f7f\u7528 Name string // \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5916\u90e8\u5305\u53ef\u89c1\uff0c\u53ef\u5728\u5176\u4ed6\u5305\u4e2d\u4f7f\u7528 age int8 // \u4ec5\u9650\u5305\u5185\u8bbf\u95ee\u7684\u5b57\u6bb5 } type Payer interface { // \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5916\u90e8\u5305\u53ef\u89c1\uff0c\u53ef\u5728\u5176\u4ed6\u5305\u4e2d\u4f7f\u7528 init () // \u4ec5\u9650\u5305\u5185\u8bbf\u95ee\u7684\u65b9\u6cd5 Pay () // \u53ef\u5728\u4fdd\u5916\u8bbf\u95ee\u7684\u65b9\u6cd5 } func Add ( x , y int ) int { // \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5916\u90e8\u5305\u53ef\u89c1\uff0c\u53ef\u5728\u5176\u4ed6\u5305\u4e2d\u4f7f\u7528 return x + y } func age () { // \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5916\u90e8\u5305\u4e0d\u53ef\u89c1\uff0c\u53ea\u80fd\u5728\u5f53\u524d\u5305\u5185\u4f7f\u7528 var Age = 18 // \u51fd\u6570\u5c40\u90e8\u53d8\u91cf\uff0c\u5916\u90e8\u5305\u4e0d\u53ef\u89c1\uff0c\u53ea\u80fd\u5728\u5f53\u524d\u51fd\u6570\u5185\u4f7f\u7528 fmt . Println ( age ) } \u5bfc\u5165\u5305 \u00b6 import \"\u5305\u7684\u8def\u5f84\" \u6ce8\u610f \uff1a 1. import \u8bed\u53e5\u901a\u5e38\u653e\u5728\u6587\u4ef6\u5f00\u5934\u3001\u5305\u58f0\u660e\u8bed\u53e5\u4e0b\u9762\u3002 2. \u5305\u7684\u8def\u5f84\u9700\u8981\u53cc\u5f15\u53f7\u62ec\u8d77\u6765 3. \u5305\u540d\u662f\u4ece $GOPATH/src/ \u540e\u9762\u5f00\u59cb\u8ba1\u7b97\u7684\uff0c\u4f7f\u7528 / \u5206\u5272\u8def\u5f84\uff0c\u8fd9\u662f\u7edd\u5bf9\u8def\u5f84\uff1b\u4e5f\u53ef\u4ee5\u4f7f\u7528\u76f8\u5bf9\u8def\u5f84 4. \u7981\u6b62\u4e92\u76f8\u5bfc\u5305 \u5355\u884c\u5bfc\u5165 \u00b6 import \"\u53051\" import \"\u53052\" \u591a\u884c\u5bfc\u5165 \u00b6 import ( \"\u53051\" \"\u53052\" ) GO MODULE \u6a21\u5f0f\u4e0b\u5bfc\u5165\u81ea\u5df1\u7684\u5305 \u00b6 \u4f7f\u7528 Go Module \u6a21\u5f0f\u7ba1\u7406\u5305\u65f6\uff0c\u5982\u679c\u60f3\u5bfc\u5165\u81ea\u5df1\u5199\u7684\u5305\uff0c\u8def\u5f84\u5e94\u4e3a module\u540d/\u8def\u5f84... eg\uff1a \u251c\u2500\u2500 go.mod // module Stack \u251c\u2500\u2500 main.go // package main \u2514\u2500\u2500 seqStack \u2514\u2500\u2500 SeqStack.go // package seqStack \u4ece\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u5f00\u59cb\uff0c\u6709\u4e00\u4e2a main.go \u6587\u4ef6\uff0c\u8fd8\u6709\u4e00\u4e2a\u5b50\u5305 seqStack \u3002 \u73b0\u5728\u6211\u60f3\u5728 main.go \u4e2d\u4f7f\u7528 SeqStack.go \u4e2d\u7684\u51fd\u6570\uff0c\u9700\u8981\u5728 main.go \u4e2d\u5bfc\u5165 seqStack \u8fd9\u4e2a\u5305\u3002 \u5206\u4e3a\u4ee5\u4e0b\u4e09\u6b65\uff1a \u5728 go.mod \u4e2d\u5199\u4e0b\uff1a module Stack // \u58f0\u660e module \u540d go 1.16 ... 2. \u5728 SeqStack.go \u4e2d\u58f0\u660e\uff1a package seqStack // \u58f0\u660e\u5b50\u5305\u540d ... \u5728 main.go \u4e2d\u5bfc\u5165\uff1a package main // \u58f0\u660e main \u5305 import \"Stack/seqStack\" // \u6b63\u786e\u5bfc\u5165 ... \u522b\u540d \u00b6 \u5bfc\u5305\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u7ed9\u5305\u8bbe\u7f6e\u522b\u540d\u3002\u5e38\u7528\u4e8e\u5904\u7406\u5305\u540d\u592a\u957f\u6216\u5305\u540d\u51b2\u7a81\u7684\u60c5\u51b5\u3002 import \u522b\u540d \"\u5305\u7684\u8def\u5f84\" \u5355\u884c \u00b6 import \"fmt\" import t \"tcp404.com/study/go/test\" func main () { fmt . Println ( t . Add ( 10 , 20 )) } \u591a\u884c \u00b6 import ( . \"fmt\" // \u4f7f\u7528 . \u4f5c\u4e3a\u522b\u540d\uff0c\u5219\u4f7f\u7528\u65f6\u53ef\u4ee5\u7701\u7565\u5305\u540d t \"tcp404.com/study/go/test\" ) func main () { Println ( t . Add ( 10 , 20 )) } \u7701\u7565\u5305\u540d \u00b6 \u5728\u7ed9\u5305\u8d77\u522b\u540d\u7684\u65f6\u5019\uff0c\u522b\u540d\u4e3a . \uff0c\u5728\u540e\u9762\u4f7f\u7528\u65f6\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5305\u4e2d\u7684\u53d8\u91cf\u548c\u65b9\u6cd5\u7b49\uff0c\u4e0d\u9700\u8981\u52a0\u5305\u540d\u3002 import . \"fmt\" func main () { Println ( \"Hello!\" ) } init() \u521d\u59cb\u5316\u51fd\u6570 \u00b6 Go \u5728\u6267\u884c\u5bfc\u5305\u4e4b\u524d\uff0c\u4f1a\u81ea\u52a8\u89e6\u53d1\u5305\u5185\u7684 init() \u51fd\u6570\u7684\u8c03\u7528\u3002 init() \u6ca1\u6709\u53c2\u6570\u4e5f\u6ca1\u6709\u8fd4\u56de\u503c\uff0c\u81ea\u52a8\u88ab\u8c03\u7528\uff0c\u4e0d\u80fd\u4e3b\u52a8\u8c03\u7528\uff0c main() \u4e5f\u662f\u3002 \u4e00\u4e2a\u5305\u5185\u7684 init() \u53ef\u4ee5\u6709\u591a\u4e2a\uff0c main() \u53ea\u80fd\u6709\u4e00\u4e2a\u3002 \u4e00\u4e2a\u5305\u53ef\u4ee5\u88ab\u591a\u4e2a\u5305\u5bfc\u5165\uff0c\u4f46\u662f init() \u53ea\u4f1a\u6267\u884c\u4e00\u6b21\u3002 \u5305\u5185\u591a\u4e2a init() \u7684\u6267\u884c\u987a\u5e8f\u4e0d\u56fa\u5b9a\uff0c\u76ee\u524d\uff08Go 1.16.5\uff09\u662f\u6309\u7167\u6587\u4ef6\u540d\u5347\u5e8f\uff0ca\u6700\u5148\u6267\u884c\uff0cz\u6700\u540e\u6267\u884c\u3002 \u6bcf\u4e2a .go \u6587\u4ef6\u90fd\u53ef\u4ee5\u6709\u81ea\u5df1\u7684 init() \uff0c package main import \"fmt\" // \u5168\u5c40\u53d8\u91cf var age int8 = 18 const E = 2.78 // init\u51fd\u6570 func init () { fmt . Println ( E ) } // main\u51fd\u6570 func main () { fmt . Println ( \"Hello World\" ) } \u4e00\u4e2a\u5305\u4e2d\u7684\u6267\u884c\u987a\u5e8f\u4e3a\uff1a 1. \u5168\u5c40\u58f0\u660e(const -> var) -> 2. init() -> 3. main() \u591a\u4e2a\u5305\u6709\u5bfc\u5165\u5173\u7cfb\u65f6\uff0cinit() \u6267\u884c\u987a\u5e8f\uff1a\u4ecemain \u5305\u5f00\u59cb\uff0c\u6309\u7167 main \u5305\u7684 import \u7684\u987a\u5e8f \u5e7f\u5ea6\u4f18\u5148 \u4e00\u5c42\u5c42\u5f80\u4e0b\u627e \u533f\u540d\u5bfc\u5305 \u00b6 \u6709\u65f6\u5019\u53ea\u60f3\u5bfc\u5165\u4e00\u4e2a\u5305\u6267\u884c\u4e00\u4e0b\u5b83\u7684 init() \u51fd\u6570\uff0c\u5e76\u4e0d\u4f7f\u7528\u5305\u91cc\u7684\u4e1c\u897f\uff0c\u53ef\u4ee5\u4f7f\u7528\u533f\u540d\u5bfc\u5305\u3002 import _ \"\u5305\u7684\u8def\u5f84\" \u533f\u540d\u5bfc\u5165\u7684\u5305\u4e0e\u5176\u4ed6\u65b9\u5f0f\u5bfc\u5165\u7684\u5305\u4e00\u6837\u90fd\u4f1a\u88ab\u7f16\u8bd1\u5230\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u3002","title":"11.\u5305"},{"location":"Go/Basic/Golang-11-%E5%8C%85/#11-","text":"\u5728\u5de5\u7a0b\u5316\u7684Go\u8bed\u8a00\u5f00\u53d1\u9879\u76ee\u4e2d\uff0cGo\u8bed\u8a00\u7684\u6e90\u7801\u590d\u7528\u662f\u5efa\u7acb\u5728\u5305\uff08package\uff09\u57fa\u7840\u4e4b\u4e0a\u7684\u3002\u672c\u6587\u4ecb\u7ecd\u4e86Go\u8bed\u8a00\u4e2d\u5982\u4f55\u5b9a\u4e49\u5305\u3001\u5982\u4f55\u5bfc\u51fa\u5305\u7684\u5185\u5bb9\u53ca\u5982\u4f55\u5bfc\u5165\u5176\u4ed6\u5305\u3002 \u5305\uff08package\uff09\u662f\u591a\u4e2a Go \u6e90\u7801\u7684\u96c6\u5408\uff0c\u662f\u4e00\u79cd\u9ad8\u7ea7\u7684\u4ee3\u7801\u590d\u7528\u65b9\u6848\uff0c\u4f8b\u5982 Go \u5c31\u63d0\u4f9b\u4e86\u5f88\u591a\u5185\u7f6e\u5305\uff0c\u5982 fmt \u3001 os \u3001 io \u7b49\u3002","title":"11-\u5305"},{"location":"Go/Basic/Golang-11-%E5%8C%85/#_1","text":"\u4e00\u4e2a\u5305\u53ef\u4ee5\u7b80\u5355\u7406\u89e3\u4e3a\u4e00\u4e2a\u5b58\u653e .go \u6587\u4ef6\u7684\u76ee\u5f55\u3002 \u8be5\u76ee\u5f55\u4e0b\u9762\u6240\u6709\u7684go\u6587\u4ef6\u90fd\u8981\u518d\u4ee3\u7801\u7b2c\u4e00\u884c\u6dfb\u52a0 package \u5305\u540d \uff0c\u58f0\u660e\u8be5\u6587\u4ef6\u5f52\u5c5e\u7684\u5305\u3002 \u6ce8\u610f \uff1a 1. \u4e00\u4e2a\u76ee\u5f55\u4e0b\u9762\u76f4\u63a5\u5305\u542b\u7684\u6587\u4ef6\u53ea\u80fd\u5f52\u5c5e\u4e00\u4e2a package 2. \u540c\u4e00\u4e2a package \u7684\u6587\u4ef6\u4e0d\u80fd\u653e\u5728\u591a\u4e2a\u76ee\u5f55\u4e0b 3. \u5305\u540d\u53ef\u4ee5\u4e0d\u548c\u76ee\u5f55\u540d\u4e00\u6837\uff0c\u4f46\u4e0d\u80fd\u5305\u542b - \u7b26\u53f7 4. main \u5305 \u4e3a\u7a0b\u5e8f\u7684\u5165\u53e3\u5305\uff0c\u8fd9\u79cd\u5305\u7f16\u8bd1\u540e\u4f1a\u5f97\u5230\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6 5. \u7f16\u8bd1\u4e0d\u542b main \u5305 \u7684\u6e90\u4ee3\u7801\u4e0d\u4f1a\u5f97\u5230\u53ef\u6267\u884c\u6587\u4ef6 demo \u251c\u2500\u2500 utils \u2502 \u251c\u2500\u2500 calc.go // package utils \u2502 \u2514\u2500\u2500 data.go // package utils \u251c\u2500\u2500 log \u2502 \u251c\u2500\u2500 debug.go // package log \u2502 \u2514\u2500\u2500 info.go // package log \u251c\u2500\u2500 main.go // package main \u2514\u2500\u2500 test.go // package main","title":"\u5b9a\u4e49\u5305"},{"location":"Go/Basic/Golang-11-%E5%8C%85/#_2","text":"\u5728\u4e00\u4e2a\u5305\u4e2d\u5f15\u7528\u53e6\u5916\u4e00\u4e2a\u5305\u91cc\u7684\u6807\u8bc6\u7b26\uff08\u53d8\u91cf\u3001\u51fd\u6570\u3001\u7c7b\u578b\u7b49\uff09\uff0c\u8be5\u6807\u8bc6\u7b26\u5fc5\u987b\u662f\u5bf9\u5916\u53ef\u89c1\u7684\uff0c\u5373\u9996\u5b57\u6bcd\u5927\u5199\u7684\u3002 package model import \"fmt\" var a = 100 // \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5916\u90e8\u5305\u4e0d\u53ef\u89c1\uff0c\u53ea\u80fd\u5728\u5f53\u524d\u5305\u5185\u4f7f\u7528 const PI = 3.14 // \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5916\u90e8\u5305\u53ef\u89c1\uff0c\u53ef\u5728\u5176\u4ed6\u5305\u4e2d\u4f7f\u7528 type person struct { // \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5916\u90e8\u5305\u4e0d\u53ef\u89c1\uff0c\u53ea\u80fd\u5728\u5f53\u524d\u5305\u5185\u4f7f\u7528 Name string // \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5916\u90e8\u5305\u53ef\u89c1\uff0c\u53ef\u5728\u5176\u4ed6\u5305\u4e2d\u4f7f\u7528 age int8 // \u4ec5\u9650\u5305\u5185\u8bbf\u95ee\u7684\u5b57\u6bb5 } type Payer interface { // \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5916\u90e8\u5305\u53ef\u89c1\uff0c\u53ef\u5728\u5176\u4ed6\u5305\u4e2d\u4f7f\u7528 init () // \u4ec5\u9650\u5305\u5185\u8bbf\u95ee\u7684\u65b9\u6cd5 Pay () // \u53ef\u5728\u4fdd\u5916\u8bbf\u95ee\u7684\u65b9\u6cd5 } func Add ( x , y int ) int { // \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5916\u90e8\u5305\u53ef\u89c1\uff0c\u53ef\u5728\u5176\u4ed6\u5305\u4e2d\u4f7f\u7528 return x + y } func age () { // \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5916\u90e8\u5305\u4e0d\u53ef\u89c1\uff0c\u53ea\u80fd\u5728\u5f53\u524d\u5305\u5185\u4f7f\u7528 var Age = 18 // \u51fd\u6570\u5c40\u90e8\u53d8\u91cf\uff0c\u5916\u90e8\u5305\u4e0d\u53ef\u89c1\uff0c\u53ea\u80fd\u5728\u5f53\u524d\u51fd\u6570\u5185\u4f7f\u7528 fmt . Println ( age ) }","title":"\u53ef\u89c1\u6027"},{"location":"Go/Basic/Golang-11-%E5%8C%85/#_3","text":"import \"\u5305\u7684\u8def\u5f84\" \u6ce8\u610f \uff1a 1. import \u8bed\u53e5\u901a\u5e38\u653e\u5728\u6587\u4ef6\u5f00\u5934\u3001\u5305\u58f0\u660e\u8bed\u53e5\u4e0b\u9762\u3002 2. \u5305\u7684\u8def\u5f84\u9700\u8981\u53cc\u5f15\u53f7\u62ec\u8d77\u6765 3. \u5305\u540d\u662f\u4ece $GOPATH/src/ \u540e\u9762\u5f00\u59cb\u8ba1\u7b97\u7684\uff0c\u4f7f\u7528 / \u5206\u5272\u8def\u5f84\uff0c\u8fd9\u662f\u7edd\u5bf9\u8def\u5f84\uff1b\u4e5f\u53ef\u4ee5\u4f7f\u7528\u76f8\u5bf9\u8def\u5f84 4. \u7981\u6b62\u4e92\u76f8\u5bfc\u5305","title":"\u5bfc\u5165\u5305"},{"location":"Go/Basic/Golang-11-%E5%8C%85/#_4","text":"import \"\u53051\" import \"\u53052\"","title":"\u5355\u884c\u5bfc\u5165"},{"location":"Go/Basic/Golang-11-%E5%8C%85/#_5","text":"import ( \"\u53051\" \"\u53052\" )","title":"\u591a\u884c\u5bfc\u5165"},{"location":"Go/Basic/Golang-11-%E5%8C%85/#go-module","text":"\u4f7f\u7528 Go Module \u6a21\u5f0f\u7ba1\u7406\u5305\u65f6\uff0c\u5982\u679c\u60f3\u5bfc\u5165\u81ea\u5df1\u5199\u7684\u5305\uff0c\u8def\u5f84\u5e94\u4e3a module\u540d/\u8def\u5f84... eg\uff1a \u251c\u2500\u2500 go.mod // module Stack \u251c\u2500\u2500 main.go // package main \u2514\u2500\u2500 seqStack \u2514\u2500\u2500 SeqStack.go // package seqStack \u4ece\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u5f00\u59cb\uff0c\u6709\u4e00\u4e2a main.go \u6587\u4ef6\uff0c\u8fd8\u6709\u4e00\u4e2a\u5b50\u5305 seqStack \u3002 \u73b0\u5728\u6211\u60f3\u5728 main.go \u4e2d\u4f7f\u7528 SeqStack.go \u4e2d\u7684\u51fd\u6570\uff0c\u9700\u8981\u5728 main.go \u4e2d\u5bfc\u5165 seqStack \u8fd9\u4e2a\u5305\u3002 \u5206\u4e3a\u4ee5\u4e0b\u4e09\u6b65\uff1a \u5728 go.mod \u4e2d\u5199\u4e0b\uff1a module Stack // \u58f0\u660e module \u540d go 1.16 ... 2. \u5728 SeqStack.go \u4e2d\u58f0\u660e\uff1a package seqStack // \u58f0\u660e\u5b50\u5305\u540d ... \u5728 main.go \u4e2d\u5bfc\u5165\uff1a package main // \u58f0\u660e main \u5305 import \"Stack/seqStack\" // \u6b63\u786e\u5bfc\u5165 ...","title":"GO MODULE \u6a21\u5f0f\u4e0b\u5bfc\u5165\u81ea\u5df1\u7684\u5305"},{"location":"Go/Basic/Golang-11-%E5%8C%85/#_6","text":"\u5bfc\u5305\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u7ed9\u5305\u8bbe\u7f6e\u522b\u540d\u3002\u5e38\u7528\u4e8e\u5904\u7406\u5305\u540d\u592a\u957f\u6216\u5305\u540d\u51b2\u7a81\u7684\u60c5\u51b5\u3002 import \u522b\u540d \"\u5305\u7684\u8def\u5f84\"","title":"\u522b\u540d"},{"location":"Go/Basic/Golang-11-%E5%8C%85/#_7","text":"import \"fmt\" import t \"tcp404.com/study/go/test\" func main () { fmt . Println ( t . Add ( 10 , 20 )) }","title":"\u5355\u884c"},{"location":"Go/Basic/Golang-11-%E5%8C%85/#_8","text":"import ( . \"fmt\" // \u4f7f\u7528 . \u4f5c\u4e3a\u522b\u540d\uff0c\u5219\u4f7f\u7528\u65f6\u53ef\u4ee5\u7701\u7565\u5305\u540d t \"tcp404.com/study/go/test\" ) func main () { Println ( t . Add ( 10 , 20 )) }","title":"\u591a\u884c"},{"location":"Go/Basic/Golang-11-%E5%8C%85/#_9","text":"\u5728\u7ed9\u5305\u8d77\u522b\u540d\u7684\u65f6\u5019\uff0c\u522b\u540d\u4e3a . \uff0c\u5728\u540e\u9762\u4f7f\u7528\u65f6\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5305\u4e2d\u7684\u53d8\u91cf\u548c\u65b9\u6cd5\u7b49\uff0c\u4e0d\u9700\u8981\u52a0\u5305\u540d\u3002 import . \"fmt\" func main () { Println ( \"Hello!\" ) }","title":"\u7701\u7565\u5305\u540d"},{"location":"Go/Basic/Golang-11-%E5%8C%85/#init","text":"Go \u5728\u6267\u884c\u5bfc\u5305\u4e4b\u524d\uff0c\u4f1a\u81ea\u52a8\u89e6\u53d1\u5305\u5185\u7684 init() \u51fd\u6570\u7684\u8c03\u7528\u3002 init() \u6ca1\u6709\u53c2\u6570\u4e5f\u6ca1\u6709\u8fd4\u56de\u503c\uff0c\u81ea\u52a8\u88ab\u8c03\u7528\uff0c\u4e0d\u80fd\u4e3b\u52a8\u8c03\u7528\uff0c main() \u4e5f\u662f\u3002 \u4e00\u4e2a\u5305\u5185\u7684 init() \u53ef\u4ee5\u6709\u591a\u4e2a\uff0c main() \u53ea\u80fd\u6709\u4e00\u4e2a\u3002 \u4e00\u4e2a\u5305\u53ef\u4ee5\u88ab\u591a\u4e2a\u5305\u5bfc\u5165\uff0c\u4f46\u662f init() \u53ea\u4f1a\u6267\u884c\u4e00\u6b21\u3002 \u5305\u5185\u591a\u4e2a init() \u7684\u6267\u884c\u987a\u5e8f\u4e0d\u56fa\u5b9a\uff0c\u76ee\u524d\uff08Go 1.16.5\uff09\u662f\u6309\u7167\u6587\u4ef6\u540d\u5347\u5e8f\uff0ca\u6700\u5148\u6267\u884c\uff0cz\u6700\u540e\u6267\u884c\u3002 \u6bcf\u4e2a .go \u6587\u4ef6\u90fd\u53ef\u4ee5\u6709\u81ea\u5df1\u7684 init() \uff0c package main import \"fmt\" // \u5168\u5c40\u53d8\u91cf var age int8 = 18 const E = 2.78 // init\u51fd\u6570 func init () { fmt . Println ( E ) } // main\u51fd\u6570 func main () { fmt . Println ( \"Hello World\" ) } \u4e00\u4e2a\u5305\u4e2d\u7684\u6267\u884c\u987a\u5e8f\u4e3a\uff1a 1. \u5168\u5c40\u58f0\u660e(const -> var) -> 2. init() -> 3. main() \u591a\u4e2a\u5305\u6709\u5bfc\u5165\u5173\u7cfb\u65f6\uff0cinit() \u6267\u884c\u987a\u5e8f\uff1a\u4ecemain \u5305\u5f00\u59cb\uff0c\u6309\u7167 main \u5305\u7684 import \u7684\u987a\u5e8f \u5e7f\u5ea6\u4f18\u5148 \u4e00\u5c42\u5c42\u5f80\u4e0b\u627e","title":"init() \u521d\u59cb\u5316\u51fd\u6570"},{"location":"Go/Basic/Golang-11-%E5%8C%85/#_10","text":"\u6709\u65f6\u5019\u53ea\u60f3\u5bfc\u5165\u4e00\u4e2a\u5305\u6267\u884c\u4e00\u4e0b\u5b83\u7684 init() \u51fd\u6570\uff0c\u5e76\u4e0d\u4f7f\u7528\u5305\u91cc\u7684\u4e1c\u897f\uff0c\u53ef\u4ee5\u4f7f\u7528\u533f\u540d\u5bfc\u5305\u3002 import _ \"\u5305\u7684\u8def\u5f84\" \u533f\u540d\u5bfc\u5165\u7684\u5305\u4e0e\u5176\u4ed6\u65b9\u5f0f\u5bfc\u5165\u7684\u5305\u4e00\u6837\u90fd\u4f1a\u88ab\u7f16\u8bd1\u5230\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u3002","title":"\u533f\u540d\u5bfc\u5305"},{"location":"Go/Basic/Golang-12-%E6%8E%A5%E5%8F%A3/","text":"\u63a5\u53e3\u7684\u521b\u5efa\u4e0e\u4f7f\u7528 12-\u63a5\u53e3 \u00b6 Go \u4e2d\u7684\u63a5\u53e3 interface \u662f\u4e00\u79cd\u7c7b\u578b\uff0c\u4e00\u79cd\u62bd\u8c61\u7684\u7c7b\u578b\u3002 interface \u662f\u4e00\u7ec4\u65b9\u6cd5\u7684\u96c6\u5408\uff0c\u662f dack-type programming \u7684\u4e00\u79cd\u4f53\u73b0\u3002 \u63a5\u53e3\u505a\u7684\u4e8b\u60c5\u5c31\u50cf\u662f\u5b9a\u4e49\u4e00\u4e2a\u534f\u8bae\uff08\u89c4\u5219\uff09\uff0c\u53ea\u8981\u4e00\u53f0\u673a\u5668\u5177\u6709\u6d17\u8863\u670d\u548c\u7529\u5e72\u7684\u529f\u80fd\uff0c\u6211\u5c31\u79f0\u5176\u4e3a\u6d17\u8863\u673a\u3002 \u63a5\u53e3\u4e0d\u5173\u5fc3\u5c5e\u6027\uff08\u6570\u636e\uff09\uff0c\u53ea\u5173\u5fc3\u884c\u4e3a\uff08\u65b9\u6cd5\uff09\u3002 \u53ea\u8981\u4e00\u4e2a\u7ed3\u6784\u4f53 X \u5b9e\u73b0\u4e86\u63a5\u53e3 A \u4e2d\u6240\u6709\u7684\u65b9\u6cd5\uff0c\u5c31\u79f0\u8fd9\u4e2a\u7ed3\u6784\u4f53 X \u4e3a\u63a5\u53e3 A \u7684\u5b9e\u73b0\u7c7b\uff0c\u79f0\u7ed3\u6784\u4f53 X \u5b9e\u73b0\u4e86\u63a5\u53e3 A\u3002\u8fd8\u53ef\u79f0\u7ed3\u6784\u4f53 X \u662f A \u7c7b\u578b\u3002 {% note warning, \u4e3a\u4e86\u4fdd\u62a4\u4f60\u7684Go\u8bed\u8a00\u804c\u4e1a\u751f\u6daf\uff0c\u8bf7\u7262\u8bb0\u63a5\u53e3\uff08interface\uff09\u662f\u4e00\u79cd\u7c7b\u578b\u3002 %} \u5b9a\u4e49\u63a5\u53e3 \u00b6 \u57fa\u672c\u8bed\u6cd5\u5982\u4e0b\uff1a type identifier interface { methodName1 ([ param ])[( return )] methodName2 ([ param ])[( return )] methodName3 ([ param ])[( return )] ... } identifier \uff1a\u63a5\u53e3\u540d\uff0c\u547d\u540d\u65f6\u6309\u7167\u89c4\u8303\u5e94\u8be5\u52a0\u4e0a er \uff0c\u5982 \u6709\u5b57\u7b26\u4e32\u529f\u80fd\u7684 Stringer \u3001\u6709\u8bfb\u53d6\u529f\u80fd\u7684 Reader \u3002 methodName \uff1a\u65b9\u6cd5\u540d eg\uff1a type USBer interface { start () end () } \u5b9e\u73b0\u63a5\u53e3 \u00b6 \u5b9e\u73b0\u63a5\u53e3\uff1a // \u5b9a\u4e49\u4e00\u4e2a\u63a5\u53e3 type USBer interface { start () end () } // \u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53 type Mouse struct { name string } // \u5b9e\u73b0\u4e24\u4e2a\u63a5\u53e3\u4e2d\u7684\u65b9\u6cd5\uff0c\u63a5\u6536\u8005\u4e3a\u7ed3\u6784\u4f53 Mouse\uff0c\u8fd9\u6837 Mouse \u5c31\u662f\u4e00\u4e2a\u5b9e\u73b0\u7c7b func ( m Mouse ) start () { fmt . Println ( m . name , \"starts working.\" ) } func ( m Mouse ) end () { fmt . Println ( m . name , \"end working.\" ) } \u7ed3\u6784\u4f53 Mouse \u5b9e\u73b0\u4e86 USBer \u7684\u6240\u6709\u65b9\u6cd5 start() \u548c end() \uff0c\u6240\u4ee5 Mouse \u5c31\u662f USBer \u7684\u4e00\u4e2a\u5b9e\u73b0\u7c7b\u3002 \u4f7f\u7528\u63a5\u53e3 \u00b6 \u5b9e\u73b0\u4e86\u63a5\u53e3\u7684\u7ed3\u6784\u4f53\uff08\u5b9e\u73b0\u7c7b\uff09\u548c\u6ca1\u5b9e\u73b0\u63a5\u53e3\u7684\u7ed3\u6784\u4f53\uff0c\u533a\u522b\u5728\u4e8e \u5f53\u4e00\u4e2a\u51fd\u6570\u9700\u8981\u4f20\u9012\u4e00\u4e2a\u63a5\u53e3\u7c7b\u578b\u7684\u53c2\u6570\u65f6\uff0c\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2a\u63a5\u53e3\u53d8\u91cf\u8fdb\u53bb\uff0c\u4e5f\u53ef\u4ee5\u4f20\u4e00\u4e2a\u5b9e\u73b0\u7c7b\u5bf9\u8c61\u8fdb\u53bb\u3002 func test ( usb USBer ) { // \u9700\u8981\u4f20\u9012\u4e00\u4e2a\u63a5\u53e3\u7c7b\u578b\u7684\u53c2\u6570 usb . start () usb . end () } func main () { m1 := Mouse { \"\u7f57\u6280\" } test ( m1 ) // \u4f20\u9012\u4e00\u4e2a\u5b9e\u73b0\u7c7b\u5bf9\u8c61 var u1 USBer = m1 test ( u1 ) // \u4f20\u9012\u4e00\u4e2a\u63a5\u53e3\u53d8\u91cf } {% noteblock warning %} \u6ce8\u610f\uff0c \u63a5\u53e3\u53d8\u91cf\u4f7f\u7528\u4e4b\u524d\uff0c\u9700\u8981\u5148\u8d4b\u4e00\u4e2a\u5b9e\u73b0\u7c7b\u5bf9\u8c61\u3002 \u63a5\u53e3\u53d8\u91cf\u53ef\u4ee5\u8c03\u7528\u63a5\u53e3\u4e2d\u7684\u65b9\u6cd5\uff0c\u4f46\u4e0d\u53ef\u4ee5\u8c03\u7528\u5b9e\u73b0\u7c7b\u7684\u5c5e\u6027\u548c\u65b9\u6cd5 {% endnoteblock %} package main import \"fmt\" // \u5b9a\u4e49\u4e00\u4e2a\u63a5\u53e3 type iUSBer interface { start () end () } // \u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53 type Mouse struct { name string } // \u5b9e\u73b0\u4e24\u4e2a\u63a5\u53e3\u4e2d\u7684\u65b9\u6cd5\uff0c\u63a5\u6536\u8005\u4e3a\u7ed3\u6784\u4f53 Mouse\uff0c\u8fd9\u6837 Mouse \u5c31\u662f\u4e00\u4e2a\u5b9e\u73b0\u7c7b func ( m Mouse ) start () { fmt . Println ( m . name , \"starts working.\" ) } func ( m Mouse ) end () { fmt . Println ( m . name , \"end working.\" ) } // \u5b9a\u4e49\u7ed3\u6784\u4f53 Mouse \u81ea\u5df1\u7684\u65b9\u6cd5 func ( m Mouse ) selfMethod () { fmt . Println ( m . name , \"selfMethod\" ) } // \u5b9a\u4e49\u4e00\u4e2a\u6d4b\u8bd5\u65b9\u6cd5\uff0c\u9700\u8981\u63a5\u6536\u4e00\u4e2a USB \u63a5\u53e3\u53d8\u91cf\u3002\u53ef\u4ee5\u4f20\u9012 USB \u53d8\u91cf\uff0c\u4e5f\u53ef\u4ee5\u4f20\u9012 USB \u5b9e\u73b0\u7c7b\u7684\u5bf9\u8c61 func test ( usb iUSBer ) { // \u9700\u8981\u4f20\u9012\u4e00\u4e2a\u63a5\u53e3\u7c7b\u578b\u7684\u53c2\u6570 usb . start () usb . end () } func main () { m1 := Mouse { \"\u7f57\u6280\" } // Mouse\u662f\u4e00\u4e2a\u5b9e\u73b0\u7c7b\uff0c\u53ef\u4ee5\u4f20\u9012\u5b9e\u73b0\u7c7b\u5bf9\u8c61\u7ed9 test() test ( m1 ) // \u63a5\u53e3\u53d8\u91cf\u4f7f\u7528\u4e4b\u524d\u8981\u5148\u8d4b\u4e00\u4e2a\u5b9e\u73b0\u7c7b\u5bf9\u8c61 var u1 iUSBer = m1 // \u4f20\u9012\u4e00\u4e2a\u63a5\u53e3\u53d8\u91cf\u7ed9 test() test ( u1 ) m1 . start () // \u7f57\u6280 starts working. m1 . end () // \u7f57\u6280 end working. m1 . selfMethod () // \u7f57\u6280 selfMethod u1 . start () // \u7f57\u6280 starts working. u1 . end () // \u7f57\u6280 end working. // u1.selfMethod() // \u9519\u8bef\uff0c\u63a5\u53e3\u53d8\u91cf\u4e0d\u53ef\u4ee5\u8c03\u7528\u5b9e\u73b0\u7c7b\u7684\u65b9\u6cd5 // u1.name // \u9519\u8bef\uff0c\u63a5\u53e3\u53d8\u91cf\u4e0d\u53ef\u4ee5\u8c03\u7528\u5b9e\u73b0\u7c7b\u7684\u5c5e\u6027 } \u7a7a\u63a5\u53e3 \u00b6 \u4e0d\u5305\u542b\u4efb\u4f55\u65b9\u6cd5\u7684\u63a5\u53e3\uff0c\u79f0\u4e3a\u7a7a\u63a5\u53e3\u3002 \u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a \u4efb\u610f\u7c7b\u578b\u90fd\u5b9e\u73b0\u4e86\u7a7a\u63a5\u53e3 interface {} type T interface {} eg\uff1a type T interface {} type person struct { name string } var t1 T = person { \"Boii\" } var t2 T = \"str\" var t3 T = 100 var t4 T = [] int { 1 , 2 , 3 } fmt . Println ( t1 ) // {Boii} fmt . Println ( t2 ) // str fmt . Println ( t3 ) // 100 fmt . Println ( t4 ) // [1 2 3] {% noteblock info %} \u7a7a\u63a5\u53e3\u7684\u4f5c\u7528\u5728\u4e8e \u4efb\u610f\u7c7b\u578b \u3002 \u5f53\u6211\u4eec\u60f3\u8981\u63a5\u53d7\u4e00\u4e2a\u4efb\u610f\u7c7b\u578b\u7684\u53c2\u6570\uff0c\u6216\u8005\u5b9a\u4e49\u4e00\u4e2a\u63a5\u6536\u4efb\u610f\u7c7b\u578b\u7684\u5bb9\u5668\uff0c\u90fd\u53ef\u4ee5\u4f7f\u7528\u7a7a\u63a5\u53e3\u6765\u4ee3\u66ff\u3002 func test ( a interface {}) { ... } test ( \"string\" ) test ( 123 ) test ([] int { 1 , 2 , 3 , 4 }) a := [] interface {}{ 1 , 3 , \"str\" , true } fmt . Println ( a ) // {1 3 str true} type T interface {} b := [] T { 1 , 3 , \"str\" , true } fmt . Println ( b ) // {1 3 str true} {% endnoteblock %} \u63a5\u53e3\u5d4c\u5957 \u00b6 \u63a5\u53e3\u4e2d\u4e0d\u4ec5\u53ef\u4ee5\u5b9a\u4e49\u65b9\u6cd5\u7b7e\u540d\uff0c\u8fd8\u53ef\u4ee5\u5b9a\u4e49\u5176\u4ed6\u7684\u63a5\u53e3\u3002\u8fd9\u79cd\u65b9\u5f0f\u6211\u4eec\u79f0\u4e3a**\u63a5\u53e3\u5d4c\u5957**\u3002 // \u63a5\u53e3A type A interface { method1 () } // \u63a5\u53e3B type B interface { method2 () } // \u63a5\u53e3C\uff0c\u5d4c\u5957\u4e86\u63a5\u53e3 A \u548c B type C interface { A B method3 () } // \u7ed3\u6784\u4f53 type person struct { name string } func ( p person ) method1 () { // \u4f7f person \u6210\u4e3a \u63a5\u53e3A \u7684\u5b9e\u73b0\u7c7b ... } func ( p person ) method2 () { // \u4f7f person \u6210\u4e3a \u63a5\u53e3B \u7684\u5b9e\u73b0\u7c7b ... } func ( p person ) method3 () { // \u4f7f person \u6210\u4e3a \u63a5\u53e3C \u7684\u5b9e\u73b0\u7c7b\uff0c\u524d\u63d0\u662f\u5b9e\u73b0\u4e86\u524d\u9762\u4e24\u4e2a ... } \u5d4c\u5957\u4e86\u63a5\u53e3\uff0c\u4e0d\u4ec5\u8981\u5b9e\u73b0\u63a5\u53e3\u672c\u8eab\u7684\u65b9\u6cd5\uff0c\u8fd8\u8981\u5b9e\u73b0\u63a5\u53e3\u4e2d\u7684\u5d4c\u5957\u63a5\u53e3\u7684\u65b9\u6cd5\uff0c\u624d\u80fd\u8ba4\u4e3a\u5b9e\u73b0\u4e86\u6700\u5916\u4fa7\u7684\u63a5\u53e3\u3002 \u5982\u4e0a\u9762\u4f8b\u5b50\uff0cperson \u8981\u6210\u4e3a C \u7684\u5b9e\u73b0\u7c7b\uff0c\u4e0d\u4ec5\u8981\u5b9e\u73b0 C \u7684 method3() \u65b9\u6cd5\uff0c\u8fd8\u5f97\u5b9e\u73b0 A \u7684 method1() \u548c B \u7684 method2() \u3002 func main () { p := person { \"Boii\" } p . method1 () p . method2 () p . method3 () var a1 A = p a1 . method1 () // a1.method2() // !\u62a5\u9519 // a1.method3() // !\u62a5\u9519 var b1 B = p b1 . method2 () // b1.method1() // !\u62a5\u9519 // b1.method3() // !\u62a5\u9519 var c1 C = p c1 . method1 () // \u6b63\u786e c1 . method2 () // \u6b63\u786e c1 . method3 () // \u6b63\u786e var a2 A = c1 // \u63a5\u53e3C\u53d8\u91cf\u770b\u6210\u662f\u63a5\u53e3A\u7c7b\u578b\uff0c\u8fd9\u662f\u53ef\u4ee5\u7684 a2 . method1 () // \u4f46\u662f\u53ea\u80fd\u8c03\u7528\u63a5\u53e3A\u7684 method1() // a2.method2() // !\u62a5\u9519 // a2.method3() // !\u62a5\u9519 var c2 C = a1 // !\u62a5\u9519\uff0c\u63a5\u53e3A\u53d8\u91cf\u770b\u6210\u662f\u63a5\u53e3C\u7c7b\u578b\uff0c\u8fd9\u662f\u9519\u8bef\u7684 } \u63a5\u53e3\u65ad\u8a00 \u00b6 \u8bbe \u5b9a\u4e49\u4e86\u4e00\u4e2a\u63a5\u53e3A\uff0c\u8fd8\u6709\u4e24\u4e2a\u7ed3\u6784\u4f53 X\u3001Y\uff0c\u4e24\u4e2a\u7ed3\u6784\u4f53\u90fd\u5b9e\u73b0\u4e86\u63a5\u53e3A\uff0c\u5f53\u4e00\u4e2a\u51fd\u6570\u6216\u65b9\u6cd5\u60f3\u8981\u63a5\u6536 X \u6216 Y \u4e24\u79cd\u7c7b\u578b\u65f6\uff0c\u53ef\u4ee5\u5c06\u5f62\u53c2\u8bbe\u7f6e\u4e3a \u63a5\u53e3A \u7c7b\u578b\uff0c\u8fd9\u6837\u4f20\u9012\u7684\u65f6\u5019\u4e0d\u7ba1\u662f X \u7684\u5bf9\u8c61\u8fd8\u662f Y \u7684\u5bf9\u8c61\u90fd\u53ef\u4ee5\u4f20\u9012\u8fdb\u6765\u3002 \u3010Q\u3011\uff1a\u90a3\u5982\u679c\u5728\u65b9\u6cd5\u6216\u51fd\u6570\u91cc\uff0c\u6211\u9700\u8981\u786e\u5b9a\u5230\u5e95\u662f X \u8fd8\u662f Y \u600e\u4e48\u529e\uff1f type A interface { aMethod () } type X struct { name string age int } type Y struct { name string sex string } // \u5b9e\u73b0\u63a5\u53e3A func ( x X ) aMethod () { fmt . Println ( \"I am \" , x ) } func ( y Y ) aMethod () { fmt . Println ( \"I am\" , y ) } // \u5b9a\u4e49\u4e00\u4e2a\u63a5\u6536 X \u548c Y \u5bf9\u8c61\u7684\u51fd\u6570 func test ( a A ) { a . aMethod () } \u3010A\u3011\uff1a\u8fd9\u65f6\u5019\u6211\u4eec\u9700\u8981\u7528\u5230\u63a5\u53e3\u7c7b\u578b\u65ad\u8a00\u6765\u786e\u5b9a\u4f20\u8fdb\u6765\u7684\u5230\u5e95\u662f x \u8fd8\u662f y\u3002 \u65b9\u5f0f1\uff1a instance := \u63a5\u53e3\u5bf9\u8c61.(\u5b9e\u9645\u7c7b\u578b) \uff0c\u8fd9\u79cd\u4e0d\u5b89\u5168\uff0c\u4f1a\u5f15\u53d1 panic() instance, ok := \u63a5\u53e3\u5bf9\u8c61.(\u5b9e\u9645\u7c7b\u578b) \uff0c\u8fd9\u79cd\u5c31\u5b89\u5168\u3002\u63a5\u53e3\u5bf9\u8c61\u662f\u5b9e\u9645\u7c7b\u578b\u65f6\uff0cok \u4e3a true \u65b9\u5f0f2\uff1aswitch switch instance := \u63a5\u53e3\u5bf9\u8c61 .( type ) { case \u5b9e\u9645\u7c7b\u578b1 : ... case \u5b9e\u9645\u7c7b\u578b2 : ... ... } \u4e8e\u662f\u5728 test() \u51fd\u6570\u4e2d\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a func test ( a A ) { if ins , ok := a .( X ); ok { fmt . Println ( ins . age ) } else if ins , ok := a .( Y ); ok { fmt . Println ( ins . sex ) } } \u6216\u8005\u8fd9\u6837\u5199\uff1a // \u5b9a\u4e49\u4e00\u4e2a\u63a5\u6536 X \u548c Y \u5bf9\u8c61\u7684\u51fd\u6570 func test ( a A ) { switch ins := a .( type ) { case X : fmt . Println ( ins . age ) case Y : fmt . Println ( ins . sex ) } } \u503c\u7c7b\u578b\u5b9e\u73b0 VS \u6307\u9488\u7c7b\u578b\u5b9e\u73b0 \u00b6 \u6211\u4eec\u5148\u5b9a\u4e49\u4e00\u4e2a\u63a5\u53e3\uff0c\u548c\u4e24\u4e2a\u7ed3\u6784\u4f53 type Aer interface { method () } type X struct {} type Y struct {} \u7136\u540e\u5206\u522b\u4f7f\u7528 \u503c\u7c7b\u578b \u548c \u6307\u9488\u7c7b\u578b \u5b9e\u73b0\u63a5\u53e3 // \u503c\u7c7b\u578b\u5b9e\u73b0 func ( x X ) method () {} // \u6307\u9488\u7c7b\u578b\u5b9e\u73b0 func ( y * Y ) method () {} \u6b64\u65f6\u5b9e\u73b0\u63a5\u53e3\u7684\u662f X \u7c7b\u578b\u3001 *X \u7c7b\u578b \u548c *Y \u7c7b\u578b\u3002 \u63a5\u7740\u6211\u4eec\u6765\u4f7f\u7528\u4e00\u4e0b\uff1a func main () { x := X {} y := Y {} var a1 Aer = x // a1 \u53ef\u4ee5\u63a5\u6536 x \u7c7b\u578b var a2 Aer = & x // a2 \u53ef\u4ee5\u63a5\u6536 *X \u7c7b\u578b var a3 Aer = y // !\u62a5\u9519\uff0ca3 \u4e0d\u53ef\u4ee5\u63a5\u6536 y \u7c7b\u578b var a4 Aer = & y // a4 \u53ef\u4ee5\u63a5\u6536 *y \u7c7b\u578b } \u5728\u4f7f\u7528\u503c\u7c7b\u578b\u5b9e\u73b0\u63a5\u53e3\u4e4b\u540e\uff0c\u4e0d\u7ba1\u662f X \u7ed3\u6784\u4f53\u7c7b\u578b \u8fd8\u662f *X \u7ed3\u6784\u4f53\u6307\u9488\u7c7b\u578b \uff0c\u90fd\u53ef\u4ee5\u8d4b\u503c\u7ed9\u8be5\u63a5\u53e3\u53d8\u91cf\u3002 \u56e0\u4e3a\u5728 Go \u8bed\u8a00\u4e2d\u6709\u5bf9\u6307\u9488\u7c7b\u578b\u53d8\u91cf\u6c42\u503c\u7684\u8bed\u6cd5\u7cd6\uff0cX \u6307\u9488 &x \u5185\u90e8\u4f1a\u81ea\u52a8\u6c42\u503c\u3002 var a2 Aer = &x \u4f1a\u53d8\u6210 var a2 Aer = *(&x) \u3002 \u800c Y \u662f\u7528\u6307\u9488\u7c7b\u578b\u5b9e\u73b0\u7684\uff0c\u6240\u4ee5\u53ea\u80fd\u4f20\u9012\u6307\u9488 &y \u7ed9 Aer \u63a5\u53e3\u53d8\u91cf\u3002 \u53ef\u4ee5\u8fd9\u4e48\u7406\u89e3\uff0c\u7ed3\u6784\u4f53\u901a\u8fc7\u503c\u63a5\u6536\u8005\uff08Value receiver\uff09\u5b9e\u73b0\u4e86\u65b9\u6cd5\uff0c\u7f16\u8bd1\u5668\u9ed8\u8ba4\u5e2e\u7740\u5b9e\u73b0\u4e86\u4e00\u4e2a\u6307\u9488\u63a5\u6536\u8005\uff08Pointer receiver\uff09\u3002 \u6240\u4ee5\u5f53\u4e00\u4e2a\u7ed3\u6784\u4f53\u201c \u503c\u5b9e\u73b0 \u201d\u4e86\u4e00\u4e2a\u63a5\u53e3\u65f6\uff0c\u8fd9\u4e2a\u7ed3\u6784\u4f53\u4e0d\u7ba1\u662f\u53d8\u91cf\u8fd8\u662f\u6307\u9488\u90fd\u53ef\u4ee5\u4f20\u7ed9\u8fd9\u4e2a\u63a5\u53e3\u7c7b\u578b\u3002 \u5f53\u4e00\u4e2a\u7ed3\u6784\u4f53\u201c \u6307\u9488\u5b9e\u73b0 \u201d\u4e86\u4e00\u4e2a\u63a5\u53e3\u65f6\uff0c\u8fd9\u4e2a\u7ed3\u6784\u4f53\u53ea\u6709\u6307\u9488\u53ef\u4ee5\u4f20\u7ed9\u63a5\u53e3\u7c7b\u578b\u3002 \u5982\u679c\u4e00\u4e2a\u7ed3\u6784\u4f53\u5728\u5b9e\u73b0\u4e00\u4e2a\u63a5\u53e3\u7684\u65f6\u5019\u6709\u7684\u201c\u503c\u5b9e\u73b0\u201d\uff0c\u6709\u7684\u201c\u6307\u9488\u5b9e\u73b0\u201d\uff0c\u90a3\u4e48\u53ea\u6709\u7ed3\u6784\u4f53\u6307\u9488\uff08struct pointer\uff09\u5b9e\u73b0\u4e86\u8fd9\u4e2a\u63a5\u53e3\u3002\u4f8b\u5982\uff1a type Ber interface { f1 () f2 () f3 () } type B1 struct {} func ( b * B1 ) f1 () {} func ( b * B1 ) f2 () {} func ( b B1 ) f3 () {} func inter2 ( b Ber ) {} func main () { b1v := B1 {} b1p := & B1 {} inter2 ( b1p ) // \u53ef\u4ee5\u901a\u8fc7\u7f16\u8bd1 inter2 ( b1v ) // cannot use b1v (variable of type B1) as Ber value in argument to inter2: missing method f1 (f1 has pointer receiver) } \u7ed3\u6784\u4f53\u5d4c\u5957\u63a5\u53e3 \u00b6 \u6211\u4eec\u8bf4\u5f53\u4e00\u4e2a\u7ed3\u6784\u4f53 S \u5b9e\u73b0\u4e86\u63a5\u53e3 Ier \u7684\u6240\u6709\u65b9\u6cd5\u65f6\uff0c\u5219\u7ed3\u6784\u4f53 S \u5b9e\u73b0\u4e86 Ier \u63a5\u53e3\u3002\u5b9e\u73b0\u4e86\u63a5\u53e3\u4ee5\u540e\uff0c\u53ef\u4ee5\u5c06\u7ed3\u6784\u4f53\u53d8\u91cf s1 \u4f20\u9012\u7ed9\u63a5\u53e3\u53d8\u91cf ier1 \uff0c\u4e5f\u53ef\u4ee5\u8c03\u7528\u63a5\u53e3 Ier \u4e2d\u7684\u65b9\u6cd5\uff0c\u5f53\u7136\u5177\u4f53\u6267\u884c\u7684\u662f s1 \u5b9e\u73b0\u7684\u5185\u5bb9\u3002 type Ier interface { // \u63a5\u53e3 Ier method1 () method2 () } type S struct {} // \u7ed3\u6784\u4f53 S func ( s S ) method1 () { // \u7ed3\u6784\u4f53 S \u5b9e\u73b0\u4e86 Ier \u63a5\u53e3 fmt . Println ( \"Hello1\" ) } func ( s S ) method2 () { // \u7ed3\u6784\u4f53 S \u5b9e\u73b0\u4e86 Ier \u63a5\u53e3 fmt . Println ( \"Hello2\" ) } func main () { s1 := S {} // \u7ed3\u6784\u4f53\u53d8\u91cf s1 var ier1 Ier = s1 // \u7ed3\u6784\u4f53\u53d8\u91cf s1 \u53ef\u4ee5\u4f20\u9012\u7ed9\u63a5\u53e3\u53d8\u91cf ier1 s1 . method1 () // \u7ed3\u6784\u4f53\u53d8\u91cf s1 \u53ef\u4ee5\u8c03\u7528 Ier \u4e2d\u7684\u65b9\u6cd5\uff0c\u6267\u884c\u7ed3\u679c\u6253\u5370 Hello1 s1 . method2 () // \u7ed3\u6784\u4f53\u53d8\u91cf s1 \u53ef\u4ee5\u8c03\u7528 Ier \u4e2d\u7684\u65b9\u6cd5\uff0c\u6267\u884c\u7ed3\u679c\u6253\u5370 Hello2 } \u90a3\u5982\u679c\u5728\u7ed3\u6784\u4f53\u4e2d\u5d4c\u5165\u4e00\u4e2a\u63a5\u53e3\u53d8\u91cf\u5462\uff1f type Ier interface { // \u63a5\u53e3 Ier method1 () method2 () } type S struct { // \u7ed3\u6784\u4f53 S Ier // \u5d4c\u5165\u63a5\u53e3\u53d8\u91cf name string } \u5728\u7ed3\u6784\u4f53\u4e2d\u533f\u540d\u5d4c\u5165\u522b\u7684\u7ed3\u6784\u4f53\u76f8\u5f53\u4e8e\u7ee7\u627f\u4e86\u8fd9\u4e2a\u7ed3\u6784\u4f53\uff0c\u662f\u4e00\u79cd is-a \u7684\u5173\u7cfb\uff0c\u4e0a\u9762\u7684\u5199\u6cd5\u8868\u660e\u4e86\uff1a \u7ed3\u6784\u4f53 S is a Ier \u7c7b\u578b\u3002 \u8fd9\u6837\u5199\uff0c\u53ef\u4ee5\u5c06\u7ed3\u6784\u4f53\u53d8\u91cf s1 \u8d4b\u503c\u7ed9\u63a5\u53e3\u53d8\u91cf ier1 \uff0c\u4f46**\u65e0\u6cd5\u8c03\u7528\u63a5\u53e3\u4e2d\u7684\u65b9\u6cd5**\uff0c\u56e0\u4e3a\u7ed3\u6784\u4f53 S \u6ca1\u6709\u5b9e\u73b0\u3002\u5f53\u7136\u5982\u679c\u7ed3\u6784\u4f53 S \u5b9e\u73b0\u4e86\u65b9\u6cd5\uff0c\u8fd8\u662f\u53ef\u4ee5\u8c03\u7528\u7684\u3002 func main () { s1 := S {} // \u7ed3\u6784\u4f53\u53d8\u91cf s1 var ier1 Ier = s1 // \u7ed3\u6784\u4f53\u53d8\u91cf s1 \u53ef\u4ee5\u4f20\u9012\u7ed9\u63a5\u53e3\u53d8\u91cf ier1 s1 . method1 () // x \u7ed3\u6784\u4f53\u53d8\u91cf s1 \u4e0d\u80fd\u8c03\u7528 Ier \u4e2d\u7684\u65b9\u6cd5\uff0c\u56e0\u4e3a\u6ca1\u6709\u5b9e\u73b0 s1 . method2 () // x \u7ed3\u6784\u4f53\u53d8\u91cf s1 \u4e0d\u80fd\u8c03\u7528 Ier \u4e2d\u7684\u65b9\u6cd5\uff0c\u56e0\u4e3a\u6ca1\u6709\u5b9e\u73b0 } \u7531\u6b64\u6211\u4eec\u4e5f\u53ef\u4ee5\u8fd9\u4e48\u7406\u89e3\uff1a \u5f53\u4e00\u4e2a\u7ed3\u6784\u4f53 S \u5b9e\u73b0\u4e86\u63a5\u53e3 Ier \u4e2d\u7684\u6240\u6709\u65b9\u6cd5\uff0c \u76f8\u5f53\u4e8e\u9690\u5f0f\u5730\u5728 S \u4e2d\u5d4c\u5165\u4e00\u4e2a\u533f\u540d\u5b57\u6bb5 Ier \uff0c \u4f7f\u5f97 S is a Ier \uff0c \u4e8e\u662f\u7ed3\u6784\u4f53\u53d8\u91cf s1 \u53ef\u4ee5\u8d4b\u503c\u7ed9\u63a5\u53e3\u53d8\u91cf ier1 \uff0c\u53ef\u4ee5\u8c03\u7528\u63a5\u53e3\u65b9\u6cd5\u3002","title":"12.\u63a5\u53e3"},{"location":"Go/Basic/Golang-12-%E6%8E%A5%E5%8F%A3/#12-","text":"Go \u4e2d\u7684\u63a5\u53e3 interface \u662f\u4e00\u79cd\u7c7b\u578b\uff0c\u4e00\u79cd\u62bd\u8c61\u7684\u7c7b\u578b\u3002 interface \u662f\u4e00\u7ec4\u65b9\u6cd5\u7684\u96c6\u5408\uff0c\u662f dack-type programming \u7684\u4e00\u79cd\u4f53\u73b0\u3002 \u63a5\u53e3\u505a\u7684\u4e8b\u60c5\u5c31\u50cf\u662f\u5b9a\u4e49\u4e00\u4e2a\u534f\u8bae\uff08\u89c4\u5219\uff09\uff0c\u53ea\u8981\u4e00\u53f0\u673a\u5668\u5177\u6709\u6d17\u8863\u670d\u548c\u7529\u5e72\u7684\u529f\u80fd\uff0c\u6211\u5c31\u79f0\u5176\u4e3a\u6d17\u8863\u673a\u3002 \u63a5\u53e3\u4e0d\u5173\u5fc3\u5c5e\u6027\uff08\u6570\u636e\uff09\uff0c\u53ea\u5173\u5fc3\u884c\u4e3a\uff08\u65b9\u6cd5\uff09\u3002 \u53ea\u8981\u4e00\u4e2a\u7ed3\u6784\u4f53 X \u5b9e\u73b0\u4e86\u63a5\u53e3 A \u4e2d\u6240\u6709\u7684\u65b9\u6cd5\uff0c\u5c31\u79f0\u8fd9\u4e2a\u7ed3\u6784\u4f53 X \u4e3a\u63a5\u53e3 A \u7684\u5b9e\u73b0\u7c7b\uff0c\u79f0\u7ed3\u6784\u4f53 X \u5b9e\u73b0\u4e86\u63a5\u53e3 A\u3002\u8fd8\u53ef\u79f0\u7ed3\u6784\u4f53 X \u662f A \u7c7b\u578b\u3002 {% note warning, \u4e3a\u4e86\u4fdd\u62a4\u4f60\u7684Go\u8bed\u8a00\u804c\u4e1a\u751f\u6daf\uff0c\u8bf7\u7262\u8bb0\u63a5\u53e3\uff08interface\uff09\u662f\u4e00\u79cd\u7c7b\u578b\u3002 %}","title":"12-\u63a5\u53e3"},{"location":"Go/Basic/Golang-12-%E6%8E%A5%E5%8F%A3/#_1","text":"\u57fa\u672c\u8bed\u6cd5\u5982\u4e0b\uff1a type identifier interface { methodName1 ([ param ])[( return )] methodName2 ([ param ])[( return )] methodName3 ([ param ])[( return )] ... } identifier \uff1a\u63a5\u53e3\u540d\uff0c\u547d\u540d\u65f6\u6309\u7167\u89c4\u8303\u5e94\u8be5\u52a0\u4e0a er \uff0c\u5982 \u6709\u5b57\u7b26\u4e32\u529f\u80fd\u7684 Stringer \u3001\u6709\u8bfb\u53d6\u529f\u80fd\u7684 Reader \u3002 methodName \uff1a\u65b9\u6cd5\u540d eg\uff1a type USBer interface { start () end () }","title":"\u5b9a\u4e49\u63a5\u53e3"},{"location":"Go/Basic/Golang-12-%E6%8E%A5%E5%8F%A3/#_2","text":"\u5b9e\u73b0\u63a5\u53e3\uff1a // \u5b9a\u4e49\u4e00\u4e2a\u63a5\u53e3 type USBer interface { start () end () } // \u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53 type Mouse struct { name string } // \u5b9e\u73b0\u4e24\u4e2a\u63a5\u53e3\u4e2d\u7684\u65b9\u6cd5\uff0c\u63a5\u6536\u8005\u4e3a\u7ed3\u6784\u4f53 Mouse\uff0c\u8fd9\u6837 Mouse \u5c31\u662f\u4e00\u4e2a\u5b9e\u73b0\u7c7b func ( m Mouse ) start () { fmt . Println ( m . name , \"starts working.\" ) } func ( m Mouse ) end () { fmt . Println ( m . name , \"end working.\" ) } \u7ed3\u6784\u4f53 Mouse \u5b9e\u73b0\u4e86 USBer \u7684\u6240\u6709\u65b9\u6cd5 start() \u548c end() \uff0c\u6240\u4ee5 Mouse \u5c31\u662f USBer \u7684\u4e00\u4e2a\u5b9e\u73b0\u7c7b\u3002","title":"\u5b9e\u73b0\u63a5\u53e3"},{"location":"Go/Basic/Golang-12-%E6%8E%A5%E5%8F%A3/#_3","text":"\u5b9e\u73b0\u4e86\u63a5\u53e3\u7684\u7ed3\u6784\u4f53\uff08\u5b9e\u73b0\u7c7b\uff09\u548c\u6ca1\u5b9e\u73b0\u63a5\u53e3\u7684\u7ed3\u6784\u4f53\uff0c\u533a\u522b\u5728\u4e8e \u5f53\u4e00\u4e2a\u51fd\u6570\u9700\u8981\u4f20\u9012\u4e00\u4e2a\u63a5\u53e3\u7c7b\u578b\u7684\u53c2\u6570\u65f6\uff0c\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2a\u63a5\u53e3\u53d8\u91cf\u8fdb\u53bb\uff0c\u4e5f\u53ef\u4ee5\u4f20\u4e00\u4e2a\u5b9e\u73b0\u7c7b\u5bf9\u8c61\u8fdb\u53bb\u3002 func test ( usb USBer ) { // \u9700\u8981\u4f20\u9012\u4e00\u4e2a\u63a5\u53e3\u7c7b\u578b\u7684\u53c2\u6570 usb . start () usb . end () } func main () { m1 := Mouse { \"\u7f57\u6280\" } test ( m1 ) // \u4f20\u9012\u4e00\u4e2a\u5b9e\u73b0\u7c7b\u5bf9\u8c61 var u1 USBer = m1 test ( u1 ) // \u4f20\u9012\u4e00\u4e2a\u63a5\u53e3\u53d8\u91cf } {% noteblock warning %} \u6ce8\u610f\uff0c \u63a5\u53e3\u53d8\u91cf\u4f7f\u7528\u4e4b\u524d\uff0c\u9700\u8981\u5148\u8d4b\u4e00\u4e2a\u5b9e\u73b0\u7c7b\u5bf9\u8c61\u3002 \u63a5\u53e3\u53d8\u91cf\u53ef\u4ee5\u8c03\u7528\u63a5\u53e3\u4e2d\u7684\u65b9\u6cd5\uff0c\u4f46\u4e0d\u53ef\u4ee5\u8c03\u7528\u5b9e\u73b0\u7c7b\u7684\u5c5e\u6027\u548c\u65b9\u6cd5 {% endnoteblock %} package main import \"fmt\" // \u5b9a\u4e49\u4e00\u4e2a\u63a5\u53e3 type iUSBer interface { start () end () } // \u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53 type Mouse struct { name string } // \u5b9e\u73b0\u4e24\u4e2a\u63a5\u53e3\u4e2d\u7684\u65b9\u6cd5\uff0c\u63a5\u6536\u8005\u4e3a\u7ed3\u6784\u4f53 Mouse\uff0c\u8fd9\u6837 Mouse \u5c31\u662f\u4e00\u4e2a\u5b9e\u73b0\u7c7b func ( m Mouse ) start () { fmt . Println ( m . name , \"starts working.\" ) } func ( m Mouse ) end () { fmt . Println ( m . name , \"end working.\" ) } // \u5b9a\u4e49\u7ed3\u6784\u4f53 Mouse \u81ea\u5df1\u7684\u65b9\u6cd5 func ( m Mouse ) selfMethod () { fmt . Println ( m . name , \"selfMethod\" ) } // \u5b9a\u4e49\u4e00\u4e2a\u6d4b\u8bd5\u65b9\u6cd5\uff0c\u9700\u8981\u63a5\u6536\u4e00\u4e2a USB \u63a5\u53e3\u53d8\u91cf\u3002\u53ef\u4ee5\u4f20\u9012 USB \u53d8\u91cf\uff0c\u4e5f\u53ef\u4ee5\u4f20\u9012 USB \u5b9e\u73b0\u7c7b\u7684\u5bf9\u8c61 func test ( usb iUSBer ) { // \u9700\u8981\u4f20\u9012\u4e00\u4e2a\u63a5\u53e3\u7c7b\u578b\u7684\u53c2\u6570 usb . start () usb . end () } func main () { m1 := Mouse { \"\u7f57\u6280\" } // Mouse\u662f\u4e00\u4e2a\u5b9e\u73b0\u7c7b\uff0c\u53ef\u4ee5\u4f20\u9012\u5b9e\u73b0\u7c7b\u5bf9\u8c61\u7ed9 test() test ( m1 ) // \u63a5\u53e3\u53d8\u91cf\u4f7f\u7528\u4e4b\u524d\u8981\u5148\u8d4b\u4e00\u4e2a\u5b9e\u73b0\u7c7b\u5bf9\u8c61 var u1 iUSBer = m1 // \u4f20\u9012\u4e00\u4e2a\u63a5\u53e3\u53d8\u91cf\u7ed9 test() test ( u1 ) m1 . start () // \u7f57\u6280 starts working. m1 . end () // \u7f57\u6280 end working. m1 . selfMethod () // \u7f57\u6280 selfMethod u1 . start () // \u7f57\u6280 starts working. u1 . end () // \u7f57\u6280 end working. // u1.selfMethod() // \u9519\u8bef\uff0c\u63a5\u53e3\u53d8\u91cf\u4e0d\u53ef\u4ee5\u8c03\u7528\u5b9e\u73b0\u7c7b\u7684\u65b9\u6cd5 // u1.name // \u9519\u8bef\uff0c\u63a5\u53e3\u53d8\u91cf\u4e0d\u53ef\u4ee5\u8c03\u7528\u5b9e\u73b0\u7c7b\u7684\u5c5e\u6027 }","title":"\u4f7f\u7528\u63a5\u53e3"},{"location":"Go/Basic/Golang-12-%E6%8E%A5%E5%8F%A3/#_4","text":"\u4e0d\u5305\u542b\u4efb\u4f55\u65b9\u6cd5\u7684\u63a5\u53e3\uff0c\u79f0\u4e3a\u7a7a\u63a5\u53e3\u3002 \u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a \u4efb\u610f\u7c7b\u578b\u90fd\u5b9e\u73b0\u4e86\u7a7a\u63a5\u53e3 interface {} type T interface {} eg\uff1a type T interface {} type person struct { name string } var t1 T = person { \"Boii\" } var t2 T = \"str\" var t3 T = 100 var t4 T = [] int { 1 , 2 , 3 } fmt . Println ( t1 ) // {Boii} fmt . Println ( t2 ) // str fmt . Println ( t3 ) // 100 fmt . Println ( t4 ) // [1 2 3] {% noteblock info %} \u7a7a\u63a5\u53e3\u7684\u4f5c\u7528\u5728\u4e8e \u4efb\u610f\u7c7b\u578b \u3002 \u5f53\u6211\u4eec\u60f3\u8981\u63a5\u53d7\u4e00\u4e2a\u4efb\u610f\u7c7b\u578b\u7684\u53c2\u6570\uff0c\u6216\u8005\u5b9a\u4e49\u4e00\u4e2a\u63a5\u6536\u4efb\u610f\u7c7b\u578b\u7684\u5bb9\u5668\uff0c\u90fd\u53ef\u4ee5\u4f7f\u7528\u7a7a\u63a5\u53e3\u6765\u4ee3\u66ff\u3002 func test ( a interface {}) { ... } test ( \"string\" ) test ( 123 ) test ([] int { 1 , 2 , 3 , 4 }) a := [] interface {}{ 1 , 3 , \"str\" , true } fmt . Println ( a ) // {1 3 str true} type T interface {} b := [] T { 1 , 3 , \"str\" , true } fmt . Println ( b ) // {1 3 str true} {% endnoteblock %}","title":"\u7a7a\u63a5\u53e3"},{"location":"Go/Basic/Golang-12-%E6%8E%A5%E5%8F%A3/#_5","text":"\u63a5\u53e3\u4e2d\u4e0d\u4ec5\u53ef\u4ee5\u5b9a\u4e49\u65b9\u6cd5\u7b7e\u540d\uff0c\u8fd8\u53ef\u4ee5\u5b9a\u4e49\u5176\u4ed6\u7684\u63a5\u53e3\u3002\u8fd9\u79cd\u65b9\u5f0f\u6211\u4eec\u79f0\u4e3a**\u63a5\u53e3\u5d4c\u5957**\u3002 // \u63a5\u53e3A type A interface { method1 () } // \u63a5\u53e3B type B interface { method2 () } // \u63a5\u53e3C\uff0c\u5d4c\u5957\u4e86\u63a5\u53e3 A \u548c B type C interface { A B method3 () } // \u7ed3\u6784\u4f53 type person struct { name string } func ( p person ) method1 () { // \u4f7f person \u6210\u4e3a \u63a5\u53e3A \u7684\u5b9e\u73b0\u7c7b ... } func ( p person ) method2 () { // \u4f7f person \u6210\u4e3a \u63a5\u53e3B \u7684\u5b9e\u73b0\u7c7b ... } func ( p person ) method3 () { // \u4f7f person \u6210\u4e3a \u63a5\u53e3C \u7684\u5b9e\u73b0\u7c7b\uff0c\u524d\u63d0\u662f\u5b9e\u73b0\u4e86\u524d\u9762\u4e24\u4e2a ... } \u5d4c\u5957\u4e86\u63a5\u53e3\uff0c\u4e0d\u4ec5\u8981\u5b9e\u73b0\u63a5\u53e3\u672c\u8eab\u7684\u65b9\u6cd5\uff0c\u8fd8\u8981\u5b9e\u73b0\u63a5\u53e3\u4e2d\u7684\u5d4c\u5957\u63a5\u53e3\u7684\u65b9\u6cd5\uff0c\u624d\u80fd\u8ba4\u4e3a\u5b9e\u73b0\u4e86\u6700\u5916\u4fa7\u7684\u63a5\u53e3\u3002 \u5982\u4e0a\u9762\u4f8b\u5b50\uff0cperson \u8981\u6210\u4e3a C \u7684\u5b9e\u73b0\u7c7b\uff0c\u4e0d\u4ec5\u8981\u5b9e\u73b0 C \u7684 method3() \u65b9\u6cd5\uff0c\u8fd8\u5f97\u5b9e\u73b0 A \u7684 method1() \u548c B \u7684 method2() \u3002 func main () { p := person { \"Boii\" } p . method1 () p . method2 () p . method3 () var a1 A = p a1 . method1 () // a1.method2() // !\u62a5\u9519 // a1.method3() // !\u62a5\u9519 var b1 B = p b1 . method2 () // b1.method1() // !\u62a5\u9519 // b1.method3() // !\u62a5\u9519 var c1 C = p c1 . method1 () // \u6b63\u786e c1 . method2 () // \u6b63\u786e c1 . method3 () // \u6b63\u786e var a2 A = c1 // \u63a5\u53e3C\u53d8\u91cf\u770b\u6210\u662f\u63a5\u53e3A\u7c7b\u578b\uff0c\u8fd9\u662f\u53ef\u4ee5\u7684 a2 . method1 () // \u4f46\u662f\u53ea\u80fd\u8c03\u7528\u63a5\u53e3A\u7684 method1() // a2.method2() // !\u62a5\u9519 // a2.method3() // !\u62a5\u9519 var c2 C = a1 // !\u62a5\u9519\uff0c\u63a5\u53e3A\u53d8\u91cf\u770b\u6210\u662f\u63a5\u53e3C\u7c7b\u578b\uff0c\u8fd9\u662f\u9519\u8bef\u7684 }","title":"\u63a5\u53e3\u5d4c\u5957"},{"location":"Go/Basic/Golang-12-%E6%8E%A5%E5%8F%A3/#_6","text":"\u8bbe \u5b9a\u4e49\u4e86\u4e00\u4e2a\u63a5\u53e3A\uff0c\u8fd8\u6709\u4e24\u4e2a\u7ed3\u6784\u4f53 X\u3001Y\uff0c\u4e24\u4e2a\u7ed3\u6784\u4f53\u90fd\u5b9e\u73b0\u4e86\u63a5\u53e3A\uff0c\u5f53\u4e00\u4e2a\u51fd\u6570\u6216\u65b9\u6cd5\u60f3\u8981\u63a5\u6536 X \u6216 Y \u4e24\u79cd\u7c7b\u578b\u65f6\uff0c\u53ef\u4ee5\u5c06\u5f62\u53c2\u8bbe\u7f6e\u4e3a \u63a5\u53e3A \u7c7b\u578b\uff0c\u8fd9\u6837\u4f20\u9012\u7684\u65f6\u5019\u4e0d\u7ba1\u662f X \u7684\u5bf9\u8c61\u8fd8\u662f Y \u7684\u5bf9\u8c61\u90fd\u53ef\u4ee5\u4f20\u9012\u8fdb\u6765\u3002 \u3010Q\u3011\uff1a\u90a3\u5982\u679c\u5728\u65b9\u6cd5\u6216\u51fd\u6570\u91cc\uff0c\u6211\u9700\u8981\u786e\u5b9a\u5230\u5e95\u662f X \u8fd8\u662f Y \u600e\u4e48\u529e\uff1f type A interface { aMethod () } type X struct { name string age int } type Y struct { name string sex string } // \u5b9e\u73b0\u63a5\u53e3A func ( x X ) aMethod () { fmt . Println ( \"I am \" , x ) } func ( y Y ) aMethod () { fmt . Println ( \"I am\" , y ) } // \u5b9a\u4e49\u4e00\u4e2a\u63a5\u6536 X \u548c Y \u5bf9\u8c61\u7684\u51fd\u6570 func test ( a A ) { a . aMethod () } \u3010A\u3011\uff1a\u8fd9\u65f6\u5019\u6211\u4eec\u9700\u8981\u7528\u5230\u63a5\u53e3\u7c7b\u578b\u65ad\u8a00\u6765\u786e\u5b9a\u4f20\u8fdb\u6765\u7684\u5230\u5e95\u662f x \u8fd8\u662f y\u3002 \u65b9\u5f0f1\uff1a instance := \u63a5\u53e3\u5bf9\u8c61.(\u5b9e\u9645\u7c7b\u578b) \uff0c\u8fd9\u79cd\u4e0d\u5b89\u5168\uff0c\u4f1a\u5f15\u53d1 panic() instance, ok := \u63a5\u53e3\u5bf9\u8c61.(\u5b9e\u9645\u7c7b\u578b) \uff0c\u8fd9\u79cd\u5c31\u5b89\u5168\u3002\u63a5\u53e3\u5bf9\u8c61\u662f\u5b9e\u9645\u7c7b\u578b\u65f6\uff0cok \u4e3a true \u65b9\u5f0f2\uff1aswitch switch instance := \u63a5\u53e3\u5bf9\u8c61 .( type ) { case \u5b9e\u9645\u7c7b\u578b1 : ... case \u5b9e\u9645\u7c7b\u578b2 : ... ... } \u4e8e\u662f\u5728 test() \u51fd\u6570\u4e2d\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a func test ( a A ) { if ins , ok := a .( X ); ok { fmt . Println ( ins . age ) } else if ins , ok := a .( Y ); ok { fmt . Println ( ins . sex ) } } \u6216\u8005\u8fd9\u6837\u5199\uff1a // \u5b9a\u4e49\u4e00\u4e2a\u63a5\u6536 X \u548c Y \u5bf9\u8c61\u7684\u51fd\u6570 func test ( a A ) { switch ins := a .( type ) { case X : fmt . Println ( ins . age ) case Y : fmt . Println ( ins . sex ) } }","title":"\u63a5\u53e3\u65ad\u8a00"},{"location":"Go/Basic/Golang-12-%E6%8E%A5%E5%8F%A3/#vs","text":"\u6211\u4eec\u5148\u5b9a\u4e49\u4e00\u4e2a\u63a5\u53e3\uff0c\u548c\u4e24\u4e2a\u7ed3\u6784\u4f53 type Aer interface { method () } type X struct {} type Y struct {} \u7136\u540e\u5206\u522b\u4f7f\u7528 \u503c\u7c7b\u578b \u548c \u6307\u9488\u7c7b\u578b \u5b9e\u73b0\u63a5\u53e3 // \u503c\u7c7b\u578b\u5b9e\u73b0 func ( x X ) method () {} // \u6307\u9488\u7c7b\u578b\u5b9e\u73b0 func ( y * Y ) method () {} \u6b64\u65f6\u5b9e\u73b0\u63a5\u53e3\u7684\u662f X \u7c7b\u578b\u3001 *X \u7c7b\u578b \u548c *Y \u7c7b\u578b\u3002 \u63a5\u7740\u6211\u4eec\u6765\u4f7f\u7528\u4e00\u4e0b\uff1a func main () { x := X {} y := Y {} var a1 Aer = x // a1 \u53ef\u4ee5\u63a5\u6536 x \u7c7b\u578b var a2 Aer = & x // a2 \u53ef\u4ee5\u63a5\u6536 *X \u7c7b\u578b var a3 Aer = y // !\u62a5\u9519\uff0ca3 \u4e0d\u53ef\u4ee5\u63a5\u6536 y \u7c7b\u578b var a4 Aer = & y // a4 \u53ef\u4ee5\u63a5\u6536 *y \u7c7b\u578b } \u5728\u4f7f\u7528\u503c\u7c7b\u578b\u5b9e\u73b0\u63a5\u53e3\u4e4b\u540e\uff0c\u4e0d\u7ba1\u662f X \u7ed3\u6784\u4f53\u7c7b\u578b \u8fd8\u662f *X \u7ed3\u6784\u4f53\u6307\u9488\u7c7b\u578b \uff0c\u90fd\u53ef\u4ee5\u8d4b\u503c\u7ed9\u8be5\u63a5\u53e3\u53d8\u91cf\u3002 \u56e0\u4e3a\u5728 Go \u8bed\u8a00\u4e2d\u6709\u5bf9\u6307\u9488\u7c7b\u578b\u53d8\u91cf\u6c42\u503c\u7684\u8bed\u6cd5\u7cd6\uff0cX \u6307\u9488 &x \u5185\u90e8\u4f1a\u81ea\u52a8\u6c42\u503c\u3002 var a2 Aer = &x \u4f1a\u53d8\u6210 var a2 Aer = *(&x) \u3002 \u800c Y \u662f\u7528\u6307\u9488\u7c7b\u578b\u5b9e\u73b0\u7684\uff0c\u6240\u4ee5\u53ea\u80fd\u4f20\u9012\u6307\u9488 &y \u7ed9 Aer \u63a5\u53e3\u53d8\u91cf\u3002 \u53ef\u4ee5\u8fd9\u4e48\u7406\u89e3\uff0c\u7ed3\u6784\u4f53\u901a\u8fc7\u503c\u63a5\u6536\u8005\uff08Value receiver\uff09\u5b9e\u73b0\u4e86\u65b9\u6cd5\uff0c\u7f16\u8bd1\u5668\u9ed8\u8ba4\u5e2e\u7740\u5b9e\u73b0\u4e86\u4e00\u4e2a\u6307\u9488\u63a5\u6536\u8005\uff08Pointer receiver\uff09\u3002 \u6240\u4ee5\u5f53\u4e00\u4e2a\u7ed3\u6784\u4f53\u201c \u503c\u5b9e\u73b0 \u201d\u4e86\u4e00\u4e2a\u63a5\u53e3\u65f6\uff0c\u8fd9\u4e2a\u7ed3\u6784\u4f53\u4e0d\u7ba1\u662f\u53d8\u91cf\u8fd8\u662f\u6307\u9488\u90fd\u53ef\u4ee5\u4f20\u7ed9\u8fd9\u4e2a\u63a5\u53e3\u7c7b\u578b\u3002 \u5f53\u4e00\u4e2a\u7ed3\u6784\u4f53\u201c \u6307\u9488\u5b9e\u73b0 \u201d\u4e86\u4e00\u4e2a\u63a5\u53e3\u65f6\uff0c\u8fd9\u4e2a\u7ed3\u6784\u4f53\u53ea\u6709\u6307\u9488\u53ef\u4ee5\u4f20\u7ed9\u63a5\u53e3\u7c7b\u578b\u3002 \u5982\u679c\u4e00\u4e2a\u7ed3\u6784\u4f53\u5728\u5b9e\u73b0\u4e00\u4e2a\u63a5\u53e3\u7684\u65f6\u5019\u6709\u7684\u201c\u503c\u5b9e\u73b0\u201d\uff0c\u6709\u7684\u201c\u6307\u9488\u5b9e\u73b0\u201d\uff0c\u90a3\u4e48\u53ea\u6709\u7ed3\u6784\u4f53\u6307\u9488\uff08struct pointer\uff09\u5b9e\u73b0\u4e86\u8fd9\u4e2a\u63a5\u53e3\u3002\u4f8b\u5982\uff1a type Ber interface { f1 () f2 () f3 () } type B1 struct {} func ( b * B1 ) f1 () {} func ( b * B1 ) f2 () {} func ( b B1 ) f3 () {} func inter2 ( b Ber ) {} func main () { b1v := B1 {} b1p := & B1 {} inter2 ( b1p ) // \u53ef\u4ee5\u901a\u8fc7\u7f16\u8bd1 inter2 ( b1v ) // cannot use b1v (variable of type B1) as Ber value in argument to inter2: missing method f1 (f1 has pointer receiver) }","title":"\u503c\u7c7b\u578b\u5b9e\u73b0 VS \u6307\u9488\u7c7b\u578b\u5b9e\u73b0"},{"location":"Go/Basic/Golang-12-%E6%8E%A5%E5%8F%A3/#_7","text":"\u6211\u4eec\u8bf4\u5f53\u4e00\u4e2a\u7ed3\u6784\u4f53 S \u5b9e\u73b0\u4e86\u63a5\u53e3 Ier \u7684\u6240\u6709\u65b9\u6cd5\u65f6\uff0c\u5219\u7ed3\u6784\u4f53 S \u5b9e\u73b0\u4e86 Ier \u63a5\u53e3\u3002\u5b9e\u73b0\u4e86\u63a5\u53e3\u4ee5\u540e\uff0c\u53ef\u4ee5\u5c06\u7ed3\u6784\u4f53\u53d8\u91cf s1 \u4f20\u9012\u7ed9\u63a5\u53e3\u53d8\u91cf ier1 \uff0c\u4e5f\u53ef\u4ee5\u8c03\u7528\u63a5\u53e3 Ier \u4e2d\u7684\u65b9\u6cd5\uff0c\u5f53\u7136\u5177\u4f53\u6267\u884c\u7684\u662f s1 \u5b9e\u73b0\u7684\u5185\u5bb9\u3002 type Ier interface { // \u63a5\u53e3 Ier method1 () method2 () } type S struct {} // \u7ed3\u6784\u4f53 S func ( s S ) method1 () { // \u7ed3\u6784\u4f53 S \u5b9e\u73b0\u4e86 Ier \u63a5\u53e3 fmt . Println ( \"Hello1\" ) } func ( s S ) method2 () { // \u7ed3\u6784\u4f53 S \u5b9e\u73b0\u4e86 Ier \u63a5\u53e3 fmt . Println ( \"Hello2\" ) } func main () { s1 := S {} // \u7ed3\u6784\u4f53\u53d8\u91cf s1 var ier1 Ier = s1 // \u7ed3\u6784\u4f53\u53d8\u91cf s1 \u53ef\u4ee5\u4f20\u9012\u7ed9\u63a5\u53e3\u53d8\u91cf ier1 s1 . method1 () // \u7ed3\u6784\u4f53\u53d8\u91cf s1 \u53ef\u4ee5\u8c03\u7528 Ier \u4e2d\u7684\u65b9\u6cd5\uff0c\u6267\u884c\u7ed3\u679c\u6253\u5370 Hello1 s1 . method2 () // \u7ed3\u6784\u4f53\u53d8\u91cf s1 \u53ef\u4ee5\u8c03\u7528 Ier \u4e2d\u7684\u65b9\u6cd5\uff0c\u6267\u884c\u7ed3\u679c\u6253\u5370 Hello2 } \u90a3\u5982\u679c\u5728\u7ed3\u6784\u4f53\u4e2d\u5d4c\u5165\u4e00\u4e2a\u63a5\u53e3\u53d8\u91cf\u5462\uff1f type Ier interface { // \u63a5\u53e3 Ier method1 () method2 () } type S struct { // \u7ed3\u6784\u4f53 S Ier // \u5d4c\u5165\u63a5\u53e3\u53d8\u91cf name string } \u5728\u7ed3\u6784\u4f53\u4e2d\u533f\u540d\u5d4c\u5165\u522b\u7684\u7ed3\u6784\u4f53\u76f8\u5f53\u4e8e\u7ee7\u627f\u4e86\u8fd9\u4e2a\u7ed3\u6784\u4f53\uff0c\u662f\u4e00\u79cd is-a \u7684\u5173\u7cfb\uff0c\u4e0a\u9762\u7684\u5199\u6cd5\u8868\u660e\u4e86\uff1a \u7ed3\u6784\u4f53 S is a Ier \u7c7b\u578b\u3002 \u8fd9\u6837\u5199\uff0c\u53ef\u4ee5\u5c06\u7ed3\u6784\u4f53\u53d8\u91cf s1 \u8d4b\u503c\u7ed9\u63a5\u53e3\u53d8\u91cf ier1 \uff0c\u4f46**\u65e0\u6cd5\u8c03\u7528\u63a5\u53e3\u4e2d\u7684\u65b9\u6cd5**\uff0c\u56e0\u4e3a\u7ed3\u6784\u4f53 S \u6ca1\u6709\u5b9e\u73b0\u3002\u5f53\u7136\u5982\u679c\u7ed3\u6784\u4f53 S \u5b9e\u73b0\u4e86\u65b9\u6cd5\uff0c\u8fd8\u662f\u53ef\u4ee5\u8c03\u7528\u7684\u3002 func main () { s1 := S {} // \u7ed3\u6784\u4f53\u53d8\u91cf s1 var ier1 Ier = s1 // \u7ed3\u6784\u4f53\u53d8\u91cf s1 \u53ef\u4ee5\u4f20\u9012\u7ed9\u63a5\u53e3\u53d8\u91cf ier1 s1 . method1 () // x \u7ed3\u6784\u4f53\u53d8\u91cf s1 \u4e0d\u80fd\u8c03\u7528 Ier \u4e2d\u7684\u65b9\u6cd5\uff0c\u56e0\u4e3a\u6ca1\u6709\u5b9e\u73b0 s1 . method2 () // x \u7ed3\u6784\u4f53\u53d8\u91cf s1 \u4e0d\u80fd\u8c03\u7528 Ier \u4e2d\u7684\u65b9\u6cd5\uff0c\u56e0\u4e3a\u6ca1\u6709\u5b9e\u73b0 } \u7531\u6b64\u6211\u4eec\u4e5f\u53ef\u4ee5\u8fd9\u4e48\u7406\u89e3\uff1a \u5f53\u4e00\u4e2a\u7ed3\u6784\u4f53 S \u5b9e\u73b0\u4e86\u63a5\u53e3 Ier \u4e2d\u7684\u6240\u6709\u65b9\u6cd5\uff0c \u76f8\u5f53\u4e8e\u9690\u5f0f\u5730\u5728 S \u4e2d\u5d4c\u5165\u4e00\u4e2a\u533f\u540d\u5b57\u6bb5 Ier \uff0c \u4f7f\u5f97 S is a Ier \uff0c \u4e8e\u662f\u7ed3\u6784\u4f53\u53d8\u91cf s1 \u53ef\u4ee5\u8d4b\u503c\u7ed9\u63a5\u53e3\u53d8\u91cf ier1 \uff0c\u53ef\u4ee5\u8c03\u7528\u63a5\u53e3\u65b9\u6cd5\u3002","title":"\u7ed3\u6784\u4f53\u5d4c\u5957\u63a5\u53e3"},{"location":"Go/Basic/Golang-13-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/","text":"Golang \u6a21\u62df\u9762\u5411\u5bf9\u8c61\u7684\u5b9e\u73b0 13-\u9762\u5411\u5bf9\u8c61 \u00b6 \u9762\u5411\u5bf9\u8c61\u4e09\u5927\u7279\u6027\uff1a\u5c01\u88c5\u3001\u7ee7\u627f\u3001\u591a\u6001 Golang \u6ca1\u6709\u7c7b\u7684\u6982\u5ff5\uff0c\u4e5f\u6ca1\u6709\u9762\u5411\u5bf9\u8c61\u7684\u6982\u5ff5\u3002 \u51c6\u786e\u7684\u8bf4\uff0c\u9762\u5411\u5bf9\u8c61\u3001\u5c01\u88c5\u3001\u7ee7\u627f\u3001\u591a\u6001\u3001\u62bd\u8c61\u7b49\u7b49\uff0c\u8fd9\u4e9b\u90fd\u662f\u7f16\u7a0b\u601d\u60f3\uff0c\u4e0d\u540c\u7684\u8bed\u8a00\u5b9e\u73b0\u8fd9\u4e9b\u7279\u6027\u7684\u65b9\u5f0f\u4e0d\u540c\u3002 \u4f8b\u5982 Java \uff0c\u7528\u7684\u662f\u7c7b class \uff0c\u8bbf\u95ee\u4fee\u9970\u7b26 public\u3001protected\u3001default\u3001private \u7b49\u6765\u5b9e\u73b0\uff1b \u5728 Golang \u4e2d\uff0c\u7528\u7684\u662f\u7ed3\u6784\u4f53 struct \u3001\u6807\u8bc6\u7b26\u9996\u5b57\u6bcd\u5927\u5c0f\u5199 \u7b49\u6765\u5b9e\u73b0\u3002 {% noteblock quote %} \u9762\u5411\u8fc7\u7a0b\u3001\u9762\u5411\u5bf9\u8c61\u3001\u4e00\u5207\u7686\u5bf9\u8c61\u3001\u4e00\u5207\u7686\u6587\u4ef6 \u7b49\u8bf8\u5982\u6b64\u7c7b\u7684\u6982\u5ff5\uff0c \u5728\u5b66\u4e60\u4e4b\u521d\u53ef\u80fd\u4f1a\u6210\u4e3a\u521d\u5b66\u8005\u7684\u4e00\u9053\u574e\uff0c\u4e5f\u53ef\u80fd\u662f\u5e2e\u52a9\u65b0\u624b\u66f4\u5feb\u5165\u95e8\u7684\u597d\u5e2e\u624b\uff1b \u7b49\u5230\u5b66\u5230\u4e00\u5b9a\u7a0b\u5ea6\u4ee5\u540e\uff0c\u8fd9\u4e9b\u601d\u60f3\u80fd\u5e2e\u52a9\u6211\u4eec\u5feb\u901f\u89e3\u51b3\u4e00\u4e9b\u95ee\u9898\uff0c\u4e5f\u53ef\u80fd\u5f00\u59cb\u7981\u9522\u6211\u4eec\u7684\u601d\u60f3\uff1b \u5584\u4e8e\u53d8\u901a\u8005\u4f1a\u6162\u6162\u770b\u900f\u672c\u8d28\uff0c\u8131\u79bb\u8fd9\u4e9b\u601d\u60f3\u7684\u67b7\u9501\uff0c\u5bf9\u7f16\u7a0b\u5f62\u6210\u81ea\u5df1\u7684\u8ba4\u77e5\u3002 \u53d8\u901a\u8005\u548c\u4e0d\u53d8\u901a\u8005\u7684\u533a\u522b\u5728\u4e8e\uff1a\u662f\u5426\u613f\u610f\u6df1\u5165\u5e95\u5c42\uff08\u6c47\u7f16\u3001\u7ec4\u539f\u7b49\u7b49\uff09\uff0c\u662f\u5426\u613f\u610f\u6452\u5f03\u8bed\u8a00\u6267\u5ff5\u3002 {% endnoteblock %} \u5c01\u88c5 \u5c01\u88c5\u4e5f\u53eb**\u4fe1\u606f\u9690\u85cf\u3001\u6570\u636e\u8bbf\u95ee\u4fdd\u62a4**\u3002\u901a\u8fc7\u66b4\u9732\u6709\u9650\u7684\u8bbf\u95ee\u63a5\u53e3\uff0c\u5916\u90e8\u4ec5\u80fd\u901a\u8fc7\u7c7b\u63d0\u4f9b\u7684\u65b9\u5f0f\u6765\u8bbf\u95ee\u5185\u90e8\u4fe1\u606f\u6216\u6570\u636e\u3002 \u9700\u8981\u7f16\u7a0b\u8bed\u8a00\u63d0\u4f9b\u6743\u9650\u8bbf\u95ee\u63a7\u5236\u8bed\u6cd5\u6765\u652f\u6301\u3002\u5982\uff1a Java \u4e2d\u7684 public\u3001protected\u3001private Python \u4e2d\u6807\u8bc6\u7b26\u7684\u53cc\u4e0b\u5212\u7ebf\u524d\u7f00 __xxx \u6216 __slots__ \u767d\u540d\u5355 Golang \u4e2d\u6807\u8bc6\u7b26\u9996\u5b57\u6bcd\u5927\u5c0f\u5199\u3002 \u5c01\u88c5\u5b58\u5728\u7684\u610f\u4e49\uff0c \u4e00\u65b9\u9762\u662f\u4fdd\u62a4\u6570\u636e\u4e0d\u88ab\u968f\u610f\u4fee\u6539\uff0c\u63d0\u9ad8\u4ee3\u7801\u53ef\u7ef4\u62a4\u6027\uff1b \u4e00\u65b9\u9762\u662f\u4ec5\u66b4\u9732\u6709\u9650\u7684\u5fc5\u8981\u63a5\u53e3\uff0c\u63d0\u9ad8\u6613\u7528\u6027\u3002 \u62bd\u8c61 \u5c01\u88c5\u8bb2\u7684\u662f\u5982\u4f55\u9690\u85cf\u4fe1\u606f\u3001\u4fdd\u62a4\u6570\u636e\uff0c\u62bd\u8c61\u8bb2\u7684\u5c31\u662f\u5982\u4f55\u9690\u85cf\u7684\u5177\u4f53\u5b9e\u73b0\u3002 \u62bd\u8c61\u53ef\u4ee5\u901a\u8fc7\u63a5\u53e3\u7c7b\u6216\u8005\u62bd\u8c61\u7c7b\u6765\u5b9e\u73b0\uff0c\u4f46\u4e0d\u9700\u8981\u7279\u6b8a\u7684\u8bed\u6cd5\u673a\u5236\u6765\u652f\u6301\u3002 \u62bd\u8c61\u5b58\u5728\u7684\u610f\u4e49\uff0c \u4e00\u65b9\u662f\u662f\u63d0\u9ad8\u4ee3\u7801\u7684\u53ef\u6269\u5c55\u6027\u3001\u7ef4\u62a4\u6027\uff0c\u4fee\u6539\u5b9e\u73b0\u4e0d\u9700\u8981\u4fee\u6539\u5b9a\u4e49\uff0c\u51cf\u5c11\u4ee3\u7801\u6539\u52a8\u8303\u56f4\uff1b \u53e6\u4e00\u65b9\u9762\uff0c\u62bd\u8c61\u4e5f\u662f\u5904\u7406\u590d\u6742\u7cfb\u7edf\u7684\u6709\u6548\u624b\u6bb5\uff0c\u80fd\u6709\u6548\u8fc7\u6ee4\u6389\u4e0d\u5fc5\u5173\u6ce8\u7684\u4fe1\u606f\u3002 \u7ee7\u627f \u7ee7\u627f\u662f\u7528\u6765\u8868\u793a\u7c7b\u4e4b\u95f4\u7684 is-a \u548c has-a \u7684\u5173\u7cfb\uff0c\u5206\u4e3a\u4e24\u79cd\u6a21\u5f0f\uff1a\u5355\u7ee7\u627f\u548c\u591a\u7ee7\u627f\u3002 \u5355\u7ee7\u627f\u8868\u793a\u4e00\u4e2a\u5b50\u7c7b\u53ea\u80fd\u7ee7\u627f\u4e00\u4e2a\u7236\u7c7b\uff0c\u591a\u7ee7\u627f\u8868\u793a\u4e00\u4e2a\u5b50\u7c7b\u53ef\u4ee5\u7ee7\u627f\u591a\u4e2a\u7236\u7c7b\u3002 \u9700\u8981\u7f16\u7a0b\u8bed\u8a00\u63d0\u4f9b\u7279\u6b8a\u8bed\u6cd5\u673a\u5236\u6765\u652f\u6301\u3002\u5982\uff1a Java \u4e2d\u7684 extends \u5173\u952e\u5b57 Python \u4e2d\u7c7b\u540d\u540e\u7684\u62ec\u53f7 Go \u4e2d\u7684\u7ed3\u6784\u4f53\u5d4c\u5957 \u7ee7\u627f\u5b58\u5728\u7684\u610f\u4e49\uff0c\u662f\u7528\u6765\u89e3\u51b3\u4ee3\u7801\u590d\u7528\u7684\u95ee\u9898\u3002 \u591a\u6001 \u591a\u6001\u662f\u6307\u5b50\u7c7b\u53ef\u4ee5\u66ff\u4ee3\u7236\u7c7b\u3002\u5728\u5b9e\u9645\u4ee3\u7801\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u8c03\u7528\u5b50\u7c7b\u7684\u65b9\u6cd5\u5b9e\u73b0\u3002 \u9700\u8981\u7f16\u7a0b\u8bed\u8a00\u63d0\u4f9b\u7279\u6b8a\u8bed\u6cd5\u673a\u5236\u6765\u652f\u6301\u3002\u5982\uff1a\u7ee7\u627f\u3001\u63a5\u53e3\u3001duck-typing\u3002 \u591a\u6001\u53ef\u4ee5\u63d0\u9ad8\u4ee3\u7801\u7684\u6269\u5c55\u6027\u548c\u590d\u7528\u6027\uff0c\u662f\u5f88\u591a\u8bbe\u8ba1\u6a21\u5f0f\u3001\u8bbe\u8ba1\u539f\u5219\u3001\u7f16\u7a0b\u6280\u5de7\u7684\u4ee3\u7801\u5b9e\u73b0\u7684\u57fa\u7840\u3002 \u5c01\u88c5 \u00b6 \u5728 Java \u7b49\u9762\u5411\u5bf9\u8c61\u4e2d\uff0c\u4f1a\u5c06\u4e00\u7c7b\u4e8b\u7269\u62bd\u8c61\u51fa \u5c5e\u6027 \u548c \u884c\u4e3a \uff0c\u5e76\u901a\u8fc7\u8bed\u8a00\u5c42\u9762\u9650\u5b9a \u8bbf\u95ee\u6027 \u3002 \u5c5e\u6027 \u4f7f\u7528\u57fa\u672c\u6570\u636e\u7c7b\u578b\u6216\u590d\u5408\u7c7b\u578b\u63cf\u8ff0\uff1b \u884c\u4e3a \u901a\u8fc7\u51fd\u6570\u63cf\u8ff0\uff0c\u5e76\u79f0\u4e4b\u4e3a \u65b9\u6cd5 \uff1b \u5c5e\u6027+\u65b9\u6cd5 \u7ec4\u6210\u4e00\u4e2a\u7c7b class \uff1b \u8bbf\u95ee\u6027\u5404\u4e2a\u8bed\u8a00\u5b9e\u73b0\u4e0d\u540c\u3002 \u5728 Go \u4e2d\u6ca1\u6709\u7c7b\u7684\u6982\u5ff5\uff0c \u800c\u662f\u5c06\u4e8b\u7269\u7684 \u5c5e\u6027 \u4f7f\u7528\u57fa\u672c\u6570\u636e\u7c7b\u578b\u6216\u590d\u5408\u6570\u636e\u7c7b\u578b \u5c01\u88c5\u5728\u7ed3\u6784\u4f53\u4e2d \uff0c \u800c \u884c\u4e3a \u662f\u901a\u8fc7 \u7ed9\u51fd\u6570\u9650\u5b9a\u8c03\u7528\u8005\u7684\u65b9\u5f0f \u5b9e\u73b0\u3002 \u8bbf\u95ee\u6027 \u662f\u901a\u8fc7\u9996\u5b57\u6bcd\u5927\u5199\u4e3a public \uff0c\u9996\u5b57\u6bcd\u5c0f\u5199\u4e3a private \u3002 \u8fd9\u79cd\u9650\u5b9a\u4e86\u8c03\u7528\u8005\u7684\u51fd\u6570\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a**\u65b9\u6cd5**\u3002 \u800c\u62e5\u6709\u65b9\u6cd5\u7684\u7ed3\u6784\u4f53\uff0c\u6211\u5c06\u5176\u79f0\u4e4b\u4e3a**\u7c7b**\u3002 {% note info, Golang \u4e2d\uff0c \u7c7b = \u7ed3\u6784\u4f53 + \u9650\u5b9a\u8c03\u7528\u8005\u7684\u51fd\u6570 + \u8bbf\u95ee\u6027 %} // class A type A struct { fieldA } func ( a A ) aMethod () { ... } \u6784\u9020\u51fd\u6570 \u00b6 Go \u4e0d\u652f\u6301\u50cf Java \u90a3\u6837\u7684\u6784\u9020\u51fd\u6570\uff0c\u4f46\u662f\u53ef\u4ee5\u901a\u8fc7 \u6807\u8bc6\u7b26\u9996\u5b57\u6bcd\u5927\u5c0f\u5199 + \u5de5\u5382\u51fd\u6570 \u5b9e\u73b0\u6784\u9020\u51fd\u6570\u3002 \u4e00\u822c\u5206\u4e3a4\u6b65\uff1a \u5c06\u7ed3\u6784\u4f53\u3001\u5b57\u6bb5\u7684\u9996\u5b57\u6bcd\u5c0f\u5199 \u7ed3\u6784\u4f53\u6240\u5728\u7684\u5305\u63d0\u4f9b\u4e00\u4e2a\u5de5\u5382\u6a21\u5f0f\u7684\u51fd\u6570\uff0c\u9996\u5b57\u6bcd\u5927\u5199\uff0c\u6a21\u62df\u4e00\u4e2a\u6784\u9020\u51fd\u6570\u3002\u6309\u7167\u89c4\u8303\uff0c\u6784\u9020\u51fd\u6570\u7684\u540d\u5b57\u4ee5 new \u6216 New \u5f00\u5934\u3002 \u6ce8\u610f\u8fd4\u56de\u503c\u5fc5\u987b\u662f\u7ed3\u6784\u4f53\u6307\u9488 \uff0c\u56e0\u4e3a\u7ed3\u6784\u4f53\u662f\u503c\u7c7b\u578b\u3002 \u63d0\u4f9b\u9996\u5b57\u6bcd\u5927\u5199\u7684 Get \u65b9\u6cd5\uff0c\u7528\u4e8e\u83b7\u53d6\u5c5e\u6027\u7684\u503c\uff0c\u5efa\u8bae\u547d\u540d\u89c4\u5219\uff1a\u5c5e\u6027\u540d\u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5982\u5c5e\u6027 sex \u7684 Get \u65b9\u6cd5\u4e3a Sex() \u3001\u5c5e\u6027 name \u7684 Get \u65b9\u6cd5\u4e3a Name() \u3002 \u63d0\u4f9b\u9996\u5b57\u6bcd\u5927\u5199\u7684 Set \u65b9\u6cd5\uff0c\u7528\u4e8e\u8bbe\u7f6e\u5c5e\u6027\u7684\u503c\uff0c\u5efa\u8bae\u547d\u540d\u89c4\u5219\uff1aSet+\u5c5e\u6027\u540d\u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5982\u5c5e\u6027 sex \u7684 Set \u65b9\u6cd5\u4e3a SetSex() \u3001\u5c5e\u6027 name \u7684 Set \u65b9\u6cd5\u4e3a SetName() \u3002 eg\uff1a type person struct { name string age int } // \u5199\u4e00\u4e2a\u5de5\u5382\u51fd\u6570\uff0c\u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u65b9\u5c31\u53ef\u4ee5\u8bbf\u95ee\uff0c\u76f8\u5f53\u4e8e\u6784\u9020\u51fd\u6570 func NewPerson ( name string , age int ) * person { if age <= 0 || name == \"\" { return nil } return & person { name , age } } // Get \u65b9\u6cd5 func ( p person ) Name () string { return p . name } func ( p person ) Age () int { return p . age } // Set \u65b9\u6cd5 func ( p person ) SetName ( name string ) { if name == \"\" { return } p . name = name } func ( p person ) SetAge ( age int ) { if age <= 0 { return } p . age = age } func main () { // \u7136\u540e\u8fd9\u6837\u521b\u5efa\u5bf9\u8c61\uff1a p := NewPerson ( \"Boii\" , 18 ) fmt . Println ( p ) // &{Boii 18} p . Name () // Boii p . SetAge ( 20 ) // p.age == 20 } toString \u00b6 \u5728\u9762\u5411\u5bf9\u8c61\u4e2d\uff0c\u6bcf\u4e2a\u7c7b\u9ed8\u8ba4\u7ee7\u627f\u81ea Object\uff0c\u6253\u5370\u4e00\u4e2a\u5bf9\u8c61\u7684\u65f6\u5019\uff0c\u4f1a\u8c03\u7528\u8fd9\u4e2a\u5bf9\u8c61\u7684 toString() \u65b9\u6cd5\uff0c\u5982\u679c\u8fd9\u4e2a\u5bf9\u8c61\u6ca1\u6709\u91cd\u5199 toString() \uff0c\u4f1a\u627e\u5176\u7236\u7c7b\uff0c\u4e00\u5c42\u5c42\u5f80\u4e0a\uff0c\u627e\u5230\u4e86\u6267\u884c toString() \uff0c\u627e\u4e0d\u5230\u5c31\u6267\u884c Object \u7684 toString() \u3002 \u60f3\u8981\u6253\u5370\u5bf9\u8c61\u4fe1\u606f\uff0c \u5728 Java \u4e2d\u662f .toString() \uff0c \u5728 Python \u4e2d\u662f .__str__() {% note info, \u5728 Go \u4e2d\u662f .String() %} \u5728 Go \u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7 %v \u6253\u5370\u7ed3\u6784\u4f53\u4fe1\u606f\u3002 fmt.Printf(\"%v \\n\", t) \u8fd9\u53e5\u8bdd\u7b49\u4ef7\u4e8e fmt.Printf(\"%v \\n\", t.String()) \uff0c\u4e5f\u7b49\u4ef7\u4e8e fmt.Println(t) \u3002 \u90a3\u4e48\u60f3\u8981\u6253\u5370\u7ed3\u6784\u4f53\u4fe1\u606f\u65f6\u6309\u7167\u81ea\u5df1\u60f3\u6cd5\u6765\uff0c\u5c31\u53ef\u4ee5\u4e3a\u7ed3\u6784\u4f53\u5199\u4e00\u4e2a String() \u65b9\u6cd5\u3002 type car struct { band string model string } func ( c car ) String () string { return c . band + \"-\" + \"c.model\" } func main () { c1 := & car { \"Benz\" , \"S600\" } fmt . Printf ( \"%v \\n\" , c1 ) // Benz-S600 fmt . Printf ( \"%v \\n\" , c1 . String ()) // Benz-S600 fmt . Println ( c1 ) // Benz-S600 } \u7ee7\u627f \u00b6 \u9762\u5411\u5bf9\u8c61\u4e2d\u7684\u7ee7\u627f\u6027\uff1a \u5982\u679c\u4e24\u4e2a\u7c7b class \u5b58\u5728\u7ee7\u627f\u5173\u7cfb\uff0c\u5176\u4e2d\u4e00\u4e2a\u662f\u5b50\u7c7b\uff0c\u53e6\u4e00\u4e2a\u4f5c\u4e3a\u7236\u7c7b\uff0c\u90a3\u4e48\uff1a \u5b50\u7c7b\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u7236\u7c7b\u7684\u5c5e\u6027\u548c\u65b9\u6cd5 \u5b50\u7c7b\u53ef\u4ee5\u65b0\u589e\u81ea\u5df1\u7684\u5c5e\u6027\u548c\u65b9\u6cd5 \u5b50\u7c7b\u53ef\u4ee5\u91cd\u5199\u7236\u7c7b\u7684\u65b9\u6cd5\uff08override\uff0c\u5c31\u662f\u5c06\u7236\u7c7b\u5df2\u6709\u7684\u65b9\u6cd5\uff0c\u91cd\u65b0\u5b9e\u73b0\uff09 Golang \u8bed\u6cd5\u4e0a\u4e0d\u652f\u6301\u7ee7\u627f\uff0c\u4f46\u662f\u901a\u8fc7\u7ed3\u6784\u4f53\u5d4c\u5957\u5374\u53ef\u4ee5\u5b9e\u73b0\u7ee7\u627f\uff0c\u800c\u4e14\u53ef\u4ee5\u591a\u7ee7\u627f\uff0c \u4e14\u901a\u8fc7 \u533f\u540d\u5b57\u6bb5 \u548c \u975e\u533f\u540d\u5b57\u6bb5 \u8fd8\u53ef\u4ee5\u8fdb\u4e00\u6b65\u533a\u5206 is-a \u7ee7\u627f\u5173\u7cfb \u548c has-a \u805a\u5408\u5173\u7cfb Golang \u7684\u7ed3\u6784\u4f53\u5d4c\u5957\uff1a \u6a21\u62df\u7ee7\u627f\u6027\uff1ais - a \u00b6 type Base struct { fieldB } type Son struct { fieldS Base // \u533f\u540d\u5b57\u6bb5\uff0c\u6a21\u62df\u7684\u662f \u7ee7\u627f\u5173\u7cfb } func ( b Base ) baseMethod () { // A\u7684\u65b9\u6cd5 fmt . Println ( \"base method\" ) } func ( s Son ) sonMethod () { // B\u7684\u65b9\u6cd5 fmt . Println ( \"son method\" ) } func main () { base := Base {} son := Son {} base . fieldB // \u6b63\u786e\u4f7f\u7528 son . fieldS // \u6b63\u786e\u4f7f\u7528 son . fieldB // \u6b63\u786e\u4f7f\u7528 son . Base . fieldB // \u6b63\u786e\u4f7f\u7528 base . fieldS // !\u62a5\u9519 base . Son . fieldS // !\u62a5\u9519 base . baseMethod () // \u6b63\u786e\u4f7f\u7528 son . sonMethod () // \u6b63\u786e\u4f7f\u7528 son . baseMethod () // \u6b63\u786e\u4f7f\u7528 son . Base . baseMethod () // \u6b63\u786e\u4f7f\u7528 base . sonMethod () // !\u62a5\u9519 base . Son . sonMethod () // !\u62a5\u9519 } \u6a21\u62df\u805a\u5408\u5173\u7cfb\uff1ahas - a \u00b6 type C struct { fieldC } type D struct { fieldD c C // \u975e\u533f\u540d\u5b57\u6bb5\uff0c\u6a21\u62df\u7684\u662f \u805a\u5408\u5173\u7cfb } func ( c C ) cMethod () { fmt . Println ( \"C method\" ) } d := D { ... } d . fieldC // !\u62a5\u9519 d . C . fieldC // !\u62a5\u9519 d . c . fieldC // \u6b63\u786e\u4f7f\u7528 d . c . cMethod () // \u6b63\u786e\u4f7f\u7528 \u5c0f\u7ed3 \u00b6 \u5728\u7ed3\u6784\u4f53\u4e2d\u5d4c\u5957\u4e86\u5176\u4ed6\u7ed3\u6784\u4f53\uff0c\u4f1a\u51fa\u73b0\u4e24\u79cd\u60c5\u51b5\uff0c\u4e00\u79cd\u662f is - a \u7684\u5173\u7cfb\uff0c\u4e00\u79cd\u7684 has - a \u7684\u5173\u7cfb\u3002 is - a \u662f\u4e00\u79cd\u7ee7\u627f\u5173\u7cfb\uff0c\u5b50\u7c7b\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u7236\u7c7b\uff08\u88ab\u5d4c\u5957\u7c7b\uff09\u7684\u53d8\u91cf\uff0c\u5982\u4e0a\u9762\u4f8b\u5b50\u4e2d\u7684 b.fieldA has - a \u662f\u4e00\u79cd\u805a\u5408\u5173\u7cfb\uff0c\u5f53\u524d\u7c7b\u4f7f\u7528\u805a\u5408\u7c7b\uff08\u88ab\u5d4c\u5957\u7c7b\uff09\u7684\u53d8\u91cf\u5fc5\u987b\u901a\u8fc7\u805a\u5408\u7c7b\u7684\u540d\u5b57\uff0c\u5982\u4e0a\u9762\u4f8b\u5b50\u4e2d\u7684 d.c.fieldC \uff0c\u5176\u4ed6\u4e24\u79cd\u65b9\u5f0f\u4f1a\u62a5\u9519\u3002 \u591a\u6001 \u00b6 Golang \u4e2d\u7684\u591a\u6001\u662f\u901a\u8fc7 \u63a5\u53e3 \u548c Duck-typing \u5b9e\u73b0\u7684\u3002 Duck-typing \u4e5f\u662f\u4e00\u79cd\u7f16\u7a0b\u601d\u60f3\uff1a\u53ea\u8981\u4e00\u4e2a\u4e1c\u897f\u770b\u8d77\u6765\u50cf\u9e2d\u5b50\uff0c\u8d70\u8def\u50cf\u9e2d\u5b50\uff0c\u5403\u8d77\u6765\u50cf\u9e2d\u5b50...\uff0c\u90a3\u5b83\u5c31\u662f\u9e2d\u5b50\u3002 \u53cd\u6620\u5728\u7f16\u7a0b\u8bed\u8a00\u4e2d\u5c31\u662f\uff0c\u53ea\u8981\u4e00\u4e2a\u7ed3\u6784\u4f53\u6216\u8005\u4e00\u4e2a\u7c7b\uff0c\u5177\u6709\u67d0\u4e2a\u65b9\u6cd5\u7684\u5177\u4f53\u5b9e\u73b0\uff0c\u90a3\u5b83\u5c31\u53ef\u4ee5\u88ab\u6211\u8fd9\u4e2a\u51fd\u6570/\u65b9\u6cd5\u63a5\u53d7\u3002 Golang \u4e2d\u7684\u63a5\u53e3\u662f\u975e\u4fb5\u5165\u5f0f\u7684\uff0c\u4e0d\u50cf Java \u90a3\u6837\u9700\u8981\u663e\u5f0f\u7684\u5728\u7c7b\u58f0\u660e\u4e2d\u52a0\u4e0a implement xxer \uff0c Golang \u4e0d\u9700\u8981\u7ed3\u6784\u4f53\u663e\u793a\u7684\u58f0\u660e\u5b9e\u73b0\u67d0\u4e2a\u63a5\u53e3\uff0c\u53ea\u8981\u4f60\u8fd9\u4e2a\u7ed3\u6784\u4f53\u6709\u6211\u8fd9\u4e2a\u63a5\u53e3\u6240\u6709\u65b9\u6cd5\u7684\u5177\u4f53\u5b9e\u73b0\uff0c\u90a3\u8fd9\u4e2a\u7ed3\u6784\u4f53\u5c31\u5b9e\u73b0\u662f\u6211\u8fd9\u4e2a\u63a5\u53e3\uff0c\u5c31\u662f\u6211\u7684\u5b9e\u73b0\u7c7b\uff0c\u5c31\u662f\u6211\u8fd9\u79cd\u7c7b\u578b\u3002 type Aer interface { show () string } type X struct {} type Y struct {} type Z struct {} func ( x X ) show () string { return \"I'm X\" } func ( x X ) add ( a , b int ) int { return a + b } func ( x Y ) show () string { return \"I'm Y\" } func PrintStruct ( a Aer ){ fmt . Println ( a . show ()) } func main () { x := X {} y := Y {} z := Z {} PrintStruct ( x ) // I'm X PrintStruct ( y ) // I'm Y PrintStruct ( z ) // !\u62a5\u9519, \u56e0\u4e3a Z \u6ca1\u6709\u5b9e\u73b0 Aer \u7684\u65b9\u6cd5 show()\uff0c\u4e0d\u662f Aer \u7c7b\u578b } \u91cd\u5199 \u00b6 \u91cd\u5199 \uff0c\u8bf4\u5927\u767d\u8bdd\u5c31\u662f\uff1a\u7239\u6709\u7684\uff0c\u513f\u5b50\u4e0d\u6ee1\u610f\uff0c\u513f\u5b50\u81ea\u5df1\u6765\u3002 Golang \u4e2d\u901a\u8fc7\u5d4c\u5957\u7ed3\u6784\u4f53\u6a21\u62df\u7ee7\u627f\uff0c\u5982\u679c\u5b50\u7ed3\u6784\u4f53\u6709\u548c\u7236\u7ed3\u6784\u4f53 \u540c\u540d\u540c\u53c2\u7684\u65b9\u6cd5 \uff0c\u5219\u79f0\u4f5c\u91cd\u5199\u3002 Golang \u4e2d\u4e0d\u652f\u6301\u540c\u540d\u4e0d\u540c\u53c2\u3002 type base struct { // \u7236\u7c7b name string } type son struct { // \u5b50\u7c7b base // \u7ee7\u627f\u4e86\u7236\u7c7b age int } func ( b base ) say () { // \u7236\u7c7b\u65b9\u6cd5 fmt . Println ( \"Base said.\" ) } func ( b base ) run () { // \u7236\u7c7b\u65b9\u6cd5 fmt . Println ( \"Base ran.\" ) } func ( s son ) say () { // \u5b50\u7c7b\u65b9\u6cd5\uff0c\u91cd\u5199\u4e86\u7236\u7c7b\u65b9\u6cd5 fmt . Println ( \"Son said.\" ) } func main () { b := base { \"Eva\" } // \u5b9e\u4f8b\u5316\u7236\u7c7b s := son { base { \"Boii\" }, 64 } // \u5b9e\u4f8b\u5316\u5b50\u7c7b b . say () // Base said. s . say () // Son said. b . run () // Base ran. s . run () // Base ran. } \u4e3e\u4e2a\u6817\u5b50 \u00b6 Java\u5b9e\u73b0 \u00b6 \u73b0\u5728\u6211\u4eec\u7528 Java \u6765\u5b9a\u4e49\u4e00\u4e2a\u7c7b public class Dog { // \u5c5e\u6027 private String name ; private int age ; // \u6784\u9020\u51fd\u6570 public Dog ( String name , int age ){ this . name = name ; this . age = age ; } // getter public String getName () { return this . name ; } public int getAge () { return this . age ; } // setter public void setName ( String newName ) { this . name = newName ; } public void setAge ( int newAge ){ this . age = newAge ; } // toString @Override public String toString () { return this . name + \"-\" + this . age ; } } \u4ee5\u4e0a\u5c31\u662f\u7528 Java \u5b9a\u4e49\u7684\u4e00\u4e2a\u6700\u7b80\u5355\u7684\u7c7b\u4e86\u3002\u7c7b\u4e2d\u6709 \u5c5e\u6027 \u3001 \u6784\u9020\u51fd\u6570 \u3001 getter \u548c setter \u548c toString() \u3002 \u4f7f\u7528\u7684\u65f6\u5019\u662f\u8fd9\u6837\u5b50\u7684\uff1a Dog doge = new Dog ( \"Doge\" , 2 ); System . out . println ( doge . getName ()); // Doge System . out . println ( doge . getAge ()); // 2 doge . setAge ( 3 ); System . out . println ( doge . getAge ()); // 3 System . out . println ( doge ) // Doge-3 Go \u5b9e\u73b0 \u00b6 \u4e0b\u9762\u6211\u4eec\u6765\u770b\u770b\u7528 Go \u600e\u4e48\u505a\uff1a //$GOPATH/src/dog/myDog.go package dog import ( \"fmt\" \"strconv\" ) // \u5b9a\u4e49 Dog \u7ed3\u6784\u4f53\uff0c\u5305\u542b\u4e86\u5c5e\u6027 type dog struct { name string age int8 } // \u6784\u9020\u51fd\u6570 func NewDog ( name string , age int8 ) * dog { return & dog { name , age } } // getter func ( d * dog ) Name () string { return d . name } func ( d * dog ) Age () int8 { return d . age } // setter func ( d * dog ) SetName ( newName string ) { d . name = newName } func ( d * dog ) SetAge ( newAge int8 ) { d . age = newAge } // toString func ( d * dog ) String () string { return d . name + \"-\" + strconv . Itoa ( int ( d . age )) } \u540c\u6837\u5b9e\u73b0\u4e86 \u5c5e\u6027 \u3001 \u6784\u9020\u51fd\u6570 \u3001 getter \u548c setter \u3002 \u4f7f\u7528\u7684\u65f6\u5019\u662f\u8fd9\u6837\u5b50\u7684\uff1a //$GOPATH/src/Hello/main.go package main import ( \"dog\" \"fmt\" ) func main () { doge := NewDog ( \"Doge\" , 2 ) fmt . Println ( doge . Name ()) // Doge fmt . Println ( doge . GetAge ()) // 2 doge . SetAge ( 3 ) fmt . Println ( doge . Age ()) // 3 fmt . Printf ( \"%v \\n\" , doge ) // Doge-3 fmt . Println ( doge ) // Doge-3 } \u62bd\u8c61\u7c7b \u00b6 \u62bd\u8c61\u7c7b\u5176\u5b9e\u548c\u63a5\u53e3\u7684\u6027\u8d28\u662f\u4e00\u6837\u7684\uff0c\u4f46\u662f\u53c8\u591a\u4e86\u4e00\u4e9b\u5177\u4f53\u7684\u5b9e\u73b0\u3002 \u5f53\u4e00\u4e2a\u63a5\u53e3\u4e2d\u7684\u67d0\u4e9b\u65b9\u6cd5\uff0c\u6240\u6709\u5b50\u7c7b\u7684\u5b9e\u73b0\u90fd\u4e00\u6837\u65f6\uff0c\u53ef\u4ee5\u6362\u6210\u62bd\u8c61\u7c7b\u6765\u5b9e\u73b0\uff0c\u5c06\u8fd9\u4e9b\u5171\u540c\u7684\u5b9e\u73b0\u5199\u5728\u62bd\u8c61\u7c7b\u4e2d\uff0c\u5269\u4e0b\u4e0d\u540c\u7684\u5b9e\u73b0\u7eed\u96c6\u4fdd\u6301\u62bd\u8c61\u3002 \u4ee5 Java \u4e3a\u6817 \u00b6 eg\uff1a // \u5b9a\u4e49\u4e00\u4e2a\u62bd\u8c61\u7c7b public abstract class Animal { // \u5b9e\u73b0\u5171\u540c\u65b9\u6cd5 public void run () { System . out . println ( this . name () + \" is running!\" ); } // \u5b9a\u4e49\u62bd\u8c61\u65b9\u6cd5 public abstract String kind (); } // \u7ee7\u627f\u62bd\u8c61\u7c7b public class cat extends Animal { // \u5b9e\u73b0\u62bd\u8c61\u65b9\u6cd5 public String kind () { return \"cat\" ; } } // \u7ee7\u627f\u62bd\u8c61\u7c7b public class dog extends Animal () { // \u5b9e\u73b0\u62bd\u8c61\u65b9\u6cd5 public String kind () { return \"dog\" ; } } \u4e0a\u9762\u62bd\u8c61\u4e86\u4e00\u4e2a\u52a8\u7269\u7c7b Animal \uff0c\u6211\u4eec\u5b9e\u73b0\u4e86\u5171\u540c\u7684\u65b9\u6cd5 run() \uff0c\u5e76\u5b9a\u4e49\u4e86\u9700\u8981\u5b50\u7c7b\u81ea\u5df1\u5b9e\u73b0\u7684\u62bd\u8c61\u65b9\u6cd5 kind() \u3002 \u63a5\u7740\u5b9a\u4e49\u4e86\u4e24\u4e2a\u5177\u4f53\u7c7b cat \u548c dog \u7ee7\u627f Animal \uff0c\u5e76\u5404\u81ea\u5177\u4f53\u5b9e\u73b0\u62bd\u8c61\u65b9\u6cd5 kind() \u3002 Go \u5b9e\u73b0\u62bd\u8c61\u7c7b \u00b6 Go \u5e76\u6ca1\u6709\u62bd\u8c61\u7c7b\u7684\u6982\u5ff5\uff0c\u4f46\u662f\u901a\u8fc7 struct \u548c interface \u53ef\u4ee5\u5b9e\u73b0\u51fa\u62bd\u8c61\u7c7b\u3002 \u601d\u8003\u4e00\u4e0b\uff1aJava \u4e2d\u62bd\u8c61\u7c7b\u548c\u63a5\u53e3\u7684\u533a\u522b\u5728\u54ea\uff1f \u5176\u5b9e\u5c31\u662f\u62bd\u8c61\u7c7b\u4e2d\u9700\u8981\u5177\u4f53\u5b9e\u73b0\u4e00\u4e9b {% span blue, \u516c\u5171\u65b9\u6cd5 %}\uff0c\u5269\u4e0b\u7684\u90a3\u4e9b\u62bd\u8c61\u65b9\u6cd5\uff0c\u7528 Java \u4e2d\u7684\u63a5\u53e3\u5b9e\u73b0\u4e5f\u662f\u4e00\u6837\u7684\u3002 \u53ea\u4e0d\u8fc7 Java \u6709\u62bd\u8c61\u7c7b\u7684\u6982\u5ff5\uff0c\u53ef\u4ee5\u4f18\u96c5\u7684\u5b9e\u73b0\u3002 \u90a3\u4e48\u6211\u4eec\u4e5f\u53ef\u4ee5\u5728 Golang \u4e2d\uff0c\u5b9a\u4e49\u4e00\u4e2a\u63a5\u53e3IAer\uff0c\u63a5\u53e3\u4e2d\u5b9a\u4e49\u4e00\u4e9b\u62bd\u8c61\u65b9\u6cd5\uff1b \u7136\u540e\u5b9a\u4e49\u4e00\u4e2a Aer \u4f5c\u4e3a\u516c\u5171\u7684\u7ed3\u6784\u4f53\uff08\u7c7b\uff09\uff0c\u7531\u5b83\u6765\u5b9e\u73b0\u516c\u5171\u7684\u90e8\u5206 \u7136\u540e\u5176\u4ed6\u7ed3\u6784\u4f53\u5d4c\u5957\u8fd9\u4e2a\u516c\u5171\u7ed3\u6784\u4f53\uff0c\u5e76\u5b9e\u73b0\u63a5\u53e3 IAer \u7684\u65b9\u6cd5\uff0c\u8fd9\u6837\u5c31\u80fd\u8fbe\u5230\u4e0e\u62bd\u8c61\u7c7b\u76f8\u540c\u7684\u6548\u679c\u3002 // -- \u62bd\u8c61\u7c7b -- start type IAbsClass interface { absMethod1 () absMethod2 () } func AbsClass struct {} // \u516c\u5171\u7ed3\u6784\u4f53 func ( a AbsClass ) commonMethod1 () { // \u516c\u5171\u7ed3\u6784\u4f53\u5b9e\u73b0\u516c\u5171\u65b9\u6cd51 fmt . Println ( \"AbsClass commonMethod1\" ) } func ( a AbsClass ) commonMethod2 () { // \u516c\u5171\u7ed3\u6784\u4f53\u5b9e\u73b0\u516c\u5171\u65b9\u6cd52 fmt . Println ( \"AbsClass commonMethod2\" ) } // -- \u62bd\u8c61\u7c7b -- end // -- \u5b50\u7c7b\u7ee7\u627f\u62bd\u8c61\u7c7b type subClass1 struct { AbsClass // \u7ee7\u627f\u62bd\u8c61\u7c7b } // \u5b50\u7c7b\u5b9e\u73b0\u62bd\u8c61\u65b9\u6cd5 func ( s subClass1 ) absMethod1 () { // \u5b50\u7c7b\u5b9e\u73b0\u62bd\u8c61\u65b9\u6cd51 fmt . Println ( \"subClass1 absMethod1\" ) } func ( s subClass1 ) absMethod2 () { // \u5b50\u7c7b\u5b9e\u73b0\u62bd\u8c61\u65b9\u6cd52 fmt . Println ( \"subClass1 absMethod2\" ) } // \u6b64\u65f6\u5b50\u7c7b subClass1 \u62e5\u6709 4 \u79cd\u65b9\u6cd5\uff1a // absClass.commonMethod1() // absClass.commonMethod2() // subClass1.absMethod1() // subClass1.absMethod2() // -- \u5b50\u7c7b\u7ee7\u627f\u62bd\u8c61\u7c7b type subClass2 struct { AbsClass // \u7ee7\u627f\u62bd\u8c61\u7c7b } // \u5b50\u7c7b\u5b9e\u73b0\u62bd\u8c61\u65b9\u6cd5 func ( s subClass2 ) absMethod1 () { // \u5b50\u7c7b\u5b9e\u73b0\u62bd\u8c61\u65b9\u6cd51 fmt . Println ( \"subClass2 absMethod1\" ) } func ( s subClass2 ) absMethod2 () { // \u5b50\u7c7b\u5b9e\u73b0\u62bd\u8c61\u65b9\u6cd52 fmt . Println ( \"subClass2 absMethod2\" ) } // \u5b50\u7c7b\u91cd\u5199\u516c\u5171\u65b9\u6cd52 func ( s subClass2 ) commonMethod2 () { fmt . Println ( \"subClass2 commonMethod1\" ) } // \u6b64\u65f6\u5b50\u7c7b subClass2 \u62e5\u6709 4 \u79cd\u65b9\u6cd5\uff1a // absClass.commonMethod1() // subClass2.commonMethod2() // subClass2.absMethod1() // subClass2.absMethod2() \u63a5\u53e3\u5b9a\u4e49**\u62bd\u8c61\u65b9\u6cd5**\uff1b \u516c\u5171\u7ed3\u6784\u4f53\u5b9e\u73b0**\u516c\u5171\u65b9\u6cd5**\uff1b \u5176\u4ed6\u8981\u7ee7\u627f\u62bd\u8c61\u7c7b\u7684\u5b50\u7c7b\u53ea\u8981{% span yellow, \u533f\u540d\u5d4c\u5957 %}\u516c\u5171\u7ed3\u6784\u4f53\u5373\u53ef\u3002 \u8c03\u7528\uff1a func main () { c := & cat {} c . run ( c ) d := & dog {} d . run ( d ) fmt . Println ( \"kind(): \" , d . kind ()) s1 := subClass1 {} s1 . commonMethod1 () // \u6253\u5370\uff1aAbsClass commonMethod1 s1 . commonMethod2 () // \u6253\u5370\uff1aAbsClass commonMethod2 s1 . absMethod1 () // \u6253\u5370\uff1asubClass1 absMethod1 s1 . absMethod2 () // \u6253\u5370\uff1asubClass1 absMethod2 s2 := subClass2 {} s2 . commonMethod1 () // \u6253\u5370\uff1aAbsClass commonMethod1 s2 . commonMethod2 () // \u6253\u5370\uff1asubClass2 commonMethod2 s2 . absMethod1 () // \u6253\u5370\uff1asubClass2 absMethod1 s2 . absMethod2 () // \u6253\u5370\uff1asubClass2 absMethod2 } \u5c0f\u7ed3 \u00b6 Golang \u4e2d\u5b9e\u73b0\u62bd\u8c61\u7c7b\uff1a **\u62bd\u8c61\u7684\u65b9\u6cd5**\u653e\u5728**\u63a5\u53e3**\u4e2d **\u516c\u5171\u7684\u65b9\u6cd5**\u5b9a\u4e49\u4e00\u4e2a**\u516c\u5171\u7ed3\u6784\u4f53**\u53bb\u5b9e\u73b0\uff0c\u9700\u8981\u7528\u5230 this \u7684\u5730\u65b9\u4f7f\u7528\u63a5\u53e3\u53d8\u91cf \u7ee7\u627f\u62bd\u8c61\u7c7b\u7684\u5b50\u7c7b\u8981\u505a\u4e24\u4ef6\u4e8b\uff1a \u533f\u540d\u5d4c\u5957\u516c\u5171\u7ed3\u6784\u4f53 \u5b9e\u73b0\u63a5\u53e3\u4e2d\u7684\u6240\u6709\u65b9\u6cd5 \u5728\u8c03\u7528\u516c\u5171\u65b9\u6cd5\u65f6\uff0c\u9700\u8981 this \u7684\u5730\u65b9\uff0c\u5c06\u5b50\u7c7b\u81ea\u5df1\u4f20\u8fdb\u53bb\u3002 \u6cdb\u578b \u00b6 \u636e\u8bf4\u5728 Go 1.17 \u51fa \u5355\u4f8b\u6a21\u5f0f \u00b6 \u997f\u6c49\u5f0f\uff1a type singleton struct {} var single * singleton = new ( singleton ) func GetPersonInstance () * singleton { return single } \u6d4b\u8bd5\u4e00\u4e0b func main () { s3 := GetPersonInstance () s4 := GetPersonInstance () fmt . Printf ( \"%p\\n\" , s3 ) // 0x104d5b8 fmt . Printf ( \"%p\\n\" , s4 ) // 0x104d5b8 } \u61d2\u6c49\u5f0f\uff1a type singleton struct {} var single * singleton func GetPersonInstance () * singleton { if single == nil { single = new ( singleton ) } return single } \u6d4b\u8bd5\u4e00\u4e0b func main () { s3 := GetPersonInstance () s4 := GetPersonInstance () fmt . Printf ( \"%p\\n\" , s3 ) // 0x104d5b8 fmt . Printf ( \"%p\\n\" , s4 ) // 0x104d5b8 } \u4f7f\u7528 sync.Once \u5b9e\u73b0\u7684\u61d2\u6c49\u5f0f\uff1a type singleton struct {} var ( single * singleton once sync . Once ) func GetPersonInstance () * singleton { once . Do ( func () { single = new ( singleton ) }) return single } \u6d4b\u8bd5\u4e00\u4e0b\uff1a func main () { s1 := GetPersonInstance () s2 := GetPersonInstance () fmt . Printf ( \"%p\\n\" , s1 ) // 0xdbd5b8 fmt . Printf ( \"%p\\n\" , s2 ) // 0xdbd5b8 }","title":"13.\u9762\u5411\u5bf9\u8c61"},{"location":"Go/Basic/Golang-13-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#13-","text":"\u9762\u5411\u5bf9\u8c61\u4e09\u5927\u7279\u6027\uff1a\u5c01\u88c5\u3001\u7ee7\u627f\u3001\u591a\u6001 Golang \u6ca1\u6709\u7c7b\u7684\u6982\u5ff5\uff0c\u4e5f\u6ca1\u6709\u9762\u5411\u5bf9\u8c61\u7684\u6982\u5ff5\u3002 \u51c6\u786e\u7684\u8bf4\uff0c\u9762\u5411\u5bf9\u8c61\u3001\u5c01\u88c5\u3001\u7ee7\u627f\u3001\u591a\u6001\u3001\u62bd\u8c61\u7b49\u7b49\uff0c\u8fd9\u4e9b\u90fd\u662f\u7f16\u7a0b\u601d\u60f3\uff0c\u4e0d\u540c\u7684\u8bed\u8a00\u5b9e\u73b0\u8fd9\u4e9b\u7279\u6027\u7684\u65b9\u5f0f\u4e0d\u540c\u3002 \u4f8b\u5982 Java \uff0c\u7528\u7684\u662f\u7c7b class \uff0c\u8bbf\u95ee\u4fee\u9970\u7b26 public\u3001protected\u3001default\u3001private \u7b49\u6765\u5b9e\u73b0\uff1b \u5728 Golang \u4e2d\uff0c\u7528\u7684\u662f\u7ed3\u6784\u4f53 struct \u3001\u6807\u8bc6\u7b26\u9996\u5b57\u6bcd\u5927\u5c0f\u5199 \u7b49\u6765\u5b9e\u73b0\u3002 {% noteblock quote %} \u9762\u5411\u8fc7\u7a0b\u3001\u9762\u5411\u5bf9\u8c61\u3001\u4e00\u5207\u7686\u5bf9\u8c61\u3001\u4e00\u5207\u7686\u6587\u4ef6 \u7b49\u8bf8\u5982\u6b64\u7c7b\u7684\u6982\u5ff5\uff0c \u5728\u5b66\u4e60\u4e4b\u521d\u53ef\u80fd\u4f1a\u6210\u4e3a\u521d\u5b66\u8005\u7684\u4e00\u9053\u574e\uff0c\u4e5f\u53ef\u80fd\u662f\u5e2e\u52a9\u65b0\u624b\u66f4\u5feb\u5165\u95e8\u7684\u597d\u5e2e\u624b\uff1b \u7b49\u5230\u5b66\u5230\u4e00\u5b9a\u7a0b\u5ea6\u4ee5\u540e\uff0c\u8fd9\u4e9b\u601d\u60f3\u80fd\u5e2e\u52a9\u6211\u4eec\u5feb\u901f\u89e3\u51b3\u4e00\u4e9b\u95ee\u9898\uff0c\u4e5f\u53ef\u80fd\u5f00\u59cb\u7981\u9522\u6211\u4eec\u7684\u601d\u60f3\uff1b \u5584\u4e8e\u53d8\u901a\u8005\u4f1a\u6162\u6162\u770b\u900f\u672c\u8d28\uff0c\u8131\u79bb\u8fd9\u4e9b\u601d\u60f3\u7684\u67b7\u9501\uff0c\u5bf9\u7f16\u7a0b\u5f62\u6210\u81ea\u5df1\u7684\u8ba4\u77e5\u3002 \u53d8\u901a\u8005\u548c\u4e0d\u53d8\u901a\u8005\u7684\u533a\u522b\u5728\u4e8e\uff1a\u662f\u5426\u613f\u610f\u6df1\u5165\u5e95\u5c42\uff08\u6c47\u7f16\u3001\u7ec4\u539f\u7b49\u7b49\uff09\uff0c\u662f\u5426\u613f\u610f\u6452\u5f03\u8bed\u8a00\u6267\u5ff5\u3002 {% endnoteblock %} \u5c01\u88c5 \u5c01\u88c5\u4e5f\u53eb**\u4fe1\u606f\u9690\u85cf\u3001\u6570\u636e\u8bbf\u95ee\u4fdd\u62a4**\u3002\u901a\u8fc7\u66b4\u9732\u6709\u9650\u7684\u8bbf\u95ee\u63a5\u53e3\uff0c\u5916\u90e8\u4ec5\u80fd\u901a\u8fc7\u7c7b\u63d0\u4f9b\u7684\u65b9\u5f0f\u6765\u8bbf\u95ee\u5185\u90e8\u4fe1\u606f\u6216\u6570\u636e\u3002 \u9700\u8981\u7f16\u7a0b\u8bed\u8a00\u63d0\u4f9b\u6743\u9650\u8bbf\u95ee\u63a7\u5236\u8bed\u6cd5\u6765\u652f\u6301\u3002\u5982\uff1a Java \u4e2d\u7684 public\u3001protected\u3001private Python \u4e2d\u6807\u8bc6\u7b26\u7684\u53cc\u4e0b\u5212\u7ebf\u524d\u7f00 __xxx \u6216 __slots__ \u767d\u540d\u5355 Golang \u4e2d\u6807\u8bc6\u7b26\u9996\u5b57\u6bcd\u5927\u5c0f\u5199\u3002 \u5c01\u88c5\u5b58\u5728\u7684\u610f\u4e49\uff0c \u4e00\u65b9\u9762\u662f\u4fdd\u62a4\u6570\u636e\u4e0d\u88ab\u968f\u610f\u4fee\u6539\uff0c\u63d0\u9ad8\u4ee3\u7801\u53ef\u7ef4\u62a4\u6027\uff1b \u4e00\u65b9\u9762\u662f\u4ec5\u66b4\u9732\u6709\u9650\u7684\u5fc5\u8981\u63a5\u53e3\uff0c\u63d0\u9ad8\u6613\u7528\u6027\u3002 \u62bd\u8c61 \u5c01\u88c5\u8bb2\u7684\u662f\u5982\u4f55\u9690\u85cf\u4fe1\u606f\u3001\u4fdd\u62a4\u6570\u636e\uff0c\u62bd\u8c61\u8bb2\u7684\u5c31\u662f\u5982\u4f55\u9690\u85cf\u7684\u5177\u4f53\u5b9e\u73b0\u3002 \u62bd\u8c61\u53ef\u4ee5\u901a\u8fc7\u63a5\u53e3\u7c7b\u6216\u8005\u62bd\u8c61\u7c7b\u6765\u5b9e\u73b0\uff0c\u4f46\u4e0d\u9700\u8981\u7279\u6b8a\u7684\u8bed\u6cd5\u673a\u5236\u6765\u652f\u6301\u3002 \u62bd\u8c61\u5b58\u5728\u7684\u610f\u4e49\uff0c \u4e00\u65b9\u662f\u662f\u63d0\u9ad8\u4ee3\u7801\u7684\u53ef\u6269\u5c55\u6027\u3001\u7ef4\u62a4\u6027\uff0c\u4fee\u6539\u5b9e\u73b0\u4e0d\u9700\u8981\u4fee\u6539\u5b9a\u4e49\uff0c\u51cf\u5c11\u4ee3\u7801\u6539\u52a8\u8303\u56f4\uff1b \u53e6\u4e00\u65b9\u9762\uff0c\u62bd\u8c61\u4e5f\u662f\u5904\u7406\u590d\u6742\u7cfb\u7edf\u7684\u6709\u6548\u624b\u6bb5\uff0c\u80fd\u6709\u6548\u8fc7\u6ee4\u6389\u4e0d\u5fc5\u5173\u6ce8\u7684\u4fe1\u606f\u3002 \u7ee7\u627f \u7ee7\u627f\u662f\u7528\u6765\u8868\u793a\u7c7b\u4e4b\u95f4\u7684 is-a \u548c has-a \u7684\u5173\u7cfb\uff0c\u5206\u4e3a\u4e24\u79cd\u6a21\u5f0f\uff1a\u5355\u7ee7\u627f\u548c\u591a\u7ee7\u627f\u3002 \u5355\u7ee7\u627f\u8868\u793a\u4e00\u4e2a\u5b50\u7c7b\u53ea\u80fd\u7ee7\u627f\u4e00\u4e2a\u7236\u7c7b\uff0c\u591a\u7ee7\u627f\u8868\u793a\u4e00\u4e2a\u5b50\u7c7b\u53ef\u4ee5\u7ee7\u627f\u591a\u4e2a\u7236\u7c7b\u3002 \u9700\u8981\u7f16\u7a0b\u8bed\u8a00\u63d0\u4f9b\u7279\u6b8a\u8bed\u6cd5\u673a\u5236\u6765\u652f\u6301\u3002\u5982\uff1a Java \u4e2d\u7684 extends \u5173\u952e\u5b57 Python \u4e2d\u7c7b\u540d\u540e\u7684\u62ec\u53f7 Go \u4e2d\u7684\u7ed3\u6784\u4f53\u5d4c\u5957 \u7ee7\u627f\u5b58\u5728\u7684\u610f\u4e49\uff0c\u662f\u7528\u6765\u89e3\u51b3\u4ee3\u7801\u590d\u7528\u7684\u95ee\u9898\u3002 \u591a\u6001 \u591a\u6001\u662f\u6307\u5b50\u7c7b\u53ef\u4ee5\u66ff\u4ee3\u7236\u7c7b\u3002\u5728\u5b9e\u9645\u4ee3\u7801\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u8c03\u7528\u5b50\u7c7b\u7684\u65b9\u6cd5\u5b9e\u73b0\u3002 \u9700\u8981\u7f16\u7a0b\u8bed\u8a00\u63d0\u4f9b\u7279\u6b8a\u8bed\u6cd5\u673a\u5236\u6765\u652f\u6301\u3002\u5982\uff1a\u7ee7\u627f\u3001\u63a5\u53e3\u3001duck-typing\u3002 \u591a\u6001\u53ef\u4ee5\u63d0\u9ad8\u4ee3\u7801\u7684\u6269\u5c55\u6027\u548c\u590d\u7528\u6027\uff0c\u662f\u5f88\u591a\u8bbe\u8ba1\u6a21\u5f0f\u3001\u8bbe\u8ba1\u539f\u5219\u3001\u7f16\u7a0b\u6280\u5de7\u7684\u4ee3\u7801\u5b9e\u73b0\u7684\u57fa\u7840\u3002","title":"13-\u9762\u5411\u5bf9\u8c61"},{"location":"Go/Basic/Golang-13-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#_1","text":"\u5728 Java \u7b49\u9762\u5411\u5bf9\u8c61\u4e2d\uff0c\u4f1a\u5c06\u4e00\u7c7b\u4e8b\u7269\u62bd\u8c61\u51fa \u5c5e\u6027 \u548c \u884c\u4e3a \uff0c\u5e76\u901a\u8fc7\u8bed\u8a00\u5c42\u9762\u9650\u5b9a \u8bbf\u95ee\u6027 \u3002 \u5c5e\u6027 \u4f7f\u7528\u57fa\u672c\u6570\u636e\u7c7b\u578b\u6216\u590d\u5408\u7c7b\u578b\u63cf\u8ff0\uff1b \u884c\u4e3a \u901a\u8fc7\u51fd\u6570\u63cf\u8ff0\uff0c\u5e76\u79f0\u4e4b\u4e3a \u65b9\u6cd5 \uff1b \u5c5e\u6027+\u65b9\u6cd5 \u7ec4\u6210\u4e00\u4e2a\u7c7b class \uff1b \u8bbf\u95ee\u6027\u5404\u4e2a\u8bed\u8a00\u5b9e\u73b0\u4e0d\u540c\u3002 \u5728 Go \u4e2d\u6ca1\u6709\u7c7b\u7684\u6982\u5ff5\uff0c \u800c\u662f\u5c06\u4e8b\u7269\u7684 \u5c5e\u6027 \u4f7f\u7528\u57fa\u672c\u6570\u636e\u7c7b\u578b\u6216\u590d\u5408\u6570\u636e\u7c7b\u578b \u5c01\u88c5\u5728\u7ed3\u6784\u4f53\u4e2d \uff0c \u800c \u884c\u4e3a \u662f\u901a\u8fc7 \u7ed9\u51fd\u6570\u9650\u5b9a\u8c03\u7528\u8005\u7684\u65b9\u5f0f \u5b9e\u73b0\u3002 \u8bbf\u95ee\u6027 \u662f\u901a\u8fc7\u9996\u5b57\u6bcd\u5927\u5199\u4e3a public \uff0c\u9996\u5b57\u6bcd\u5c0f\u5199\u4e3a private \u3002 \u8fd9\u79cd\u9650\u5b9a\u4e86\u8c03\u7528\u8005\u7684\u51fd\u6570\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a**\u65b9\u6cd5**\u3002 \u800c\u62e5\u6709\u65b9\u6cd5\u7684\u7ed3\u6784\u4f53\uff0c\u6211\u5c06\u5176\u79f0\u4e4b\u4e3a**\u7c7b**\u3002 {% note info, Golang \u4e2d\uff0c \u7c7b = \u7ed3\u6784\u4f53 + \u9650\u5b9a\u8c03\u7528\u8005\u7684\u51fd\u6570 + \u8bbf\u95ee\u6027 %} // class A type A struct { fieldA } func ( a A ) aMethod () { ... }","title":"\u5c01\u88c5"},{"location":"Go/Basic/Golang-13-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#_2","text":"Go \u4e0d\u652f\u6301\u50cf Java \u90a3\u6837\u7684\u6784\u9020\u51fd\u6570\uff0c\u4f46\u662f\u53ef\u4ee5\u901a\u8fc7 \u6807\u8bc6\u7b26\u9996\u5b57\u6bcd\u5927\u5c0f\u5199 + \u5de5\u5382\u51fd\u6570 \u5b9e\u73b0\u6784\u9020\u51fd\u6570\u3002 \u4e00\u822c\u5206\u4e3a4\u6b65\uff1a \u5c06\u7ed3\u6784\u4f53\u3001\u5b57\u6bb5\u7684\u9996\u5b57\u6bcd\u5c0f\u5199 \u7ed3\u6784\u4f53\u6240\u5728\u7684\u5305\u63d0\u4f9b\u4e00\u4e2a\u5de5\u5382\u6a21\u5f0f\u7684\u51fd\u6570\uff0c\u9996\u5b57\u6bcd\u5927\u5199\uff0c\u6a21\u62df\u4e00\u4e2a\u6784\u9020\u51fd\u6570\u3002\u6309\u7167\u89c4\u8303\uff0c\u6784\u9020\u51fd\u6570\u7684\u540d\u5b57\u4ee5 new \u6216 New \u5f00\u5934\u3002 \u6ce8\u610f\u8fd4\u56de\u503c\u5fc5\u987b\u662f\u7ed3\u6784\u4f53\u6307\u9488 \uff0c\u56e0\u4e3a\u7ed3\u6784\u4f53\u662f\u503c\u7c7b\u578b\u3002 \u63d0\u4f9b\u9996\u5b57\u6bcd\u5927\u5199\u7684 Get \u65b9\u6cd5\uff0c\u7528\u4e8e\u83b7\u53d6\u5c5e\u6027\u7684\u503c\uff0c\u5efa\u8bae\u547d\u540d\u89c4\u5219\uff1a\u5c5e\u6027\u540d\u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5982\u5c5e\u6027 sex \u7684 Get \u65b9\u6cd5\u4e3a Sex() \u3001\u5c5e\u6027 name \u7684 Get \u65b9\u6cd5\u4e3a Name() \u3002 \u63d0\u4f9b\u9996\u5b57\u6bcd\u5927\u5199\u7684 Set \u65b9\u6cd5\uff0c\u7528\u4e8e\u8bbe\u7f6e\u5c5e\u6027\u7684\u503c\uff0c\u5efa\u8bae\u547d\u540d\u89c4\u5219\uff1aSet+\u5c5e\u6027\u540d\u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5982\u5c5e\u6027 sex \u7684 Set \u65b9\u6cd5\u4e3a SetSex() \u3001\u5c5e\u6027 name \u7684 Set \u65b9\u6cd5\u4e3a SetName() \u3002 eg\uff1a type person struct { name string age int } // \u5199\u4e00\u4e2a\u5de5\u5382\u51fd\u6570\uff0c\u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u65b9\u5c31\u53ef\u4ee5\u8bbf\u95ee\uff0c\u76f8\u5f53\u4e8e\u6784\u9020\u51fd\u6570 func NewPerson ( name string , age int ) * person { if age <= 0 || name == \"\" { return nil } return & person { name , age } } // Get \u65b9\u6cd5 func ( p person ) Name () string { return p . name } func ( p person ) Age () int { return p . age } // Set \u65b9\u6cd5 func ( p person ) SetName ( name string ) { if name == \"\" { return } p . name = name } func ( p person ) SetAge ( age int ) { if age <= 0 { return } p . age = age } func main () { // \u7136\u540e\u8fd9\u6837\u521b\u5efa\u5bf9\u8c61\uff1a p := NewPerson ( \"Boii\" , 18 ) fmt . Println ( p ) // &{Boii 18} p . Name () // Boii p . SetAge ( 20 ) // p.age == 20 }","title":"\u6784\u9020\u51fd\u6570"},{"location":"Go/Basic/Golang-13-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#tostring","text":"\u5728\u9762\u5411\u5bf9\u8c61\u4e2d\uff0c\u6bcf\u4e2a\u7c7b\u9ed8\u8ba4\u7ee7\u627f\u81ea Object\uff0c\u6253\u5370\u4e00\u4e2a\u5bf9\u8c61\u7684\u65f6\u5019\uff0c\u4f1a\u8c03\u7528\u8fd9\u4e2a\u5bf9\u8c61\u7684 toString() \u65b9\u6cd5\uff0c\u5982\u679c\u8fd9\u4e2a\u5bf9\u8c61\u6ca1\u6709\u91cd\u5199 toString() \uff0c\u4f1a\u627e\u5176\u7236\u7c7b\uff0c\u4e00\u5c42\u5c42\u5f80\u4e0a\uff0c\u627e\u5230\u4e86\u6267\u884c toString() \uff0c\u627e\u4e0d\u5230\u5c31\u6267\u884c Object \u7684 toString() \u3002 \u60f3\u8981\u6253\u5370\u5bf9\u8c61\u4fe1\u606f\uff0c \u5728 Java \u4e2d\u662f .toString() \uff0c \u5728 Python \u4e2d\u662f .__str__() {% note info, \u5728 Go \u4e2d\u662f .String() %} \u5728 Go \u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7 %v \u6253\u5370\u7ed3\u6784\u4f53\u4fe1\u606f\u3002 fmt.Printf(\"%v \\n\", t) \u8fd9\u53e5\u8bdd\u7b49\u4ef7\u4e8e fmt.Printf(\"%v \\n\", t.String()) \uff0c\u4e5f\u7b49\u4ef7\u4e8e fmt.Println(t) \u3002 \u90a3\u4e48\u60f3\u8981\u6253\u5370\u7ed3\u6784\u4f53\u4fe1\u606f\u65f6\u6309\u7167\u81ea\u5df1\u60f3\u6cd5\u6765\uff0c\u5c31\u53ef\u4ee5\u4e3a\u7ed3\u6784\u4f53\u5199\u4e00\u4e2a String() \u65b9\u6cd5\u3002 type car struct { band string model string } func ( c car ) String () string { return c . band + \"-\" + \"c.model\" } func main () { c1 := & car { \"Benz\" , \"S600\" } fmt . Printf ( \"%v \\n\" , c1 ) // Benz-S600 fmt . Printf ( \"%v \\n\" , c1 . String ()) // Benz-S600 fmt . Println ( c1 ) // Benz-S600 }","title":"toString"},{"location":"Go/Basic/Golang-13-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#_3","text":"\u9762\u5411\u5bf9\u8c61\u4e2d\u7684\u7ee7\u627f\u6027\uff1a \u5982\u679c\u4e24\u4e2a\u7c7b class \u5b58\u5728\u7ee7\u627f\u5173\u7cfb\uff0c\u5176\u4e2d\u4e00\u4e2a\u662f\u5b50\u7c7b\uff0c\u53e6\u4e00\u4e2a\u4f5c\u4e3a\u7236\u7c7b\uff0c\u90a3\u4e48\uff1a \u5b50\u7c7b\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u7236\u7c7b\u7684\u5c5e\u6027\u548c\u65b9\u6cd5 \u5b50\u7c7b\u53ef\u4ee5\u65b0\u589e\u81ea\u5df1\u7684\u5c5e\u6027\u548c\u65b9\u6cd5 \u5b50\u7c7b\u53ef\u4ee5\u91cd\u5199\u7236\u7c7b\u7684\u65b9\u6cd5\uff08override\uff0c\u5c31\u662f\u5c06\u7236\u7c7b\u5df2\u6709\u7684\u65b9\u6cd5\uff0c\u91cd\u65b0\u5b9e\u73b0\uff09 Golang \u8bed\u6cd5\u4e0a\u4e0d\u652f\u6301\u7ee7\u627f\uff0c\u4f46\u662f\u901a\u8fc7\u7ed3\u6784\u4f53\u5d4c\u5957\u5374\u53ef\u4ee5\u5b9e\u73b0\u7ee7\u627f\uff0c\u800c\u4e14\u53ef\u4ee5\u591a\u7ee7\u627f\uff0c \u4e14\u901a\u8fc7 \u533f\u540d\u5b57\u6bb5 \u548c \u975e\u533f\u540d\u5b57\u6bb5 \u8fd8\u53ef\u4ee5\u8fdb\u4e00\u6b65\u533a\u5206 is-a \u7ee7\u627f\u5173\u7cfb \u548c has-a \u805a\u5408\u5173\u7cfb Golang \u7684\u7ed3\u6784\u4f53\u5d4c\u5957\uff1a","title":"\u7ee7\u627f"},{"location":"Go/Basic/Golang-13-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#is-a","text":"type Base struct { fieldB } type Son struct { fieldS Base // \u533f\u540d\u5b57\u6bb5\uff0c\u6a21\u62df\u7684\u662f \u7ee7\u627f\u5173\u7cfb } func ( b Base ) baseMethod () { // A\u7684\u65b9\u6cd5 fmt . Println ( \"base method\" ) } func ( s Son ) sonMethod () { // B\u7684\u65b9\u6cd5 fmt . Println ( \"son method\" ) } func main () { base := Base {} son := Son {} base . fieldB // \u6b63\u786e\u4f7f\u7528 son . fieldS // \u6b63\u786e\u4f7f\u7528 son . fieldB // \u6b63\u786e\u4f7f\u7528 son . Base . fieldB // \u6b63\u786e\u4f7f\u7528 base . fieldS // !\u62a5\u9519 base . Son . fieldS // !\u62a5\u9519 base . baseMethod () // \u6b63\u786e\u4f7f\u7528 son . sonMethod () // \u6b63\u786e\u4f7f\u7528 son . baseMethod () // \u6b63\u786e\u4f7f\u7528 son . Base . baseMethod () // \u6b63\u786e\u4f7f\u7528 base . sonMethod () // !\u62a5\u9519 base . Son . sonMethod () // !\u62a5\u9519 }","title":"\u6a21\u62df\u7ee7\u627f\u6027\uff1ais - a"},{"location":"Go/Basic/Golang-13-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#has-a","text":"type C struct { fieldC } type D struct { fieldD c C // \u975e\u533f\u540d\u5b57\u6bb5\uff0c\u6a21\u62df\u7684\u662f \u805a\u5408\u5173\u7cfb } func ( c C ) cMethod () { fmt . Println ( \"C method\" ) } d := D { ... } d . fieldC // !\u62a5\u9519 d . C . fieldC // !\u62a5\u9519 d . c . fieldC // \u6b63\u786e\u4f7f\u7528 d . c . cMethod () // \u6b63\u786e\u4f7f\u7528","title":"\u6a21\u62df\u805a\u5408\u5173\u7cfb\uff1ahas - a"},{"location":"Go/Basic/Golang-13-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#_4","text":"\u5728\u7ed3\u6784\u4f53\u4e2d\u5d4c\u5957\u4e86\u5176\u4ed6\u7ed3\u6784\u4f53\uff0c\u4f1a\u51fa\u73b0\u4e24\u79cd\u60c5\u51b5\uff0c\u4e00\u79cd\u662f is - a \u7684\u5173\u7cfb\uff0c\u4e00\u79cd\u7684 has - a \u7684\u5173\u7cfb\u3002 is - a \u662f\u4e00\u79cd\u7ee7\u627f\u5173\u7cfb\uff0c\u5b50\u7c7b\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u7236\u7c7b\uff08\u88ab\u5d4c\u5957\u7c7b\uff09\u7684\u53d8\u91cf\uff0c\u5982\u4e0a\u9762\u4f8b\u5b50\u4e2d\u7684 b.fieldA has - a \u662f\u4e00\u79cd\u805a\u5408\u5173\u7cfb\uff0c\u5f53\u524d\u7c7b\u4f7f\u7528\u805a\u5408\u7c7b\uff08\u88ab\u5d4c\u5957\u7c7b\uff09\u7684\u53d8\u91cf\u5fc5\u987b\u901a\u8fc7\u805a\u5408\u7c7b\u7684\u540d\u5b57\uff0c\u5982\u4e0a\u9762\u4f8b\u5b50\u4e2d\u7684 d.c.fieldC \uff0c\u5176\u4ed6\u4e24\u79cd\u65b9\u5f0f\u4f1a\u62a5\u9519\u3002","title":"\u5c0f\u7ed3"},{"location":"Go/Basic/Golang-13-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#_5","text":"Golang \u4e2d\u7684\u591a\u6001\u662f\u901a\u8fc7 \u63a5\u53e3 \u548c Duck-typing \u5b9e\u73b0\u7684\u3002 Duck-typing \u4e5f\u662f\u4e00\u79cd\u7f16\u7a0b\u601d\u60f3\uff1a\u53ea\u8981\u4e00\u4e2a\u4e1c\u897f\u770b\u8d77\u6765\u50cf\u9e2d\u5b50\uff0c\u8d70\u8def\u50cf\u9e2d\u5b50\uff0c\u5403\u8d77\u6765\u50cf\u9e2d\u5b50...\uff0c\u90a3\u5b83\u5c31\u662f\u9e2d\u5b50\u3002 \u53cd\u6620\u5728\u7f16\u7a0b\u8bed\u8a00\u4e2d\u5c31\u662f\uff0c\u53ea\u8981\u4e00\u4e2a\u7ed3\u6784\u4f53\u6216\u8005\u4e00\u4e2a\u7c7b\uff0c\u5177\u6709\u67d0\u4e2a\u65b9\u6cd5\u7684\u5177\u4f53\u5b9e\u73b0\uff0c\u90a3\u5b83\u5c31\u53ef\u4ee5\u88ab\u6211\u8fd9\u4e2a\u51fd\u6570/\u65b9\u6cd5\u63a5\u53d7\u3002 Golang \u4e2d\u7684\u63a5\u53e3\u662f\u975e\u4fb5\u5165\u5f0f\u7684\uff0c\u4e0d\u50cf Java \u90a3\u6837\u9700\u8981\u663e\u5f0f\u7684\u5728\u7c7b\u58f0\u660e\u4e2d\u52a0\u4e0a implement xxer \uff0c Golang \u4e0d\u9700\u8981\u7ed3\u6784\u4f53\u663e\u793a\u7684\u58f0\u660e\u5b9e\u73b0\u67d0\u4e2a\u63a5\u53e3\uff0c\u53ea\u8981\u4f60\u8fd9\u4e2a\u7ed3\u6784\u4f53\u6709\u6211\u8fd9\u4e2a\u63a5\u53e3\u6240\u6709\u65b9\u6cd5\u7684\u5177\u4f53\u5b9e\u73b0\uff0c\u90a3\u8fd9\u4e2a\u7ed3\u6784\u4f53\u5c31\u5b9e\u73b0\u662f\u6211\u8fd9\u4e2a\u63a5\u53e3\uff0c\u5c31\u662f\u6211\u7684\u5b9e\u73b0\u7c7b\uff0c\u5c31\u662f\u6211\u8fd9\u79cd\u7c7b\u578b\u3002 type Aer interface { show () string } type X struct {} type Y struct {} type Z struct {} func ( x X ) show () string { return \"I'm X\" } func ( x X ) add ( a , b int ) int { return a + b } func ( x Y ) show () string { return \"I'm Y\" } func PrintStruct ( a Aer ){ fmt . Println ( a . show ()) } func main () { x := X {} y := Y {} z := Z {} PrintStruct ( x ) // I'm X PrintStruct ( y ) // I'm Y PrintStruct ( z ) // !\u62a5\u9519, \u56e0\u4e3a Z \u6ca1\u6709\u5b9e\u73b0 Aer \u7684\u65b9\u6cd5 show()\uff0c\u4e0d\u662f Aer \u7c7b\u578b }","title":"\u591a\u6001"},{"location":"Go/Basic/Golang-13-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#_6","text":"\u91cd\u5199 \uff0c\u8bf4\u5927\u767d\u8bdd\u5c31\u662f\uff1a\u7239\u6709\u7684\uff0c\u513f\u5b50\u4e0d\u6ee1\u610f\uff0c\u513f\u5b50\u81ea\u5df1\u6765\u3002 Golang \u4e2d\u901a\u8fc7\u5d4c\u5957\u7ed3\u6784\u4f53\u6a21\u62df\u7ee7\u627f\uff0c\u5982\u679c\u5b50\u7ed3\u6784\u4f53\u6709\u548c\u7236\u7ed3\u6784\u4f53 \u540c\u540d\u540c\u53c2\u7684\u65b9\u6cd5 \uff0c\u5219\u79f0\u4f5c\u91cd\u5199\u3002 Golang \u4e2d\u4e0d\u652f\u6301\u540c\u540d\u4e0d\u540c\u53c2\u3002 type base struct { // \u7236\u7c7b name string } type son struct { // \u5b50\u7c7b base // \u7ee7\u627f\u4e86\u7236\u7c7b age int } func ( b base ) say () { // \u7236\u7c7b\u65b9\u6cd5 fmt . Println ( \"Base said.\" ) } func ( b base ) run () { // \u7236\u7c7b\u65b9\u6cd5 fmt . Println ( \"Base ran.\" ) } func ( s son ) say () { // \u5b50\u7c7b\u65b9\u6cd5\uff0c\u91cd\u5199\u4e86\u7236\u7c7b\u65b9\u6cd5 fmt . Println ( \"Son said.\" ) } func main () { b := base { \"Eva\" } // \u5b9e\u4f8b\u5316\u7236\u7c7b s := son { base { \"Boii\" }, 64 } // \u5b9e\u4f8b\u5316\u5b50\u7c7b b . say () // Base said. s . say () // Son said. b . run () // Base ran. s . run () // Base ran. }","title":"\u91cd\u5199"},{"location":"Go/Basic/Golang-13-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#_7","text":"","title":"\u4e3e\u4e2a\u6817\u5b50"},{"location":"Go/Basic/Golang-13-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#java","text":"\u73b0\u5728\u6211\u4eec\u7528 Java \u6765\u5b9a\u4e49\u4e00\u4e2a\u7c7b public class Dog { // \u5c5e\u6027 private String name ; private int age ; // \u6784\u9020\u51fd\u6570 public Dog ( String name , int age ){ this . name = name ; this . age = age ; } // getter public String getName () { return this . name ; } public int getAge () { return this . age ; } // setter public void setName ( String newName ) { this . name = newName ; } public void setAge ( int newAge ){ this . age = newAge ; } // toString @Override public String toString () { return this . name + \"-\" + this . age ; } } \u4ee5\u4e0a\u5c31\u662f\u7528 Java \u5b9a\u4e49\u7684\u4e00\u4e2a\u6700\u7b80\u5355\u7684\u7c7b\u4e86\u3002\u7c7b\u4e2d\u6709 \u5c5e\u6027 \u3001 \u6784\u9020\u51fd\u6570 \u3001 getter \u548c setter \u548c toString() \u3002 \u4f7f\u7528\u7684\u65f6\u5019\u662f\u8fd9\u6837\u5b50\u7684\uff1a Dog doge = new Dog ( \"Doge\" , 2 ); System . out . println ( doge . getName ()); // Doge System . out . println ( doge . getAge ()); // 2 doge . setAge ( 3 ); System . out . println ( doge . getAge ()); // 3 System . out . println ( doge ) // Doge-3","title":"Java\u5b9e\u73b0"},{"location":"Go/Basic/Golang-13-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#go","text":"\u4e0b\u9762\u6211\u4eec\u6765\u770b\u770b\u7528 Go \u600e\u4e48\u505a\uff1a //$GOPATH/src/dog/myDog.go package dog import ( \"fmt\" \"strconv\" ) // \u5b9a\u4e49 Dog \u7ed3\u6784\u4f53\uff0c\u5305\u542b\u4e86\u5c5e\u6027 type dog struct { name string age int8 } // \u6784\u9020\u51fd\u6570 func NewDog ( name string , age int8 ) * dog { return & dog { name , age } } // getter func ( d * dog ) Name () string { return d . name } func ( d * dog ) Age () int8 { return d . age } // setter func ( d * dog ) SetName ( newName string ) { d . name = newName } func ( d * dog ) SetAge ( newAge int8 ) { d . age = newAge } // toString func ( d * dog ) String () string { return d . name + \"-\" + strconv . Itoa ( int ( d . age )) } \u540c\u6837\u5b9e\u73b0\u4e86 \u5c5e\u6027 \u3001 \u6784\u9020\u51fd\u6570 \u3001 getter \u548c setter \u3002 \u4f7f\u7528\u7684\u65f6\u5019\u662f\u8fd9\u6837\u5b50\u7684\uff1a //$GOPATH/src/Hello/main.go package main import ( \"dog\" \"fmt\" ) func main () { doge := NewDog ( \"Doge\" , 2 ) fmt . Println ( doge . Name ()) // Doge fmt . Println ( doge . GetAge ()) // 2 doge . SetAge ( 3 ) fmt . Println ( doge . Age ()) // 3 fmt . Printf ( \"%v \\n\" , doge ) // Doge-3 fmt . Println ( doge ) // Doge-3 }","title":"Go \u5b9e\u73b0"},{"location":"Go/Basic/Golang-13-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#_8","text":"\u62bd\u8c61\u7c7b\u5176\u5b9e\u548c\u63a5\u53e3\u7684\u6027\u8d28\u662f\u4e00\u6837\u7684\uff0c\u4f46\u662f\u53c8\u591a\u4e86\u4e00\u4e9b\u5177\u4f53\u7684\u5b9e\u73b0\u3002 \u5f53\u4e00\u4e2a\u63a5\u53e3\u4e2d\u7684\u67d0\u4e9b\u65b9\u6cd5\uff0c\u6240\u6709\u5b50\u7c7b\u7684\u5b9e\u73b0\u90fd\u4e00\u6837\u65f6\uff0c\u53ef\u4ee5\u6362\u6210\u62bd\u8c61\u7c7b\u6765\u5b9e\u73b0\uff0c\u5c06\u8fd9\u4e9b\u5171\u540c\u7684\u5b9e\u73b0\u5199\u5728\u62bd\u8c61\u7c7b\u4e2d\uff0c\u5269\u4e0b\u4e0d\u540c\u7684\u5b9e\u73b0\u7eed\u96c6\u4fdd\u6301\u62bd\u8c61\u3002","title":"\u62bd\u8c61\u7c7b"},{"location":"Go/Basic/Golang-13-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#java_1","text":"eg\uff1a // \u5b9a\u4e49\u4e00\u4e2a\u62bd\u8c61\u7c7b public abstract class Animal { // \u5b9e\u73b0\u5171\u540c\u65b9\u6cd5 public void run () { System . out . println ( this . name () + \" is running!\" ); } // \u5b9a\u4e49\u62bd\u8c61\u65b9\u6cd5 public abstract String kind (); } // \u7ee7\u627f\u62bd\u8c61\u7c7b public class cat extends Animal { // \u5b9e\u73b0\u62bd\u8c61\u65b9\u6cd5 public String kind () { return \"cat\" ; } } // \u7ee7\u627f\u62bd\u8c61\u7c7b public class dog extends Animal () { // \u5b9e\u73b0\u62bd\u8c61\u65b9\u6cd5 public String kind () { return \"dog\" ; } } \u4e0a\u9762\u62bd\u8c61\u4e86\u4e00\u4e2a\u52a8\u7269\u7c7b Animal \uff0c\u6211\u4eec\u5b9e\u73b0\u4e86\u5171\u540c\u7684\u65b9\u6cd5 run() \uff0c\u5e76\u5b9a\u4e49\u4e86\u9700\u8981\u5b50\u7c7b\u81ea\u5df1\u5b9e\u73b0\u7684\u62bd\u8c61\u65b9\u6cd5 kind() \u3002 \u63a5\u7740\u5b9a\u4e49\u4e86\u4e24\u4e2a\u5177\u4f53\u7c7b cat \u548c dog \u7ee7\u627f Animal \uff0c\u5e76\u5404\u81ea\u5177\u4f53\u5b9e\u73b0\u62bd\u8c61\u65b9\u6cd5 kind() \u3002","title":"\u4ee5 Java \u4e3a\u6817"},{"location":"Go/Basic/Golang-13-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#go_1","text":"Go \u5e76\u6ca1\u6709\u62bd\u8c61\u7c7b\u7684\u6982\u5ff5\uff0c\u4f46\u662f\u901a\u8fc7 struct \u548c interface \u53ef\u4ee5\u5b9e\u73b0\u51fa\u62bd\u8c61\u7c7b\u3002 \u601d\u8003\u4e00\u4e0b\uff1aJava \u4e2d\u62bd\u8c61\u7c7b\u548c\u63a5\u53e3\u7684\u533a\u522b\u5728\u54ea\uff1f \u5176\u5b9e\u5c31\u662f\u62bd\u8c61\u7c7b\u4e2d\u9700\u8981\u5177\u4f53\u5b9e\u73b0\u4e00\u4e9b {% span blue, \u516c\u5171\u65b9\u6cd5 %}\uff0c\u5269\u4e0b\u7684\u90a3\u4e9b\u62bd\u8c61\u65b9\u6cd5\uff0c\u7528 Java \u4e2d\u7684\u63a5\u53e3\u5b9e\u73b0\u4e5f\u662f\u4e00\u6837\u7684\u3002 \u53ea\u4e0d\u8fc7 Java \u6709\u62bd\u8c61\u7c7b\u7684\u6982\u5ff5\uff0c\u53ef\u4ee5\u4f18\u96c5\u7684\u5b9e\u73b0\u3002 \u90a3\u4e48\u6211\u4eec\u4e5f\u53ef\u4ee5\u5728 Golang \u4e2d\uff0c\u5b9a\u4e49\u4e00\u4e2a\u63a5\u53e3IAer\uff0c\u63a5\u53e3\u4e2d\u5b9a\u4e49\u4e00\u4e9b\u62bd\u8c61\u65b9\u6cd5\uff1b \u7136\u540e\u5b9a\u4e49\u4e00\u4e2a Aer \u4f5c\u4e3a\u516c\u5171\u7684\u7ed3\u6784\u4f53\uff08\u7c7b\uff09\uff0c\u7531\u5b83\u6765\u5b9e\u73b0\u516c\u5171\u7684\u90e8\u5206 \u7136\u540e\u5176\u4ed6\u7ed3\u6784\u4f53\u5d4c\u5957\u8fd9\u4e2a\u516c\u5171\u7ed3\u6784\u4f53\uff0c\u5e76\u5b9e\u73b0\u63a5\u53e3 IAer \u7684\u65b9\u6cd5\uff0c\u8fd9\u6837\u5c31\u80fd\u8fbe\u5230\u4e0e\u62bd\u8c61\u7c7b\u76f8\u540c\u7684\u6548\u679c\u3002 // -- \u62bd\u8c61\u7c7b -- start type IAbsClass interface { absMethod1 () absMethod2 () } func AbsClass struct {} // \u516c\u5171\u7ed3\u6784\u4f53 func ( a AbsClass ) commonMethod1 () { // \u516c\u5171\u7ed3\u6784\u4f53\u5b9e\u73b0\u516c\u5171\u65b9\u6cd51 fmt . Println ( \"AbsClass commonMethod1\" ) } func ( a AbsClass ) commonMethod2 () { // \u516c\u5171\u7ed3\u6784\u4f53\u5b9e\u73b0\u516c\u5171\u65b9\u6cd52 fmt . Println ( \"AbsClass commonMethod2\" ) } // -- \u62bd\u8c61\u7c7b -- end // -- \u5b50\u7c7b\u7ee7\u627f\u62bd\u8c61\u7c7b type subClass1 struct { AbsClass // \u7ee7\u627f\u62bd\u8c61\u7c7b } // \u5b50\u7c7b\u5b9e\u73b0\u62bd\u8c61\u65b9\u6cd5 func ( s subClass1 ) absMethod1 () { // \u5b50\u7c7b\u5b9e\u73b0\u62bd\u8c61\u65b9\u6cd51 fmt . Println ( \"subClass1 absMethod1\" ) } func ( s subClass1 ) absMethod2 () { // \u5b50\u7c7b\u5b9e\u73b0\u62bd\u8c61\u65b9\u6cd52 fmt . Println ( \"subClass1 absMethod2\" ) } // \u6b64\u65f6\u5b50\u7c7b subClass1 \u62e5\u6709 4 \u79cd\u65b9\u6cd5\uff1a // absClass.commonMethod1() // absClass.commonMethod2() // subClass1.absMethod1() // subClass1.absMethod2() // -- \u5b50\u7c7b\u7ee7\u627f\u62bd\u8c61\u7c7b type subClass2 struct { AbsClass // \u7ee7\u627f\u62bd\u8c61\u7c7b } // \u5b50\u7c7b\u5b9e\u73b0\u62bd\u8c61\u65b9\u6cd5 func ( s subClass2 ) absMethod1 () { // \u5b50\u7c7b\u5b9e\u73b0\u62bd\u8c61\u65b9\u6cd51 fmt . Println ( \"subClass2 absMethod1\" ) } func ( s subClass2 ) absMethod2 () { // \u5b50\u7c7b\u5b9e\u73b0\u62bd\u8c61\u65b9\u6cd52 fmt . Println ( \"subClass2 absMethod2\" ) } // \u5b50\u7c7b\u91cd\u5199\u516c\u5171\u65b9\u6cd52 func ( s subClass2 ) commonMethod2 () { fmt . Println ( \"subClass2 commonMethod1\" ) } // \u6b64\u65f6\u5b50\u7c7b subClass2 \u62e5\u6709 4 \u79cd\u65b9\u6cd5\uff1a // absClass.commonMethod1() // subClass2.commonMethod2() // subClass2.absMethod1() // subClass2.absMethod2() \u63a5\u53e3\u5b9a\u4e49**\u62bd\u8c61\u65b9\u6cd5**\uff1b \u516c\u5171\u7ed3\u6784\u4f53\u5b9e\u73b0**\u516c\u5171\u65b9\u6cd5**\uff1b \u5176\u4ed6\u8981\u7ee7\u627f\u62bd\u8c61\u7c7b\u7684\u5b50\u7c7b\u53ea\u8981{% span yellow, \u533f\u540d\u5d4c\u5957 %}\u516c\u5171\u7ed3\u6784\u4f53\u5373\u53ef\u3002 \u8c03\u7528\uff1a func main () { c := & cat {} c . run ( c ) d := & dog {} d . run ( d ) fmt . Println ( \"kind(): \" , d . kind ()) s1 := subClass1 {} s1 . commonMethod1 () // \u6253\u5370\uff1aAbsClass commonMethod1 s1 . commonMethod2 () // \u6253\u5370\uff1aAbsClass commonMethod2 s1 . absMethod1 () // \u6253\u5370\uff1asubClass1 absMethod1 s1 . absMethod2 () // \u6253\u5370\uff1asubClass1 absMethod2 s2 := subClass2 {} s2 . commonMethod1 () // \u6253\u5370\uff1aAbsClass commonMethod1 s2 . commonMethod2 () // \u6253\u5370\uff1asubClass2 commonMethod2 s2 . absMethod1 () // \u6253\u5370\uff1asubClass2 absMethod1 s2 . absMethod2 () // \u6253\u5370\uff1asubClass2 absMethod2 }","title":"Go \u5b9e\u73b0\u62bd\u8c61\u7c7b"},{"location":"Go/Basic/Golang-13-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#_9","text":"Golang \u4e2d\u5b9e\u73b0\u62bd\u8c61\u7c7b\uff1a **\u62bd\u8c61\u7684\u65b9\u6cd5**\u653e\u5728**\u63a5\u53e3**\u4e2d **\u516c\u5171\u7684\u65b9\u6cd5**\u5b9a\u4e49\u4e00\u4e2a**\u516c\u5171\u7ed3\u6784\u4f53**\u53bb\u5b9e\u73b0\uff0c\u9700\u8981\u7528\u5230 this \u7684\u5730\u65b9\u4f7f\u7528\u63a5\u53e3\u53d8\u91cf \u7ee7\u627f\u62bd\u8c61\u7c7b\u7684\u5b50\u7c7b\u8981\u505a\u4e24\u4ef6\u4e8b\uff1a \u533f\u540d\u5d4c\u5957\u516c\u5171\u7ed3\u6784\u4f53 \u5b9e\u73b0\u63a5\u53e3\u4e2d\u7684\u6240\u6709\u65b9\u6cd5 \u5728\u8c03\u7528\u516c\u5171\u65b9\u6cd5\u65f6\uff0c\u9700\u8981 this \u7684\u5730\u65b9\uff0c\u5c06\u5b50\u7c7b\u81ea\u5df1\u4f20\u8fdb\u53bb\u3002","title":"\u5c0f\u7ed3"},{"location":"Go/Basic/Golang-13-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#_10","text":"\u636e\u8bf4\u5728 Go 1.17 \u51fa","title":"\u6cdb\u578b"},{"location":"Go/Basic/Golang-13-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#_11","text":"\u997f\u6c49\u5f0f\uff1a type singleton struct {} var single * singleton = new ( singleton ) func GetPersonInstance () * singleton { return single } \u6d4b\u8bd5\u4e00\u4e0b func main () { s3 := GetPersonInstance () s4 := GetPersonInstance () fmt . Printf ( \"%p\\n\" , s3 ) // 0x104d5b8 fmt . Printf ( \"%p\\n\" , s4 ) // 0x104d5b8 } \u61d2\u6c49\u5f0f\uff1a type singleton struct {} var single * singleton func GetPersonInstance () * singleton { if single == nil { single = new ( singleton ) } return single } \u6d4b\u8bd5\u4e00\u4e0b func main () { s3 := GetPersonInstance () s4 := GetPersonInstance () fmt . Printf ( \"%p\\n\" , s3 ) // 0x104d5b8 fmt . Printf ( \"%p\\n\" , s4 ) // 0x104d5b8 } \u4f7f\u7528 sync.Once \u5b9e\u73b0\u7684\u61d2\u6c49\u5f0f\uff1a type singleton struct {} var ( single * singleton once sync . Once ) func GetPersonInstance () * singleton { once . Do ( func () { single = new ( singleton ) }) return single } \u6d4b\u8bd5\u4e00\u4e0b\uff1a func main () { s1 := GetPersonInstance () s2 := GetPersonInstance () fmt . Printf ( \"%p\\n\" , s1 ) // 0xdbd5b8 fmt . Printf ( \"%p\\n\" , s2 ) // 0xdbd5b8 }","title":"\u5355\u4f8b\u6a21\u5f0f"},{"location":"Go/Basic/Golang-14-%E9%94%99%E8%AF%AF%E4%B8%8E%E5%BC%82%E5%B8%B8/","text":"\u9519\u8bef\u4e0e\u5f02\u5e38\u7684\u5904\u7406 \u9519\u8bef\u4e0e\u5f02\u5e38 \u00b6 \u610f\u6599\u4e4b\u4e2d\u7684\u53eb**\u9519\u8bef** \u610f\u6599\u4e4b\u5916\u7684\u53eb**\u5f02\u5e38** \u9519\u8bef\uff1a\u662f\u6307\u53ef\u80fd\u51fa\u73b0\u95ee\u9898\u7684\u5730\u65b9\u51fa\u73b0\u4e86\u95ee\u9898\uff0c\u6bd4\u5982\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u65f6\u5931\u8d25\uff0c\u8fd9\u79cd\u60c5\u51b5\u662f\u5728\u610f\u6599\u4e4b\u4e2d\u7684\u3002 \u5f02\u5e38\uff1a\u662f\u6307\u4e0d\u5e94\u8be5\u51fa\u73b0\u95ee\u9898\u7684\u5730\u65b9\u51fa\u73b0\u4e86\u95ee\u9898\uff0c\u6bd4\u5982\u5f15\u7528\u4e86\u7a7a\u6307\u9488\uff0c\u8fd9\u79cd\u60c5\u51b5\u5728\u4eba\u4eec\u7684\u610f\u6599\u4e4b\u5916\u3002 \u6240\u4ee5\u9519\u8bef\u662f\u4e1a\u52a1\u8fc7\u7a0b\u7684\u4e00\u90e8\u5206\uff0c\u800c\u5f02\u5e38\u4e0d\u662f\u3002 \u9519\u8bef \u00b6 Go \u4e2d\u9519\u8bef\u662f\u4e00\u79cd\u7c7b\u578b\u3002 \u9519\u8bef\u7528\u5185\u7f6e\u7684 error \u7c7b\u578b\u8868\u793a\u3002\u548c int\u3001float64 \u662f\u7b49\u4ef7\u7684\u3002 error \u662f\u4e00\u4e2a\u63a5\u53e3\uff0c\u63a5\u53e3\u662f\u4e00\u79cd\u7c7b\u578b\uff0c\u6240\u4ee5\u8bf4 error \u662f\u4e00\u79cd\u7c7b\u578b\u3002 type error interface { Error () string } error \u7c7b\u578b\u53ef\u4ee5\u5b58\u50a8\u9519\u8bef\u503c\uff0c\u4ece\u51fd\u6570\u4e2d\u8fd4\u56de\u7b49\u7b49\u3002 package main import ( \"fmt\" \"os\" ) func main () { f , err := os . Open ( \"test.txt\" ) if err != nil { fmt . Println ( err ) return } // \u6839\u636ef\u8fdb\u884c\u6587\u4ef6\u8bfb\u5199 fmt . Println ( f . Name (), \"opened successfully\" ) } \u629b\u51fa\u9519\u8bef \u00b6 \u5728\u7f16\u5199\u6869\u6a21\u5757\u4f9b\u4eba\u8c03\u7528\u65f6\uff0c\u6211\u4eec\u4e0d\u77e5\u9053\u8c03\u7528\u8005\u4f1a\u4f20\u8fdb\u6765\u4ec0\u4e48\u53c2\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5bf9\u4f20\u8fdb\u6765\u7684\u53c2\u6570\u505a\u5224\u65ad\u3002 \u5982\u679c\u53d1\u751f\u9519\u8bef\u6211\u4eec\u9700\u8981\u8fdb\u884c\u5904\u7406\uff0c\u6216\u8005**\u629b\u51fa\u9519\u8bef**\u3002 \u8981\u629b\u51fa\u9519\u8bef\uff0c\u90a3\u5f97\u5148\u4f1a\u521b\u5efa\u9519\u8bef\u3002 \u521b\u5efa\u9519\u8bef\u6709\u4e24\u79cd\u65b9\u5f0f\uff1a \u901a\u8fc7 errors \u5305\u7684 New() \u51fd\u6570\u521b\u5efa\uff1a func New(errMsg string) error \u901a\u8fc7 fmt \u5305\u7684 Errorf() \u51fd\u6570\u521b\u5efa\uff1a func Errorf(format string, a ...interface{}) error \u521b\u5efa\u9519\u8bef errors . New ( string ) fmt . Errorf ( string , ... interface {}) \u8fd9\u4e24\u79cd\u65b9\u5f0f\u533a\u522b\u5728\u4e8e\uff1a fmt.Errorf() \u53ef\u4ee5\u4f7f\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u6765\u8fd4\u56de\u9519\u8bef\u4fe1\u606f\uff0c\u800c errors.New() \u4e0d\u80fd\u3002 eg\uff1a errors.New() \uff1a func div ( a , b float64 ) ( float64 , error ) { if b == 0 { return 0 , errors . New ( \"\u9664\u6570\u5c0f\u4e8e0\" ) } return a / b , nil } \u8c03\u7528\u7684\u6548\u679c\uff1a fmt . Println ( div ( 10 , 0 )) // \u9664\u6570\u5c0f\u4e8e0 fmt.Errorf() \uff1a func div ( a , b float64 ) ( float64 , error ) { if b == 0 { return 0 , fmt . Errorf ( \"\u9519\u8bef\u7801: [%d] \\t \u9664\u6570\u5c0f\u4e8e0\" , 100 ) } return a / b , nil } \u8c03\u7528\u7684\u6548\u679c\uff1a fmt . Println ( div ( 10 , 0 )) // 0 \u9519\u8bef\u7801: [100] \u9664\u6570\u5c0f\u4e8e0 \u6355\u83b7\u9519\u8bef \u00b6 \u5f53\u6211\u4eec\u5199\u9a71\u52a8\u6a21\u5757\u7684\u65f6\u5019\uff0c\u5728\u8c03\u7528\u6869\u6a21\u5757\u65f6\u6709\u53ef\u80fd\u8fd4\u56de\u9519\u8bef\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5224\u65ad \u6700\u540e\u4e00\u4e2a\u8fd4\u56de\u503c err \uff08\u6700\u540e\u4e00\u4e2a\u8fd4\u56de\u503c\u8fd4\u56de\u9519\u8bef\u7c7b\u578b\uff0c\u8fd9\u662f\u7ea6\u5b9a\u4fd7\u6210\u7684\uff09\u6765\u5224\u65ad\u662f\u5426\u6709\u8fd4\u56de\u9519\u8bef\u3002 func main () { quotient , err := div ( 10 , 0 ) if err != nil { // \u6355\u83b7\u9519\u8bef fmt . Println ( err ) return } fmt . Println ( quotient ) } \u81ea\u5b9a\u4e49\u9519\u8bef \u00b6 \u7b80\u7b80\u5355\u5355\u7684 Error.New() \u548c fmt.Errorf() \u6709\u65f6\u5019\u5e76\u4e0d\u80fd\u6ee1\u8db3\u6211\u4eec\u7684\u9700\u6c42\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u5f97\u81ea\u5b9a\u4e49\u9519\u8bef\u3002 \u81ea\u5b9a\u4e49\u9519\u8bef\u5206\u4e3a\u4e09\u6b65\uff1a \u521b\u5efa\u4e00\u4e2a\u7ed3\u6784\u4f53 \u5b9e\u73b0 error \u63a5\u53e3 \u5b9a\u4e49\u5176\u4ed6\u65b9\u6cd5 \u5176\u4e2d\u7b2c\u4e00\u6b65\u548c\u7b2c\u4e8c\u6b65\u662f\u5fc5\u9009\u7684\uff0c\u7b2c\u4e09\u6b65\u662f\u53ef\u9009\u7684\u3002 eg\uff1a \u81ea\u5b9a\u4e49\u9519\u8bef // \u521b\u5efa\u4e00\u4e2a\u7ed3\u6784\u4f53 type dataError struct { Err string height int weight int age int } // \u5b9e\u73b0 error \u63a5\u53e3\uff0c\u4f7f dataError \u6210\u4e3a error \u7c7b\u578b func ( d * dataError ) Error () string { return d . Err } // \u5b9a\u4e49\u5176\u4ed6\u65b9\u6cd5 func ( d * dataError ) heightNegativeError () bool { return d . height < 0 } func ( d * dataError ) weightNegativeError () bool { return d . weight < 0 } func ( d * dataError ) ageNegativeError () bool { return d . age <= 0 } \u629b\u51fa\u9519\u8bef type status = bool const ( SUCCESS = true // SUCCESS \u9a8c\u8bc1\u901a\u8fc7 FAIL = false // FAIL \u9a8c\u8bc1\u672a\u901a\u8fc7 ) type Person struct { height int weight int age int } // \u9a8c\u8bc1\u4e0d\u901a\u8fc7\u65f6\uff0c\u629b\u51fa\u9519\u8bef func variety ( p Person ) ( status , error ) { if p . height < 0 || p . weight < 0 || p . age < 0 { return FAIL , & dataError { \"\u6570\u636e\u6709\u8bef\" , p . height , p . weight , p . age } // \u629b\u51fa\u9519\u8bef } return SUCCESS , nil } \u6355\u83b7\u9519\u8bef func main () { p := Person { 178 , 120 , - 18 } s , err := variety ( p ) if err != nil { // \u6355\u83b7\u9519\u8bef fmt . Println ( \"Error:\" , err ) return } fmt . Println ( s , p ) } \u8f93\u51fa\u7ed3\u679c\uff1a $ go run main.go Error: \u6570\u636e\u6709\u8bef \u5982\u679c\u6355\u83b7\u5230\u4e86\u9519\u8bef\uff0c\u800c\u6211\u4eec\u53c8\u60f3\u8fdb\u4e00\u6b65\u5224\u65ad\u662f\u4ec0\u4e48\u9519\u8bef\uff0c\u9700\u8981\u7528\u5230 \u7c7b\u578b\u65ad\u8a00 \u3002 func main () { p := Person { 178 , 120 , - 18 } s , err := variety ( p ) if err != nil { // \u6355\u83b7\u9519\u8bef if ins , ok := err .( * dataError ); ok { // \u7c7b\u578b\u65ad\u8a00\uff0c\u5224\u65ad\u662f\u54ea\u79cd\u9519\u8bef switch { // \u6355\u83b7\u540e\u7684\u5904\u7406\uff0c\u53ef\u4ee5\u6253\u5370\u9519\u8bef\u4fe1\u606f\uff0c\u4e5f\u53ef\u4ee5\u53d6\u4e2a\u7edd\u5bf9\u503c\u7b49\u5176\u4ed6\u64cd\u4f5c\u3002 case ins . heightNegativeError (): ins . Err = \"\u8eab\u9ad8\u4e3a\u8d1f\" case ins . weightNegativeError (): ins . Err = \"\u4f53\u91cd\u4e3a\u8d1f\" case ins . ageNegativeError (): ins . Err = \"\u5e74\u9f84\u4e3a\u8d1f\" } fmt . Println ( \"Error:\" , ins ) } return } fmt . Println ( s , p ) } \u8f93\u51fa\u7ed3\u679c\uff1a $ go run main.go Error: \u5e74\u9f84\u4e3a\u8d1f \u5f02\u5e38 \u00b6 \u5f53\u4e00\u4e2a\u7a0b\u5e8f\u9047\u5230\u610f\u6599\u4e4b\u5916\u7684\u9519\u8bef\u65f6\uff0c\u5e94\u8be5\u629b\u51fa\u5f02\u5e38\uff0c\u505c\u6b62\u7a0b\u5e8f\u7684\u8fd0\u884c\u3002 Go \u4e2d\u5f15\u5165\u4e24\u4e2a\u5185\u7f6e\u51fd\u6570 panic() \u548c recover() \u6765\u51fa\u53d1\u548c\u7ec8\u6b62\u5f02\u5e38\u5904\u7406\u6d41\u7a0b\uff0c\u540c\u65f6\u5f15\u5165\u5173\u952e\u5b57 defer \u6765\u5ef6\u8fdf\u6267\u884c\u5ef6\u8fdf\u51fd\u6570\u3002 \u590d\u4e60\u4e00\u4e0b defer \u00b6 func fn () { fmt . Println ( \"start\" ) defer fmt . Println ( 1 ) defer fmt . Println ( 2 ) defer fmt . Println ( 3 ) fmt . Println ( \"end\" ) } // --------------------- // Output: start end 3 2 1 \u5148 defer \u7684\u540e\u6267\u884c\uff0c\u540e defer \u7684\u5148\u6267\u884c panic \u00b6 \u5185\u7f6e\u51fd\u6570 \u53d1\u751f panic \u7684\u60c5\u51b5\u6709\u4e24\u79cd\uff1a \u624b\u52a8\u629b\u51fa\uff0c\u5373\u7f16\u5199 panic \u8bed\u53e5 \u7a0b\u5e8f\u53d1\u751f\u9519\u8bef\u7531\u7cfb\u7edf\u629b\u51fa\u3002 \u5982\u679c\u51fd\u6570\u4e2d\u51fa\u73b0\u4e86 panic \u8bed\u53e5\uff0c\u5219\u4e0d\u4f1a\u7ee7\u7eed\u6267\u884c panic \u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u800c\u662f\u4f1a\u9006\u5e8f\u6267\u884c defer \u4fee\u9970\u7684\u51fd\u6570\uff0c\u7136\u540e\u8fd4\u56de\u8c03\u7528\u5904 \u5982\u679c\u4e00\u8def\u90fd\u6ca1\u6709\u9047\u5230 recover() \uff0c\u5219\u4e00\u8def\u4f20\u9012\u56de\u6240\u5728\u534f\u7a0b\u7684\u8d77\u70b9\uff0c\u7136\u540e\u8be5\u534f\u7a0b\u7ed3\u675f\uff0c\u7ec8\u6b62\u5176\u4ed6\u6240\u6709\u534f\u7a0b\uff08\u5305\u62ec\u4e3b\u534f\u7a0b\uff09\u3002 \u6700\u7ec8\u6574\u4e2a goroutine \u9000\u51fa\uff0c\u62a5\u544a\u9519\u8bef\u3002 panic \u7684\u7b7e\u540d\u5982\u4e0b\uff1a func panic ( v interface {}) panic \u4e2d\u63a5\u53d7\u4e00\u4e2a\u4efb\u4f55\u7c7b\u578b\u7684\u53c2\u6570\uff0c\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2a\u9519\u8bef\u6d88\u606f\u7684\u5b57\u7b26\u4e32\uff0c\u4e5f\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2a\u9519\u8bef\u7801\u3002 eg\uff1a func fn () { fmt . Println ( \"start\" ) defer fmt . Println ( 1 ) defer fmt . Println ( 2 ) panic ( 100 ) defer fmt . Println ( 3 ) fmt . Println ( \"end\" ) } func main () { defer fmt . Println ( \"main defer...\" ) fn () fmt . Println ( \"After fn()...\" ) } // --------------------- // Output: start 2 1 main defer ... panic : 100 goroutine 1 [ running ]: main . fn () e : /--- CODE / GO / root / src / boii . xyz / study / Helloworld / main . go : 19 + 0x166 main . main () e : /--- CODE / GO / root / src / boii . xyz / study / Helloworld / main . go : 26 + 0x27 exit status 2 \u53ef\u4ee5\u770b\u51fa\u53d1\u751f panic \u4e4b\u540e\uff0c\u5728 panic \u4e4b\u524d defer \u7684\u4ee3\u7801\u4f9d\u7136\u4f1a\u9006\u5e8f\u6267\u884c\uff0c\u7136\u540e\u56de\u5230\u8c03\u7528\u5904\u3002 \u4e0a\u9762\u7684\u4f8b\u5b50\u6267\u884c\u5b8c fn() \u4e2d defer \u51fd\u6570\u540e\uff0c\u4fbf\u8fd4\u56de\u4e86 main() \u51fd\u6570\uff0c \u63a5\u7740\u6267\u884c \u65e9\u5728\u8c03\u7528 fn() \u4e4b\u524d\u5c31 defer \u7684 \u6253\u5370\u8bed\u53e5\uff0c\u7136\u540e\u5c31\u7ec8\u6b62\u7a0b\u5e8f\u4e86\u3002 {% note done, \u7ed3\u8bba\uff1a defer\u51fd\u6570 \u7684\u6267\u884c \u4f18\u5148\u4e8e panic %} recover \u00b6 \u5185\u7f6e\u51fd\u6570 \u7528\u6765\u7ec8\u6b62\u4e00\u4e2a\u534f\u7a0b\u4e2d\u7684 panicking \u884c\u4e3a\uff0c\u6355\u83b7 panic \uff0c\u4ece\u800c\u5f71\u54cd\u5e94\u7528\u7684\u884c\u4e3a\u3002 recover \u9700\u8981\u7528 defer \u4fee\u9970\u3002 \u4e00\u822c\u7684\u8c03\u7528\u5efa\u8bae\uff1a \u5728 defer \u51fd\u6570\u4e2d\uff0c\u901a\u8fc7 recover \u6765\u7ec8\u6b62\u4e00\u4e2a \u534f\u7a0b\u7684 panicking \u8fc7\u7a0b\uff0c\u4ece\u800c\u6062\u590d\u6b63\u5e38\u4ee3\u7801\u7684\u6267\u884c \u53ef\u4ee5\u83b7\u53d6\u901a\u8fc7 panic \u4f20\u9012\u7684 error \u7b80\u800c\u8a00\u4e4b\uff0cgo\u4e2d\u53ef\u4ee5\u629b\u51fa\u4e00\u4e2a panic \u7684\u5f02\u5e38\uff0c\u7136\u540e\u5728 defer \u4e2d\u901a\u8fc7 recover \u6355\u83b7\u8fd9\u4e2a\u5f02\u5e38\uff0c\u7136\u540e\u6b63\u5e38\u5904\u7406\u3002 {% noteblock warning %} Q\uff1a\u4e3a\u4ec0\u4e48 recover \u9700\u8981 defer \u4fee\u9970\uff1f A\uff1a\u56e0\u4e3a\u53d1\u751f panic \u540e\uff0c\u53ea\u4f1a\u6267\u884c defer \u4fee\u9970\u7684\u51fd\u6570\uff0c\u7136\u540e\u8fd4\u56de\u51fd\u6570\u8c03\u7528\u5904\u3002 \u800c recover \u662f\u4e13\u95e8\u7528\u6765\u6062\u590d panic \u7684\uff0c\u6240\u4ee5\u5fc5\u987b\u7528 defer \u4fee\u9970 recover \uff0c \u4e14 recover \u9700\u653e\u7f6e\u5728\u51fa\u73b0\u6216\u53ef\u80fd\u51fa\u73b0 panic \u7684\u5730\u65b9**\u4e4b\u524d**\uff0c\u5426\u5219\u4e00\u65e6\u53d1\u751f panic \uff0c\u7a0b\u5e8f\u63a7\u5236\u6d41\u5c31\u5f00\u59cb\u5f80\u56de\u8d70\uff0c panic \u4e0b \u65b9\u7684\u4efb\u4f55\u4ee3\u7801\u5305\u62ec defer \u4fee\u9970\u7684\u5730\u65b9\u4e5f\u4e0d\u4f1a\u6267\u884c\uff0c\u8fd9\u6837\u5c31\u6355\u83b7\u4e0d\u5230 panic \u4e86\u3002 {% endnoteblock %} eg\uff1a \u53d1\u751f\u6570\u7ec4\u4e0b\u6807\u8d8a\u754c\uff0c\u6ca1\u6709 recover \u65f6 func traverse ( a [ 5 ] int ) { for i := 0 ; i <= 5 ; i ++ { fmt . Println ( a [ i ]) } fmt . Println ( \"under for\" ) } func main () { defer fmt . Println ( \"main defer...\" ) a := [ 5 ] int { 1 , 2 , 3 , 4 , 5 } traverse ( a ) fmt . Println ( \"After div()...\" ) } // --------------------- // Output: 1 2 3 4 5 main defer ... panic : runtime error : index out of range [ 5 ] with length 5 goroutine 1 [ running ]: main . traverse ( 0x1 , 0x2 , 0x3 , 0x4 , 0x5 ) e : /--- CODE / GO / root / src / boii . xyz / study / Helloworld / main . go : 17 + 0xbe main . main () e : /--- CODE / GO / root / src / boii . xyz / study / Helloworld / main . go : 25 + 0x105 exit status 2 \u6700\u540e\u7684 exit status 2 \u8bf4\u660e\u7a0b\u5e8f\u662f\u975e\u6b63\u5e38\u9000\u51fa\u7684\u3002 \u4e0b\u9762\u662f\u4f7f\u7528\u4e86 recover \u7684\u6548\u679c func traverse ( a [ 5 ] int ) { defer func () { if msg := recover (); msg != nil { fmt . Println ( msg ) } }() for i := 0 ; i <= 5 ; i ++ { // \u8fd9\u91cc\u4f1a\u53d1\u751f\u6570\u7ec4\u4e0b\u6807\u8d8a\u754c\uff0c\u5f15\u53d1panic fmt . Println ( a [ i ]) } fmt . Println ( \"under for\" ) } func main () { defer fmt . Println ( \"main defer...\" ) a := [ 5 ] int { 1 , 2 , 3 , 4 , 5 } traverse ( a ) fmt . Println ( \"After div()...\" ) } // --------------------- // Output: 1 2 3 4 5 runtime error : index out of range [ 5 ] with length 5 After div () ... main defer ... \u53ef\u4ee5\u770b\u5230\uff0c\u53d1\u751f\u6570\u7ec4\u4e0b\u6807\u8d8a\u754c\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u5f15\u53d1 panic \uff0c\u7136\u540e\u5f00\u59cb\u6267\u884c defer \u51fd\u6570\uff1b \u5728 defer \u51fd\u6570\u91cc\u9047\u5230\u4e86 recover \uff0c\u4f7f\u5f97\u7a0b\u5e8f\u6062\u590d\u6b63\u5e38\u8fd0\u884c\uff0c\u6253\u5370\u4e86\u9519\u8bef\u4fe1\u606f\u540e\uff0c\u56de\u5230\u4e3b\u51fd\u6570\u7ee7\u7eed\u6267\u884c \u4f46\u662f\u6211\u4eec\u4f1a\u53d1\u73b0\u867d\u7136\u88ab recover \u6062\u590d\u4e86\uff0c\u4f46\u662f for \u5faa\u73af\u4e0b\u9762\u7684 \u8bed\u53e5\u4f9d\u7136\u4e0d\u4f1a\u6267\u884c\u3002 {% noteblock done %} \u7ed3\u8bba\uff1a recover \u5fc5\u987b\u7528 defer \u4fee\u9970 recover \u5fc5\u987b\u653e\u5728\u53ef\u80fd\u5f15\u53d1 panic \u7684\u5730\u65b9\u4e4b\u524d \u5373\u4f7f recover \u4e86\uff0c\u5728\u51fd\u6570\u91cc\uff0c\u5f15\u53d1 panic \u7684\u5730\u65b9\u4e0b\u9762\u90a3\u4e9b\u4ee3\u7801\u4f9d\u7136\u6ca1\u6709\u673a\u4f1a\u8fd0\u884c\u3002 {% endnoteblock %}","title":"14.\u9519\u8bef\u4e0e\u5f02\u5e38"},{"location":"Go/Basic/Golang-14-%E9%94%99%E8%AF%AF%E4%B8%8E%E5%BC%82%E5%B8%B8/#_1","text":"\u610f\u6599\u4e4b\u4e2d\u7684\u53eb**\u9519\u8bef** \u610f\u6599\u4e4b\u5916\u7684\u53eb**\u5f02\u5e38** \u9519\u8bef\uff1a\u662f\u6307\u53ef\u80fd\u51fa\u73b0\u95ee\u9898\u7684\u5730\u65b9\u51fa\u73b0\u4e86\u95ee\u9898\uff0c\u6bd4\u5982\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u65f6\u5931\u8d25\uff0c\u8fd9\u79cd\u60c5\u51b5\u662f\u5728\u610f\u6599\u4e4b\u4e2d\u7684\u3002 \u5f02\u5e38\uff1a\u662f\u6307\u4e0d\u5e94\u8be5\u51fa\u73b0\u95ee\u9898\u7684\u5730\u65b9\u51fa\u73b0\u4e86\u95ee\u9898\uff0c\u6bd4\u5982\u5f15\u7528\u4e86\u7a7a\u6307\u9488\uff0c\u8fd9\u79cd\u60c5\u51b5\u5728\u4eba\u4eec\u7684\u610f\u6599\u4e4b\u5916\u3002 \u6240\u4ee5\u9519\u8bef\u662f\u4e1a\u52a1\u8fc7\u7a0b\u7684\u4e00\u90e8\u5206\uff0c\u800c\u5f02\u5e38\u4e0d\u662f\u3002","title":"\u9519\u8bef\u4e0e\u5f02\u5e38"},{"location":"Go/Basic/Golang-14-%E9%94%99%E8%AF%AF%E4%B8%8E%E5%BC%82%E5%B8%B8/#_2","text":"Go \u4e2d\u9519\u8bef\u662f\u4e00\u79cd\u7c7b\u578b\u3002 \u9519\u8bef\u7528\u5185\u7f6e\u7684 error \u7c7b\u578b\u8868\u793a\u3002\u548c int\u3001float64 \u662f\u7b49\u4ef7\u7684\u3002 error \u662f\u4e00\u4e2a\u63a5\u53e3\uff0c\u63a5\u53e3\u662f\u4e00\u79cd\u7c7b\u578b\uff0c\u6240\u4ee5\u8bf4 error \u662f\u4e00\u79cd\u7c7b\u578b\u3002 type error interface { Error () string } error \u7c7b\u578b\u53ef\u4ee5\u5b58\u50a8\u9519\u8bef\u503c\uff0c\u4ece\u51fd\u6570\u4e2d\u8fd4\u56de\u7b49\u7b49\u3002 package main import ( \"fmt\" \"os\" ) func main () { f , err := os . Open ( \"test.txt\" ) if err != nil { fmt . Println ( err ) return } // \u6839\u636ef\u8fdb\u884c\u6587\u4ef6\u8bfb\u5199 fmt . Println ( f . Name (), \"opened successfully\" ) }","title":"\u9519\u8bef"},{"location":"Go/Basic/Golang-14-%E9%94%99%E8%AF%AF%E4%B8%8E%E5%BC%82%E5%B8%B8/#_3","text":"\u5728\u7f16\u5199\u6869\u6a21\u5757\u4f9b\u4eba\u8c03\u7528\u65f6\uff0c\u6211\u4eec\u4e0d\u77e5\u9053\u8c03\u7528\u8005\u4f1a\u4f20\u8fdb\u6765\u4ec0\u4e48\u53c2\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5bf9\u4f20\u8fdb\u6765\u7684\u53c2\u6570\u505a\u5224\u65ad\u3002 \u5982\u679c\u53d1\u751f\u9519\u8bef\u6211\u4eec\u9700\u8981\u8fdb\u884c\u5904\u7406\uff0c\u6216\u8005**\u629b\u51fa\u9519\u8bef**\u3002 \u8981\u629b\u51fa\u9519\u8bef\uff0c\u90a3\u5f97\u5148\u4f1a\u521b\u5efa\u9519\u8bef\u3002 \u521b\u5efa\u9519\u8bef\u6709\u4e24\u79cd\u65b9\u5f0f\uff1a \u901a\u8fc7 errors \u5305\u7684 New() \u51fd\u6570\u521b\u5efa\uff1a func New(errMsg string) error \u901a\u8fc7 fmt \u5305\u7684 Errorf() \u51fd\u6570\u521b\u5efa\uff1a func Errorf(format string, a ...interface{}) error \u521b\u5efa\u9519\u8bef errors . New ( string ) fmt . Errorf ( string , ... interface {}) \u8fd9\u4e24\u79cd\u65b9\u5f0f\u533a\u522b\u5728\u4e8e\uff1a fmt.Errorf() \u53ef\u4ee5\u4f7f\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u6765\u8fd4\u56de\u9519\u8bef\u4fe1\u606f\uff0c\u800c errors.New() \u4e0d\u80fd\u3002 eg\uff1a errors.New() \uff1a func div ( a , b float64 ) ( float64 , error ) { if b == 0 { return 0 , errors . New ( \"\u9664\u6570\u5c0f\u4e8e0\" ) } return a / b , nil } \u8c03\u7528\u7684\u6548\u679c\uff1a fmt . Println ( div ( 10 , 0 )) // \u9664\u6570\u5c0f\u4e8e0 fmt.Errorf() \uff1a func div ( a , b float64 ) ( float64 , error ) { if b == 0 { return 0 , fmt . Errorf ( \"\u9519\u8bef\u7801: [%d] \\t \u9664\u6570\u5c0f\u4e8e0\" , 100 ) } return a / b , nil } \u8c03\u7528\u7684\u6548\u679c\uff1a fmt . Println ( div ( 10 , 0 )) // 0 \u9519\u8bef\u7801: [100] \u9664\u6570\u5c0f\u4e8e0","title":"\u629b\u51fa\u9519\u8bef"},{"location":"Go/Basic/Golang-14-%E9%94%99%E8%AF%AF%E4%B8%8E%E5%BC%82%E5%B8%B8/#_4","text":"\u5f53\u6211\u4eec\u5199\u9a71\u52a8\u6a21\u5757\u7684\u65f6\u5019\uff0c\u5728\u8c03\u7528\u6869\u6a21\u5757\u65f6\u6709\u53ef\u80fd\u8fd4\u56de\u9519\u8bef\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5224\u65ad \u6700\u540e\u4e00\u4e2a\u8fd4\u56de\u503c err \uff08\u6700\u540e\u4e00\u4e2a\u8fd4\u56de\u503c\u8fd4\u56de\u9519\u8bef\u7c7b\u578b\uff0c\u8fd9\u662f\u7ea6\u5b9a\u4fd7\u6210\u7684\uff09\u6765\u5224\u65ad\u662f\u5426\u6709\u8fd4\u56de\u9519\u8bef\u3002 func main () { quotient , err := div ( 10 , 0 ) if err != nil { // \u6355\u83b7\u9519\u8bef fmt . Println ( err ) return } fmt . Println ( quotient ) }","title":"\u6355\u83b7\u9519\u8bef"},{"location":"Go/Basic/Golang-14-%E9%94%99%E8%AF%AF%E4%B8%8E%E5%BC%82%E5%B8%B8/#_5","text":"\u7b80\u7b80\u5355\u5355\u7684 Error.New() \u548c fmt.Errorf() \u6709\u65f6\u5019\u5e76\u4e0d\u80fd\u6ee1\u8db3\u6211\u4eec\u7684\u9700\u6c42\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u5f97\u81ea\u5b9a\u4e49\u9519\u8bef\u3002 \u81ea\u5b9a\u4e49\u9519\u8bef\u5206\u4e3a\u4e09\u6b65\uff1a \u521b\u5efa\u4e00\u4e2a\u7ed3\u6784\u4f53 \u5b9e\u73b0 error \u63a5\u53e3 \u5b9a\u4e49\u5176\u4ed6\u65b9\u6cd5 \u5176\u4e2d\u7b2c\u4e00\u6b65\u548c\u7b2c\u4e8c\u6b65\u662f\u5fc5\u9009\u7684\uff0c\u7b2c\u4e09\u6b65\u662f\u53ef\u9009\u7684\u3002 eg\uff1a \u81ea\u5b9a\u4e49\u9519\u8bef // \u521b\u5efa\u4e00\u4e2a\u7ed3\u6784\u4f53 type dataError struct { Err string height int weight int age int } // \u5b9e\u73b0 error \u63a5\u53e3\uff0c\u4f7f dataError \u6210\u4e3a error \u7c7b\u578b func ( d * dataError ) Error () string { return d . Err } // \u5b9a\u4e49\u5176\u4ed6\u65b9\u6cd5 func ( d * dataError ) heightNegativeError () bool { return d . height < 0 } func ( d * dataError ) weightNegativeError () bool { return d . weight < 0 } func ( d * dataError ) ageNegativeError () bool { return d . age <= 0 } \u629b\u51fa\u9519\u8bef type status = bool const ( SUCCESS = true // SUCCESS \u9a8c\u8bc1\u901a\u8fc7 FAIL = false // FAIL \u9a8c\u8bc1\u672a\u901a\u8fc7 ) type Person struct { height int weight int age int } // \u9a8c\u8bc1\u4e0d\u901a\u8fc7\u65f6\uff0c\u629b\u51fa\u9519\u8bef func variety ( p Person ) ( status , error ) { if p . height < 0 || p . weight < 0 || p . age < 0 { return FAIL , & dataError { \"\u6570\u636e\u6709\u8bef\" , p . height , p . weight , p . age } // \u629b\u51fa\u9519\u8bef } return SUCCESS , nil } \u6355\u83b7\u9519\u8bef func main () { p := Person { 178 , 120 , - 18 } s , err := variety ( p ) if err != nil { // \u6355\u83b7\u9519\u8bef fmt . Println ( \"Error:\" , err ) return } fmt . Println ( s , p ) } \u8f93\u51fa\u7ed3\u679c\uff1a $ go run main.go Error: \u6570\u636e\u6709\u8bef \u5982\u679c\u6355\u83b7\u5230\u4e86\u9519\u8bef\uff0c\u800c\u6211\u4eec\u53c8\u60f3\u8fdb\u4e00\u6b65\u5224\u65ad\u662f\u4ec0\u4e48\u9519\u8bef\uff0c\u9700\u8981\u7528\u5230 \u7c7b\u578b\u65ad\u8a00 \u3002 func main () { p := Person { 178 , 120 , - 18 } s , err := variety ( p ) if err != nil { // \u6355\u83b7\u9519\u8bef if ins , ok := err .( * dataError ); ok { // \u7c7b\u578b\u65ad\u8a00\uff0c\u5224\u65ad\u662f\u54ea\u79cd\u9519\u8bef switch { // \u6355\u83b7\u540e\u7684\u5904\u7406\uff0c\u53ef\u4ee5\u6253\u5370\u9519\u8bef\u4fe1\u606f\uff0c\u4e5f\u53ef\u4ee5\u53d6\u4e2a\u7edd\u5bf9\u503c\u7b49\u5176\u4ed6\u64cd\u4f5c\u3002 case ins . heightNegativeError (): ins . Err = \"\u8eab\u9ad8\u4e3a\u8d1f\" case ins . weightNegativeError (): ins . Err = \"\u4f53\u91cd\u4e3a\u8d1f\" case ins . ageNegativeError (): ins . Err = \"\u5e74\u9f84\u4e3a\u8d1f\" } fmt . Println ( \"Error:\" , ins ) } return } fmt . Println ( s , p ) } \u8f93\u51fa\u7ed3\u679c\uff1a $ go run main.go Error: \u5e74\u9f84\u4e3a\u8d1f","title":"\u81ea\u5b9a\u4e49\u9519\u8bef"},{"location":"Go/Basic/Golang-14-%E9%94%99%E8%AF%AF%E4%B8%8E%E5%BC%82%E5%B8%B8/#_6","text":"\u5f53\u4e00\u4e2a\u7a0b\u5e8f\u9047\u5230\u610f\u6599\u4e4b\u5916\u7684\u9519\u8bef\u65f6\uff0c\u5e94\u8be5\u629b\u51fa\u5f02\u5e38\uff0c\u505c\u6b62\u7a0b\u5e8f\u7684\u8fd0\u884c\u3002 Go \u4e2d\u5f15\u5165\u4e24\u4e2a\u5185\u7f6e\u51fd\u6570 panic() \u548c recover() \u6765\u51fa\u53d1\u548c\u7ec8\u6b62\u5f02\u5e38\u5904\u7406\u6d41\u7a0b\uff0c\u540c\u65f6\u5f15\u5165\u5173\u952e\u5b57 defer \u6765\u5ef6\u8fdf\u6267\u884c\u5ef6\u8fdf\u51fd\u6570\u3002","title":"\u5f02\u5e38"},{"location":"Go/Basic/Golang-14-%E9%94%99%E8%AF%AF%E4%B8%8E%E5%BC%82%E5%B8%B8/#defer","text":"func fn () { fmt . Println ( \"start\" ) defer fmt . Println ( 1 ) defer fmt . Println ( 2 ) defer fmt . Println ( 3 ) fmt . Println ( \"end\" ) } // --------------------- // Output: start end 3 2 1 \u5148 defer \u7684\u540e\u6267\u884c\uff0c\u540e defer \u7684\u5148\u6267\u884c","title":"\u590d\u4e60\u4e00\u4e0b defer"},{"location":"Go/Basic/Golang-14-%E9%94%99%E8%AF%AF%E4%B8%8E%E5%BC%82%E5%B8%B8/#panic","text":"\u5185\u7f6e\u51fd\u6570 \u53d1\u751f panic \u7684\u60c5\u51b5\u6709\u4e24\u79cd\uff1a \u624b\u52a8\u629b\u51fa\uff0c\u5373\u7f16\u5199 panic \u8bed\u53e5 \u7a0b\u5e8f\u53d1\u751f\u9519\u8bef\u7531\u7cfb\u7edf\u629b\u51fa\u3002 \u5982\u679c\u51fd\u6570\u4e2d\u51fa\u73b0\u4e86 panic \u8bed\u53e5\uff0c\u5219\u4e0d\u4f1a\u7ee7\u7eed\u6267\u884c panic \u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u800c\u662f\u4f1a\u9006\u5e8f\u6267\u884c defer \u4fee\u9970\u7684\u51fd\u6570\uff0c\u7136\u540e\u8fd4\u56de\u8c03\u7528\u5904 \u5982\u679c\u4e00\u8def\u90fd\u6ca1\u6709\u9047\u5230 recover() \uff0c\u5219\u4e00\u8def\u4f20\u9012\u56de\u6240\u5728\u534f\u7a0b\u7684\u8d77\u70b9\uff0c\u7136\u540e\u8be5\u534f\u7a0b\u7ed3\u675f\uff0c\u7ec8\u6b62\u5176\u4ed6\u6240\u6709\u534f\u7a0b\uff08\u5305\u62ec\u4e3b\u534f\u7a0b\uff09\u3002 \u6700\u7ec8\u6574\u4e2a goroutine \u9000\u51fa\uff0c\u62a5\u544a\u9519\u8bef\u3002 panic \u7684\u7b7e\u540d\u5982\u4e0b\uff1a func panic ( v interface {}) panic \u4e2d\u63a5\u53d7\u4e00\u4e2a\u4efb\u4f55\u7c7b\u578b\u7684\u53c2\u6570\uff0c\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2a\u9519\u8bef\u6d88\u606f\u7684\u5b57\u7b26\u4e32\uff0c\u4e5f\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2a\u9519\u8bef\u7801\u3002 eg\uff1a func fn () { fmt . Println ( \"start\" ) defer fmt . Println ( 1 ) defer fmt . Println ( 2 ) panic ( 100 ) defer fmt . Println ( 3 ) fmt . Println ( \"end\" ) } func main () { defer fmt . Println ( \"main defer...\" ) fn () fmt . Println ( \"After fn()...\" ) } // --------------------- // Output: start 2 1 main defer ... panic : 100 goroutine 1 [ running ]: main . fn () e : /--- CODE / GO / root / src / boii . xyz / study / Helloworld / main . go : 19 + 0x166 main . main () e : /--- CODE / GO / root / src / boii . xyz / study / Helloworld / main . go : 26 + 0x27 exit status 2 \u53ef\u4ee5\u770b\u51fa\u53d1\u751f panic \u4e4b\u540e\uff0c\u5728 panic \u4e4b\u524d defer \u7684\u4ee3\u7801\u4f9d\u7136\u4f1a\u9006\u5e8f\u6267\u884c\uff0c\u7136\u540e\u56de\u5230\u8c03\u7528\u5904\u3002 \u4e0a\u9762\u7684\u4f8b\u5b50\u6267\u884c\u5b8c fn() \u4e2d defer \u51fd\u6570\u540e\uff0c\u4fbf\u8fd4\u56de\u4e86 main() \u51fd\u6570\uff0c \u63a5\u7740\u6267\u884c \u65e9\u5728\u8c03\u7528 fn() \u4e4b\u524d\u5c31 defer \u7684 \u6253\u5370\u8bed\u53e5\uff0c\u7136\u540e\u5c31\u7ec8\u6b62\u7a0b\u5e8f\u4e86\u3002 {% note done, \u7ed3\u8bba\uff1a defer\u51fd\u6570 \u7684\u6267\u884c \u4f18\u5148\u4e8e panic %}","title":"panic"},{"location":"Go/Basic/Golang-14-%E9%94%99%E8%AF%AF%E4%B8%8E%E5%BC%82%E5%B8%B8/#recover","text":"\u5185\u7f6e\u51fd\u6570 \u7528\u6765\u7ec8\u6b62\u4e00\u4e2a\u534f\u7a0b\u4e2d\u7684 panicking \u884c\u4e3a\uff0c\u6355\u83b7 panic \uff0c\u4ece\u800c\u5f71\u54cd\u5e94\u7528\u7684\u884c\u4e3a\u3002 recover \u9700\u8981\u7528 defer \u4fee\u9970\u3002 \u4e00\u822c\u7684\u8c03\u7528\u5efa\u8bae\uff1a \u5728 defer \u51fd\u6570\u4e2d\uff0c\u901a\u8fc7 recover \u6765\u7ec8\u6b62\u4e00\u4e2a \u534f\u7a0b\u7684 panicking \u8fc7\u7a0b\uff0c\u4ece\u800c\u6062\u590d\u6b63\u5e38\u4ee3\u7801\u7684\u6267\u884c \u53ef\u4ee5\u83b7\u53d6\u901a\u8fc7 panic \u4f20\u9012\u7684 error \u7b80\u800c\u8a00\u4e4b\uff0cgo\u4e2d\u53ef\u4ee5\u629b\u51fa\u4e00\u4e2a panic \u7684\u5f02\u5e38\uff0c\u7136\u540e\u5728 defer \u4e2d\u901a\u8fc7 recover \u6355\u83b7\u8fd9\u4e2a\u5f02\u5e38\uff0c\u7136\u540e\u6b63\u5e38\u5904\u7406\u3002 {% noteblock warning %} Q\uff1a\u4e3a\u4ec0\u4e48 recover \u9700\u8981 defer \u4fee\u9970\uff1f A\uff1a\u56e0\u4e3a\u53d1\u751f panic \u540e\uff0c\u53ea\u4f1a\u6267\u884c defer \u4fee\u9970\u7684\u51fd\u6570\uff0c\u7136\u540e\u8fd4\u56de\u51fd\u6570\u8c03\u7528\u5904\u3002 \u800c recover \u662f\u4e13\u95e8\u7528\u6765\u6062\u590d panic \u7684\uff0c\u6240\u4ee5\u5fc5\u987b\u7528 defer \u4fee\u9970 recover \uff0c \u4e14 recover \u9700\u653e\u7f6e\u5728\u51fa\u73b0\u6216\u53ef\u80fd\u51fa\u73b0 panic \u7684\u5730\u65b9**\u4e4b\u524d**\uff0c\u5426\u5219\u4e00\u65e6\u53d1\u751f panic \uff0c\u7a0b\u5e8f\u63a7\u5236\u6d41\u5c31\u5f00\u59cb\u5f80\u56de\u8d70\uff0c panic \u4e0b \u65b9\u7684\u4efb\u4f55\u4ee3\u7801\u5305\u62ec defer \u4fee\u9970\u7684\u5730\u65b9\u4e5f\u4e0d\u4f1a\u6267\u884c\uff0c\u8fd9\u6837\u5c31\u6355\u83b7\u4e0d\u5230 panic \u4e86\u3002 {% endnoteblock %} eg\uff1a \u53d1\u751f\u6570\u7ec4\u4e0b\u6807\u8d8a\u754c\uff0c\u6ca1\u6709 recover \u65f6 func traverse ( a [ 5 ] int ) { for i := 0 ; i <= 5 ; i ++ { fmt . Println ( a [ i ]) } fmt . Println ( \"under for\" ) } func main () { defer fmt . Println ( \"main defer...\" ) a := [ 5 ] int { 1 , 2 , 3 , 4 , 5 } traverse ( a ) fmt . Println ( \"After div()...\" ) } // --------------------- // Output: 1 2 3 4 5 main defer ... panic : runtime error : index out of range [ 5 ] with length 5 goroutine 1 [ running ]: main . traverse ( 0x1 , 0x2 , 0x3 , 0x4 , 0x5 ) e : /--- CODE / GO / root / src / boii . xyz / study / Helloworld / main . go : 17 + 0xbe main . main () e : /--- CODE / GO / root / src / boii . xyz / study / Helloworld / main . go : 25 + 0x105 exit status 2 \u6700\u540e\u7684 exit status 2 \u8bf4\u660e\u7a0b\u5e8f\u662f\u975e\u6b63\u5e38\u9000\u51fa\u7684\u3002 \u4e0b\u9762\u662f\u4f7f\u7528\u4e86 recover \u7684\u6548\u679c func traverse ( a [ 5 ] int ) { defer func () { if msg := recover (); msg != nil { fmt . Println ( msg ) } }() for i := 0 ; i <= 5 ; i ++ { // \u8fd9\u91cc\u4f1a\u53d1\u751f\u6570\u7ec4\u4e0b\u6807\u8d8a\u754c\uff0c\u5f15\u53d1panic fmt . Println ( a [ i ]) } fmt . Println ( \"under for\" ) } func main () { defer fmt . Println ( \"main defer...\" ) a := [ 5 ] int { 1 , 2 , 3 , 4 , 5 } traverse ( a ) fmt . Println ( \"After div()...\" ) } // --------------------- // Output: 1 2 3 4 5 runtime error : index out of range [ 5 ] with length 5 After div () ... main defer ... \u53ef\u4ee5\u770b\u5230\uff0c\u53d1\u751f\u6570\u7ec4\u4e0b\u6807\u8d8a\u754c\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u5f15\u53d1 panic \uff0c\u7136\u540e\u5f00\u59cb\u6267\u884c defer \u51fd\u6570\uff1b \u5728 defer \u51fd\u6570\u91cc\u9047\u5230\u4e86 recover \uff0c\u4f7f\u5f97\u7a0b\u5e8f\u6062\u590d\u6b63\u5e38\u8fd0\u884c\uff0c\u6253\u5370\u4e86\u9519\u8bef\u4fe1\u606f\u540e\uff0c\u56de\u5230\u4e3b\u51fd\u6570\u7ee7\u7eed\u6267\u884c \u4f46\u662f\u6211\u4eec\u4f1a\u53d1\u73b0\u867d\u7136\u88ab recover \u6062\u590d\u4e86\uff0c\u4f46\u662f for \u5faa\u73af\u4e0b\u9762\u7684 \u8bed\u53e5\u4f9d\u7136\u4e0d\u4f1a\u6267\u884c\u3002 {% noteblock done %} \u7ed3\u8bba\uff1a recover \u5fc5\u987b\u7528 defer \u4fee\u9970 recover \u5fc5\u987b\u653e\u5728\u53ef\u80fd\u5f15\u53d1 panic \u7684\u5730\u65b9\u4e4b\u524d \u5373\u4f7f recover \u4e86\uff0c\u5728\u51fd\u6570\u91cc\uff0c\u5f15\u53d1 panic \u7684\u5730\u65b9\u4e0b\u9762\u90a3\u4e9b\u4ee3\u7801\u4f9d\u7136\u6ca1\u6709\u673a\u4f1a\u8fd0\u884c\u3002 {% endnoteblock %}","title":"recover"},{"location":"Go/Basic/Golang-15-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/","text":"\u5355\u5143\u6d4b\u8bd5\u7684\u521b\u5efa\u4e0e\u4f7f\u7528 \u5355\u5143\u6d4b\u8bd5 \u00b6 Golang \u7684\u5355\u5143\u6d4b\u8bd5\u4f9d\u8d56 go test \u547d\u4ee4\uff0c\u7f16\u5199\u6d4b\u8bd5\u4ee3\u7801\u548c\u7f16\u5199\u666e\u901a\u4ee3\u7801\u4e00\u6837\uff0c\u53ea\u9700\u8981\u9075\u5faa\u4e00\u5b9a\u7684\u89c4\u5219\u5373\u53ef\u3002 go test \u547d\u4ee4\u662f\u4e00\u4e2a\u6309\u7167\u4e00\u5b9a\u7ea6\u5b9a\u548c\u7ec4\u7ec7\u7684\u6d4b\u8bd5\u4ee3\u7801\u7684\u9a71\u52a8\u7a0b\u5e8f\u3002 \u6240\u6709\u4ee5 _text.go \u4e3a\u540e\u7f00\u7684\u6e90\u4ee3\u7801\u6587\u4ef6\u90fd\u662f go test \u6d4b\u8bd5\u7684\u4e00\u90e8\u5206\uff0c\u4e0d\u4f1a\u88ab go build \u7f16\u8bd1\u5230\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\uff1b \u6d4b\u8bd5\u6587\u4ef6 xxx_test.go \u4e2d\u6709\u4e09\u79cd\u7c7b\u578b\u51fd\u6570\uff1a \u5355\u5143\u6d4b\u8bd5\u51fd\u6570 \u3001 \u57fa\u51c6\u6d4b\u8bd5\u51fd\u6570 \u3001 \u793a\u4f8b\u51fd\u6570 . \u7c7b\u578b \u524d\u7f00 \u683c\u5f0f \u4f5c\u7528 \u5355\u5143\u6d4b\u8bd5\u51fd\u6570 Test TestTTT(t *testing.T) \u6d4b\u8bd5\u7a0b\u5e8f\u7684\u903b\u8f91\u6027\u4e3a\u662f\u5426\u6b63\u786e \u57fa\u51c6\u6d4b\u8bd5\u51fd\u6570 Benchmark BenchmarkBBB(b *testing.B) \u6d4b\u8bd5\u7a0b\u5e8f\u7684\u6027\u80fd \u793a\u4f8b\u51fd\u6570 Example ExampleEEE() \u4e3a\u6587\u6863\u63d0\u4f9b\u793a\u4f8b \u5728 go test \u547d\u4ee4\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4f1a\u904d\u5386\u6240\u6709 _text.go \u6587\u4ef6\u4e2d\u6240\u6709\u5e26\u6709\u4e0a\u8ff0\u524d\u7f00\u7684\u51fd\u6570\uff0c\u751f\u6210\u4e00\u4e2a\u4e34\u65f6 main \u5305\u7528\u4e8e\u8c03\u7528\u76f8\u5e94\u7684\u6d4b\u8bd5\u51fd\u6570\uff0c\u7136\u540e\u7f16\u8bd1\u3001\u8fd0\u884c\u3001\u62a5\u544a\u6d4b\u8bd5\u7ed3\u679c\u3001\u6e05\u7406\u4e34\u65f6\u6587\u4ef6\u3002 go test \u547d\u4ee4 \u00b6 \u57fa\u672c\u547d\u4ee4\u662f go test \uff0c\u6709\u5f88\u591a\u53c2\u6570\u53ef\u9009\uff0c go test [ build/flags ] [ packages ] [ build/test flags & test binary flags ] flags: -v : \u6253\u5370\u6d4b\u8bd5\u8fc7\u7a0b -cover : \u6253\u5370\u6d4b\u8bd5\u8986\u76d6\u7387 -bench : \u6267\u884c\u57fa\u51c6\u6d4b\u8bd5 ... packages: packages \u4e5f\u5c31\u662f\u8981\u6267\u884c\u6d4b\u8bd5\u7684\u6587\u4ef6\uff0c\u6709\u4e24\u79cd\u6a21\u5f0f\uff1a \u5f53\u524d\u76ee\u5f55\u6a21\u5f0f\uff08local directory mode\uff09 \u548c \u5305\u5217\u8868\u6a21\u5f0f\uff08package list mode\uff09 \u5f53\u524d\u76ee\u5f55\u6a21\u5f0f \uff1a\u6ca1\u6709\u586b\u5199\u5177\u4f53\u7684\u5305\u540d\u65f6\u5c31\u662f\u8fd9\u4e2a\u6a21\u5f0f\u3002 \u6bd4\u5982\u6267\u884c\u547d\u4ee4 go test \u6216 go test -v \u65f6\uff0c\u5c31\u662f\u8fd9\u79cd\u6a21\u5f0f\u3002 \u8fd9\u79cd\u6a21\u5f0f\u4e0b\u4f1a\u6267\u884c\u5f53\u524d\u76ee\u5f55\u4e0b\u7684 *_test.go \u6587\u4ef6\u7684\u6d4b\u8bd5\u7528\u4f8b\u3002 \u9ed8\u8ba4\u4e0d\u5f00\u542f\u7f13\u5b58\uff0c\u4e5f\u5c31\u662f\u4e0d\u4f1a\u7f13\u5b58\u4e0a\u6b21\u6d4b\u8bd5\u7684\u7ed3\u679c\u3002 \u5305\u5217\u8868\u6a21\u5f0f \uff1a\u586b\u5199\u4e86\u5177\u4f53\u7684\u5305\u540d\u65f6\u5c31\u662f\u8fd9\u4e2a\u6a21\u5f0f\u3002 \u6bd4\u5982\u6267\u884c\u547d\u4ee4 go test . \u3001 go test ./.../... \u6216 go test package_name \u8fd9\u79cd\u6a21\u5f0f\u4e0b\u4f1a\u6267\u884c\u6307\u5b9a\u7684\u5305\u4e2d\u7684\u6d4b\u8bd5\u6587\u4ef6\u3002 \u9ed8\u8ba4\u5f00\u542f\u7f13\u5b58\uff0c\u4e5f\u5c31\u662f\u4f1a\u7f13\u5b58\u4e0a\u6b21\u6d4b\u8bd5\u7684\u7ed3\u679c\u3002\u53ef\u4ee5\u901a\u8fc7 -count=1 \u5173\u95ed\u7f13\u5b58\u3002 \u5355\u5143\u6d4b\u8bd5 \u00b6 \u57fa\u672c\u683c\u5f0f \u00b6 \u6d4b\u8bd5\u51fd\u6570\u5fc5\u987b\u4ee5 Test \u5f00\u5934 \u6d4b\u8bd5\u51fd\u6570\u53c2\u6570\u5fc5\u987b\u5305\u542b\u4e00\u4e2a\u5f62\u53c2 *testing.T \u6d4b\u8bd5\u51fd\u6570\u6ca1\u6709\u8fd4\u56de\u503c func TestFib ( t * testing . T ) { // ... } func TestSiztFmt ( t * testing . T , n int ) { // ... } \u53c2\u6570 t \u7528\u4e8e\u62a5\u544a\u6d4b\u8bd5\u6210\u529f\u3001\u5931\u8d25\u3001\u65e5\u5fd7\u7b49\u4fe1\u606f\uff0c\u5176\u5305\u542b\u5982\u4e0b\u65b9\u6cd5\uff1a func ( c * T ) Error ( args ... interface {}) func ( c * T ) Errorf ( format string , args ... interface {}) func ( c * T ) Fail () func ( c * T ) FailNow () func ( c * T ) Failed () bool func ( c * T ) Fatal ( args ... interface {}) func ( c * T ) Fatalf ( format string , args ... interface {}) func ( c * T ) Log ( args ... interface {}) func ( c * T ) Logf ( format string , args ... interface {}) func ( c * T ) Name () string func ( t * T ) Parallel () func ( t * T ) Run ( name string , f func ( t * T )) bool func ( c * T ) Skip ( args ... interface {}) func ( c * T ) SkipNow () func ( c * T ) Skipf ( format string , args ... interface {}) func ( c * T ) Skipped () bool \u6700\u7b80\u5355\u7684\u5355\u5143\u6d4b\u8bd5 \u00b6 \u7f16\u5199\u4e00\u4e2a\u6590\u6ce2\u90a3\u5951\u6570\u5217\uff0c\u7136\u540e\u7f16\u5199\u5355\u5143\u6d4b\u8bd5\u3002 // fib.go package fib func Fib ( n int ) int { if n < 2 { return n } return Fib ( n - 1 ) + Fib ( n - 2 ) } // fib_test.go package fib import \"testing\" // \u5355\u5143\u6d4b\u8bd5\u51fd\u6570\uff0c\u4ee5 Test\u5f00\u5934 func TestFib ( t * testing . T ) { var ( input = 7 // \u8f93\u5165\u6570\u636e expected = 13 // \u671f\u671b\u7ed3\u679c ) actual := Fib ( input ) // \u7a0b\u5e8f\u6267\u884c\u7ed3\u679c // \u5982\u679c\u4e0e\u671f\u671b\u7ed3\u679c\u4e0d\u4e00\u81f4\uff0c\u5219\u8f93\u51fa\u9519\u8bef\u63d0\u793a\u3002 if actual != expected { t . Errorf ( \"Fib(%d) = %d; expected %d\" , input , actual , expected ) } } $ go test PASS ok goTest 0 .002s $ pwd ~/---FILE---/---CODE/GoProject/playground/goTest $ tree -L 2 . goTest \u251c\u2500\u2500 fib.go \u251c\u2500\u2500 fib_test.go \u2514\u2500\u2500 go.mod \u8fd9\u662f\u6d4b\u8bd5\u901a\u8fc7\u7684\u7ed3\u679c\uff0c\u5982\u679c\u6211\u4eec\u7684 Fib() \u5199\u9519\u4e86\uff0c\u5219\u4f1a\u8f93\u51fa\u4e0e\u671f\u671b\u503c\u4e0d\u540c\u7684\u7ed3\u679c\uff0c\u5e76\u62a5\u544a\u9519\u8bef\u3002 \u73b0\u5728\u5c06 Fib() \u7a0d\u5fae\u4fee\u6539\u4e00\u4e0b\uff0c\u6d4b\u8bd5\u6587\u4ef6\u4e0d\u52a8\uff0c\u518d\u6b21\u6267\u884c go test // fib.go package fib func Fib ( n int ) int { if n < 2 { return n } // return Fib(n-1) + Fib(n-2) return Fib ( n - 1 ) + Fib ( n - 1 ) // \u4fee\u6539\u4e00\u4e0b } $ go test --- FAIL: TestFib ( 0 .00s ) fib_test.go:12: Fib ( 7 ) = 64 ; expected 13 FAIL exit status 1 FAIL goTest 0 .002s \u6d4b\u8bd5\u7ec4 \u00b6 \u5355\u5355\u6d4b\u8bd5\u4e00\u4e2a\u4f8b\u5b50\u4e0d\u591f\uff0c\u6211\u4eec\u9700\u8981\u591a\u6d4b\u8bd5\u51e0\u79cd\u60c5\u51b5\uff0c\u624d\u80fd\u66f4\u597d\u7684\u4fdd\u8bc1\u6211\u4eec\u7a0b\u5e8f\u7684\u5065\u58ee\u6027\u3002 \u5728\u5355\u5143\u6d4b\u8bd5\u51fd\u6570\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u6d4b\u8bd5\u7528\u4f8b\u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u7136\u540e\u521b\u5efa\u4e00\u4e2a\u7ed3\u6784\u4f53\u5207\u7247\uff0c\u5c06\u6d4b\u8bd5\u7528\u4f8b\u90fd\u653e\u5728\u91cc\u9762\u3002 \u904d\u5386\u8fd9\u4e2a\u5207\u7247\u5c31\u53ef\u4ee5\u6d4b\u8bd5\u8fd9\u4e00\u6574\u7ec4\u6d4b\u8bd5\u7528\u4f8b\u3002 // fib_test.go package fib import \"testing\" func TestFib ( t * testing . T ) { type test struct { // \u5b9a\u4e49\u4e00\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u7ed3\u6784\u4f53 in int want int } // \u521b\u5efa\u4e00\u4e2a\u7ed3\u6784\u4f53\u5207\u7247\u5b58\u653e\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b tests := [] test { { in : 7 , want : 13 }, { in : 10 , want : 55 }, { in : 1 , want : 1 }, { in : 2 , want : 1 }, { in : - 1 , want : - 1 }, } // \u904d\u5386\u7ed3\u6784\u4f53\u5207\u7247\uff0c\u9010\u4e00\u6d4b\u8bd5\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b for _ , tc := range tests { if got := Fib ( tc . in ); got != tc . want { t . Errorf ( \"Fib(%d) = %d; expected %d\" , tc . in , got , tc . want ) } } } \u5b9a\u4e49\u6d4b\u8bd5\u7528\u4f8b\u7ed3\u6784\u4f53 \u521b\u5efa\u6d4b\u8bd5\u7528\u4f8b\u7ed3\u6784\u4f53\u5207\u7247\uff0c\u653e\u7f6e\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b \u904d\u5386\u5207\u7247\u9010\u4e00\u6d4b\u8bd5\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b # \u6d4b\u8bd5\u6210\u529f $ go test PASS ok goTest 0 .002s \u63a5\u7740\u4fee\u6539 Fib() \u8ba9\u5176\u51fa\u9519\uff0c\u518d\u8fdb\u884c\u6d4b\u8bd5 # \u6d4b\u8bd5\u5931\u8d25 $ go test --- FAIL: TestFib ( 0 .00s ) fib_test.go:21: Fib ( 7 ) = 64 ; expected 13 fib_test.go:21: Fib ( 10 ) = 512 ; expected 55 fib_test.go:21: Fib ( 2 ) = 2 ; expected 1 FAIL exit status 1 FAIL goTest 0 .002s \u5b50\u6d4b\u8bd5 \u00b6 \u6d4b\u8bd5\u7ec4\u5728\u6d4b\u8bd5\u7528\u4f8b\u5c11\u7684\u65f6\u5019\u8fd8\u6bd4\u8f83\u597d\u5904\u7406\uff0c\u4f46\u662f\u7528\u4f8b\u591a\u8d77\u6765\u7684\u65f6\u5019\u5c31\u6ca1\u6cd5\u76f4\u63a5\u770b\u51fa\u662f\u54ea\u4e9b\u7528\u4f8b\u4e0d\u901a\u8fc7\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5b98\u65b9\u63d0\u4f9b\u7684\u5b50\u6d4b\u8bd5\u3002 \u8fd8\u662f\u4e00\u6837\u5b9a\u4e49\u4e00\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u7ed3\u6784\u4f53\uff0c\u4f46\u63a5\u7740\u6211\u4eec\u4e0d\u662f\u521b\u5efa\u7ed3\u6784\u4f53\u5207\u7247\uff0c\u800c\u662f\u521b\u5efa\u7ed3\u6784\u4f53 map \u5b58\u653e\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b\uff0c\u904d\u5386\u7ed3\u6784\u4f53 map\uff0c\u9010\u4e00\u8c03\u7528 t.Run() \u6765\u6d4b\u8bd5\u6bcf\u4e00\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u3002 // fib_test.go package fib import \"testing\" func TestFib ( t * testing . T ) { type test struct { // \u5b9a\u4e49\u4e00\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u7ed3\u6784\u4f53 in int want int } // \u521b\u5efa\u4e00\u4e2a\u7ed3\u6784\u4f53\u5207\u7247\u5b58\u653e\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b tests := map [ string ] test { \"case7\" : { in : 7 , want : 13 }, \"case10\" : { in : 10 , want : 55 }, \"case1\" : { in : 1 , want : 1 }, \"case2\" : { in : 2 , want : 1 }, \"case_negative\" : { in : - 1 , want : - 1 }, } for name , tc := range tests { t . Run ( name , func ( t * testing . T ) { if got := Fib ( tc . in ); got != tc . want { t . Errorf ( \"Fib(%d) = %d; expected %d\" , tc . in , got , tc . want ) } }) } } t.Run() \u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a\u662f\u6d4b\u8bd5\u7528\u4f8b\u7684\u540d\u5b57\uff0c\u4e5f\u5c31\u662f map \u4e2d\u7684 key\uff0c\u53e6\u4e00\u4e2a\u662f\u4e00\u4e2a func(t *testing.T) \u51fd\u6570\uff0c\u5728\u51fd\u6570\u4e2d\u5199\u4e0a\u5177\u4f53\u7684\u6d4b\u8bd5\u4ee3\u7801\u3002 \u6267\u884c\u65f6\u5e26\u4e0a -v \u53c2\u6570\uff0c\u53ef\u4ee5\u5f88\u76f4\u89c2\u770b\u51fa\u54ea\u4e9b\u7528\u4f8b\u901a\u8fc7\u4e86 (PASS) \u54ea\u4e9b\u6ca1\u901a\u8fc7 (FAIL) $ go test -v === RUN TestFib === RUN TestFib/case7 fib_test.go:22: Fib ( 7 ) = 64 ; expected 13 === RUN TestFib/case10 fib_test.go:22: Fib ( 10 ) = 512 ; expected 55 === RUN TestFib/case1 === RUN TestFib/case2 fib_test.go:22: Fib ( 2 ) = 2 ; expected 1 === RUN TestFib/case_negative --- FAIL: TestFib ( 0 .00s ) --- FAIL: TestFib/case7 ( 0 .00s ) --- FAIL: TestFib/case10 ( 0 .00s ) --- PASS: TestFib/case1 ( 0 .00s ) --- FAIL: TestFib/case2 ( 0 .00s ) --- PASS: TestFib/case_negative ( 0 .00s ) FAIL exit status 1 FAIL goTest 0 .002s \u6267\u884c\u65f6\u5e26\u4e0a -run \u53c2\u6570\u8fd8\u53ef\u4ee5\u6307\u5b9a\u8fd0\u884c\u54ea\u4e00\u4e2a\u6d4b\u8bd5\u7528\u4f8b $ go test . -v -run = TestFib/case7 === RUN TestFib === RUN TestFib/case7 fib_test.go:22: Fib ( 7 ) = 64 ; expected 13 --- FAIL: TestFib ( 0 .00s ) --- FAIL: TestFib/case7 ( 0 .00s ) FAIL exit status 1 FAIL goTest 0 .002s $ go test . -v -run = Fib/case_negative === RUN TestFib === RUN TestFib/case_negative --- PASS: TestFib ( 0 .00s ) --- PASS: TestFib/case_negative ( 0 .00s ) PASS ok goTest 0 .002s -run=RegExp \uff0c -run \u53c2\u6570\u540e\u5e26\u7684\u662f\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u4f46\u662f\u4e00\u822c\u90fd\u50cf\u8fd9\u6837\u4f7f\u7528\uff1a -run=X/Y \uff0c\u5176\u4e2d\uff1a X \u662f TestAAA \u4e2d\u7684 AAA \uff0c\u6216\u8005\u76f4\u63a5\u5199\u5168: TestAAA \uff0c Y \u662f\u6d4b\u8bd5\u7528\u4f8b\u7ed3\u6784\u4f53 map \u7684 key\u3002\u5982\u4e0a\u9762\u4f8b\u5b50\u4e2d -run=Fib/case_negative \u7684 case_negative \u5c31\u662f key\u3002 \u8986\u76d6\u7387 \u00b6 \u8986\u76d6\u7387\u5c31\u662f\u4f60\u7684\u4ee3\u7801\u88ab\u6d4b\u8bd5\u7528\u4f8b\u8986\u76d6\u7684\u767e\u5206\u6bd4\u3002\u901a\u5e38\u8fd9\u4e2a\u8986\u76d6\u6307 \u8bed\u53e5\u8986\u76d6 \u3002 \u8f93\u51fa\u8986\u76d6\u7387\u6709\u4e24\u79cd\u65b9\u5f0f\uff1a -cover \u3001 -coverprofile=outfile \u4f7f\u7528 -cover \u53ef\u4ee5\u6253\u5370\u4ee3\u7801\u8986\u76d6\u7387\u3002 \u4f7f\u7528 -coverprofile \u53ef\u4ee5\u5c06\u66f4\u8be6\u7ec6\u7684\u8986\u76d6\u4fe1\u606f\u8f93\u51fa\u5230\u6307\u5b9a\u6587\u4ef6\u4e2d\u3002 -cover $ go test -cover PASS coverage: 100 .0% of statements ok goTest 0 .002s -coverprofile $ go test -coverprofile = fib.cover $ tree -L 2 . goTest \u251c\u2500\u2500 fib.cover \u251c\u2500\u2500 fib.go \u251c\u2500\u2500 fib_test.go \u2514\u2500\u2500 go.mod $ go tool cover -html = fib.cover \u4f7f\u7528 go tool cover -html=\u5236\u5b9a\u6587\u4ef6 \u547d\u4ee4\u4f1a\u6253\u5f00\u9ed8\u8ba4\u6d4f\u89c8\u5668\u663e\u793a\u5177\u4f53\u7684\u8986\u76d6\u7387\u4fe1\u606f\u3002 \u5982\u4e0a\u56fe\uff0c\u7eff\u8272\u8868\u793a\u88ab\u8986\u76d6\u7684\u8bed\u53e5\uff0c\u7ea2\u8272\u8868\u793a\u672a\u88ab\u8986\u76d6\u7684\u8bed\u53e5\uff0c\u7070\u8272\u8868\u793a\u672a\u8ffd\u8e2a\u7684\u8bed\u53e5\u3002 \u57fa\u51c6\u6d4b\u8bd5 \u00b6 \u57fa\u672c\u683c\u5f0f \u00b6 \u6d4b\u8bd5\u51fd\u6570\u5fc5\u987b\u4ee5 Benchmark \u5f00\u5934 \u6d4b\u8bd5\u51fd\u6570\u53c2\u6570\u53ea\u80fd\u5305\u542b\u4e00\u4e2a\u5f62\u53c2 *testing.B \u6d4b\u8bd5\u51fd\u6570\u6ca1\u6709\u8fd4\u56de\u503c func BenchmarkFib ( b * testing . B ) { // ... } func BenchmarkSiztFmt ( b * testing . B ) { // ... } \u53c2\u6570 t \u7528\u4e8e\u62a5\u544a\u6d4b\u8bd5\u6210\u529f\u3001\u5931\u8d25\u3001\u65e5\u5fd7\u7b49\u4fe1\u606f\uff0c\u5176\u5305\u542b\u5982\u4e0b\u65b9\u6cd5\uff1a func ( c * B ) Error ( args ... interface {}) func ( c * B ) Errorf ( format string , args ... interface {}) func ( c * B ) Fail () func ( c * B ) FailNow () func ( c * B ) Failed () bool func ( c * B ) Fatal ( args ... interface {}) func ( c * B ) Fatalf ( format string , args ... interface {}) func ( c * B ) Log ( args ... interface {}) func ( c * B ) Logf ( format string , args ... interface {}) func ( c * B ) Name () string func ( b * B ) ReportAllocs () func ( b * B ) ResetTimer () func ( b * B ) Run ( name string , f func ( b * B )) bool func ( b * B ) RunParallel ( body func ( * PB )) func ( b * B ) SetBytes ( n int64 ) func ( b * B ) SetParallelism ( p int ) func ( c * B ) Skip ( args ... interface {}) func ( c * B ) SkipNow () func ( c * B ) Skipf ( format string , args ... interface {}) func ( c * B ) Skipped () bool func ( b * B ) StartTimer () func ( b * B ) StopTimer () \u6700\u7b80\u5355\u7684\u57fa\u51c6\u6d4b\u8bd5 \u00b6 \u7f16\u5199\u4e00\u4e2a\u5bb9\u91cf\u683c\u5f0f\u5316\u51fd\u6570\uff0c\u7136\u540e\u7f16\u5199\u5bf9\u5e94\u7684\u57fa\u51c6\u6d4b\u8bd5\u51fd\u6570\u3002 // sizefmt.go package sizefmt import \"strconv\" func sizeFmt ( bit int64 ) string { const ( // \u5b9a\u4e49\u51e0\u4e2a\u6570\u91cf\u7ea7 _ = iota KB int64 = 1 << ( 10 * iota + 3 ) MB GB ) sizeFloat := float64 ( bit ) unit := \"b\" switch { // \u6839\u636e bit \u53c2\u6570\u7684\u5927\u5c0f\u683c\u5f0f\u5316\u4e0d\u540c\u7684\u5355\u4f4d case bit < KB : return strconv . FormatInt ( bit , 10 ) + unit case bit >= KB && bit < MB : sizeFloat /= 1 << 10 unit = \"K\" case bit >= MB && bit < GB : sizeFloat /= 1 << 20 unit = \"M\" case bit >= GB : sizeFloat /= 1 << 30 unit = \"G\" } return strconv . FormatFloat ( sizeFloat , 'f' , 2 , 64 ) + unit } \u7136\u540e\u7f16\u5199\u57fa\u51c6\u6d4b\u8bd5\u51fd\u6570\u3002 // sizefmt_test.go package sizefmt import \"testing\" // \u57fa\u51c6\u6d4b\u8bd5\u51fd\u6570\u4ee5 Benchmark \u5f00\u5934 func BenchmarkSizefmt ( b * testing . B ) { for i := 0 ; i < b . N ; i ++ { // b.N \u4e0d\u662f\u4e00\u4e2a\u56fa\u5b9a\u7684\u503c\uff0c\u5b83\u4f1a\u4e0d\u65ad\u8fed\u4ee3 sizeFmt ( 1 << 20 + 554 ) } } \u5728 for \u5faa\u73af\u4e2d\u4f7f\u7528\u5230\u4e86\u4e00\u4e2a b.N \uff0c\u8fd9\u4e2a\u53d8\u91cf \u4e0d\u662f\u4e00\u4e2a\u56fa\u5b9a\u7684\u503c\uff0c\u5b83\u4f1a\u4ece 1 \u4e0d\u65ad\u7684\u8fed\u4ee3\uff0c\u4f8b\u5982 1\u30012\u30015\u300110\u300120\u300150...\uff0c\u4fdd\u8bc1\u57fa\u51c6\u6d4b\u8bd5\u51fd\u6570\u7684\u6267\u884c\u65f6\u95f4\u81f3\u5c11\u8d85\u8fc7 1 \u79d2\u949f\u3002\u8fd9\u6837\u5f97\u5230\u7684\u6570\u636e\u624d\u6bd4\u8f83\u6709\u53c2\u8003\u6027\u3002 \u4ece 1 \u5f00\u59cb\u662f\u4fdd\u8bc1\u88ab\u6d4b\u8bd5\u51fd\u6570 sizeFmt \u81f3\u5c11\u6ca1\u95ee\u9898\u80fd\u8dd1\u5f97\u52a8\u3002 \u4f7f\u7528 -bench=RegExp \u6765\u6307\u5b9a\u53ea\u6267\u884c\u57fa\u51c6\u6d4b\u8bd5\u3002 $ go test . -bench = Sizefmt goos: linux goarch: amd64 pkg: goTest cpu: Intel ( R ) Core ( TM ) i5-7300HQ CPU @ 2 .50GHz BenchmarkSizefmt-4 3589545 330 .4 ns/op PASS ok goTest 1 .528s goos: \u5f53\u524d\u64cd\u4f5c\u7cfb\u7edf goarch: \u5f53\u524d\u82af\u7247\u67b6\u6784 pkg: \u57fa\u51c6\u6d4b\u8bd5\u51fd\u6570\u6240\u5728\u7684\u5305 cpu: \u5f53\u524d\u673a\u5668\u4e0a CPU \u4fe1\u606f BenchmarkSizefmt-4 : \u5bf9 sizeFmt \u51fd\u6570\u8fdb\u884c\u57fa\u51c6\u6d4b\u8bd5\uff0c\u5f53\u524d GOMAXPROCS \u7684\u503c\uff0c\u8fd9\u4e2a\u5bf9\u4e8e\u5f00\u53d1\u57fa\u51c6\u6d4b\u8bd5\u5f88\u91cd\u8981\u3002 3589545 : \u6267\u884c\u4e863\u767e\u591a\u4e07\u6b21 330.4 ns/op : \u5728\u8fd93\u767e\u591a\u4e07\u6b21\u8c03\u7528\u91cc\u5e73\u5747\u6bcf\u6b21\u8c03\u7528 sizeFmt \u51fd\u6570\u8017\u65f6 330.4 \u7eb3\u79d2\u3002 PASS : \u7528\u4e8e\u57fa\u51c6\u6d4b\u8bd5\u7684\u7528\u4f8b\u6267\u884c\u901a\u8fc7 ok goTest 1.528s : \u5171\u8017\u65f6 1.528 \u79d2 \u4f7f\u7528 -benchmem \u53c2\u6570\u53ef\u4ee5\u83b7\u5f97\u5185\u5b58\u5206\u914d\u7684\u7edf\u8ba1\u6570\u636e $ go test . -bench = Sizefmt -benchmem goos: linux goarch: amd64 pkg: goTest cpu: Intel ( R ) Core ( TM ) i5-7300HQ CPU @ 2 .50GHz BenchmarkSizefmt-4 3589545 330 .4 ns/op 40 B/op 3 allocs/op PASS ok goTest 1 .528s 40 B/op : \u5e73\u5747\u6bcf\u6b21\u8c03\u7528 sizeFmt \u51fd\u6570\u5360\u7528 40 \u4e2a\u5b57\u8282 3 allocs/op : \u6bcf\u6b21\u8c03\u7528 sizeFmt \u9700\u8981\u7533\u8bf7 3 \u6b21\u5185\u5b58 \u6027\u80fd\u6bd4\u8f83\u51fd\u6570 \u00b6 \u4e0a\u8ff0\u4f8b\u5b50\u6211\u4eec\u5f97\u5230\u7684\u662f\u7ed9\u5b9a\u4f8b\u5b50\u7684\u7edd\u5bf9\u8017\u65f6\uff0c\u4f46\u6709\u4e9b\u95ee\u9898\uff0c\u4f8b\u5982\u6590\u6ce2\u90a3\u5951\u6570\u5217\uff0c\u6570\u91cf\u4e0d\u591a\u7684\u65f6\u5019\u8017\u65f6\u8fd8\u4e0d\u4f1a\u592a\u957f\uff0c\u4f46\u662f\u5f53\u8ba1\u7b97\u5230 40 \u5de6\u53f3\u7684\u65f6\u5019\u5c31\u5df2\u7ecf\u6162\u7684\u4e0d\u884c\u4e86\u3002 \u73b0\u5728\u6211\u4eec\u60f3\u8981\u77e5\u9053\uff0c\u5f53 Fib(n) \u7684 n \u4e3a 1\u300110\u300120\u300140\u300145 \u7684\u65f6\u5019\u4ed6\u4eec\u7684\u6027\u80fd\u3002 \u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u7f16\u5199\u4e00\u4e2a\u57fa\u51c6\u6d4b\u8bd5\u51fd\u6570\uff0c\u4e0d\u4ec5\u63a5\u53d7 b *testing.B \uff0c\u8fd8\u63a5\u53d7\u53e6\u5916\u4e00\u4e2a\u53c2\u6570 n \uff0c\u7136\u540e\u7f16\u5199\u51e0\u4e2a\u57fa\u51c6\u6d4b\u8bd5\u51fd\u6570\u6765\u6d4b\u8bd5\u3002\u5982\u4e0b\uff1a // fib.go package fib func Fib ( n int ) int { if n < 2 { return n } return Fib ( n - 1 ) + Fib ( n - 2 ) } // fib_test.go package fib import \"testing\" // \u628a\u539f\u672c\u7684\u57fa\u51c6\u51fd\u6570\u53d8\u6210\u5c0f\u5199\u5f00\u5934\uff0c\u8fd9\u6837 -bench=Fib \u7684\u65f6\u5019\u4e5f\u4e0d\u4f1a\u76f4\u63a5\u5339\u914d\u5230 // \u7136\u540e\u5e26\u4e0a\u4e00\u4e2a\u53c2\u6570 n func benchmarkFib ( b * testing . B , n int ) { for i := 0 ; i < b . N ; i ++ { fib ( n ) } } // \u7f16\u5199\u51e0\u4e2a\u4e0d\u540c n \u7684\u57fa\u51c6\u6d4b\u8bd5\u51fd\u6570\uff0c\u6bcf\u6b21\u53bb\u8c03\u7528\u539f\u672c\u7684\u57fa\u51c6\u6d4b\u8bd5\u51fd\u6570 func BenchmarkFib1 ( b * testing . B ) { benchmarkFib ( b , 1 ) } func BenchmarkFib10 ( b * testing . B ) { benchmarkFib ( b , 10 ) } func BenchmarkFib20 ( b * testing . B ) { benchmarkFib ( b , 20 ) } func BenchmarkFib40 ( b * testing . B ) { benchmarkFib ( b , 40 ) } func BenchmarkFib45 ( b * testing . B ) { benchmarkFib ( b , 45 ) } \u7136\u540e\u6267\u884c\u547d\u4ee4\uff1a $ go test -bench = Fib -benchmem goos: linux goarch: amd64 pkg: goTest cpu: Intel ( R ) Core ( TM ) i5-7300HQ CPU @ 2 .50GHz BenchmarkFibGreedy1-4 457008499 2 .601 ns/op 0 B/op 0 allocs/op BenchmarkFibGreedy10-4 2589387 462 .6 ns/op 0 B/op 0 allocs/op BenchmarkFibGreedy20-4 19940 57224 ns/op 0 B/op 0 allocs/op BenchmarkFibGreedy40-4 2 865527961 ns/op 0 B/op 0 allocs/op BenchmarkFibGreedy45-4 1 9598796528 ns/op 0 B/op 0 allocs/op PASS ok goTest 17 .082s \u53ef\u4ee5\u770b\u51fa\uff0cn \u6bd4\u8f83\u5c11\u7684\u65f6\u5019\uff0c\u6267\u884c\u7684\u6b21\u6570\u6bd4\u8f83\u591a\uff0c\u6bcf\u6b21\u8017\u8d39\u7684\u65f6\u95f4\u4e5f\u4e0d\u591a\u3002\u5f53 n \u8d85\u8fc7 40 \u4ee5\u540e\uff0c\u673a\u5668\u6709\u70b9\u53d7\u4e0d\u4e86\u4e86\uff0c 45 \u4ec5\u4ec5\u53ea\u6267\u884c\u4e86\u4e00\u6b21\uff0c\u8fd8\u8017\u65f6 9 \u79d2\u591a\u3002 \u4e3b\u8981\u7684\u539f\u56e0\u662f\u91c7\u7528\u4e86\u9012\u5f52\u6c42\u6590\u6ce2\u90a3\u5951\u6570\u5217\uff0c\u8c03\u7528\u6808\u5f88\u5feb\u5c31\u7206\u6ee1\u4e86\u3002 \u5f97\u5230\u6027\u80fd\u6570\u636e\u4fe1\u606f\u4ee5\u540e\uff0c\u6211\u4eec\u5c31\u5f97\u77e5\u8fd9\u4e2a Fib \u5728 n \u7a0d\u5927\u65f6\u6548\u679c\u4e0d\u7406\u60f3\uff0c\u5e94\u505a\u6539\u8fdb\u3002 \u9012\u5f52\u5c5e\u4e8e\u5206\u6cbb\u6cd5\u4e2d\u7684\u4e00\u79cd\uff0c\u6211\u4eec\u53ef\u4ee5\u6362\u6210\u52a8\u6001\u89c4\u5212\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 // fib.go package fib // \u7528\u9012\u5f52\u6c42\u6590\u6ce2\u90a3\u5951\u6570\u5217 func fibDAC ( n int ) int { if n < 2 { return n } return fibDAC ( n - 1 ) + fibDAC ( n - 2 ) } // \u7528\u52a8\u6001\u89c4\u5212\u6c42 func fibDP ( n int ) int { if n < 2 { return n } slice := make ([] int , n ) slice [ 0 ] = 1 slice [ 1 ] = 1 for i := 2 ; i < n ; i ++ { slice [ i ] = slice [ i - 1 ] + slice [ i - 2 ] } return slice [ n - 1 ] } // fib_test.go package fib import \"testing\" func benchmarkFibDAC ( b * testing . B , n int ) { for i := 0 ; i < b . N ; i ++ { fibDAC ( n ) } } func BenchmarkFibDAC1 ( b * testing . B ) { benchmarkFibDAC ( b , 1 ) } func BenchmarkFibDAC10 ( b * testing . B ) { benchmarkFibDAC ( b , 10 ) } func BenchmarkFibDAC20 ( b * testing . B ) { benchmarkFibDAC ( b , 20 ) } func BenchmarkFibDAC40 ( b * testing . B ) { benchmarkFibDAC ( b , 40 ) } func BenchmarkFibDAC45 ( b * testing . B ) { benchmarkFibDAC ( b , 45 ) } func benchmarkFibDP ( b * testing . B , n int ) { for i := 0 ; i < b . N ; i ++ { fibDP ( n ) } } func BenchmarkFibDP1 ( b * testing . B ) { benchmarkFibDP ( b , 1 ) } func BenchmarkFibDP10 ( b * testing . B ) { benchmarkFibDP ( b , 10 ) } func BenchmarkFibDP100 ( b * testing . B ) { benchmarkFibDP ( b , 100 ) } func BenchmarkFibDP1000 ( b * testing . B ) { benchmarkFibDP ( b , 1000 ) } \u6267\u884c\u6d4b\u8bd5\uff1a $ go test -bench = FibDP -benchmem goos: linux goarch: amd64 pkg: goTest cpu: Intel ( R ) Core ( TM ) i5-7300HQ CPU @ 2 .50GHz BenchmarkFibDP1-4 1000000000 0 .4029 ns/op 0 B/op 0 allocs/op BenchmarkFibDP10-4 20096688 51 .87 ns/op 80 B/op 1 allocs/op BenchmarkFibDP100-4 3030915 380 .3 ns/op 896 B/op 1 allocs/op BenchmarkFibDP1000-4 328071 3656 ns/op 8192 B/op 1 allocs/op PASS ok goTest 5 .356s $ go test -bench = FibDAC -benchmem goos: linux goarch: amd64 pkg: goTest cpu: Intel ( R ) Core ( TM ) i5-7300HQ CPU @ 2 .50GHz BenchmarkFibGreedy1-4 457008499 2 .601 ns/op 0 B/op 0 allocs/op BenchmarkFibGreedy10-4 2589387 462 .6 ns/op 0 B/op 0 allocs/op BenchmarkFibGreedy20-4 19940 57224 ns/op 0 B/op 0 allocs/op BenchmarkFibGreedy40-4 2 865527961 ns/op 0 B/op 0 allocs/op BenchmarkFibGreedy45-4 1 9598796528 ns/op 0 B/op 0 allocs/op PASS ok goTest 17 .082s \u4e0a\u9762 FibDP \u662f\u5bf9\u52a8\u6001\u89c4\u5212\u5b9e\u73b0\u7684\u57fa\u51c6\u6d4b\u8bd5\uff0c\u4e0b\u9762 FibDAC \u662f\u5bf9\u9012\u5f52\u5b9e\u73b0\u7684\u57fa\u51c6\u6d4b\u8bd5\u3002\u53ef\u4ee5\u770b\u5230\u5dee\u8ddd\u5341\u5206\u5de8\u5927\u3002 \u6ce8\u610f\u4e0d\u8981\u62ff b.N \u5f53\u53c2\u6570 // \u9519\u8bef\u793a\u83031 func BenchmarkFibWrong ( b * testing . B ) { for n := 0 ; n < b . N ; n ++ { Fib ( n ) } } // \u9519\u8bef\u793a\u83032 func BenchmarkFibWrong2 ( b * testing . B ) { Fib ( b . N ) } \u91cd\u7f6e\u65f6\u95f4 \u00b6 b.ResetTime() \u53ef\u4ee5\u91cd\u7f6e\u8ba1\u65f6\u5668\uff0c\u4e5f\u5c31\u662f\u8fd9\u53e5\u8bed\u53e5\u524d\u9762\u7684\u8017\u65f6\u4e0d\u8ba1\u5165\u3002\u6240\u4ee5\u53ef\u4ee5\u6267\u884c\u4e00\u4e9b\u4e0d\u53c2\u4e0e\u65f6\u95f4\u6d4b\u8bd5\u7684\u5de5\u4f5c\uff0c\u7136\u540e b.ResetTimer() . func BenchmarkFib ( b * testing . B ) { fmt . Println ( \"Start Benchmark test of Fib()\" ) time . Sleep ( time . Second ) for i := 0 ; i < b . N ; i ++ { Fib ( 10 ) } } \u5e76\u884c\u6d4b\u8bd5 \u00b6 TestMain\u3001Setup \u548c Teardown \u00b6 TestMain \u57fa\u672c\u683c\u5f0f \u00b6 \u51fd\u6570\u540d\u4e3a TestMain \u51fd\u6570\u53c2\u6570\u5fc5\u987b\u5305\u542b\u4e00\u4e2a\u5f62\u53c2 *testing.M \u51fd\u6570\u6ca1\u6709\u8fd4\u56de\u503c func TestMain ( m * testing . M ) { // ... } \u53c2\u6570 m \u7528\u4e8e\u542f\u52a8\u6d4b\u8bd5\uff0c\u542f\u52a8\u65b9\u6cd5\u5982\u4e0b\uff1a func ( m * M ) Run () ( code int ) \u6709\u65f6\u5019\u9047\u5230\u6d4b\u8bd5\u4e4b\u524d\u9700\u8981\u505a\u4e00\u4e9b\u521d\u59cb\u5316\u5de5\u4f5c\u6216\u8005\u6d4b\u8bd5\u4e4b\u540e\u9700\u8981\u505a\u4e00\u4e9b\u6536\u5c3e\u5de5\u4f5c\uff0c\u5c31\u53ef\u4ee5\u7528 TestMain() \u3002 \u5982\u679c\u6d4b\u8bd5\u6587\u4ef6\u4e2d\u5305\u542b TestMain() \uff0c\u90a3\u4e48\u751f\u6210\u7684\u6d4b\u8bd5\u5c06\u8c03\u7528 TestMain(m) \uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u5176\u4ed6\u8fd0\u884c\u6d4b\u8bd5\u3002 m.Run() \u88ab\u8c03\u7528\u540e\uff0c\u5c06\u4f1a\u8fd0\u884c\u6d4b\u8bd5\u6587\u4ef6\u4e2d\u6240\u6709\u7684\u6d4b\u8bd5\u51fd\u6570\u3002 TestMain \u8fd0\u884c\u5728\u4e3b goroutine \u4e2d , \u53ef\u4ee5\u5728\u8c03\u7528 m.Run \u524d\u540e\u505a\u4efb\u4f55 Setup \u548c Teardown \u3002 \u6ce8\u610f\uff0c\u5728 TestMain \u51fd\u6570\u7684\u6700\u540e\uff0c\u5e94\u8be5\u4f7f\u7528 m.Run \u7684\u8fd4\u56de\u503c\u4f5c\u4e3a\u53c2\u6570\u53bb\u8c03\u7528 os.Exit \u3002 \u53e6\u5916\uff0c\u5728\u8c03\u7528 TestMain \u65f6 , flag.Parse \u5e76\u6ca1\u6709\u88ab\u8c03\u7528\u3002 \u6240\u4ee5\uff0c\u5982\u679c TestMain \u4f9d\u8d56\u4e8e command-line \u6807\u5fd7\uff08\u5305\u62ec testing \u5305\u7684\u6807\u5fd7\uff09\uff0c\u5219\u5e94\u8be5\u663e\u5f0f\u5730\u8c03\u7528 flag.Parse \u3002\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u4f9d\u8d56\u662f\u6307\uff0c\u82e5 TestMain \u51fd\u6570\u5185\u9700\u8981\u7528\u5230 command-line \u6807\u5fd7\uff0c\u5219\u5fc5\u987b\u663e\u5f0f\u5730\u8c03\u7528 flag.Parse \uff0c\u5426\u5219\u4e0d\u9700\u8981\uff0c\u56e0\u4e3a m.Run \u4e2d\u8c03\u7528 flag.Parse \u3002 \u793a\u4f8b \u00b6 // fib.go package fib func Fib ( n int ) int { if n < 2 { return n } return Fib ( n - 1 ) + Fib ( n - 2 ) } // fib_test.go package fib import \"testing\" // \u5355\u5143\u6d4b\u8bd5\u51fd\u6570\uff0c\u4ee5 Test\u5f00\u5934 func TestFib ( t * testing . T ) { var ( input = 7 // \u8f93\u5165\u6570\u636e expected = 13 // \u671f\u671b\u7ed3\u679c ) actual := Fib ( input ) // \u7a0b\u5e8f\u6267\u884c\u7ed3\u679c if actual != expected { // \u5982\u679c\u4e0e\u671f\u671b\u7ed3\u679c\u4e0d\u4e00\u81f4\uff0c\u5219\u8f93\u51fa\u9519\u8bef\u63d0\u793a\u3002 t . Errorf ( \"Fib(%d) = %d; expected %d\" , input , actual , expected ) } } func setup () { fmt . Println ( \"\u8bbe\u7f6e\u4e00\u4e9b\u4e1c\u897f\" ) } func teardown () { fmt . Println ( \"\u6e05\u7406\u4e00\u4e9b\u4e1c\u897f\" ) } func TestMain ( m * testing . M ) { setup () code := m . Run () teardown () os . Exit ( code ) } $ go test \u8bbe\u7f6e\u4e00\u4e9b\u4e1c\u897f PASS \u6e05\u7406\u4e00\u4e9b\u4e1c\u897f ok goTest 0 .002s \u5b50\u6d4b\u8bd5\u7684 Setup \u548c Teardown \u00b6 \u6709\u65f6\u5019\u4e0d\u53ea\u662f\u5168\u5c40\u8fdb\u884c\u6d4b\u8bd5\u7684\u65f6\u5019\u9700\u8981 Setup \u548c Teardown\uff0c\u6709\u53ef\u80fd\u6bcf\u4e2a\u5b50\u6d4b\u8bd5\u5728\u6d4b\u8bd5\u7684\u65f6\u5019\u4e5f\u9700\u8981 Setup \u548c Teardown\u3002\u90a3\u53ef\u4ee5\u5bf9 Setup \u548c Teardown \u5c1d\u8bd5\u4ee5\u4e0b\u8fd9\u79cd\u4f18\u96c5\u7684\u5199\u6cd5\uff1a func setup () func () { fmt . Println ( \"Setup\" ) return func () { fmt . Println ( \"Teardown\" ) } } \u7136\u540e\u5728\u5b50\u6d4b\u8bd5\u4e2d\u8fd9\u6837\u4f7f\u7528\uff1a func TestFibDP ( t * testing . T ) { // 1 1 2 3 5 8 13 21 34 55 tests := map [ string ] test { \"case1\" : { 1 , 1 }, \"case2\" : { 2 , 1 }, \"case3\" : { 3 , 2 }, \"case4\" : { 7 , 13 }, \"case9\" : { 9 , 34 }, } for name , tc := range tests { t . Run ( name , func ( t * testing . T ) { teardown := setup () defer teardown () if got := fibDP ( tc . in ); got != tc . want { t . Errorf ( \"want: %v, got: %v\" , tc . want , got ) } else { fmt . Println ( \"yes!!!\" ) } }) } } \u6548\u679c\u5982\u4e0b\uff1a $ go test -run = FibDP -v \u2500\u2500 ( \u65e5,7\u670811 ) \u2500\u2518 === RUN TestFibDP === RUN TestFibDP/case1 Setup yes!!! Teardown === RUN TestFibDP/case2 Setup yes!!! Teardown === RUN TestFibDP/case3 Setup yes!!! Teardown === RUN TestFibDP/case4 Setup yes!!! Teardown === RUN TestFibDP/case9 Setup yes!!! Teardown --- PASS: TestFibDP ( 0 .00s ) --- PASS: TestFibDP/case1 ( 0 .00s ) --- PASS: TestFibDP/case2 ( 0 .00s ) --- PASS: TestFibDP/case3 ( 0 .00s ) --- PASS: TestFibDP/case4 ( 0 .00s ) --- PASS: TestFibDP/case9 ( 0 .00s ) PASS ok goTest 0 .002s \u53c2\u8003\uff1a [\u674e\u6587\u5468\u535a\u5ba2] : https://www.liwenzhou.com/posts/Go/16_test/#autoid-3-1-0","title":"15.\u5355\u5143\u6d4b\u8bd5"},{"location":"Go/Basic/Golang-15-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/#_1","text":"Golang \u7684\u5355\u5143\u6d4b\u8bd5\u4f9d\u8d56 go test \u547d\u4ee4\uff0c\u7f16\u5199\u6d4b\u8bd5\u4ee3\u7801\u548c\u7f16\u5199\u666e\u901a\u4ee3\u7801\u4e00\u6837\uff0c\u53ea\u9700\u8981\u9075\u5faa\u4e00\u5b9a\u7684\u89c4\u5219\u5373\u53ef\u3002 go test \u547d\u4ee4\u662f\u4e00\u4e2a\u6309\u7167\u4e00\u5b9a\u7ea6\u5b9a\u548c\u7ec4\u7ec7\u7684\u6d4b\u8bd5\u4ee3\u7801\u7684\u9a71\u52a8\u7a0b\u5e8f\u3002 \u6240\u6709\u4ee5 _text.go \u4e3a\u540e\u7f00\u7684\u6e90\u4ee3\u7801\u6587\u4ef6\u90fd\u662f go test \u6d4b\u8bd5\u7684\u4e00\u90e8\u5206\uff0c\u4e0d\u4f1a\u88ab go build \u7f16\u8bd1\u5230\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\uff1b \u6d4b\u8bd5\u6587\u4ef6 xxx_test.go \u4e2d\u6709\u4e09\u79cd\u7c7b\u578b\u51fd\u6570\uff1a \u5355\u5143\u6d4b\u8bd5\u51fd\u6570 \u3001 \u57fa\u51c6\u6d4b\u8bd5\u51fd\u6570 \u3001 \u793a\u4f8b\u51fd\u6570 . \u7c7b\u578b \u524d\u7f00 \u683c\u5f0f \u4f5c\u7528 \u5355\u5143\u6d4b\u8bd5\u51fd\u6570 Test TestTTT(t *testing.T) \u6d4b\u8bd5\u7a0b\u5e8f\u7684\u903b\u8f91\u6027\u4e3a\u662f\u5426\u6b63\u786e \u57fa\u51c6\u6d4b\u8bd5\u51fd\u6570 Benchmark BenchmarkBBB(b *testing.B) \u6d4b\u8bd5\u7a0b\u5e8f\u7684\u6027\u80fd \u793a\u4f8b\u51fd\u6570 Example ExampleEEE() \u4e3a\u6587\u6863\u63d0\u4f9b\u793a\u4f8b \u5728 go test \u547d\u4ee4\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4f1a\u904d\u5386\u6240\u6709 _text.go \u6587\u4ef6\u4e2d\u6240\u6709\u5e26\u6709\u4e0a\u8ff0\u524d\u7f00\u7684\u51fd\u6570\uff0c\u751f\u6210\u4e00\u4e2a\u4e34\u65f6 main \u5305\u7528\u4e8e\u8c03\u7528\u76f8\u5e94\u7684\u6d4b\u8bd5\u51fd\u6570\uff0c\u7136\u540e\u7f16\u8bd1\u3001\u8fd0\u884c\u3001\u62a5\u544a\u6d4b\u8bd5\u7ed3\u679c\u3001\u6e05\u7406\u4e34\u65f6\u6587\u4ef6\u3002","title":"\u5355\u5143\u6d4b\u8bd5"},{"location":"Go/Basic/Golang-15-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/#go-test","text":"\u57fa\u672c\u547d\u4ee4\u662f go test \uff0c\u6709\u5f88\u591a\u53c2\u6570\u53ef\u9009\uff0c go test [ build/flags ] [ packages ] [ build/test flags & test binary flags ] flags: -v : \u6253\u5370\u6d4b\u8bd5\u8fc7\u7a0b -cover : \u6253\u5370\u6d4b\u8bd5\u8986\u76d6\u7387 -bench : \u6267\u884c\u57fa\u51c6\u6d4b\u8bd5 ... packages: packages \u4e5f\u5c31\u662f\u8981\u6267\u884c\u6d4b\u8bd5\u7684\u6587\u4ef6\uff0c\u6709\u4e24\u79cd\u6a21\u5f0f\uff1a \u5f53\u524d\u76ee\u5f55\u6a21\u5f0f\uff08local directory mode\uff09 \u548c \u5305\u5217\u8868\u6a21\u5f0f\uff08package list mode\uff09 \u5f53\u524d\u76ee\u5f55\u6a21\u5f0f \uff1a\u6ca1\u6709\u586b\u5199\u5177\u4f53\u7684\u5305\u540d\u65f6\u5c31\u662f\u8fd9\u4e2a\u6a21\u5f0f\u3002 \u6bd4\u5982\u6267\u884c\u547d\u4ee4 go test \u6216 go test -v \u65f6\uff0c\u5c31\u662f\u8fd9\u79cd\u6a21\u5f0f\u3002 \u8fd9\u79cd\u6a21\u5f0f\u4e0b\u4f1a\u6267\u884c\u5f53\u524d\u76ee\u5f55\u4e0b\u7684 *_test.go \u6587\u4ef6\u7684\u6d4b\u8bd5\u7528\u4f8b\u3002 \u9ed8\u8ba4\u4e0d\u5f00\u542f\u7f13\u5b58\uff0c\u4e5f\u5c31\u662f\u4e0d\u4f1a\u7f13\u5b58\u4e0a\u6b21\u6d4b\u8bd5\u7684\u7ed3\u679c\u3002 \u5305\u5217\u8868\u6a21\u5f0f \uff1a\u586b\u5199\u4e86\u5177\u4f53\u7684\u5305\u540d\u65f6\u5c31\u662f\u8fd9\u4e2a\u6a21\u5f0f\u3002 \u6bd4\u5982\u6267\u884c\u547d\u4ee4 go test . \u3001 go test ./.../... \u6216 go test package_name \u8fd9\u79cd\u6a21\u5f0f\u4e0b\u4f1a\u6267\u884c\u6307\u5b9a\u7684\u5305\u4e2d\u7684\u6d4b\u8bd5\u6587\u4ef6\u3002 \u9ed8\u8ba4\u5f00\u542f\u7f13\u5b58\uff0c\u4e5f\u5c31\u662f\u4f1a\u7f13\u5b58\u4e0a\u6b21\u6d4b\u8bd5\u7684\u7ed3\u679c\u3002\u53ef\u4ee5\u901a\u8fc7 -count=1 \u5173\u95ed\u7f13\u5b58\u3002","title":"go test \u547d\u4ee4"},{"location":"Go/Basic/Golang-15-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/#_2","text":"","title":"\u5355\u5143\u6d4b\u8bd5"},{"location":"Go/Basic/Golang-15-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/#_3","text":"\u6d4b\u8bd5\u51fd\u6570\u5fc5\u987b\u4ee5 Test \u5f00\u5934 \u6d4b\u8bd5\u51fd\u6570\u53c2\u6570\u5fc5\u987b\u5305\u542b\u4e00\u4e2a\u5f62\u53c2 *testing.T \u6d4b\u8bd5\u51fd\u6570\u6ca1\u6709\u8fd4\u56de\u503c func TestFib ( t * testing . T ) { // ... } func TestSiztFmt ( t * testing . T , n int ) { // ... } \u53c2\u6570 t \u7528\u4e8e\u62a5\u544a\u6d4b\u8bd5\u6210\u529f\u3001\u5931\u8d25\u3001\u65e5\u5fd7\u7b49\u4fe1\u606f\uff0c\u5176\u5305\u542b\u5982\u4e0b\u65b9\u6cd5\uff1a func ( c * T ) Error ( args ... interface {}) func ( c * T ) Errorf ( format string , args ... interface {}) func ( c * T ) Fail () func ( c * T ) FailNow () func ( c * T ) Failed () bool func ( c * T ) Fatal ( args ... interface {}) func ( c * T ) Fatalf ( format string , args ... interface {}) func ( c * T ) Log ( args ... interface {}) func ( c * T ) Logf ( format string , args ... interface {}) func ( c * T ) Name () string func ( t * T ) Parallel () func ( t * T ) Run ( name string , f func ( t * T )) bool func ( c * T ) Skip ( args ... interface {}) func ( c * T ) SkipNow () func ( c * T ) Skipf ( format string , args ... interface {}) func ( c * T ) Skipped () bool","title":"\u57fa\u672c\u683c\u5f0f"},{"location":"Go/Basic/Golang-15-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/#_4","text":"\u7f16\u5199\u4e00\u4e2a\u6590\u6ce2\u90a3\u5951\u6570\u5217\uff0c\u7136\u540e\u7f16\u5199\u5355\u5143\u6d4b\u8bd5\u3002 // fib.go package fib func Fib ( n int ) int { if n < 2 { return n } return Fib ( n - 1 ) + Fib ( n - 2 ) } // fib_test.go package fib import \"testing\" // \u5355\u5143\u6d4b\u8bd5\u51fd\u6570\uff0c\u4ee5 Test\u5f00\u5934 func TestFib ( t * testing . T ) { var ( input = 7 // \u8f93\u5165\u6570\u636e expected = 13 // \u671f\u671b\u7ed3\u679c ) actual := Fib ( input ) // \u7a0b\u5e8f\u6267\u884c\u7ed3\u679c // \u5982\u679c\u4e0e\u671f\u671b\u7ed3\u679c\u4e0d\u4e00\u81f4\uff0c\u5219\u8f93\u51fa\u9519\u8bef\u63d0\u793a\u3002 if actual != expected { t . Errorf ( \"Fib(%d) = %d; expected %d\" , input , actual , expected ) } } $ go test PASS ok goTest 0 .002s $ pwd ~/---FILE---/---CODE/GoProject/playground/goTest $ tree -L 2 . goTest \u251c\u2500\u2500 fib.go \u251c\u2500\u2500 fib_test.go \u2514\u2500\u2500 go.mod \u8fd9\u662f\u6d4b\u8bd5\u901a\u8fc7\u7684\u7ed3\u679c\uff0c\u5982\u679c\u6211\u4eec\u7684 Fib() \u5199\u9519\u4e86\uff0c\u5219\u4f1a\u8f93\u51fa\u4e0e\u671f\u671b\u503c\u4e0d\u540c\u7684\u7ed3\u679c\uff0c\u5e76\u62a5\u544a\u9519\u8bef\u3002 \u73b0\u5728\u5c06 Fib() \u7a0d\u5fae\u4fee\u6539\u4e00\u4e0b\uff0c\u6d4b\u8bd5\u6587\u4ef6\u4e0d\u52a8\uff0c\u518d\u6b21\u6267\u884c go test // fib.go package fib func Fib ( n int ) int { if n < 2 { return n } // return Fib(n-1) + Fib(n-2) return Fib ( n - 1 ) + Fib ( n - 1 ) // \u4fee\u6539\u4e00\u4e0b } $ go test --- FAIL: TestFib ( 0 .00s ) fib_test.go:12: Fib ( 7 ) = 64 ; expected 13 FAIL exit status 1 FAIL goTest 0 .002s","title":"\u6700\u7b80\u5355\u7684\u5355\u5143\u6d4b\u8bd5"},{"location":"Go/Basic/Golang-15-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/#_5","text":"\u5355\u5355\u6d4b\u8bd5\u4e00\u4e2a\u4f8b\u5b50\u4e0d\u591f\uff0c\u6211\u4eec\u9700\u8981\u591a\u6d4b\u8bd5\u51e0\u79cd\u60c5\u51b5\uff0c\u624d\u80fd\u66f4\u597d\u7684\u4fdd\u8bc1\u6211\u4eec\u7a0b\u5e8f\u7684\u5065\u58ee\u6027\u3002 \u5728\u5355\u5143\u6d4b\u8bd5\u51fd\u6570\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u6d4b\u8bd5\u7528\u4f8b\u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u7136\u540e\u521b\u5efa\u4e00\u4e2a\u7ed3\u6784\u4f53\u5207\u7247\uff0c\u5c06\u6d4b\u8bd5\u7528\u4f8b\u90fd\u653e\u5728\u91cc\u9762\u3002 \u904d\u5386\u8fd9\u4e2a\u5207\u7247\u5c31\u53ef\u4ee5\u6d4b\u8bd5\u8fd9\u4e00\u6574\u7ec4\u6d4b\u8bd5\u7528\u4f8b\u3002 // fib_test.go package fib import \"testing\" func TestFib ( t * testing . T ) { type test struct { // \u5b9a\u4e49\u4e00\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u7ed3\u6784\u4f53 in int want int } // \u521b\u5efa\u4e00\u4e2a\u7ed3\u6784\u4f53\u5207\u7247\u5b58\u653e\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b tests := [] test { { in : 7 , want : 13 }, { in : 10 , want : 55 }, { in : 1 , want : 1 }, { in : 2 , want : 1 }, { in : - 1 , want : - 1 }, } // \u904d\u5386\u7ed3\u6784\u4f53\u5207\u7247\uff0c\u9010\u4e00\u6d4b\u8bd5\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b for _ , tc := range tests { if got := Fib ( tc . in ); got != tc . want { t . Errorf ( \"Fib(%d) = %d; expected %d\" , tc . in , got , tc . want ) } } } \u5b9a\u4e49\u6d4b\u8bd5\u7528\u4f8b\u7ed3\u6784\u4f53 \u521b\u5efa\u6d4b\u8bd5\u7528\u4f8b\u7ed3\u6784\u4f53\u5207\u7247\uff0c\u653e\u7f6e\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b \u904d\u5386\u5207\u7247\u9010\u4e00\u6d4b\u8bd5\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b # \u6d4b\u8bd5\u6210\u529f $ go test PASS ok goTest 0 .002s \u63a5\u7740\u4fee\u6539 Fib() \u8ba9\u5176\u51fa\u9519\uff0c\u518d\u8fdb\u884c\u6d4b\u8bd5 # \u6d4b\u8bd5\u5931\u8d25 $ go test --- FAIL: TestFib ( 0 .00s ) fib_test.go:21: Fib ( 7 ) = 64 ; expected 13 fib_test.go:21: Fib ( 10 ) = 512 ; expected 55 fib_test.go:21: Fib ( 2 ) = 2 ; expected 1 FAIL exit status 1 FAIL goTest 0 .002s","title":"\u6d4b\u8bd5\u7ec4"},{"location":"Go/Basic/Golang-15-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/#_6","text":"\u6d4b\u8bd5\u7ec4\u5728\u6d4b\u8bd5\u7528\u4f8b\u5c11\u7684\u65f6\u5019\u8fd8\u6bd4\u8f83\u597d\u5904\u7406\uff0c\u4f46\u662f\u7528\u4f8b\u591a\u8d77\u6765\u7684\u65f6\u5019\u5c31\u6ca1\u6cd5\u76f4\u63a5\u770b\u51fa\u662f\u54ea\u4e9b\u7528\u4f8b\u4e0d\u901a\u8fc7\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5b98\u65b9\u63d0\u4f9b\u7684\u5b50\u6d4b\u8bd5\u3002 \u8fd8\u662f\u4e00\u6837\u5b9a\u4e49\u4e00\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u7ed3\u6784\u4f53\uff0c\u4f46\u63a5\u7740\u6211\u4eec\u4e0d\u662f\u521b\u5efa\u7ed3\u6784\u4f53\u5207\u7247\uff0c\u800c\u662f\u521b\u5efa\u7ed3\u6784\u4f53 map \u5b58\u653e\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b\uff0c\u904d\u5386\u7ed3\u6784\u4f53 map\uff0c\u9010\u4e00\u8c03\u7528 t.Run() \u6765\u6d4b\u8bd5\u6bcf\u4e00\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u3002 // fib_test.go package fib import \"testing\" func TestFib ( t * testing . T ) { type test struct { // \u5b9a\u4e49\u4e00\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u7ed3\u6784\u4f53 in int want int } // \u521b\u5efa\u4e00\u4e2a\u7ed3\u6784\u4f53\u5207\u7247\u5b58\u653e\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b tests := map [ string ] test { \"case7\" : { in : 7 , want : 13 }, \"case10\" : { in : 10 , want : 55 }, \"case1\" : { in : 1 , want : 1 }, \"case2\" : { in : 2 , want : 1 }, \"case_negative\" : { in : - 1 , want : - 1 }, } for name , tc := range tests { t . Run ( name , func ( t * testing . T ) { if got := Fib ( tc . in ); got != tc . want { t . Errorf ( \"Fib(%d) = %d; expected %d\" , tc . in , got , tc . want ) } }) } } t.Run() \u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a\u662f\u6d4b\u8bd5\u7528\u4f8b\u7684\u540d\u5b57\uff0c\u4e5f\u5c31\u662f map \u4e2d\u7684 key\uff0c\u53e6\u4e00\u4e2a\u662f\u4e00\u4e2a func(t *testing.T) \u51fd\u6570\uff0c\u5728\u51fd\u6570\u4e2d\u5199\u4e0a\u5177\u4f53\u7684\u6d4b\u8bd5\u4ee3\u7801\u3002 \u6267\u884c\u65f6\u5e26\u4e0a -v \u53c2\u6570\uff0c\u53ef\u4ee5\u5f88\u76f4\u89c2\u770b\u51fa\u54ea\u4e9b\u7528\u4f8b\u901a\u8fc7\u4e86 (PASS) \u54ea\u4e9b\u6ca1\u901a\u8fc7 (FAIL) $ go test -v === RUN TestFib === RUN TestFib/case7 fib_test.go:22: Fib ( 7 ) = 64 ; expected 13 === RUN TestFib/case10 fib_test.go:22: Fib ( 10 ) = 512 ; expected 55 === RUN TestFib/case1 === RUN TestFib/case2 fib_test.go:22: Fib ( 2 ) = 2 ; expected 1 === RUN TestFib/case_negative --- FAIL: TestFib ( 0 .00s ) --- FAIL: TestFib/case7 ( 0 .00s ) --- FAIL: TestFib/case10 ( 0 .00s ) --- PASS: TestFib/case1 ( 0 .00s ) --- FAIL: TestFib/case2 ( 0 .00s ) --- PASS: TestFib/case_negative ( 0 .00s ) FAIL exit status 1 FAIL goTest 0 .002s \u6267\u884c\u65f6\u5e26\u4e0a -run \u53c2\u6570\u8fd8\u53ef\u4ee5\u6307\u5b9a\u8fd0\u884c\u54ea\u4e00\u4e2a\u6d4b\u8bd5\u7528\u4f8b $ go test . -v -run = TestFib/case7 === RUN TestFib === RUN TestFib/case7 fib_test.go:22: Fib ( 7 ) = 64 ; expected 13 --- FAIL: TestFib ( 0 .00s ) --- FAIL: TestFib/case7 ( 0 .00s ) FAIL exit status 1 FAIL goTest 0 .002s $ go test . -v -run = Fib/case_negative === RUN TestFib === RUN TestFib/case_negative --- PASS: TestFib ( 0 .00s ) --- PASS: TestFib/case_negative ( 0 .00s ) PASS ok goTest 0 .002s -run=RegExp \uff0c -run \u53c2\u6570\u540e\u5e26\u7684\u662f\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u4f46\u662f\u4e00\u822c\u90fd\u50cf\u8fd9\u6837\u4f7f\u7528\uff1a -run=X/Y \uff0c\u5176\u4e2d\uff1a X \u662f TestAAA \u4e2d\u7684 AAA \uff0c\u6216\u8005\u76f4\u63a5\u5199\u5168: TestAAA \uff0c Y \u662f\u6d4b\u8bd5\u7528\u4f8b\u7ed3\u6784\u4f53 map \u7684 key\u3002\u5982\u4e0a\u9762\u4f8b\u5b50\u4e2d -run=Fib/case_negative \u7684 case_negative \u5c31\u662f key\u3002","title":"\u5b50\u6d4b\u8bd5"},{"location":"Go/Basic/Golang-15-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/#_7","text":"\u8986\u76d6\u7387\u5c31\u662f\u4f60\u7684\u4ee3\u7801\u88ab\u6d4b\u8bd5\u7528\u4f8b\u8986\u76d6\u7684\u767e\u5206\u6bd4\u3002\u901a\u5e38\u8fd9\u4e2a\u8986\u76d6\u6307 \u8bed\u53e5\u8986\u76d6 \u3002 \u8f93\u51fa\u8986\u76d6\u7387\u6709\u4e24\u79cd\u65b9\u5f0f\uff1a -cover \u3001 -coverprofile=outfile \u4f7f\u7528 -cover \u53ef\u4ee5\u6253\u5370\u4ee3\u7801\u8986\u76d6\u7387\u3002 \u4f7f\u7528 -coverprofile \u53ef\u4ee5\u5c06\u66f4\u8be6\u7ec6\u7684\u8986\u76d6\u4fe1\u606f\u8f93\u51fa\u5230\u6307\u5b9a\u6587\u4ef6\u4e2d\u3002 -cover $ go test -cover PASS coverage: 100 .0% of statements ok goTest 0 .002s -coverprofile $ go test -coverprofile = fib.cover $ tree -L 2 . goTest \u251c\u2500\u2500 fib.cover \u251c\u2500\u2500 fib.go \u251c\u2500\u2500 fib_test.go \u2514\u2500\u2500 go.mod $ go tool cover -html = fib.cover \u4f7f\u7528 go tool cover -html=\u5236\u5b9a\u6587\u4ef6 \u547d\u4ee4\u4f1a\u6253\u5f00\u9ed8\u8ba4\u6d4f\u89c8\u5668\u663e\u793a\u5177\u4f53\u7684\u8986\u76d6\u7387\u4fe1\u606f\u3002 \u5982\u4e0a\u56fe\uff0c\u7eff\u8272\u8868\u793a\u88ab\u8986\u76d6\u7684\u8bed\u53e5\uff0c\u7ea2\u8272\u8868\u793a\u672a\u88ab\u8986\u76d6\u7684\u8bed\u53e5\uff0c\u7070\u8272\u8868\u793a\u672a\u8ffd\u8e2a\u7684\u8bed\u53e5\u3002","title":"\u8986\u76d6\u7387"},{"location":"Go/Basic/Golang-15-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/#_8","text":"","title":"\u57fa\u51c6\u6d4b\u8bd5"},{"location":"Go/Basic/Golang-15-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/#_9","text":"\u6d4b\u8bd5\u51fd\u6570\u5fc5\u987b\u4ee5 Benchmark \u5f00\u5934 \u6d4b\u8bd5\u51fd\u6570\u53c2\u6570\u53ea\u80fd\u5305\u542b\u4e00\u4e2a\u5f62\u53c2 *testing.B \u6d4b\u8bd5\u51fd\u6570\u6ca1\u6709\u8fd4\u56de\u503c func BenchmarkFib ( b * testing . B ) { // ... } func BenchmarkSiztFmt ( b * testing . B ) { // ... } \u53c2\u6570 t \u7528\u4e8e\u62a5\u544a\u6d4b\u8bd5\u6210\u529f\u3001\u5931\u8d25\u3001\u65e5\u5fd7\u7b49\u4fe1\u606f\uff0c\u5176\u5305\u542b\u5982\u4e0b\u65b9\u6cd5\uff1a func ( c * B ) Error ( args ... interface {}) func ( c * B ) Errorf ( format string , args ... interface {}) func ( c * B ) Fail () func ( c * B ) FailNow () func ( c * B ) Failed () bool func ( c * B ) Fatal ( args ... interface {}) func ( c * B ) Fatalf ( format string , args ... interface {}) func ( c * B ) Log ( args ... interface {}) func ( c * B ) Logf ( format string , args ... interface {}) func ( c * B ) Name () string func ( b * B ) ReportAllocs () func ( b * B ) ResetTimer () func ( b * B ) Run ( name string , f func ( b * B )) bool func ( b * B ) RunParallel ( body func ( * PB )) func ( b * B ) SetBytes ( n int64 ) func ( b * B ) SetParallelism ( p int ) func ( c * B ) Skip ( args ... interface {}) func ( c * B ) SkipNow () func ( c * B ) Skipf ( format string , args ... interface {}) func ( c * B ) Skipped () bool func ( b * B ) StartTimer () func ( b * B ) StopTimer ()","title":"\u57fa\u672c\u683c\u5f0f"},{"location":"Go/Basic/Golang-15-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/#_10","text":"\u7f16\u5199\u4e00\u4e2a\u5bb9\u91cf\u683c\u5f0f\u5316\u51fd\u6570\uff0c\u7136\u540e\u7f16\u5199\u5bf9\u5e94\u7684\u57fa\u51c6\u6d4b\u8bd5\u51fd\u6570\u3002 // sizefmt.go package sizefmt import \"strconv\" func sizeFmt ( bit int64 ) string { const ( // \u5b9a\u4e49\u51e0\u4e2a\u6570\u91cf\u7ea7 _ = iota KB int64 = 1 << ( 10 * iota + 3 ) MB GB ) sizeFloat := float64 ( bit ) unit := \"b\" switch { // \u6839\u636e bit \u53c2\u6570\u7684\u5927\u5c0f\u683c\u5f0f\u5316\u4e0d\u540c\u7684\u5355\u4f4d case bit < KB : return strconv . FormatInt ( bit , 10 ) + unit case bit >= KB && bit < MB : sizeFloat /= 1 << 10 unit = \"K\" case bit >= MB && bit < GB : sizeFloat /= 1 << 20 unit = \"M\" case bit >= GB : sizeFloat /= 1 << 30 unit = \"G\" } return strconv . FormatFloat ( sizeFloat , 'f' , 2 , 64 ) + unit } \u7136\u540e\u7f16\u5199\u57fa\u51c6\u6d4b\u8bd5\u51fd\u6570\u3002 // sizefmt_test.go package sizefmt import \"testing\" // \u57fa\u51c6\u6d4b\u8bd5\u51fd\u6570\u4ee5 Benchmark \u5f00\u5934 func BenchmarkSizefmt ( b * testing . B ) { for i := 0 ; i < b . N ; i ++ { // b.N \u4e0d\u662f\u4e00\u4e2a\u56fa\u5b9a\u7684\u503c\uff0c\u5b83\u4f1a\u4e0d\u65ad\u8fed\u4ee3 sizeFmt ( 1 << 20 + 554 ) } } \u5728 for \u5faa\u73af\u4e2d\u4f7f\u7528\u5230\u4e86\u4e00\u4e2a b.N \uff0c\u8fd9\u4e2a\u53d8\u91cf \u4e0d\u662f\u4e00\u4e2a\u56fa\u5b9a\u7684\u503c\uff0c\u5b83\u4f1a\u4ece 1 \u4e0d\u65ad\u7684\u8fed\u4ee3\uff0c\u4f8b\u5982 1\u30012\u30015\u300110\u300120\u300150...\uff0c\u4fdd\u8bc1\u57fa\u51c6\u6d4b\u8bd5\u51fd\u6570\u7684\u6267\u884c\u65f6\u95f4\u81f3\u5c11\u8d85\u8fc7 1 \u79d2\u949f\u3002\u8fd9\u6837\u5f97\u5230\u7684\u6570\u636e\u624d\u6bd4\u8f83\u6709\u53c2\u8003\u6027\u3002 \u4ece 1 \u5f00\u59cb\u662f\u4fdd\u8bc1\u88ab\u6d4b\u8bd5\u51fd\u6570 sizeFmt \u81f3\u5c11\u6ca1\u95ee\u9898\u80fd\u8dd1\u5f97\u52a8\u3002 \u4f7f\u7528 -bench=RegExp \u6765\u6307\u5b9a\u53ea\u6267\u884c\u57fa\u51c6\u6d4b\u8bd5\u3002 $ go test . -bench = Sizefmt goos: linux goarch: amd64 pkg: goTest cpu: Intel ( R ) Core ( TM ) i5-7300HQ CPU @ 2 .50GHz BenchmarkSizefmt-4 3589545 330 .4 ns/op PASS ok goTest 1 .528s goos: \u5f53\u524d\u64cd\u4f5c\u7cfb\u7edf goarch: \u5f53\u524d\u82af\u7247\u67b6\u6784 pkg: \u57fa\u51c6\u6d4b\u8bd5\u51fd\u6570\u6240\u5728\u7684\u5305 cpu: \u5f53\u524d\u673a\u5668\u4e0a CPU \u4fe1\u606f BenchmarkSizefmt-4 : \u5bf9 sizeFmt \u51fd\u6570\u8fdb\u884c\u57fa\u51c6\u6d4b\u8bd5\uff0c\u5f53\u524d GOMAXPROCS \u7684\u503c\uff0c\u8fd9\u4e2a\u5bf9\u4e8e\u5f00\u53d1\u57fa\u51c6\u6d4b\u8bd5\u5f88\u91cd\u8981\u3002 3589545 : \u6267\u884c\u4e863\u767e\u591a\u4e07\u6b21 330.4 ns/op : \u5728\u8fd93\u767e\u591a\u4e07\u6b21\u8c03\u7528\u91cc\u5e73\u5747\u6bcf\u6b21\u8c03\u7528 sizeFmt \u51fd\u6570\u8017\u65f6 330.4 \u7eb3\u79d2\u3002 PASS : \u7528\u4e8e\u57fa\u51c6\u6d4b\u8bd5\u7684\u7528\u4f8b\u6267\u884c\u901a\u8fc7 ok goTest 1.528s : \u5171\u8017\u65f6 1.528 \u79d2 \u4f7f\u7528 -benchmem \u53c2\u6570\u53ef\u4ee5\u83b7\u5f97\u5185\u5b58\u5206\u914d\u7684\u7edf\u8ba1\u6570\u636e $ go test . -bench = Sizefmt -benchmem goos: linux goarch: amd64 pkg: goTest cpu: Intel ( R ) Core ( TM ) i5-7300HQ CPU @ 2 .50GHz BenchmarkSizefmt-4 3589545 330 .4 ns/op 40 B/op 3 allocs/op PASS ok goTest 1 .528s 40 B/op : \u5e73\u5747\u6bcf\u6b21\u8c03\u7528 sizeFmt \u51fd\u6570\u5360\u7528 40 \u4e2a\u5b57\u8282 3 allocs/op : \u6bcf\u6b21\u8c03\u7528 sizeFmt \u9700\u8981\u7533\u8bf7 3 \u6b21\u5185\u5b58","title":"\u6700\u7b80\u5355\u7684\u57fa\u51c6\u6d4b\u8bd5"},{"location":"Go/Basic/Golang-15-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/#_11","text":"\u4e0a\u8ff0\u4f8b\u5b50\u6211\u4eec\u5f97\u5230\u7684\u662f\u7ed9\u5b9a\u4f8b\u5b50\u7684\u7edd\u5bf9\u8017\u65f6\uff0c\u4f46\u6709\u4e9b\u95ee\u9898\uff0c\u4f8b\u5982\u6590\u6ce2\u90a3\u5951\u6570\u5217\uff0c\u6570\u91cf\u4e0d\u591a\u7684\u65f6\u5019\u8017\u65f6\u8fd8\u4e0d\u4f1a\u592a\u957f\uff0c\u4f46\u662f\u5f53\u8ba1\u7b97\u5230 40 \u5de6\u53f3\u7684\u65f6\u5019\u5c31\u5df2\u7ecf\u6162\u7684\u4e0d\u884c\u4e86\u3002 \u73b0\u5728\u6211\u4eec\u60f3\u8981\u77e5\u9053\uff0c\u5f53 Fib(n) \u7684 n \u4e3a 1\u300110\u300120\u300140\u300145 \u7684\u65f6\u5019\u4ed6\u4eec\u7684\u6027\u80fd\u3002 \u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u7f16\u5199\u4e00\u4e2a\u57fa\u51c6\u6d4b\u8bd5\u51fd\u6570\uff0c\u4e0d\u4ec5\u63a5\u53d7 b *testing.B \uff0c\u8fd8\u63a5\u53d7\u53e6\u5916\u4e00\u4e2a\u53c2\u6570 n \uff0c\u7136\u540e\u7f16\u5199\u51e0\u4e2a\u57fa\u51c6\u6d4b\u8bd5\u51fd\u6570\u6765\u6d4b\u8bd5\u3002\u5982\u4e0b\uff1a // fib.go package fib func Fib ( n int ) int { if n < 2 { return n } return Fib ( n - 1 ) + Fib ( n - 2 ) } // fib_test.go package fib import \"testing\" // \u628a\u539f\u672c\u7684\u57fa\u51c6\u51fd\u6570\u53d8\u6210\u5c0f\u5199\u5f00\u5934\uff0c\u8fd9\u6837 -bench=Fib \u7684\u65f6\u5019\u4e5f\u4e0d\u4f1a\u76f4\u63a5\u5339\u914d\u5230 // \u7136\u540e\u5e26\u4e0a\u4e00\u4e2a\u53c2\u6570 n func benchmarkFib ( b * testing . B , n int ) { for i := 0 ; i < b . N ; i ++ { fib ( n ) } } // \u7f16\u5199\u51e0\u4e2a\u4e0d\u540c n \u7684\u57fa\u51c6\u6d4b\u8bd5\u51fd\u6570\uff0c\u6bcf\u6b21\u53bb\u8c03\u7528\u539f\u672c\u7684\u57fa\u51c6\u6d4b\u8bd5\u51fd\u6570 func BenchmarkFib1 ( b * testing . B ) { benchmarkFib ( b , 1 ) } func BenchmarkFib10 ( b * testing . B ) { benchmarkFib ( b , 10 ) } func BenchmarkFib20 ( b * testing . B ) { benchmarkFib ( b , 20 ) } func BenchmarkFib40 ( b * testing . B ) { benchmarkFib ( b , 40 ) } func BenchmarkFib45 ( b * testing . B ) { benchmarkFib ( b , 45 ) } \u7136\u540e\u6267\u884c\u547d\u4ee4\uff1a $ go test -bench = Fib -benchmem goos: linux goarch: amd64 pkg: goTest cpu: Intel ( R ) Core ( TM ) i5-7300HQ CPU @ 2 .50GHz BenchmarkFibGreedy1-4 457008499 2 .601 ns/op 0 B/op 0 allocs/op BenchmarkFibGreedy10-4 2589387 462 .6 ns/op 0 B/op 0 allocs/op BenchmarkFibGreedy20-4 19940 57224 ns/op 0 B/op 0 allocs/op BenchmarkFibGreedy40-4 2 865527961 ns/op 0 B/op 0 allocs/op BenchmarkFibGreedy45-4 1 9598796528 ns/op 0 B/op 0 allocs/op PASS ok goTest 17 .082s \u53ef\u4ee5\u770b\u51fa\uff0cn \u6bd4\u8f83\u5c11\u7684\u65f6\u5019\uff0c\u6267\u884c\u7684\u6b21\u6570\u6bd4\u8f83\u591a\uff0c\u6bcf\u6b21\u8017\u8d39\u7684\u65f6\u95f4\u4e5f\u4e0d\u591a\u3002\u5f53 n \u8d85\u8fc7 40 \u4ee5\u540e\uff0c\u673a\u5668\u6709\u70b9\u53d7\u4e0d\u4e86\u4e86\uff0c 45 \u4ec5\u4ec5\u53ea\u6267\u884c\u4e86\u4e00\u6b21\uff0c\u8fd8\u8017\u65f6 9 \u79d2\u591a\u3002 \u4e3b\u8981\u7684\u539f\u56e0\u662f\u91c7\u7528\u4e86\u9012\u5f52\u6c42\u6590\u6ce2\u90a3\u5951\u6570\u5217\uff0c\u8c03\u7528\u6808\u5f88\u5feb\u5c31\u7206\u6ee1\u4e86\u3002 \u5f97\u5230\u6027\u80fd\u6570\u636e\u4fe1\u606f\u4ee5\u540e\uff0c\u6211\u4eec\u5c31\u5f97\u77e5\u8fd9\u4e2a Fib \u5728 n \u7a0d\u5927\u65f6\u6548\u679c\u4e0d\u7406\u60f3\uff0c\u5e94\u505a\u6539\u8fdb\u3002 \u9012\u5f52\u5c5e\u4e8e\u5206\u6cbb\u6cd5\u4e2d\u7684\u4e00\u79cd\uff0c\u6211\u4eec\u53ef\u4ee5\u6362\u6210\u52a8\u6001\u89c4\u5212\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 // fib.go package fib // \u7528\u9012\u5f52\u6c42\u6590\u6ce2\u90a3\u5951\u6570\u5217 func fibDAC ( n int ) int { if n < 2 { return n } return fibDAC ( n - 1 ) + fibDAC ( n - 2 ) } // \u7528\u52a8\u6001\u89c4\u5212\u6c42 func fibDP ( n int ) int { if n < 2 { return n } slice := make ([] int , n ) slice [ 0 ] = 1 slice [ 1 ] = 1 for i := 2 ; i < n ; i ++ { slice [ i ] = slice [ i - 1 ] + slice [ i - 2 ] } return slice [ n - 1 ] } // fib_test.go package fib import \"testing\" func benchmarkFibDAC ( b * testing . B , n int ) { for i := 0 ; i < b . N ; i ++ { fibDAC ( n ) } } func BenchmarkFibDAC1 ( b * testing . B ) { benchmarkFibDAC ( b , 1 ) } func BenchmarkFibDAC10 ( b * testing . B ) { benchmarkFibDAC ( b , 10 ) } func BenchmarkFibDAC20 ( b * testing . B ) { benchmarkFibDAC ( b , 20 ) } func BenchmarkFibDAC40 ( b * testing . B ) { benchmarkFibDAC ( b , 40 ) } func BenchmarkFibDAC45 ( b * testing . B ) { benchmarkFibDAC ( b , 45 ) } func benchmarkFibDP ( b * testing . B , n int ) { for i := 0 ; i < b . N ; i ++ { fibDP ( n ) } } func BenchmarkFibDP1 ( b * testing . B ) { benchmarkFibDP ( b , 1 ) } func BenchmarkFibDP10 ( b * testing . B ) { benchmarkFibDP ( b , 10 ) } func BenchmarkFibDP100 ( b * testing . B ) { benchmarkFibDP ( b , 100 ) } func BenchmarkFibDP1000 ( b * testing . B ) { benchmarkFibDP ( b , 1000 ) } \u6267\u884c\u6d4b\u8bd5\uff1a $ go test -bench = FibDP -benchmem goos: linux goarch: amd64 pkg: goTest cpu: Intel ( R ) Core ( TM ) i5-7300HQ CPU @ 2 .50GHz BenchmarkFibDP1-4 1000000000 0 .4029 ns/op 0 B/op 0 allocs/op BenchmarkFibDP10-4 20096688 51 .87 ns/op 80 B/op 1 allocs/op BenchmarkFibDP100-4 3030915 380 .3 ns/op 896 B/op 1 allocs/op BenchmarkFibDP1000-4 328071 3656 ns/op 8192 B/op 1 allocs/op PASS ok goTest 5 .356s $ go test -bench = FibDAC -benchmem goos: linux goarch: amd64 pkg: goTest cpu: Intel ( R ) Core ( TM ) i5-7300HQ CPU @ 2 .50GHz BenchmarkFibGreedy1-4 457008499 2 .601 ns/op 0 B/op 0 allocs/op BenchmarkFibGreedy10-4 2589387 462 .6 ns/op 0 B/op 0 allocs/op BenchmarkFibGreedy20-4 19940 57224 ns/op 0 B/op 0 allocs/op BenchmarkFibGreedy40-4 2 865527961 ns/op 0 B/op 0 allocs/op BenchmarkFibGreedy45-4 1 9598796528 ns/op 0 B/op 0 allocs/op PASS ok goTest 17 .082s \u4e0a\u9762 FibDP \u662f\u5bf9\u52a8\u6001\u89c4\u5212\u5b9e\u73b0\u7684\u57fa\u51c6\u6d4b\u8bd5\uff0c\u4e0b\u9762 FibDAC \u662f\u5bf9\u9012\u5f52\u5b9e\u73b0\u7684\u57fa\u51c6\u6d4b\u8bd5\u3002\u53ef\u4ee5\u770b\u5230\u5dee\u8ddd\u5341\u5206\u5de8\u5927\u3002 \u6ce8\u610f\u4e0d\u8981\u62ff b.N \u5f53\u53c2\u6570 // \u9519\u8bef\u793a\u83031 func BenchmarkFibWrong ( b * testing . B ) { for n := 0 ; n < b . N ; n ++ { Fib ( n ) } } // \u9519\u8bef\u793a\u83032 func BenchmarkFibWrong2 ( b * testing . B ) { Fib ( b . N ) }","title":"\u6027\u80fd\u6bd4\u8f83\u51fd\u6570"},{"location":"Go/Basic/Golang-15-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/#_12","text":"b.ResetTime() \u53ef\u4ee5\u91cd\u7f6e\u8ba1\u65f6\u5668\uff0c\u4e5f\u5c31\u662f\u8fd9\u53e5\u8bed\u53e5\u524d\u9762\u7684\u8017\u65f6\u4e0d\u8ba1\u5165\u3002\u6240\u4ee5\u53ef\u4ee5\u6267\u884c\u4e00\u4e9b\u4e0d\u53c2\u4e0e\u65f6\u95f4\u6d4b\u8bd5\u7684\u5de5\u4f5c\uff0c\u7136\u540e b.ResetTimer() . func BenchmarkFib ( b * testing . B ) { fmt . Println ( \"Start Benchmark test of Fib()\" ) time . Sleep ( time . Second ) for i := 0 ; i < b . N ; i ++ { Fib ( 10 ) } }","title":"\u91cd\u7f6e\u65f6\u95f4"},{"location":"Go/Basic/Golang-15-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/#_13","text":"","title":"\u5e76\u884c\u6d4b\u8bd5"},{"location":"Go/Basic/Golang-15-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/#testmainsetup-teardown","text":"","title":"TestMain\u3001Setup \u548c Teardown"},{"location":"Go/Basic/Golang-15-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/#testmain","text":"\u51fd\u6570\u540d\u4e3a TestMain \u51fd\u6570\u53c2\u6570\u5fc5\u987b\u5305\u542b\u4e00\u4e2a\u5f62\u53c2 *testing.M \u51fd\u6570\u6ca1\u6709\u8fd4\u56de\u503c func TestMain ( m * testing . M ) { // ... } \u53c2\u6570 m \u7528\u4e8e\u542f\u52a8\u6d4b\u8bd5\uff0c\u542f\u52a8\u65b9\u6cd5\u5982\u4e0b\uff1a func ( m * M ) Run () ( code int ) \u6709\u65f6\u5019\u9047\u5230\u6d4b\u8bd5\u4e4b\u524d\u9700\u8981\u505a\u4e00\u4e9b\u521d\u59cb\u5316\u5de5\u4f5c\u6216\u8005\u6d4b\u8bd5\u4e4b\u540e\u9700\u8981\u505a\u4e00\u4e9b\u6536\u5c3e\u5de5\u4f5c\uff0c\u5c31\u53ef\u4ee5\u7528 TestMain() \u3002 \u5982\u679c\u6d4b\u8bd5\u6587\u4ef6\u4e2d\u5305\u542b TestMain() \uff0c\u90a3\u4e48\u751f\u6210\u7684\u6d4b\u8bd5\u5c06\u8c03\u7528 TestMain(m) \uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u5176\u4ed6\u8fd0\u884c\u6d4b\u8bd5\u3002 m.Run() \u88ab\u8c03\u7528\u540e\uff0c\u5c06\u4f1a\u8fd0\u884c\u6d4b\u8bd5\u6587\u4ef6\u4e2d\u6240\u6709\u7684\u6d4b\u8bd5\u51fd\u6570\u3002 TestMain \u8fd0\u884c\u5728\u4e3b goroutine \u4e2d , \u53ef\u4ee5\u5728\u8c03\u7528 m.Run \u524d\u540e\u505a\u4efb\u4f55 Setup \u548c Teardown \u3002 \u6ce8\u610f\uff0c\u5728 TestMain \u51fd\u6570\u7684\u6700\u540e\uff0c\u5e94\u8be5\u4f7f\u7528 m.Run \u7684\u8fd4\u56de\u503c\u4f5c\u4e3a\u53c2\u6570\u53bb\u8c03\u7528 os.Exit \u3002 \u53e6\u5916\uff0c\u5728\u8c03\u7528 TestMain \u65f6 , flag.Parse \u5e76\u6ca1\u6709\u88ab\u8c03\u7528\u3002 \u6240\u4ee5\uff0c\u5982\u679c TestMain \u4f9d\u8d56\u4e8e command-line \u6807\u5fd7\uff08\u5305\u62ec testing \u5305\u7684\u6807\u5fd7\uff09\uff0c\u5219\u5e94\u8be5\u663e\u5f0f\u5730\u8c03\u7528 flag.Parse \u3002\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u4f9d\u8d56\u662f\u6307\uff0c\u82e5 TestMain \u51fd\u6570\u5185\u9700\u8981\u7528\u5230 command-line \u6807\u5fd7\uff0c\u5219\u5fc5\u987b\u663e\u5f0f\u5730\u8c03\u7528 flag.Parse \uff0c\u5426\u5219\u4e0d\u9700\u8981\uff0c\u56e0\u4e3a m.Run \u4e2d\u8c03\u7528 flag.Parse \u3002","title":"TestMain \u57fa\u672c\u683c\u5f0f"},{"location":"Go/Basic/Golang-15-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/#_14","text":"// fib.go package fib func Fib ( n int ) int { if n < 2 { return n } return Fib ( n - 1 ) + Fib ( n - 2 ) } // fib_test.go package fib import \"testing\" // \u5355\u5143\u6d4b\u8bd5\u51fd\u6570\uff0c\u4ee5 Test\u5f00\u5934 func TestFib ( t * testing . T ) { var ( input = 7 // \u8f93\u5165\u6570\u636e expected = 13 // \u671f\u671b\u7ed3\u679c ) actual := Fib ( input ) // \u7a0b\u5e8f\u6267\u884c\u7ed3\u679c if actual != expected { // \u5982\u679c\u4e0e\u671f\u671b\u7ed3\u679c\u4e0d\u4e00\u81f4\uff0c\u5219\u8f93\u51fa\u9519\u8bef\u63d0\u793a\u3002 t . Errorf ( \"Fib(%d) = %d; expected %d\" , input , actual , expected ) } } func setup () { fmt . Println ( \"\u8bbe\u7f6e\u4e00\u4e9b\u4e1c\u897f\" ) } func teardown () { fmt . Println ( \"\u6e05\u7406\u4e00\u4e9b\u4e1c\u897f\" ) } func TestMain ( m * testing . M ) { setup () code := m . Run () teardown () os . Exit ( code ) } $ go test \u8bbe\u7f6e\u4e00\u4e9b\u4e1c\u897f PASS \u6e05\u7406\u4e00\u4e9b\u4e1c\u897f ok goTest 0 .002s","title":"\u793a\u4f8b"},{"location":"Go/Basic/Golang-15-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/#setup-teardown","text":"\u6709\u65f6\u5019\u4e0d\u53ea\u662f\u5168\u5c40\u8fdb\u884c\u6d4b\u8bd5\u7684\u65f6\u5019\u9700\u8981 Setup \u548c Teardown\uff0c\u6709\u53ef\u80fd\u6bcf\u4e2a\u5b50\u6d4b\u8bd5\u5728\u6d4b\u8bd5\u7684\u65f6\u5019\u4e5f\u9700\u8981 Setup \u548c Teardown\u3002\u90a3\u53ef\u4ee5\u5bf9 Setup \u548c Teardown \u5c1d\u8bd5\u4ee5\u4e0b\u8fd9\u79cd\u4f18\u96c5\u7684\u5199\u6cd5\uff1a func setup () func () { fmt . Println ( \"Setup\" ) return func () { fmt . Println ( \"Teardown\" ) } } \u7136\u540e\u5728\u5b50\u6d4b\u8bd5\u4e2d\u8fd9\u6837\u4f7f\u7528\uff1a func TestFibDP ( t * testing . T ) { // 1 1 2 3 5 8 13 21 34 55 tests := map [ string ] test { \"case1\" : { 1 , 1 }, \"case2\" : { 2 , 1 }, \"case3\" : { 3 , 2 }, \"case4\" : { 7 , 13 }, \"case9\" : { 9 , 34 }, } for name , tc := range tests { t . Run ( name , func ( t * testing . T ) { teardown := setup () defer teardown () if got := fibDP ( tc . in ); got != tc . want { t . Errorf ( \"want: %v, got: %v\" , tc . want , got ) } else { fmt . Println ( \"yes!!!\" ) } }) } } \u6548\u679c\u5982\u4e0b\uff1a $ go test -run = FibDP -v \u2500\u2500 ( \u65e5,7\u670811 ) \u2500\u2518 === RUN TestFibDP === RUN TestFibDP/case1 Setup yes!!! Teardown === RUN TestFibDP/case2 Setup yes!!! Teardown === RUN TestFibDP/case3 Setup yes!!! Teardown === RUN TestFibDP/case4 Setup yes!!! Teardown === RUN TestFibDP/case9 Setup yes!!! Teardown --- PASS: TestFibDP ( 0 .00s ) --- PASS: TestFibDP/case1 ( 0 .00s ) --- PASS: TestFibDP/case2 ( 0 .00s ) --- PASS: TestFibDP/case3 ( 0 .00s ) --- PASS: TestFibDP/case4 ( 0 .00s ) --- PASS: TestFibDP/case9 ( 0 .00s ) PASS ok goTest 0 .002s \u53c2\u8003\uff1a [\u674e\u6587\u5468\u535a\u5ba2] : https://www.liwenzhou.com/posts/Go/16_test/#autoid-3-1-0","title":"\u5b50\u6d4b\u8bd5\u7684 Setup \u548c Teardown"},{"location":"Go/Basic/Golang-2-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/","text":"\u57fa\u7840\u6570\u636e\u7c7b\u578b 2-\u6570\u636e\u7c7b\u578b \u00b6 \u6574\u578b \u00b6 \u6574\u578b\u5206\u4e3a\u4e24\u5927\u7c7b\uff1a \u6709\u7b26\u53f7 \u548c \u65e0\u7b26\u53f7 \u6309\u957f\u5ea6\u5206\u4e3a\uff1a int8 \u3001 int16 \u3001 int32 \u3001 int64 \uff1b uint8 \u3001 uint16 \u3001 uint32 \u3001 uint64 \u7c7b\u578b \u8303\u56f4 \u63cf\u8ff0 \u5bf9\u5e94C int8 -128~127 \u6709\u7b26\u53f78\u4f4d\u6574\u578b byte int16 -32768~32767 \u6709\u7b26\u53f716\u4f4d\u6574\u578b short int32 -2147483648~2147483647 \u6709\u7b26\u53f732\u4f4d\u6574\u578b int int64 -9223372036854775808~9223372036854775807 \u6709\u7b26\u53f764\u4f4d\u6574\u578b long uint8 0~255 \u65e0\u7b26\u53f78\u4f4d\u6574\u578b unsigned byte uint16 0\u00b765535 \u65e0\u7b26\u53f716\u4f4d\u6574\u578b unsigned short uint32 0~4294967295 \u65e0\u7b26\u53f732\u4f4d\u6574\u578b unsigned int uint64 0~18446744073709551615 \u65e0\u7b26\u53f764\u4f4d\u6574\u578b unsigned long \u7279\u6b8a\u6574\u578b \u00b6 \u7c7b\u578b \u63cf\u8ff0 uint 32\u4f4dOS\u4e0a\u5c31\u662fuint32\uff0c64\u4f4dOS\u4e0a\u5c31\u662fuint64 int 32\u4f4dOS\u4e0a\u5c31\u662fint32\uff0c64\u4f4dOS\u4e0a\u5c31\u662fint64 uintptr \u65e0\u7b26\u53f7\u6574\u578b\uff0c\u7528\u4e8e\u5b58\u653e\u4e00\u4e2a\u6307\u9488 \u6ce8\u610f \uff1a \u5728\u4f7f\u7528 int \u548c uint \u7c7b\u578b\u65f6\uff0c\u4e0d\u80fd\u5047\u5b9a\u5b83\u662f32\u4f4d\u621664\u4f4d\u7684\u6574\u578b\uff0c\u800c\u8981\u8003\u8651 int \u548c uint \u53ef\u80fd\u5728\u4e0d\u540c\u5e73\u53f0\u4e0a\u7684\u5dee\u5f02\u3002 \u5728\u6d89\u53ca\u5230**\u4e8c\u8fdb\u5236\u4f20\u8f93\u3001\u8bfb\u5199\u6587\u4ef6\u7684\u7ed3\u6784\u63cf\u8ff0**\u65f6\uff0c\u4e3a\u4e86\u4fdd\u6301\u6587\u4ef6\u7684\u7ed3\u6784\u4e0d\u4f1a\u53d7\u5230\u4e0d\u540c\u7f16\u8bd1\u76ee\u6807\u5e73\u53f0\u5b57\u8282\u957f\u5ea6\u7684\u5f71\u54cd\uff0c\u4e0d\u8981\u4f7f\u7528 int \u548c uint \u3002 \u6570\u5b57\u5b57\u9762\u91cf\u8bed\u6cd5 \u00b6 \u5b57\u9762\u91cf\u8bed\u6cd5\u4f7f\u5f97\u5f00\u53d1\u8005\u53ef\u4ee5\u7528 \u4e8c\u8fdb\u5236\u3001\u516b\u8fdb\u5236\u3001\u5341\u516d\u8fdb\u5236\u7684\u683c\u5f0f\u5b9a\u4e49\u6570\u5b57 v := 0b101110 \uff0c 0b\u524d\u7f00 \uff1b\u4ee3\u8868\u4e8c\u8fdb\u5236\u7684 101110\uff0c\u76f8\u5f53\u4e8e\u516b\u8fdb\u5236\u768456\uff0c\u5341\u8fdb\u5236\u768446\uff0c\u5341\u516d\u8fdb\u5236\u7684 2E v := 0o56 \uff0c0o\u524d\u7f00\uff1b\u4ee3\u8868\u516b\u8fdb\u5236\u7684 56 v := 46 \uff0c \u65e0\u524d\u7f00 \uff1b\u4ee3\u8868\u5341\u8fdb\u5236\u7684 46 v := 0x2e \uff0c 0x\u524d\u7f00 \uff1b\u4ee3\u8868\u5341\u516d\u8fdb\u5236\u7684 2E v := 0x1p-2 \uff0c\u4ee3\u8868\u5341\u516d\u8fdb\u5236\u7684 1 \u9664\u4ee5 \\(2^2\\) \uff0c\u4e5f\u5c31\u662f 0.25 \u8fd8\u53ef\u4ee5\u7528 _ \u6765\u5206\u9694\u6570\u5b57\u3002\u6bd4\u5982 v := 1_000_000 \u8868\u793a v \u7684\u503c\u7b49\u4e8e \u4e00\u767e\u4e07 1000000\u3002 \u501f\u52a9 Printf() \u53ef\u4ee5\u5c06\u4e00\u4e2a\u6574\u6570\u4ee5\u4e0d\u540c\u8fdb\u5236\u5f62\u5f0f\u5c55\u793a func main () { num := 0 b101110 fmt . Printf ( \"%b \\t %#b \\n\" , num , num ) fmt . Printf ( \"%o \\t\\t %#o \\n\" , num , num ) fmt . Printf ( \"%d \\t\\t %#d \\n\" , num , num ) fmt . Printf ( \"%x \\t\\t %#x \\t %#X \\n\" , num , num , num ) } // ---------------------------------------- // Output: 101110 0 b101110 56 056 46 46 2 e 0x2e 0X2E \u6574\u578b\u652f\u6301\u7b97\u672f\u8fd0\u7b97\u548c\u4f4d\u64cd\u4f5c\uff0c\u7b97\u672f\u8868\u8fbe\u5f0f\u548c\u4f4d\u64cd\u4f5c\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u8fd8\u662f\u6574\u578b var a int = 1000 >> 2 \u6d6e\u70b9\u578b \u00b6 Go \u8bed\u8a00\u652f\u6301\u4e24\u79cd\u6d6e\u70b9\u578b\u6570\uff1a float32 \u548c float64 \u3002 \u8fd9\u4e24\u79cd\u6d6e\u70b9\u578b\u6570\u636e\u683c\u5f0f\u9075\u5faa IEEE754 \u6807\u51c6\uff1a float32 \u7684\u6d6e\u70b9\u6570\u6700\u5927\u8303\u56f4\u7ea6\u4e3a 3.4e38 \uff0c\u53ef\u4ee5\u4f7f\u7528\u5e38\u91cf\u5b9a\u4e49 math.MaxFloat32 float64 \u7684\u6d6e\u70b9\u6570\u6700\u5927\u8303\u56f4\u7ea6\u4e3a 1.8e308 \uff0c\u53ef\u4ee5\u4f7f\u7528\u5e38\u91cf\u5b9a\u4e49 math.MaxFloat64 \u6253\u5370\u6d6e\u70b9\u6570\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u5360\u4f4d\u7b26 %f : package main import \"math\" import \"fmt\" func main () { fmt . Printf ( \"%f \\n\" , math . Pi ) fmt . Printf ( \"%.2f \\n\" , math . Pi ) } // ---------------------------------------- // Output: 3.141593 3.14 \u6d6e\u70b9\u578b\u5b57\u9762\u91cf\u88ab\u81ea\u52a8\u7c7b\u578b\u63a8\u65ad\u4e3a float64 \u7c7b\u578b b := 10.00 fmt . Printf ( \"%T\" , b ) // float64 \u8ba1\u7b97\u673a\u5f88\u96be\u8fdb\u884c\u6d6e\u70b9\u6570\u7684\u7cbe\u786e\u8868\u793a\u548c\u5b58\u50a8\uff0c\u56e0\u6b64\u4e24\u4e2a\u6d6e\u70b9\u6570\u4e4b\u95f4\u4e0d\u5e94\u8be5\u4f7f\u7528 == \u6216 != \u6765\u6bd4\u8f83\uff0c\u9ad8\u7cbe\u5ea6\u79d1\u5b66\u8ba1\u7b97\u5e94\u8be5\u4f7f\u7528 math \u6807\u51c6\u5e93 \u590d\u6570 \u00b6 complex64 \u548c complex128 var c1 complex64 = 1 + 2i var c2 complex128 = 2 + 3i fmt . Println ( c1 ) fmt . Println ( c2 ) // ---------------------------------------- // Output: ( 1 + 2i ) ( 2 + 3i ) \u590d\u6570\u6709\u5b9e\u90e8\u548c\u865a\u90e8 complex64\u7684\u5b9e\u90e8\u548c\u865a\u90e8\u4e3a32\u4f4d complex128\u7684\u5b9e\u90e8\u548c\u865a\u90e8\u4e3a64\u4f4d\u3002 Go \u6709\u4e09\u4e2a\u5185\u7f6e\u51fd\u6570\u5904\u7406\u590d\u6570 var v = complex ( 2.1 , 3 ) // \u6784\u9020\u4e00\u4e2a\u590d\u6570 (2.1+3i) a := real ( v ) // \u8fd4\u56de\u590d\u6570\u5b9e\u90e8 2.1 b := imag ( v ) // \u8fd4\u56de\u590d\u6570\u865a\u90e8 3 \u5e03\u5c14\u503c \u00b6 Go \u8bed\u8a00\u4e2d\u4ee5 bool \u7c7b\u578b\u8fdb\u884c\u58f0\u660e\u5e03\u5c14\u578b\uff0c\u5e03\u5c14\u578b\u6570\u636e\u53ea\u6709 true \u548c false \u4e24\u4e2a\u503c\u3002 \u5e03\u5c14\u7c7b\u578b\u53d8\u91cf\u9ed8\u8ba4\u503c\u4e3a false Go \u8bed\u8a00\u4e2d**\u4e0d\u5141\u8bb8\u5c06\u6574\u578b\u5f3a\u5236\u8f6c\u6362\u4e3a\u5e03\u5c14\u578b\uff08integer !-> bool\uff09** \u5e03\u5c14\u578b\u65e0\u6cd5\u53c2\u4e0e\u6570\u503c\u8fd0\u7b97\uff0c\u65e0\u6cd5\u4e0e\u5176\u4ed6\u7c7b\u578b\u8fdb\u884c\u8f6c\u6362 \u5b57\u7b26\u4e32 \u00b6 Go \u8bed\u8a00\u4e2d\u7684\u5b57\u7b26\u4e32\u662f\u539f\u751f\u6570\u636e\u7c7b\u578b \uff0c\u4f7f\u7528\u5b57\u7b26\u4e32\u5c31\u50cf\u4f7f\u7528\u5176\u4ed6\u539f\u751f\u6570\u636e\u7c7b\u578b\uff08int\u3001bool\u3001float32\u7b49\uff09\u4e00\u6837 Go \u8bed\u8a00\u4e2d\u5b57\u7b26\u4e32\u5185\u90e8\u5b9e\u73b0\u4f7f\u7528 UTF-8 \u7f16\u7801\uff0c\u8fd9\u4f7f\u5f97 go \u4e0d\u9700\u8981\u4e13\u95e8\u4f7f\u7528 UTF-8 \u5b57\u7b26\u96c6\u7684\u6587\u672c\u8fdb\u884c\u7f16\u7801\u548c\u89e3\u7801\uff0c\u53ef\u4ee5\u5728Go\u8bed\u8a00\u4e2d\u76f4\u63a5\u6dfb\u52a0\u975eASCII\u7801\u5b57\u7b26 \u5b57\u7b26\u4e32\u662f\u4e00\u79cd\u503c\u7c7b\u578b\uff0c\u4e14\u503c\u4e0d\u53ef\u53d8\uff1b\u5373\u521b\u5efa\u67d0\u4e2a\u6587\u672c\u540e\u4f60\u65e0\u6cd5\u518d\u6b21\u4fee\u6539\u8fd9\u4e2a\u6587\u672c\u7684\u5185\u5bb9\uff0c\u5373\u4f7f\u4f60\u6539\u53d8\u4e86\uff0c\u4f60\u4f1a\u53d1\u73b0\u90a3\u5df2\u7ecf\u4e0d\u662f\u539f\u6765\u7684\u90a3\u4e32\u5b57\u7b26\u4e32\u4e86\u3002 \u66f4\u6df1\u5165\u7684\u8bb2\uff0c\u5b57\u7b26\u4e32\u662f**\u5b57\u8282\u7684\u5b9a\u957f\u6570\u7ec4**\u3002 Go \u652f\u6301\u4ee5\u4e0b2\u79cd\u5f62\u5f0f\u7684\u5b57\u9762\u503c \u89e3\u91ca\u5b57\u7b26\u4e32 \u8be5\u7c7b\u5b57\u7b26\u4e32\u4f7f\u7528\u53cc\u62ec\u53f7 \"\" \u5f15\u8d77\u6765\uff0c\u5176\u4e2d\u8f6c\u4e49\u5b57\u7b26\uff08 \\n\u3001\\r\u3001 \\t\u3001 \\\\ \uff09\u4f1a\u88ab\u66ff\u6362\u3002 eg\uff1a str1 := \"Hello\" str2 := \"Boii\" - \u975e\u89e3\u91ca\u5b57\u7b26\u4e32 \u8be5\u7c7b\u5b57\u7b26\u4e32\u4f7f\u7528\u53cd\u5f15\u53f7\u62ec\u8d77\u6765 `` \uff0c\u652f\u6301\u6362\u884c eg\uff1a // \u4e0b\u9762\u7684 \\n \u4f1a\u88ab\u539f\u6837\u8f93\u51fa str := `This is a raw string \\n` Go \u4e2d\u7684\u5b57\u7b26\u4e32\u662f\u6839\u636e\u957f\u5ea6\u9650\u5b9a\uff0c\u800c\u975e\u7279\u6b8a\u5b57\u7b26 \\0 \u3002 string \u7c7b\u578b\u7684\u96f6\u503c\uff1a\u957f\u5ea6\u4e3a 0 \u7684\u5b57\u7b26\u4e32\uff0c\u5373\u7a7a\u5b57\u7b26\u4e32 \"\" \u53ef\u4ee5\u901a\u8fc7 len() \u51fd\u6570\u6765\u83b7\u53d6\u5b57\u7b26\u4e32\u5b57\u7b26\u4e2a\u6570 \u5b57\u7b26\u4e32\u4e2d\u7684\u5185\u5bb9\uff08\u7eaf\u5b57\u8282\uff09\u53ef\u4ee5\u901a\u8fc7\u6807\u51c6\u7d22\u5f15\u6cd5\u6765\u83b7\u53d6 func main () { str := \"hello Boii\" c1 := str [ 0 ] c4 := str [ 4 ] cEnd := str [ len ( str ) - 1 ] fmt . Println ( c1 ) // 104 fmt . Println ( c4 ) // 111 fmt . Println ( cEnd ) // 105 } \u8f93\u51fa\u7684\u662f\u5b57\u7b26\u7684 Ascii \u7801 \u5b57\u7b26\u4e32\u7c7b\u578b\u5e95\u5c42\u5b9e\u73b0\u662f\u4e00\u4e2a\u4e8c\u5143\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4e00\u4e2a\u662f\u6307\u5411\u5b57\u8282\u6570\u7ec4\u7684\u8d77\u70b9\uff0c\u53e6\u4e00\u4e2a\u662f\u957f\u5ea6\u3002 eg\uff1a // runtime/string.go type stringStruct struct { str unsafe . Pointer // \u6307\u5411\u5e95\u5c42\u5b57\u8282\u6570\u7ec4\u7684\u6307\u9488 len int // \u5b57\u8282\u6570\u7ec4\u957f\u5ea6 } 7. \u57fa\u4e8e\u5b57\u7b26\u4e32\u521b\u5efa\u7684\u5207\u7247 \u548c \u539f\u5b57\u7b26\u4e32 \u6307\u5411\u76f8\u540c\u7684 \u5e95\u5c42\u5b57\u7b26\u6570\u7ec4\uff0c\u4e00\u6837\u4e0d\u80fd\u4fee\u6539\uff0c \u5bf9\u5b57\u7b26\u4e32\u7684\u5207\u7247\u64cd\u4f5c\u8fd4\u56de\u7684\u4ecd\u7136\u662f string\uff0c\u800c\u975e slice \u3002 a := \"Hello World\" b := a [ 0 : 4 ] c := a [ 1 :] fmt . Printf ( \"b -> %s, b -> type: %T\\n\" , b , b ) // b -> Hell, b -> type: string fmt . Printf ( \"c -> %s, c -> type: %T\\n\" , c , c ) // c -> ello World, c -> type: string \u5b57\u7b26\u4e32\u5e38\u7528\u64cd\u4f5c \u00b6 \u65b9\u6cd5 \u63cf\u8ff0 \u8fd4\u56de\u503c len(str) \u6c42\u5b57\u7b26\u4e32\u957f\u5ea6 int + \u6216 fmt.Sprintf(\"%s %s\", str1, str2) \u62fc\u63a5\u5b57\u7b26\u4e32 string strings.Split(str, \u5206\u9694\u7b26) \u5206\u5272\u5b57\u7b26\u4e32 []string strings.Contains(str, \u76ee\u6807\u5185\u5bb9) \u5224\u65adstr\u662f\u5426\u5305\u542b\u76ee\u6807\u5b50\u4e32 bool strings.HasPrefix(str, \u76ee\u6807\u5185\u5bb9) \u5224\u65adstr\u662f\u5426\u4ee5\u76ee\u6807\u5185\u5bb9\u5f00\u5934 bool strings.HasSuffix(str, \u76ee\u6807\u5185\u5bb9) \u5224\u65adstr\u662f\u5426\u4ee5\u76ee\u6807\u5185\u5bb9\u7ed3\u5c3e bool strings.Index(str, \u76ee\u6807\u5185\u5bb9) \u8fd4\u56destr\u7b2c\u4e00\u6b21\u51fa\u73b0\u76ee\u6807\u5185\u5bb9\u7684\u9996\u4e2a\u5b57\u7b26\u7684\u4e0b\u6807 int strings.LastIndex(str, \u76ee\u6807\u5185\u5bb9) \u8fd4\u56destr\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u76ee\u6807\u5185\u5bb9\u7684\u9996\u4e2a\u5b57\u7b26\u7684\u4e0b\u6807 int strings.Join(strArr, \u62fc\u63a5\u7b26\u53f7) \u8fd4\u56de\u7528\u62fc\u63a5\u7b26\u53f7\u62fc\u63a5strArr\u7684\u5b57\u7b26\u4e32 string package main import ( \"fmt\" \"strings\" ) func main () { // \u6c42\u5b57\u7b26\u4e32\u957f\u5ea6 str1 := `hello Boii` fmt . Println ( len ( str1 )) // 10 str2 := \"Hello \u4e2d\u56fd\" fmt . Println ( len ( str2 )) // 12 fmt . Println () // \u62fc\u63a5\u5b57\u7b26\u4e32 fmt . Println ( str1 + str2 ) // hello BoiiHello \u4e2d\u56fd str3 := fmt . Sprintf ( \"%s | %s\" , str1 , str2 ) fmt . Println ( str3 ) // hello Boii | Hello \u4e2d\u56fd fmt . Println () // \u5b57\u7b26\u4e32\u5206\u5272 str4 := `How do you do` fmt . Println ( strings . Split ( str4 , \" \" )) // [How do you do] fmt . Printf ( \"%T \\n\" , strings . Split ( str4 , \" \" )) // []string fmt . Println () // \u5224\u65ad\u662f\u5426\u5305\u542b fmt . Println ( strings . Contains ( str4 , \"do\" )) // true // \u5224\u65ad\u524d\u7f00 fmt . Println ( strings . HasPrefix ( str4 , \"How\" )) // true // \u5224\u65ad\u540e\u7f00 fmt . Println ( strings . HasSuffix ( str4 , \"How\" )) // false fmt . Println () // \u5224\u65ad\u5b50\u4e32\u4f4d\u7f6e fmt . Println ( strings . Index ( str4 , \"do\" )) // 4 // \u6700\u540e\u5b50\u4e32\u51fa\u73b0\u7684\u4f4d\u7f6e fmt . Println ( strings . LastIndex ( str4 , \"do\" )) // 11 fmt . Println () // join str5 := [] string { \"how\" , \"do\" , \"you\" , \"do\" } fmt . Println ( str5 ) // [how do you do] fmt . Println ( strings . Join ( str5 , \"-\" )) // how-do-you-do } \u5b57\u7b26 \u00b6 Go \u7684\u5b57\u7b26\u6709\u4ee5\u4e0b\u4e24\u79cd\uff1a 1. uint8\u7c7b\u578b\uff0c\u522b\u540d byte\uff0c\u4ee3\u8868\u4e00\u4e2a ASCII \u7801\u5b57\u7b26 2. int32\u7c7b\u578b\uff0c\u522b\u540d rune\uff0c\u4ee3\u8868\u4e00\u4e2a UTF-8 \u5b57\u7b26 \u6ce8\u610f\uff1a\u5b57\u7b26\u7528\u5355\u5f15\u53f7( ' ' )\u62ec\u8d77\u6765 func main () { var c1 byte = 'a' var c2 rune = 'a' fmt . Println ( c1 , c2 ) fmt . Printf ( \"c1 type: %T, c2 tpye: %T \\n\" , c1 , c2 ) } // ---------------------------------------- // Output: 97 97 c1 type : uint8 , c2 tpye : int32 \u5728\u7f16\u5199\u4ee3\u7801\u7684\u65f6\u5019\uff0c\u4f7f\u7528\u522b\u540d byte\u3001rune \u53ef\u4ee5\u4f7f\u5f97\u4ee3\u7801\u66f4\u52a0\u6e05\u6670\uff0c\u4e0d\u8fc7\u8fd9\u4e24\u4e2a\u522b\u540d\u5728\u7ecf\u8fc7\u7f16\u8bd1\u540e\u8fd8\u662f\u4f1a\u8fd8\u539f\u6210 unit8 \u548c int32\u3002 \u5f53\u9700\u8981\u5904\u7406\u4e2d\u6587\u3001\u65e5\u6587\u6216\u8005\u4e2d\u82f1\u6df7\u6742\u7684\u5b57\u7b26\u65f6\uff0c\u5219\u9700\u8981\u7528\u5230 rune \u7c7b\u578b\uff0c\u56e0\u4e3a byte \u578b\u53ea\u67098\u4f4d\uff0c\u53ea\u80fd\u663e\u793a ASCII \u7801\uff0c\u800c rune \u578b\u670932\u4f4d\u3002 func main () { s := `Hello \u4e2d\u56fd` for i := 0 ; i < len ( s ); i ++ { fmt . Printf ( \"%v[%c]\\t\" , s [ i ], s [ i ]) } fmt . Println () for _ , char := range s { fmt . Printf ( \"%v[%c]\\t\" , char , char ) } fmt . Println () } // ---------------------------------------- // Output: 72 [ H ] 101 [ e ] 108 [ l ] 108 [ l ] 111 [ o ] 32 [ ] 228 [ \u00e4 ] 184 [ \u00b8 ] 173 [ \u00ad ] 229 [ \u00e5 ] 155 [ \u009b ] 189 [ \u00bd ] 72 [ H ] 101 [ e ] 108 [ l ] 108 [ l ] 111 [ o ] 32 [ ] 20013 [ \u4e2d ] 22269 [ \u56fd ] \u904d\u5386\u4e00\u4e2a\u4e2d\u82f1\u6df7\u6742\u7684\u5b57\u7b26\u4e32\u540e\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u4e2d\u6587\u4e00\u4e2a\u5b57\u5360\u597d\u51e0\u4e2a\u5b57\u8282\u3002 \u56e0\u4e3a go \u4e2d\u5b57\u7b26\u4e32\u662f\u6309\u7167 UTF-8 \u7f16\u7801\u7684\uff0c\u800c UTF-8 \u7f16\u7801\u4e0b\u4e00\u4e2a\u4e2d\u6587\u6c49\u5b57\u7531 3~4 \u4e2a\u5b57\u8282\u7ec4\u6210\u3002 len(str) \u8fd4\u56de\u7684\u662f\u5b57\u7b26\u4e32\u7684\u5b57\u8282\u6570\uff0c\u800c\u4e0d\u662f\u5b57\u7b26\u4e32\u7684\u4e2a\u6570 \uff0c\u6240\u4ee5\u7b2c\u4e00\u4e2a\u5faa\u73af\u4e2d\u4f1a\u51fa\u73b0\u4e71\u7801\u7684\u60c5\u51b5\u3002 \u7b2c\u4e8c\u79cd\u65b9\u5f0f for...range \u5219\u53ef\u4ee5\u6b63\u786e\u7684\u8fd4\u56de\u5b57\u7b26\u4e32\u4e2d\u6bcf\u4e2a\u5b57\u7b26\uff0c\u56e0\u4e3a\u5b83\u662f\u6309 rune \u7c7b\u578b\u8ba1\u7b97\u7684\uff0c\u6240\u4ee5\u6253\u5370\u7684\u65f6\u5019\u6ca1\u6709\u4e71\u7801\u3002 \u5b57\u7b26\u4e32\u7684\u5e95\u5c42\u662f\u4e00\u4e2a byte \u6570\u7ec4\uff0c\u6240\u4ee5\u5b57\u7b26\u4e32\u53ef\u4ee5\u548c []byte \u578b\u4e92\u76f8\u8f6c\u6362\u3002 \u5b57\u7b26\u4e32\u662f\u4e0d\u80fd\u4fee\u6539\u7684 \u5b57\u7b26\u4e32\u662f\u7531 byte \u5b57\u8282\u7ec4\u6210\u7684 \u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u662f byte \u5b57\u8282\u7684\u957f\u5ea6 rune \u7c7b\u578b\u7528\u6765\u8868\u793a utf8 \u5b57\u7b26 \u4e00\u4e2a\u5b57\u7b26\u7531\u4e00\u4e2a\u6216\u591a\u4e2a byte \u7ec4\u6210 \u4fee\u6539\u5b57\u7b26\u4e32 \u00b6 \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210 []byte \u6216 []rune \u7c7b\u578b\uff1b\u4f8b\u5982 []byte(str) \u6216 []rune(str) \u4fee\u6539\u5b57\u7b26\u4e32 \u8f6c\u56de string \u65e0\u8bba\u54ea\u79cd\u8f6c\u6362\uff0c\u90fd\u4f1a\u91cd\u65b0\u5206\u914d\u5185\u5b58\uff0c\u5e76\u590d\u5236\u5b57\u8282\u6570\u7ec4\u3002 func main () { str1 := \"big\" byteS = [] byte ( str1 ) // \u8f6c\u6210[]byte\u5207\u7247 byteS [ 0 ] = 'p' // \u4fee\u6539 str1 = string ( byteS ) // \u8f6c\u56de string fmt . Println ( str1 ) str2 = \"\u9752\u83dc\" runeS = [] rune ( str2 ) // \u8f6c\u6210[]rune\u5207\u7247 runeS [ 0 ] = '\u767d' // \u4fee\u6539 str2 = string ( runeS ) // \u8f6c\u56de string fme . Println ( str2 ) } // ---------------------------------------- // Output: pig \u767d\u83dc \u7c7b\u578b\u8f6c\u6362 \u00b6 Go\u8bed\u8a00\u4e2d\u53ea\u6709\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\uff0c\u6ca1\u6709\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362\u3002\u8be5\u8bed\u6cd5\u53ea\u80fd\u5728\u4e24\u4e2a\u7c7b\u578b\u4e4b\u95f4\u652f\u6301\u76f8\u4e92\u8f6c\u6362\u7684\u65f6\u5019\u4f7f\u7528 \u57fa\u672c\u8bed\u6cd5\u5982\u4e0b\uff1a Type ( expression ) Type \u8868\u793a\u8981\u8f6c\u7684\u7c7b\u578b\uff0cexpression \u8868\u793a\u53d8\u91cf\u3001\u590d\u6742\u7b97\u5f0f\u3001\u51fd\u6570\u8fd4\u56de\u503c\u7b49 var i int = 10 var f float32 = float32 ( i ) \u8be6\u89c1 \u7c7b\u578b\u8f6c\u6362 \u7c7b\u578b\u5927\u5c0f \u00b6 \u7c7b\u578b bit\u6570 \u6307\u9488 32\u4f4d -> 4bit\uff0c64\u4f4dC -> 8bit uintptr 32\u4f4d -> 4bit\uff0c64\u4f4dC -> 8bit bool 8 byte 8 int8 8 uint8 8 int16 16 uint16 16 int32 32 rune 32 uint32 32 float32 32 int64 64 uint64 64 float64 64 complex64 64 complex128 128 int \u4e0eCPU\u4f4d\u6570\u76f8\u540c uint \u4e0eCPU\u4f4d\u6570\u76f8\u540c string ASCII\u8303\u56f48bit\uff0c\u4e2d\u658724bit \u4f7f\u7528 unsafe.Sizeof(v) \u53ef\u4ee5\u5f97\u5230 v \u5360\u7528\u5185\u5b58\u5927\u5c0f\u3002 \u7c7b\u578b\u522b\u540d\u3001\u81ea\u5b9a\u4e49\u7c7b\u578b \u00b6 \u7c7b\u578b\u522b\u540d \u00b6 \u4e3a\u7c7b\u578b\u8d77\u4e2a\u522b\u540d\uff0c\u65b9\u4fbf\u4ee3\u7801\u7f16\u5199\u8fc7\u7a0b\u4e2d\u4f7f\u7528\uff0c type alias = T type \uff1a\u5173\u952e\u5b57\u3001 alias \uff1a\u7c7b\u578b\u522b\u540d\u3001 T \uff1a\u7c7b\u578b \u4f8b\u5982\u6570\u636e\u7c7b\u578b\u4e2d\u63d0\u5230\u7684Unicode\u5b57\u7b26\u578b rune \u548cASCII\u5b57\u7b26\u578b byte \u5c31\u662f\u7c7b\u578b\u522b\u540d type rune = int32 type byte = uint8 \u81ea\u5b9a\u4e49\u7c7b\u578b \u00b6 \u5728 Go \u4e2d\u6709\u4e00\u4e9b\u57fa\u672c\u7684\u6570\u636e\u7c7b\u578b\uff0c\u5982 string \u3001 int \u3001 bool \u7b49\u6570\u636e\u7c7b\u578b\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5173\u952e\u5b57 type \u6765\u5b9a\u4e49\u81ea\u5b9a\u4e49\u7c7b\u578b \u81ea\u5b9a\u4e49\u7c7b\u578b\u662f\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5168\u65b0\u7684\u7c7b\u578b\uff0c\u6211\u4eec\u53ef\u4ee5\u57fa\u4e8e\u5185\u7f6e\u57fa\u672c\u7c7b\u578b\u5b9a\u4e49\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7 struct \u5b9a\u4e49\u3002 eg\uff1a type Status bool \u901a\u8fc7 type \u5173\u952e\u5b57\u7684\u5b9a\u4e49\uff0c Status \u5c31\u662f\u4e00\u79cd\u65b0\u7684\u7c7b\u578b\uff0c\u5b83\u5177\u6709 bool \u7684\u7279\u6027 \u533a\u522b \u00b6 \u4ece\u5b9a\u4e49\u4e0a\u770b\uff0c\u7c7b\u578b\u522b\u540d\u6709 = \uff0c\u81ea\u5b9a\u4e49\u7c7b\u578b\u6ca1\u6709\u3002 func main () { type abc = string type Status bool var OK Status var ss abc fmt . Printf ( \"Type of OK: %T\\n\" , OK ) // Type of OK: main.Status fmt . Printf ( \"Type of ss: %T\\n\" , ss ) // Type of ss: string } OK \u7684\u7c7b\u578b\u662f main.Status\uff0c\u8868\u793a\u5728 main \u5305\u4e0b\u5b9a\u4e49\u7684 Status \u7c7b\u578b ss \u7684\u7c7b\u578b\u662f string\u3002 abc \u7c7b\u578b\u53ea\u4f1a\u5728\u4ee3\u7801\u4e2d\u5b58\u5728\uff0c\u7f16\u8bd1\u524d\u7f16\u8bd1\u5668\u4f1a\u5c06\u5176\u66ff\u6362\u56de\u6765\u3002","title":"2.\u6570\u636e\u7c7b\u578b"},{"location":"Go/Basic/Golang-2-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#2-","text":"","title":"2-\u6570\u636e\u7c7b\u578b"},{"location":"Go/Basic/Golang-2-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#_1","text":"\u6574\u578b\u5206\u4e3a\u4e24\u5927\u7c7b\uff1a \u6709\u7b26\u53f7 \u548c \u65e0\u7b26\u53f7 \u6309\u957f\u5ea6\u5206\u4e3a\uff1a int8 \u3001 int16 \u3001 int32 \u3001 int64 \uff1b uint8 \u3001 uint16 \u3001 uint32 \u3001 uint64 \u7c7b\u578b \u8303\u56f4 \u63cf\u8ff0 \u5bf9\u5e94C int8 -128~127 \u6709\u7b26\u53f78\u4f4d\u6574\u578b byte int16 -32768~32767 \u6709\u7b26\u53f716\u4f4d\u6574\u578b short int32 -2147483648~2147483647 \u6709\u7b26\u53f732\u4f4d\u6574\u578b int int64 -9223372036854775808~9223372036854775807 \u6709\u7b26\u53f764\u4f4d\u6574\u578b long uint8 0~255 \u65e0\u7b26\u53f78\u4f4d\u6574\u578b unsigned byte uint16 0\u00b765535 \u65e0\u7b26\u53f716\u4f4d\u6574\u578b unsigned short uint32 0~4294967295 \u65e0\u7b26\u53f732\u4f4d\u6574\u578b unsigned int uint64 0~18446744073709551615 \u65e0\u7b26\u53f764\u4f4d\u6574\u578b unsigned long","title":"\u6574\u578b"},{"location":"Go/Basic/Golang-2-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#_2","text":"\u7c7b\u578b \u63cf\u8ff0 uint 32\u4f4dOS\u4e0a\u5c31\u662fuint32\uff0c64\u4f4dOS\u4e0a\u5c31\u662fuint64 int 32\u4f4dOS\u4e0a\u5c31\u662fint32\uff0c64\u4f4dOS\u4e0a\u5c31\u662fint64 uintptr \u65e0\u7b26\u53f7\u6574\u578b\uff0c\u7528\u4e8e\u5b58\u653e\u4e00\u4e2a\u6307\u9488 \u6ce8\u610f \uff1a \u5728\u4f7f\u7528 int \u548c uint \u7c7b\u578b\u65f6\uff0c\u4e0d\u80fd\u5047\u5b9a\u5b83\u662f32\u4f4d\u621664\u4f4d\u7684\u6574\u578b\uff0c\u800c\u8981\u8003\u8651 int \u548c uint \u53ef\u80fd\u5728\u4e0d\u540c\u5e73\u53f0\u4e0a\u7684\u5dee\u5f02\u3002 \u5728\u6d89\u53ca\u5230**\u4e8c\u8fdb\u5236\u4f20\u8f93\u3001\u8bfb\u5199\u6587\u4ef6\u7684\u7ed3\u6784\u63cf\u8ff0**\u65f6\uff0c\u4e3a\u4e86\u4fdd\u6301\u6587\u4ef6\u7684\u7ed3\u6784\u4e0d\u4f1a\u53d7\u5230\u4e0d\u540c\u7f16\u8bd1\u76ee\u6807\u5e73\u53f0\u5b57\u8282\u957f\u5ea6\u7684\u5f71\u54cd\uff0c\u4e0d\u8981\u4f7f\u7528 int \u548c uint \u3002","title":"\u7279\u6b8a\u6574\u578b"},{"location":"Go/Basic/Golang-2-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#_3","text":"\u5b57\u9762\u91cf\u8bed\u6cd5\u4f7f\u5f97\u5f00\u53d1\u8005\u53ef\u4ee5\u7528 \u4e8c\u8fdb\u5236\u3001\u516b\u8fdb\u5236\u3001\u5341\u516d\u8fdb\u5236\u7684\u683c\u5f0f\u5b9a\u4e49\u6570\u5b57 v := 0b101110 \uff0c 0b\u524d\u7f00 \uff1b\u4ee3\u8868\u4e8c\u8fdb\u5236\u7684 101110\uff0c\u76f8\u5f53\u4e8e\u516b\u8fdb\u5236\u768456\uff0c\u5341\u8fdb\u5236\u768446\uff0c\u5341\u516d\u8fdb\u5236\u7684 2E v := 0o56 \uff0c0o\u524d\u7f00\uff1b\u4ee3\u8868\u516b\u8fdb\u5236\u7684 56 v := 46 \uff0c \u65e0\u524d\u7f00 \uff1b\u4ee3\u8868\u5341\u8fdb\u5236\u7684 46 v := 0x2e \uff0c 0x\u524d\u7f00 \uff1b\u4ee3\u8868\u5341\u516d\u8fdb\u5236\u7684 2E v := 0x1p-2 \uff0c\u4ee3\u8868\u5341\u516d\u8fdb\u5236\u7684 1 \u9664\u4ee5 \\(2^2\\) \uff0c\u4e5f\u5c31\u662f 0.25 \u8fd8\u53ef\u4ee5\u7528 _ \u6765\u5206\u9694\u6570\u5b57\u3002\u6bd4\u5982 v := 1_000_000 \u8868\u793a v \u7684\u503c\u7b49\u4e8e \u4e00\u767e\u4e07 1000000\u3002 \u501f\u52a9 Printf() \u53ef\u4ee5\u5c06\u4e00\u4e2a\u6574\u6570\u4ee5\u4e0d\u540c\u8fdb\u5236\u5f62\u5f0f\u5c55\u793a func main () { num := 0 b101110 fmt . Printf ( \"%b \\t %#b \\n\" , num , num ) fmt . Printf ( \"%o \\t\\t %#o \\n\" , num , num ) fmt . Printf ( \"%d \\t\\t %#d \\n\" , num , num ) fmt . Printf ( \"%x \\t\\t %#x \\t %#X \\n\" , num , num , num ) } // ---------------------------------------- // Output: 101110 0 b101110 56 056 46 46 2 e 0x2e 0X2E \u6574\u578b\u652f\u6301\u7b97\u672f\u8fd0\u7b97\u548c\u4f4d\u64cd\u4f5c\uff0c\u7b97\u672f\u8868\u8fbe\u5f0f\u548c\u4f4d\u64cd\u4f5c\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u8fd8\u662f\u6574\u578b var a int = 1000 >> 2","title":"\u6570\u5b57\u5b57\u9762\u91cf\u8bed\u6cd5"},{"location":"Go/Basic/Golang-2-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#_4","text":"Go \u8bed\u8a00\u652f\u6301\u4e24\u79cd\u6d6e\u70b9\u578b\u6570\uff1a float32 \u548c float64 \u3002 \u8fd9\u4e24\u79cd\u6d6e\u70b9\u578b\u6570\u636e\u683c\u5f0f\u9075\u5faa IEEE754 \u6807\u51c6\uff1a float32 \u7684\u6d6e\u70b9\u6570\u6700\u5927\u8303\u56f4\u7ea6\u4e3a 3.4e38 \uff0c\u53ef\u4ee5\u4f7f\u7528\u5e38\u91cf\u5b9a\u4e49 math.MaxFloat32 float64 \u7684\u6d6e\u70b9\u6570\u6700\u5927\u8303\u56f4\u7ea6\u4e3a 1.8e308 \uff0c\u53ef\u4ee5\u4f7f\u7528\u5e38\u91cf\u5b9a\u4e49 math.MaxFloat64 \u6253\u5370\u6d6e\u70b9\u6570\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u5360\u4f4d\u7b26 %f : package main import \"math\" import \"fmt\" func main () { fmt . Printf ( \"%f \\n\" , math . Pi ) fmt . Printf ( \"%.2f \\n\" , math . Pi ) } // ---------------------------------------- // Output: 3.141593 3.14 \u6d6e\u70b9\u578b\u5b57\u9762\u91cf\u88ab\u81ea\u52a8\u7c7b\u578b\u63a8\u65ad\u4e3a float64 \u7c7b\u578b b := 10.00 fmt . Printf ( \"%T\" , b ) // float64 \u8ba1\u7b97\u673a\u5f88\u96be\u8fdb\u884c\u6d6e\u70b9\u6570\u7684\u7cbe\u786e\u8868\u793a\u548c\u5b58\u50a8\uff0c\u56e0\u6b64\u4e24\u4e2a\u6d6e\u70b9\u6570\u4e4b\u95f4\u4e0d\u5e94\u8be5\u4f7f\u7528 == \u6216 != \u6765\u6bd4\u8f83\uff0c\u9ad8\u7cbe\u5ea6\u79d1\u5b66\u8ba1\u7b97\u5e94\u8be5\u4f7f\u7528 math \u6807\u51c6\u5e93","title":"\u6d6e\u70b9\u578b"},{"location":"Go/Basic/Golang-2-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#_5","text":"complex64 \u548c complex128 var c1 complex64 = 1 + 2i var c2 complex128 = 2 + 3i fmt . Println ( c1 ) fmt . Println ( c2 ) // ---------------------------------------- // Output: ( 1 + 2i ) ( 2 + 3i ) \u590d\u6570\u6709\u5b9e\u90e8\u548c\u865a\u90e8 complex64\u7684\u5b9e\u90e8\u548c\u865a\u90e8\u4e3a32\u4f4d complex128\u7684\u5b9e\u90e8\u548c\u865a\u90e8\u4e3a64\u4f4d\u3002 Go \u6709\u4e09\u4e2a\u5185\u7f6e\u51fd\u6570\u5904\u7406\u590d\u6570 var v = complex ( 2.1 , 3 ) // \u6784\u9020\u4e00\u4e2a\u590d\u6570 (2.1+3i) a := real ( v ) // \u8fd4\u56de\u590d\u6570\u5b9e\u90e8 2.1 b := imag ( v ) // \u8fd4\u56de\u590d\u6570\u865a\u90e8 3","title":"\u590d\u6570"},{"location":"Go/Basic/Golang-2-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#_6","text":"Go \u8bed\u8a00\u4e2d\u4ee5 bool \u7c7b\u578b\u8fdb\u884c\u58f0\u660e\u5e03\u5c14\u578b\uff0c\u5e03\u5c14\u578b\u6570\u636e\u53ea\u6709 true \u548c false \u4e24\u4e2a\u503c\u3002 \u5e03\u5c14\u7c7b\u578b\u53d8\u91cf\u9ed8\u8ba4\u503c\u4e3a false Go \u8bed\u8a00\u4e2d**\u4e0d\u5141\u8bb8\u5c06\u6574\u578b\u5f3a\u5236\u8f6c\u6362\u4e3a\u5e03\u5c14\u578b\uff08integer !-> bool\uff09** \u5e03\u5c14\u578b\u65e0\u6cd5\u53c2\u4e0e\u6570\u503c\u8fd0\u7b97\uff0c\u65e0\u6cd5\u4e0e\u5176\u4ed6\u7c7b\u578b\u8fdb\u884c\u8f6c\u6362","title":"\u5e03\u5c14\u503c"},{"location":"Go/Basic/Golang-2-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#_7","text":"Go \u8bed\u8a00\u4e2d\u7684\u5b57\u7b26\u4e32\u662f\u539f\u751f\u6570\u636e\u7c7b\u578b \uff0c\u4f7f\u7528\u5b57\u7b26\u4e32\u5c31\u50cf\u4f7f\u7528\u5176\u4ed6\u539f\u751f\u6570\u636e\u7c7b\u578b\uff08int\u3001bool\u3001float32\u7b49\uff09\u4e00\u6837 Go \u8bed\u8a00\u4e2d\u5b57\u7b26\u4e32\u5185\u90e8\u5b9e\u73b0\u4f7f\u7528 UTF-8 \u7f16\u7801\uff0c\u8fd9\u4f7f\u5f97 go \u4e0d\u9700\u8981\u4e13\u95e8\u4f7f\u7528 UTF-8 \u5b57\u7b26\u96c6\u7684\u6587\u672c\u8fdb\u884c\u7f16\u7801\u548c\u89e3\u7801\uff0c\u53ef\u4ee5\u5728Go\u8bed\u8a00\u4e2d\u76f4\u63a5\u6dfb\u52a0\u975eASCII\u7801\u5b57\u7b26 \u5b57\u7b26\u4e32\u662f\u4e00\u79cd\u503c\u7c7b\u578b\uff0c\u4e14\u503c\u4e0d\u53ef\u53d8\uff1b\u5373\u521b\u5efa\u67d0\u4e2a\u6587\u672c\u540e\u4f60\u65e0\u6cd5\u518d\u6b21\u4fee\u6539\u8fd9\u4e2a\u6587\u672c\u7684\u5185\u5bb9\uff0c\u5373\u4f7f\u4f60\u6539\u53d8\u4e86\uff0c\u4f60\u4f1a\u53d1\u73b0\u90a3\u5df2\u7ecf\u4e0d\u662f\u539f\u6765\u7684\u90a3\u4e32\u5b57\u7b26\u4e32\u4e86\u3002 \u66f4\u6df1\u5165\u7684\u8bb2\uff0c\u5b57\u7b26\u4e32\u662f**\u5b57\u8282\u7684\u5b9a\u957f\u6570\u7ec4**\u3002 Go \u652f\u6301\u4ee5\u4e0b2\u79cd\u5f62\u5f0f\u7684\u5b57\u9762\u503c \u89e3\u91ca\u5b57\u7b26\u4e32 \u8be5\u7c7b\u5b57\u7b26\u4e32\u4f7f\u7528\u53cc\u62ec\u53f7 \"\" \u5f15\u8d77\u6765\uff0c\u5176\u4e2d\u8f6c\u4e49\u5b57\u7b26\uff08 \\n\u3001\\r\u3001 \\t\u3001 \\\\ \uff09\u4f1a\u88ab\u66ff\u6362\u3002 eg\uff1a str1 := \"Hello\" str2 := \"Boii\" - \u975e\u89e3\u91ca\u5b57\u7b26\u4e32 \u8be5\u7c7b\u5b57\u7b26\u4e32\u4f7f\u7528\u53cd\u5f15\u53f7\u62ec\u8d77\u6765 `` \uff0c\u652f\u6301\u6362\u884c eg\uff1a // \u4e0b\u9762\u7684 \\n \u4f1a\u88ab\u539f\u6837\u8f93\u51fa str := `This is a raw string \\n` Go \u4e2d\u7684\u5b57\u7b26\u4e32\u662f\u6839\u636e\u957f\u5ea6\u9650\u5b9a\uff0c\u800c\u975e\u7279\u6b8a\u5b57\u7b26 \\0 \u3002 string \u7c7b\u578b\u7684\u96f6\u503c\uff1a\u957f\u5ea6\u4e3a 0 \u7684\u5b57\u7b26\u4e32\uff0c\u5373\u7a7a\u5b57\u7b26\u4e32 \"\" \u53ef\u4ee5\u901a\u8fc7 len() \u51fd\u6570\u6765\u83b7\u53d6\u5b57\u7b26\u4e32\u5b57\u7b26\u4e2a\u6570 \u5b57\u7b26\u4e32\u4e2d\u7684\u5185\u5bb9\uff08\u7eaf\u5b57\u8282\uff09\u53ef\u4ee5\u901a\u8fc7\u6807\u51c6\u7d22\u5f15\u6cd5\u6765\u83b7\u53d6 func main () { str := \"hello Boii\" c1 := str [ 0 ] c4 := str [ 4 ] cEnd := str [ len ( str ) - 1 ] fmt . Println ( c1 ) // 104 fmt . Println ( c4 ) // 111 fmt . Println ( cEnd ) // 105 } \u8f93\u51fa\u7684\u662f\u5b57\u7b26\u7684 Ascii \u7801 \u5b57\u7b26\u4e32\u7c7b\u578b\u5e95\u5c42\u5b9e\u73b0\u662f\u4e00\u4e2a\u4e8c\u5143\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4e00\u4e2a\u662f\u6307\u5411\u5b57\u8282\u6570\u7ec4\u7684\u8d77\u70b9\uff0c\u53e6\u4e00\u4e2a\u662f\u957f\u5ea6\u3002 eg\uff1a // runtime/string.go type stringStruct struct { str unsafe . Pointer // \u6307\u5411\u5e95\u5c42\u5b57\u8282\u6570\u7ec4\u7684\u6307\u9488 len int // \u5b57\u8282\u6570\u7ec4\u957f\u5ea6 } 7. \u57fa\u4e8e\u5b57\u7b26\u4e32\u521b\u5efa\u7684\u5207\u7247 \u548c \u539f\u5b57\u7b26\u4e32 \u6307\u5411\u76f8\u540c\u7684 \u5e95\u5c42\u5b57\u7b26\u6570\u7ec4\uff0c\u4e00\u6837\u4e0d\u80fd\u4fee\u6539\uff0c \u5bf9\u5b57\u7b26\u4e32\u7684\u5207\u7247\u64cd\u4f5c\u8fd4\u56de\u7684\u4ecd\u7136\u662f string\uff0c\u800c\u975e slice \u3002 a := \"Hello World\" b := a [ 0 : 4 ] c := a [ 1 :] fmt . Printf ( \"b -> %s, b -> type: %T\\n\" , b , b ) // b -> Hell, b -> type: string fmt . Printf ( \"c -> %s, c -> type: %T\\n\" , c , c ) // c -> ello World, c -> type: string","title":"\u5b57\u7b26\u4e32"},{"location":"Go/Basic/Golang-2-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#_8","text":"\u65b9\u6cd5 \u63cf\u8ff0 \u8fd4\u56de\u503c len(str) \u6c42\u5b57\u7b26\u4e32\u957f\u5ea6 int + \u6216 fmt.Sprintf(\"%s %s\", str1, str2) \u62fc\u63a5\u5b57\u7b26\u4e32 string strings.Split(str, \u5206\u9694\u7b26) \u5206\u5272\u5b57\u7b26\u4e32 []string strings.Contains(str, \u76ee\u6807\u5185\u5bb9) \u5224\u65adstr\u662f\u5426\u5305\u542b\u76ee\u6807\u5b50\u4e32 bool strings.HasPrefix(str, \u76ee\u6807\u5185\u5bb9) \u5224\u65adstr\u662f\u5426\u4ee5\u76ee\u6807\u5185\u5bb9\u5f00\u5934 bool strings.HasSuffix(str, \u76ee\u6807\u5185\u5bb9) \u5224\u65adstr\u662f\u5426\u4ee5\u76ee\u6807\u5185\u5bb9\u7ed3\u5c3e bool strings.Index(str, \u76ee\u6807\u5185\u5bb9) \u8fd4\u56destr\u7b2c\u4e00\u6b21\u51fa\u73b0\u76ee\u6807\u5185\u5bb9\u7684\u9996\u4e2a\u5b57\u7b26\u7684\u4e0b\u6807 int strings.LastIndex(str, \u76ee\u6807\u5185\u5bb9) \u8fd4\u56destr\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u76ee\u6807\u5185\u5bb9\u7684\u9996\u4e2a\u5b57\u7b26\u7684\u4e0b\u6807 int strings.Join(strArr, \u62fc\u63a5\u7b26\u53f7) \u8fd4\u56de\u7528\u62fc\u63a5\u7b26\u53f7\u62fc\u63a5strArr\u7684\u5b57\u7b26\u4e32 string package main import ( \"fmt\" \"strings\" ) func main () { // \u6c42\u5b57\u7b26\u4e32\u957f\u5ea6 str1 := `hello Boii` fmt . Println ( len ( str1 )) // 10 str2 := \"Hello \u4e2d\u56fd\" fmt . Println ( len ( str2 )) // 12 fmt . Println () // \u62fc\u63a5\u5b57\u7b26\u4e32 fmt . Println ( str1 + str2 ) // hello BoiiHello \u4e2d\u56fd str3 := fmt . Sprintf ( \"%s | %s\" , str1 , str2 ) fmt . Println ( str3 ) // hello Boii | Hello \u4e2d\u56fd fmt . Println () // \u5b57\u7b26\u4e32\u5206\u5272 str4 := `How do you do` fmt . Println ( strings . Split ( str4 , \" \" )) // [How do you do] fmt . Printf ( \"%T \\n\" , strings . Split ( str4 , \" \" )) // []string fmt . Println () // \u5224\u65ad\u662f\u5426\u5305\u542b fmt . Println ( strings . Contains ( str4 , \"do\" )) // true // \u5224\u65ad\u524d\u7f00 fmt . Println ( strings . HasPrefix ( str4 , \"How\" )) // true // \u5224\u65ad\u540e\u7f00 fmt . Println ( strings . HasSuffix ( str4 , \"How\" )) // false fmt . Println () // \u5224\u65ad\u5b50\u4e32\u4f4d\u7f6e fmt . Println ( strings . Index ( str4 , \"do\" )) // 4 // \u6700\u540e\u5b50\u4e32\u51fa\u73b0\u7684\u4f4d\u7f6e fmt . Println ( strings . LastIndex ( str4 , \"do\" )) // 11 fmt . Println () // join str5 := [] string { \"how\" , \"do\" , \"you\" , \"do\" } fmt . Println ( str5 ) // [how do you do] fmt . Println ( strings . Join ( str5 , \"-\" )) // how-do-you-do }","title":"\u5b57\u7b26\u4e32\u5e38\u7528\u64cd\u4f5c"},{"location":"Go/Basic/Golang-2-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#_9","text":"Go \u7684\u5b57\u7b26\u6709\u4ee5\u4e0b\u4e24\u79cd\uff1a 1. uint8\u7c7b\u578b\uff0c\u522b\u540d byte\uff0c\u4ee3\u8868\u4e00\u4e2a ASCII \u7801\u5b57\u7b26 2. int32\u7c7b\u578b\uff0c\u522b\u540d rune\uff0c\u4ee3\u8868\u4e00\u4e2a UTF-8 \u5b57\u7b26 \u6ce8\u610f\uff1a\u5b57\u7b26\u7528\u5355\u5f15\u53f7( ' ' )\u62ec\u8d77\u6765 func main () { var c1 byte = 'a' var c2 rune = 'a' fmt . Println ( c1 , c2 ) fmt . Printf ( \"c1 type: %T, c2 tpye: %T \\n\" , c1 , c2 ) } // ---------------------------------------- // Output: 97 97 c1 type : uint8 , c2 tpye : int32 \u5728\u7f16\u5199\u4ee3\u7801\u7684\u65f6\u5019\uff0c\u4f7f\u7528\u522b\u540d byte\u3001rune \u53ef\u4ee5\u4f7f\u5f97\u4ee3\u7801\u66f4\u52a0\u6e05\u6670\uff0c\u4e0d\u8fc7\u8fd9\u4e24\u4e2a\u522b\u540d\u5728\u7ecf\u8fc7\u7f16\u8bd1\u540e\u8fd8\u662f\u4f1a\u8fd8\u539f\u6210 unit8 \u548c int32\u3002 \u5f53\u9700\u8981\u5904\u7406\u4e2d\u6587\u3001\u65e5\u6587\u6216\u8005\u4e2d\u82f1\u6df7\u6742\u7684\u5b57\u7b26\u65f6\uff0c\u5219\u9700\u8981\u7528\u5230 rune \u7c7b\u578b\uff0c\u56e0\u4e3a byte \u578b\u53ea\u67098\u4f4d\uff0c\u53ea\u80fd\u663e\u793a ASCII \u7801\uff0c\u800c rune \u578b\u670932\u4f4d\u3002 func main () { s := `Hello \u4e2d\u56fd` for i := 0 ; i < len ( s ); i ++ { fmt . Printf ( \"%v[%c]\\t\" , s [ i ], s [ i ]) } fmt . Println () for _ , char := range s { fmt . Printf ( \"%v[%c]\\t\" , char , char ) } fmt . Println () } // ---------------------------------------- // Output: 72 [ H ] 101 [ e ] 108 [ l ] 108 [ l ] 111 [ o ] 32 [ ] 228 [ \u00e4 ] 184 [ \u00b8 ] 173 [ \u00ad ] 229 [ \u00e5 ] 155 [ \u009b ] 189 [ \u00bd ] 72 [ H ] 101 [ e ] 108 [ l ] 108 [ l ] 111 [ o ] 32 [ ] 20013 [ \u4e2d ] 22269 [ \u56fd ] \u904d\u5386\u4e00\u4e2a\u4e2d\u82f1\u6df7\u6742\u7684\u5b57\u7b26\u4e32\u540e\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u4e2d\u6587\u4e00\u4e2a\u5b57\u5360\u597d\u51e0\u4e2a\u5b57\u8282\u3002 \u56e0\u4e3a go \u4e2d\u5b57\u7b26\u4e32\u662f\u6309\u7167 UTF-8 \u7f16\u7801\u7684\uff0c\u800c UTF-8 \u7f16\u7801\u4e0b\u4e00\u4e2a\u4e2d\u6587\u6c49\u5b57\u7531 3~4 \u4e2a\u5b57\u8282\u7ec4\u6210\u3002 len(str) \u8fd4\u56de\u7684\u662f\u5b57\u7b26\u4e32\u7684\u5b57\u8282\u6570\uff0c\u800c\u4e0d\u662f\u5b57\u7b26\u4e32\u7684\u4e2a\u6570 \uff0c\u6240\u4ee5\u7b2c\u4e00\u4e2a\u5faa\u73af\u4e2d\u4f1a\u51fa\u73b0\u4e71\u7801\u7684\u60c5\u51b5\u3002 \u7b2c\u4e8c\u79cd\u65b9\u5f0f for...range \u5219\u53ef\u4ee5\u6b63\u786e\u7684\u8fd4\u56de\u5b57\u7b26\u4e32\u4e2d\u6bcf\u4e2a\u5b57\u7b26\uff0c\u56e0\u4e3a\u5b83\u662f\u6309 rune \u7c7b\u578b\u8ba1\u7b97\u7684\uff0c\u6240\u4ee5\u6253\u5370\u7684\u65f6\u5019\u6ca1\u6709\u4e71\u7801\u3002 \u5b57\u7b26\u4e32\u7684\u5e95\u5c42\u662f\u4e00\u4e2a byte \u6570\u7ec4\uff0c\u6240\u4ee5\u5b57\u7b26\u4e32\u53ef\u4ee5\u548c []byte \u578b\u4e92\u76f8\u8f6c\u6362\u3002 \u5b57\u7b26\u4e32\u662f\u4e0d\u80fd\u4fee\u6539\u7684 \u5b57\u7b26\u4e32\u662f\u7531 byte \u5b57\u8282\u7ec4\u6210\u7684 \u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u662f byte \u5b57\u8282\u7684\u957f\u5ea6 rune \u7c7b\u578b\u7528\u6765\u8868\u793a utf8 \u5b57\u7b26 \u4e00\u4e2a\u5b57\u7b26\u7531\u4e00\u4e2a\u6216\u591a\u4e2a byte \u7ec4\u6210","title":"\u5b57\u7b26"},{"location":"Go/Basic/Golang-2-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#_10","text":"\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210 []byte \u6216 []rune \u7c7b\u578b\uff1b\u4f8b\u5982 []byte(str) \u6216 []rune(str) \u4fee\u6539\u5b57\u7b26\u4e32 \u8f6c\u56de string \u65e0\u8bba\u54ea\u79cd\u8f6c\u6362\uff0c\u90fd\u4f1a\u91cd\u65b0\u5206\u914d\u5185\u5b58\uff0c\u5e76\u590d\u5236\u5b57\u8282\u6570\u7ec4\u3002 func main () { str1 := \"big\" byteS = [] byte ( str1 ) // \u8f6c\u6210[]byte\u5207\u7247 byteS [ 0 ] = 'p' // \u4fee\u6539 str1 = string ( byteS ) // \u8f6c\u56de string fmt . Println ( str1 ) str2 = \"\u9752\u83dc\" runeS = [] rune ( str2 ) // \u8f6c\u6210[]rune\u5207\u7247 runeS [ 0 ] = '\u767d' // \u4fee\u6539 str2 = string ( runeS ) // \u8f6c\u56de string fme . Println ( str2 ) } // ---------------------------------------- // Output: pig \u767d\u83dc","title":"\u4fee\u6539\u5b57\u7b26\u4e32"},{"location":"Go/Basic/Golang-2-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#_11","text":"Go\u8bed\u8a00\u4e2d\u53ea\u6709\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\uff0c\u6ca1\u6709\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362\u3002\u8be5\u8bed\u6cd5\u53ea\u80fd\u5728\u4e24\u4e2a\u7c7b\u578b\u4e4b\u95f4\u652f\u6301\u76f8\u4e92\u8f6c\u6362\u7684\u65f6\u5019\u4f7f\u7528 \u57fa\u672c\u8bed\u6cd5\u5982\u4e0b\uff1a Type ( expression ) Type \u8868\u793a\u8981\u8f6c\u7684\u7c7b\u578b\uff0cexpression \u8868\u793a\u53d8\u91cf\u3001\u590d\u6742\u7b97\u5f0f\u3001\u51fd\u6570\u8fd4\u56de\u503c\u7b49 var i int = 10 var f float32 = float32 ( i ) \u8be6\u89c1 \u7c7b\u578b\u8f6c\u6362","title":"\u7c7b\u578b\u8f6c\u6362"},{"location":"Go/Basic/Golang-2-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#_12","text":"\u7c7b\u578b bit\u6570 \u6307\u9488 32\u4f4d -> 4bit\uff0c64\u4f4dC -> 8bit uintptr 32\u4f4d -> 4bit\uff0c64\u4f4dC -> 8bit bool 8 byte 8 int8 8 uint8 8 int16 16 uint16 16 int32 32 rune 32 uint32 32 float32 32 int64 64 uint64 64 float64 64 complex64 64 complex128 128 int \u4e0eCPU\u4f4d\u6570\u76f8\u540c uint \u4e0eCPU\u4f4d\u6570\u76f8\u540c string ASCII\u8303\u56f48bit\uff0c\u4e2d\u658724bit \u4f7f\u7528 unsafe.Sizeof(v) \u53ef\u4ee5\u5f97\u5230 v \u5360\u7528\u5185\u5b58\u5927\u5c0f\u3002","title":"\u7c7b\u578b\u5927\u5c0f"},{"location":"Go/Basic/Golang-2-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#_13","text":"","title":"\u7c7b\u578b\u522b\u540d\u3001\u81ea\u5b9a\u4e49\u7c7b\u578b"},{"location":"Go/Basic/Golang-2-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#_14","text":"\u4e3a\u7c7b\u578b\u8d77\u4e2a\u522b\u540d\uff0c\u65b9\u4fbf\u4ee3\u7801\u7f16\u5199\u8fc7\u7a0b\u4e2d\u4f7f\u7528\uff0c type alias = T type \uff1a\u5173\u952e\u5b57\u3001 alias \uff1a\u7c7b\u578b\u522b\u540d\u3001 T \uff1a\u7c7b\u578b \u4f8b\u5982\u6570\u636e\u7c7b\u578b\u4e2d\u63d0\u5230\u7684Unicode\u5b57\u7b26\u578b rune \u548cASCII\u5b57\u7b26\u578b byte \u5c31\u662f\u7c7b\u578b\u522b\u540d type rune = int32 type byte = uint8","title":"\u7c7b\u578b\u522b\u540d"},{"location":"Go/Basic/Golang-2-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#_15","text":"\u5728 Go \u4e2d\u6709\u4e00\u4e9b\u57fa\u672c\u7684\u6570\u636e\u7c7b\u578b\uff0c\u5982 string \u3001 int \u3001 bool \u7b49\u6570\u636e\u7c7b\u578b\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5173\u952e\u5b57 type \u6765\u5b9a\u4e49\u81ea\u5b9a\u4e49\u7c7b\u578b \u81ea\u5b9a\u4e49\u7c7b\u578b\u662f\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5168\u65b0\u7684\u7c7b\u578b\uff0c\u6211\u4eec\u53ef\u4ee5\u57fa\u4e8e\u5185\u7f6e\u57fa\u672c\u7c7b\u578b\u5b9a\u4e49\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7 struct \u5b9a\u4e49\u3002 eg\uff1a type Status bool \u901a\u8fc7 type \u5173\u952e\u5b57\u7684\u5b9a\u4e49\uff0c Status \u5c31\u662f\u4e00\u79cd\u65b0\u7684\u7c7b\u578b\uff0c\u5b83\u5177\u6709 bool \u7684\u7279\u6027","title":"\u81ea\u5b9a\u4e49\u7c7b\u578b"},{"location":"Go/Basic/Golang-2-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#_16","text":"\u4ece\u5b9a\u4e49\u4e0a\u770b\uff0c\u7c7b\u578b\u522b\u540d\u6709 = \uff0c\u81ea\u5b9a\u4e49\u7c7b\u578b\u6ca1\u6709\u3002 func main () { type abc = string type Status bool var OK Status var ss abc fmt . Printf ( \"Type of OK: %T\\n\" , OK ) // Type of OK: main.Status fmt . Printf ( \"Type of ss: %T\\n\" , ss ) // Type of ss: string } OK \u7684\u7c7b\u578b\u662f main.Status\uff0c\u8868\u793a\u5728 main \u5305\u4e0b\u5b9a\u4e49\u7684 Status \u7c7b\u578b ss \u7684\u7c7b\u578b\u662f string\u3002 abc \u7c7b\u578b\u53ea\u4f1a\u5728\u4ee3\u7801\u4e2d\u5b58\u5728\uff0c\u7f16\u8bd1\u524d\u7f16\u8bd1\u5668\u4f1a\u5c06\u5176\u66ff\u6362\u56de\u6765\u3002","title":"\u533a\u522b"},{"location":"Go/Basic/Golang-3-%E8%BF%90%E7%AE%97%E7%AC%A6/","text":"\u5185\u7f6e\u64cd\u4f5c\u7b26 \u8fd0\u7b97\u7b26 \u00b6 \u5b98\u65b9\u5b9a\u4e49\u7684\u6240\u6709\u8fd0\u7b97\u7b26 \u00b6 + & += &= && == != ( ) - | -= |= || < <= [ ] * ^ *= ^= <- > >= { } / << /= <<= ++ = := , ; % >> %= >>= -- ! ... . : &^ &^= \u7b97\u672f\u8fd0\u7b97\u7b26 \u00b6 \u8fd0\u7b97\u7b26 \u63cf\u8ff0 + \u52a0 - \u51cf * \u4e58 / \u9664 % \u6c42\u4f59 Go \u4e2d ++ \u548c -- \u662f\u5355\u72ec\u7684\u8bed\u53e5\uff0c\u4e0d\u662f\u8fd0\u7b97\u7b26\u3002\u5373 a++ \u540e\u9762\u4e0d\u80fd\u6709\u5176\u4ed6\u4e1c\u897f\u4e86\uff0c\u4e14\u53ea\u6709\u540e\u7f6e\uff0c\u6ca1\u6709\u524d\u7f6e func main () { a := 10 a ++ // \u6b63\u786e\uff0ca\u7684\u503c\u4e3a11 a ++ + 10 // \u9519\u8bef ++ a // \u9519\u8bef\uff0c\u53ea\u6709\u540e\u7f6e\u81ea\u589e\u548c\u540e\u7f6e\u81ea\u51cf } \u5173\u7cfb\u8fd0\u7b97\u7b26 \u00b6 \u8fd0\u7b97\u7b26 \u63cf\u8ff0 == \u7b49\u4e8e != \u4e0d\u7b49\u4e8e > \u5927\u4e8e >= \u5927\u4e8e\u7b49\u4e8e < \u5c0f\u4e8e <= \u5c0f\u4e8e\u7b49\u4e8e \u903b\u8f91\u8fd0\u7b97\u7b26 \u00b6 \u8fd0\u7b97\u7b26 \u63cf\u8ff0 && \u903b\u8f91\u4e0e || \u903b\u8f91\u6216 ! \u903b\u8f91\u975e \u4f4d\u8fd0\u7b97\u7b26 \u00b6 \u8fd0\u7b97\u7b26 \u542b\u4e49 & \u6309\u4f4d\u4e0e \u4e24\u4f4d\u5747\u4e3a1\u624d\u4e3a1 | \u6309\u4f4d\u6216 \u4e24\u4f4d\u6709\u4e00\u4e2a\u4e3a1\u5c31\u4e3a1 ^ \u6309\u4f4d\u5f02\u6216 \u4e24\u4f4d\u4e0d\u540c\u5219\u4e3a1 << \u5de6\u79fb \u5de6\u79fbn\u4f4d == \u4e58\u4ee52\u7684n\u6b21\u65b9\uff0c\u9ad8\u4f4d\u4e22\u5f03\uff0c\u4f4e\u4f4d\u88650 >> \u53f3\u79fb \u53f3\u79fbn\u4f4d == \u9664\u4ee52\u7684n\u6b21\u65b9\uff0c\u9ad8\u4f4d\u88650\uff0c\u4f4e\u4f4d\u4e22\u5f03 \u8d4b\u503c\u8fd0\u7b97\u7b26 \u00b6 \u8fd0\u7b97\u7b26 \u63cf\u8ff0 = \u5c06\u53f3\u8fb9\u8d4b\u503c\u7ed9\u5de6\u8fb9 += \u76f8\u52a0\u540e\u8d4b\u503c -= \u76f8\u51cf\u540e\u8d4b\u503c *= \u76f8\u4e58\u540e\u8d4b\u503c /= \u76f8\u9664\u540e\u8d4b\u503c %= \u6c42\u4f59\u540e\u8d4b\u503c &= \u6309\u4f4d\u4e0e\u540e\u8d4b\u503c |= \u6309\u4f4d\u6216\u540e\u8d4b\u503c ^= \u6309\u4f4d\u5f02\u6216\u540e\u8d4b\u503c <<= \u5de6\u79fb\u540e\u8d4b\u503c >>= \u53f3\u79fb\u540e\u8d4b\u503c \u4f18\u5148\u7ea7 \u00b6 \u4ece\u9ad8\u5230\u4f4e \u5206\u7c7b \u63cf\u8ff0 \u5173\u8054\u6027 \u540e\u7f00 () [] . ++ -- \u5de6\u5230\u53f3 \u4e00\u5143 + - ! ~ ++ -- (type) * & sizeof \u53f3\u5230\u5de6 \u4e58\u9664 * / % \u5de6\u5230\u53f3 \u52a0\u51cf + - \u5de6\u5230\u53f3 \u79fb\u4f4d << >> \u5de6\u5230\u53f3 \u5173\u7cfb < <= > >= \u5de6\u5230\u53f3 \u76f8\u7b49 == != \u5de6\u5230\u53f3 \u6309\u4f4dAND & \u5de6\u5230\u53f3 \u6309\u4f4dXOR ^ \u5de6\u5230\u53f3 \u6309\u4f4dOR | \u5de6\u5230\u53f3 \u903b\u8f91AND && \u5de6\u5230\u53f3 \u903b\u8f91OR || \u5de6\u5230\u53f3 \u8d4b\u503c = += -= *= /= %= >>= <<= &= ^= \u53f3\u5230\u5de6 \u9017\u53f7 , \u5de6\u5230\u53f3","title":"3.\u8fd0\u7b97\u7b26"},{"location":"Go/Basic/Golang-3-%E8%BF%90%E7%AE%97%E7%AC%A6/#_1","text":"","title":"\u8fd0\u7b97\u7b26"},{"location":"Go/Basic/Golang-3-%E8%BF%90%E7%AE%97%E7%AC%A6/#_2","text":"+ & += &= && == != ( ) - | -= |= || < <= [ ] * ^ *= ^= <- > >= { } / << /= <<= ++ = := , ; % >> %= >>= -- ! ... . : &^ &^=","title":"\u5b98\u65b9\u5b9a\u4e49\u7684\u6240\u6709\u8fd0\u7b97\u7b26"},{"location":"Go/Basic/Golang-3-%E8%BF%90%E7%AE%97%E7%AC%A6/#_3","text":"\u8fd0\u7b97\u7b26 \u63cf\u8ff0 + \u52a0 - \u51cf * \u4e58 / \u9664 % \u6c42\u4f59 Go \u4e2d ++ \u548c -- \u662f\u5355\u72ec\u7684\u8bed\u53e5\uff0c\u4e0d\u662f\u8fd0\u7b97\u7b26\u3002\u5373 a++ \u540e\u9762\u4e0d\u80fd\u6709\u5176\u4ed6\u4e1c\u897f\u4e86\uff0c\u4e14\u53ea\u6709\u540e\u7f6e\uff0c\u6ca1\u6709\u524d\u7f6e func main () { a := 10 a ++ // \u6b63\u786e\uff0ca\u7684\u503c\u4e3a11 a ++ + 10 // \u9519\u8bef ++ a // \u9519\u8bef\uff0c\u53ea\u6709\u540e\u7f6e\u81ea\u589e\u548c\u540e\u7f6e\u81ea\u51cf }","title":"\u7b97\u672f\u8fd0\u7b97\u7b26"},{"location":"Go/Basic/Golang-3-%E8%BF%90%E7%AE%97%E7%AC%A6/#_4","text":"\u8fd0\u7b97\u7b26 \u63cf\u8ff0 == \u7b49\u4e8e != \u4e0d\u7b49\u4e8e > \u5927\u4e8e >= \u5927\u4e8e\u7b49\u4e8e < \u5c0f\u4e8e <= \u5c0f\u4e8e\u7b49\u4e8e","title":"\u5173\u7cfb\u8fd0\u7b97\u7b26"},{"location":"Go/Basic/Golang-3-%E8%BF%90%E7%AE%97%E7%AC%A6/#_5","text":"\u8fd0\u7b97\u7b26 \u63cf\u8ff0 && \u903b\u8f91\u4e0e || \u903b\u8f91\u6216 ! \u903b\u8f91\u975e","title":"\u903b\u8f91\u8fd0\u7b97\u7b26"},{"location":"Go/Basic/Golang-3-%E8%BF%90%E7%AE%97%E7%AC%A6/#_6","text":"\u8fd0\u7b97\u7b26 \u542b\u4e49 & \u6309\u4f4d\u4e0e \u4e24\u4f4d\u5747\u4e3a1\u624d\u4e3a1 | \u6309\u4f4d\u6216 \u4e24\u4f4d\u6709\u4e00\u4e2a\u4e3a1\u5c31\u4e3a1 ^ \u6309\u4f4d\u5f02\u6216 \u4e24\u4f4d\u4e0d\u540c\u5219\u4e3a1 << \u5de6\u79fb \u5de6\u79fbn\u4f4d == \u4e58\u4ee52\u7684n\u6b21\u65b9\uff0c\u9ad8\u4f4d\u4e22\u5f03\uff0c\u4f4e\u4f4d\u88650 >> \u53f3\u79fb \u53f3\u79fbn\u4f4d == \u9664\u4ee52\u7684n\u6b21\u65b9\uff0c\u9ad8\u4f4d\u88650\uff0c\u4f4e\u4f4d\u4e22\u5f03","title":"\u4f4d\u8fd0\u7b97\u7b26"},{"location":"Go/Basic/Golang-3-%E8%BF%90%E7%AE%97%E7%AC%A6/#_7","text":"\u8fd0\u7b97\u7b26 \u63cf\u8ff0 = \u5c06\u53f3\u8fb9\u8d4b\u503c\u7ed9\u5de6\u8fb9 += \u76f8\u52a0\u540e\u8d4b\u503c -= \u76f8\u51cf\u540e\u8d4b\u503c *= \u76f8\u4e58\u540e\u8d4b\u503c /= \u76f8\u9664\u540e\u8d4b\u503c %= \u6c42\u4f59\u540e\u8d4b\u503c &= \u6309\u4f4d\u4e0e\u540e\u8d4b\u503c |= \u6309\u4f4d\u6216\u540e\u8d4b\u503c ^= \u6309\u4f4d\u5f02\u6216\u540e\u8d4b\u503c <<= \u5de6\u79fb\u540e\u8d4b\u503c >>= \u53f3\u79fb\u540e\u8d4b\u503c","title":"\u8d4b\u503c\u8fd0\u7b97\u7b26"},{"location":"Go/Basic/Golang-3-%E8%BF%90%E7%AE%97%E7%AC%A6/#_8","text":"\u4ece\u9ad8\u5230\u4f4e \u5206\u7c7b \u63cf\u8ff0 \u5173\u8054\u6027 \u540e\u7f00 () [] . ++ -- \u5de6\u5230\u53f3 \u4e00\u5143 + - ! ~ ++ -- (type) * & sizeof \u53f3\u5230\u5de6 \u4e58\u9664 * / % \u5de6\u5230\u53f3 \u52a0\u51cf + - \u5de6\u5230\u53f3 \u79fb\u4f4d << >> \u5de6\u5230\u53f3 \u5173\u7cfb < <= > >= \u5de6\u5230\u53f3 \u76f8\u7b49 == != \u5de6\u5230\u53f3 \u6309\u4f4dAND & \u5de6\u5230\u53f3 \u6309\u4f4dXOR ^ \u5de6\u5230\u53f3 \u6309\u4f4dOR | \u5de6\u5230\u53f3 \u903b\u8f91AND && \u5de6\u5230\u53f3 \u903b\u8f91OR || \u5de6\u5230\u53f3 \u8d4b\u503c = += -= *= /= %= >>= <<= &= ^= \u53f3\u5230\u5de6 \u9017\u53f7 , \u5de6\u5230\u53f3","title":"\u4f18\u5148\u7ea7"},{"location":"Go/Basic/Golang-4-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/","text":"\u57fa\u672c\u6d41\u7a0b\u63a7\u5236 4-\u6d41\u7a0b\u63a7\u5236 \u00b6 \u5206\u652f\u7ed3\u6784 \u00b6 if \u57fa\u672c\u5199\u6cd5 \u00b6 if \u8868\u8fbe\u5f0f1 { \u5206\u652f1 } else if \u8868\u8fbe\u5f0f2 { \u5206\u652f2 } else { \u5206\u652f3 } eg\uff1a func main () { score := 65 if score >= 90 { fmt . Println ( \"A\" ) } else if score > 75 { fmt . Println ( \"B\" ) } else { fmt . Println ( \"C\" ) } } if \u7279\u6b8a\u5199\u6cd5 \u00b6 \u5728 if \u8868\u8fbe\u5f0f\u4e4b\u524d\u6dfb\u52a0\u4e00\u4e2a\u6267\u884c\u8bed\u53e5\uff0c\u518d\u6839\u636e\u53d8\u91cf\u503c\u8fdb\u884c\u5224\u65ad func main () { if score := 65 ; score >= 90 { fmt . Println ( \"A\" ) } else if score > 75 { fmt . Println ( \"B\" ) } else { fmt . Println ( \"C\" ) } } \u6ce8\u610f\u4e0a\u8ff0\u4ee3\u7801\u4e2d\u7684 score \u662f\u5728 if \u8bed\u53e5\u4e2d\u521b\u5efa\u5e76\u521d\u59cb\u5316\u7684\uff0c\u5176\u4f5c\u7528\u57df\u4ec5\u9650\u4e8e if \u8bed\u53e5\u5757\uff08\u5305\u62ec\u540c\u5c5e\u7684 else if \u8bed\u53e5\u3001else \u8bed\u53e5\uff09 \u4f46\u662f\u5982\u679c\u58f0\u660e\u662f\u5728 if \u8bed\u53e5\u5916\uff0c\u5219\u5176\u4f5c\u7528\u57df\u4e0d\u9650\u4e8e if \u8bed\u53e5\u4e2d func main () { var score int if score := 65 ; score >= 90 { fmt . Println ( \"A\" ) } else if score > 75 { fmt . Println ( \"B\" ) } else { fmt . Println ( \"C\" ) } // score \u5728if\u5916\u90e8\u58f0\u660e\uff0c\u6240\u4ee5\u51fa\u4e86 if \u4f9d\u7136\u6709\u6548 fmt . Println ( score ) } switch case \u00b6 switch [ \u5224\u65ad\u53d8\u91cf ] { case \u5e38\u91cf1 \u6216 \u8868\u8fbe\u5f0f1 : \u6267\u884c\u8bed\u53e51 case \u5e38\u91cf2 \u6216 \u8868\u8fbe\u5f0f2 : \u6267\u884c\u8bed\u53e52 case \u5e38\u91cf3 \u6216 \u8868\u8fbe\u5f0f3 : \u6267\u884c\u8bed\u53e53 case \u5e38\u91cf4 \u6216 \u8868\u8fbe\u5f0f4 : \u6267\u884c\u8bed\u53e54 default : \u6267\u884c\u8bed\u53e5N } \u4e00\u4e2aswitch \u53ef\u6709\u591a\u4e2a\u5206\u652f\uff0c\u4f46\u53ea\u80fd\u6709\u4e00\u4e2a default \u5206\u652f \uff0c\u4e14 defalut \u5206\u652f\u4e0d\u662f\u5fc5\u987b\u7684\u3002 eg\uff1a func main () { num := 2 switch num { case 1 : fmt . Println ( \"It is 1.\" ) case 2 : fmt . Println ( \"It is 2.\" ) case 3 : fmt . Println ( \"It is 3.\" ) default : fmt . Println ( \"It is more than 3.\" ) } } // ---------------------------------------- // Output: It is 2. \u4e00\u4e2a\u5206\u652f\u53ef\u4ee5\u6709\u591a\u4e2a\u503c\uff0c\u6bcf\u4e2a\u503c\u4e4b\u95f4\u7528\u9017\u53f7\u5206\u5f00 eg\uff1a func main () { switch n := 7 ; n { case 1 , 3 , 5 , 7 , 9 : fmt . Println ( \"Odd\" ) case 2 , 4 , 6 , 8 , 10 : fmt . Println ( \"Even\" ) default } } \u5206\u652f\u4e5f\u53ef\u4ee5\u7528\u8868\u8fbe\u5f0f\uff0c\u8fd9\u65f6 switch \u540e\u9762\u4e0d\u9700\u8981\u8ddf\u5224\u65ad\u53d8\u91cf eg\uff1a func main () { age := 25 switch { // switch \u540e\u4e0d\u5e26\u5224\u65ad\u53d8\u91cf\uff0c\u5219case \u53ea\u80fd\u5224\u65ad true \u6216 false case age < 25 : fmt . Println ( \"\u597d\u597d\u5b66\u4e60\uff01\" ) case age > 25 && age < 35 : fmt . Println ( \"\u597d\u597d\u5de5\u4f5c\uff01\" ) case age > 60 : fmt . Println ( \"\u597d\u597d\u4eab\u53d7\uff01\" ) default : fmt . Println ( \"\u597d\u597d\u6d3b\u7740\uff01\" ) } } \u6216\u8005 func main () { switch age := 25 ; { case age < 25 : fmt . Println ( \"\u597d\u597d\u5b66\u4e60\uff01\" ) case age > 25 && age < 35 : fmt . Println ( \"\u597d\u597d\u5de5\u4f5c\uff01\" ) case age > 60 : fmt . Println ( \"\u597d\u597d\u4eab\u53d7\uff01\" ) default : fmt . Println ( \"\u597d\u597d\u6d3b\u7740\uff01\" ) } } switch \u4e2d\u7684 case \u9ed8\u8ba4\u4e0d\u4f1a\u7a7f\u900f\uff0c\u6267\u884c\u5b8c\u8fd9\u4e2a case \u4e4b\u540e\u5c31\u8df3\u51faswitch\uff0c\u4f46\u662f\u53ef\u4ee5\u4f7f\u7528 fallthrough \u51fb\u7a7f case\u3002 fallthrough \u8bed\u53e5\u53ef\u4ee5\u6267\u884c\u6ee1\u8db3\u6761\u4ef6\u7684 case \u7684\u4e0b\u4e00\u4e2a case\uff0c\u8fd9\u662f\u4e3a\u4e86\u517c\u5bb9 C \u8bed\u8a00\u4e2d\u7684 case \u8bbe\u8ba1\u7684\u3002 func switchDemo5 () { s := \"a\" switch { case s == \"a\" : fmt . Println ( \"a\" ) fallthrough case s == \"b\" : fmt . Println ( \"b\" ) case s == \"c\" : fmt . Println ( \"c\" ) default : fmt . Println ( \"...\" ) } } // ---------------------------------------- // Output: a b \u5faa\u73af\u7ed3\u6784 \u00b6 for \u5faa\u73af \u00b6 for \u521d\u59cb\u5316\u8bed\u53e5 ; \u6761\u4ef6\u8bed\u53e5 ; \u8fed\u4ee3\u8bed\u53e5 { ... } \u6216 \u521d\u59cb\u5316\u8bed\u53e5 for \u6761\u4ef6\u8bed\u53e5 { ... \u8fed\u4ee3\u8bed\u53e5 } eg\uff1a for i := 0 ; i < 5 ; i ++ { fmt . Println ( i ) } \u6216 i := 0 for i < 5 { fmt . Println ( i ) i ++ } \u65e0\u9650\u5faa\u73af \u00b6 for { \u5faa\u73af\u4f53 } for \u5faa\u73af\u53ef\u4ee5\u901a\u8fc7 break\u3001continue\u3001return\u3001panic \u8bed\u53e5\u5f3a\u5236\u9000\u51fa\u5faa\u73af\u3002 for range \u952e\u503c\u5faa\u73af \u00b6 \u4f7f\u7528 for range \u53ef\u4ee5\u904d\u5386\u6570\u7ec4\u3001\u5207\u7247\u3001\u5b57\u7b26\u4e32\u3001map \u548c\u901a\u9053channel\u3002 \u901a\u8fc7 for range \u904d\u5386\u7684\u8fd4\u56de\u503c\u6709\u4ee5\u4e0b\u89c4\u5f8b\uff1a 1. \u6570\u7ec4\u3001\u5207\u7247\u3001\u5b57\u7b26\u4e32 \u8fd4\u56de**\u7d22\u5f15**\u548c**\u503c** 2. map \u8fd4\u56de**\u952e**\u548c**\u503c** 3. \u901a\u9053 channel \u53ea\u8fd4\u56de**\u901a\u9053\u5185\u7684\u503c** \u57fa\u672c\u8bed\u6cd5\u4e3a\uff1a for idx , val := range iter { ... } eg\uff1a func main () { numbers := [ 6 ] int { 1 , 2 , 3 , 5 } for i , x := range numbers { fmt . Printf ( \"\u7b2c %d \u4f4d x \u7684\u503c\u4e3a %d \\n\" , i , x ) } } // ---------------------------------------- // Output: \u7b2c 0 \u4f4d x \u7684\u503c\u4e3a 1 \u7b2c 1 \u4f4d x \u7684\u503c\u4e3a 2 \u7b2c 2 \u4f4d x \u7684\u503c\u4e3a 3 \u7b2c 3 \u4f4d x \u7684\u503c\u4e3a 5 \u7b2c 4 \u4f4d x \u7684\u503c\u4e3a 0 \u7b2c 5 \u4f4d x \u7684\u503c\u4e3a 0 \u6ce8\u610f\uff1a val \u59cb\u7ec8\u4e3a iter \u4e2d\u5bf9\u5e94\u7d22\u5f15\u7684\u503c\u62f7\u8d1d\uff0c\u56e0\u6b64\u5b83\u4e00\u822c\u53ea\u5177\u6709\u53ea\u8bfb\u6027\u8d28\uff0c\u5bf9\u5b83\u6240\u505a\u7684\u4efb\u4f55\u4fee\u6539\u90fd\u4e0d\u4f1a\u5f71\u54cd\u5230\u96c6\u5408\u4e2d\u539f\u6709\u7684\u503c\u3002\u5982\u679c val \u4e3a\u6307\u9488\uff0c\u5219\u4f1a\u4ea7\u751f\u6307\u9488\u7684\u62f7\u8d1d\uff0c\u4f9d\u65e7\u53ef\u4ee5\u4fee\u6539\u96c6\u5408\u4e2d\u7684\u539f\u503c\u3002 eg\uff1a func main () { a , b , c := 1 , 2 , 3 d , e , f := 4 , 5 , 6 pointer := [ 3 ] * int { & a , & b , & c } valuer := [ 3 ] int { d , e , f } fmt . Println ( a , b , c ) // 1 2 3 fmt . Println ( d , e , f ) // 4 5 6 for _ , p := range pointer { * p = * p + 10 } for _ , v := range valuer { v = v + 1 } fmt . Println ( a , b , c ) // 11 12 13 fmt . Println ( d , e , f ) // 4 5 6 } goto \u8df3\u8f6c \u00b6 goto\u8bed\u53e5 \u901a\u8fc7\u6807\u7b7e\u8fdb\u884c\u4ee3\u7801\u95f4\u7684\u65e0\u6761\u4ef6\u8df3\u8f6c\u3002 \u6807\u7b7e\u5373\u67d0\u4e00\u884c\u7b2c\u4e00\u4e2a\u4e00\u5192\u53f7\uff08 : \uff09\u7ed3\u5c3e\u7684\u5355\u8bcd,\u4e3a\u4e86\u63d0\u5347\u53ef\u8bfb\u6027\uff0c\u4e00\u822c\u5efa\u8bae\u6807\u7b7e\u540d\u79f0\u4f7f\u7528\u5168\u5927\u5199\u3002 goto\u8bed\u53e5 \u53ef\u4ee5\u5728\u5feb\u901f\u8df3\u51fa\u5faa\u73af\u3001\u907f\u514d\u91cd\u590d\u9000\u51fa\u4e0a\u6709\u4e00\u5b9a\u7684\u5e2e\u52a9\u3002 Go \u8bed\u8a00\u4e2d\u4f7f\u7528 goto \u8bed\u53e5\u80fd\u7b80\u5316\u4e00\u4e9b\u4ee3\u7801\u7684\u5b9e\u73b0\u8fc7\u7a0b\u3002 func main () { for i := 0 ; i < 10 ; i ++ { if i == 6 { goto GOTOTAG } fmt . Println ( i ) } GOTOTAG : fmt . Println ( \"I'm break.\" ) } // ---------------------------------------- // Output: 0 1 2 3 4 5 I ' m break . \u4f7f\u7528 goto \u8bed\u53e5\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u5faa\u73af\uff0c\u4f46\u662f\u4e0d\u5efa\u8bae\u8fd9\u4e48\u505a\uff0c\u56e0\u4e3a\u6ee5\u7528 goto \u8bed\u53e5\u4f1a\u5199\u51fa\u610f\u5927\u5229\u9762\u6761\u4ee3\u7801 func main () { a := 1 L : if a < 10 { fmt . Println ( a ) a ++ goto L } } \u5982\u679c\u60a8\u5fc5\u987b\u4f7f\u7528 goto\uff0c\u5e94\u5f53\u53ea\u4f7f\u7528\u6b63\u5e8f\u7684\u6807\u7b7e\uff08 \u6807\u7b7e\u4f4d\u4e8e goto \u8bed\u53e5\u4e4b\u540e \uff09\uff0c\u4f46\u6ce8\u610f\u6807\u7b7e\u548c goto \u8bed\u53e5\u4e4b\u95f4\u4e0d\u80fd\u51fa\u73b0\u5b9a\u4e49\u65b0\u53d8\u91cf\u7684\u8bed\u53e5\uff0c\u5426\u5219\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u5931\u8d25\u3002 break\u3001continue \u00b6 break \uff1a\u8df3\u51fa\u6574\u4e2a\u5faa\u73af continue \uff1a\u8df3\u51fa\u672c\u6b21\u5faa\u73af break \u548c continue \u8bed\u53e5\u540e\u9762\u90fd\u53ef\u4ee5\u6dfb\u52a0\u6807\u7b7e\u3002 \u4e0d\u8fc7\u6807\u7b7e\u5fc5\u987b\u4f4d\u4e8e for\u3001switch\u3001select \u4ee3\u7801\u5757\u4e4b\u4e0a\u3002 eg\uff1a func main () { breakTag : for i := 0 ; i < 10 ; i ++ { if i == 5 { break breakTag } fmt . Println ( i ) } } // ---------------------------------------- // Output: 0 1 2 3 4","title":"4.\u6d41\u7a0b\u63a7\u5236"},{"location":"Go/Basic/Golang-4-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/#4-","text":"","title":"4-\u6d41\u7a0b\u63a7\u5236"},{"location":"Go/Basic/Golang-4-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/#_1","text":"","title":"\u5206\u652f\u7ed3\u6784"},{"location":"Go/Basic/Golang-4-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/#if","text":"if \u8868\u8fbe\u5f0f1 { \u5206\u652f1 } else if \u8868\u8fbe\u5f0f2 { \u5206\u652f2 } else { \u5206\u652f3 } eg\uff1a func main () { score := 65 if score >= 90 { fmt . Println ( \"A\" ) } else if score > 75 { fmt . Println ( \"B\" ) } else { fmt . Println ( \"C\" ) } }","title":"if \u57fa\u672c\u5199\u6cd5"},{"location":"Go/Basic/Golang-4-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/#if_1","text":"\u5728 if \u8868\u8fbe\u5f0f\u4e4b\u524d\u6dfb\u52a0\u4e00\u4e2a\u6267\u884c\u8bed\u53e5\uff0c\u518d\u6839\u636e\u53d8\u91cf\u503c\u8fdb\u884c\u5224\u65ad func main () { if score := 65 ; score >= 90 { fmt . Println ( \"A\" ) } else if score > 75 { fmt . Println ( \"B\" ) } else { fmt . Println ( \"C\" ) } } \u6ce8\u610f\u4e0a\u8ff0\u4ee3\u7801\u4e2d\u7684 score \u662f\u5728 if \u8bed\u53e5\u4e2d\u521b\u5efa\u5e76\u521d\u59cb\u5316\u7684\uff0c\u5176\u4f5c\u7528\u57df\u4ec5\u9650\u4e8e if \u8bed\u53e5\u5757\uff08\u5305\u62ec\u540c\u5c5e\u7684 else if \u8bed\u53e5\u3001else \u8bed\u53e5\uff09 \u4f46\u662f\u5982\u679c\u58f0\u660e\u662f\u5728 if \u8bed\u53e5\u5916\uff0c\u5219\u5176\u4f5c\u7528\u57df\u4e0d\u9650\u4e8e if \u8bed\u53e5\u4e2d func main () { var score int if score := 65 ; score >= 90 { fmt . Println ( \"A\" ) } else if score > 75 { fmt . Println ( \"B\" ) } else { fmt . Println ( \"C\" ) } // score \u5728if\u5916\u90e8\u58f0\u660e\uff0c\u6240\u4ee5\u51fa\u4e86 if \u4f9d\u7136\u6709\u6548 fmt . Println ( score ) }","title":"if \u7279\u6b8a\u5199\u6cd5"},{"location":"Go/Basic/Golang-4-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/#switch-case","text":"switch [ \u5224\u65ad\u53d8\u91cf ] { case \u5e38\u91cf1 \u6216 \u8868\u8fbe\u5f0f1 : \u6267\u884c\u8bed\u53e51 case \u5e38\u91cf2 \u6216 \u8868\u8fbe\u5f0f2 : \u6267\u884c\u8bed\u53e52 case \u5e38\u91cf3 \u6216 \u8868\u8fbe\u5f0f3 : \u6267\u884c\u8bed\u53e53 case \u5e38\u91cf4 \u6216 \u8868\u8fbe\u5f0f4 : \u6267\u884c\u8bed\u53e54 default : \u6267\u884c\u8bed\u53e5N } \u4e00\u4e2aswitch \u53ef\u6709\u591a\u4e2a\u5206\u652f\uff0c\u4f46\u53ea\u80fd\u6709\u4e00\u4e2a default \u5206\u652f \uff0c\u4e14 defalut \u5206\u652f\u4e0d\u662f\u5fc5\u987b\u7684\u3002 eg\uff1a func main () { num := 2 switch num { case 1 : fmt . Println ( \"It is 1.\" ) case 2 : fmt . Println ( \"It is 2.\" ) case 3 : fmt . Println ( \"It is 3.\" ) default : fmt . Println ( \"It is more than 3.\" ) } } // ---------------------------------------- // Output: It is 2. \u4e00\u4e2a\u5206\u652f\u53ef\u4ee5\u6709\u591a\u4e2a\u503c\uff0c\u6bcf\u4e2a\u503c\u4e4b\u95f4\u7528\u9017\u53f7\u5206\u5f00 eg\uff1a func main () { switch n := 7 ; n { case 1 , 3 , 5 , 7 , 9 : fmt . Println ( \"Odd\" ) case 2 , 4 , 6 , 8 , 10 : fmt . Println ( \"Even\" ) default } } \u5206\u652f\u4e5f\u53ef\u4ee5\u7528\u8868\u8fbe\u5f0f\uff0c\u8fd9\u65f6 switch \u540e\u9762\u4e0d\u9700\u8981\u8ddf\u5224\u65ad\u53d8\u91cf eg\uff1a func main () { age := 25 switch { // switch \u540e\u4e0d\u5e26\u5224\u65ad\u53d8\u91cf\uff0c\u5219case \u53ea\u80fd\u5224\u65ad true \u6216 false case age < 25 : fmt . Println ( \"\u597d\u597d\u5b66\u4e60\uff01\" ) case age > 25 && age < 35 : fmt . Println ( \"\u597d\u597d\u5de5\u4f5c\uff01\" ) case age > 60 : fmt . Println ( \"\u597d\u597d\u4eab\u53d7\uff01\" ) default : fmt . Println ( \"\u597d\u597d\u6d3b\u7740\uff01\" ) } } \u6216\u8005 func main () { switch age := 25 ; { case age < 25 : fmt . Println ( \"\u597d\u597d\u5b66\u4e60\uff01\" ) case age > 25 && age < 35 : fmt . Println ( \"\u597d\u597d\u5de5\u4f5c\uff01\" ) case age > 60 : fmt . Println ( \"\u597d\u597d\u4eab\u53d7\uff01\" ) default : fmt . Println ( \"\u597d\u597d\u6d3b\u7740\uff01\" ) } } switch \u4e2d\u7684 case \u9ed8\u8ba4\u4e0d\u4f1a\u7a7f\u900f\uff0c\u6267\u884c\u5b8c\u8fd9\u4e2a case \u4e4b\u540e\u5c31\u8df3\u51faswitch\uff0c\u4f46\u662f\u53ef\u4ee5\u4f7f\u7528 fallthrough \u51fb\u7a7f case\u3002 fallthrough \u8bed\u53e5\u53ef\u4ee5\u6267\u884c\u6ee1\u8db3\u6761\u4ef6\u7684 case \u7684\u4e0b\u4e00\u4e2a case\uff0c\u8fd9\u662f\u4e3a\u4e86\u517c\u5bb9 C \u8bed\u8a00\u4e2d\u7684 case \u8bbe\u8ba1\u7684\u3002 func switchDemo5 () { s := \"a\" switch { case s == \"a\" : fmt . Println ( \"a\" ) fallthrough case s == \"b\" : fmt . Println ( \"b\" ) case s == \"c\" : fmt . Println ( \"c\" ) default : fmt . Println ( \"...\" ) } } // ---------------------------------------- // Output: a b","title":"switch case"},{"location":"Go/Basic/Golang-4-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/#_2","text":"","title":"\u5faa\u73af\u7ed3\u6784"},{"location":"Go/Basic/Golang-4-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/#for","text":"for \u521d\u59cb\u5316\u8bed\u53e5 ; \u6761\u4ef6\u8bed\u53e5 ; \u8fed\u4ee3\u8bed\u53e5 { ... } \u6216 \u521d\u59cb\u5316\u8bed\u53e5 for \u6761\u4ef6\u8bed\u53e5 { ... \u8fed\u4ee3\u8bed\u53e5 } eg\uff1a for i := 0 ; i < 5 ; i ++ { fmt . Println ( i ) } \u6216 i := 0 for i < 5 { fmt . Println ( i ) i ++ }","title":"for \u5faa\u73af"},{"location":"Go/Basic/Golang-4-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/#_3","text":"for { \u5faa\u73af\u4f53 } for \u5faa\u73af\u53ef\u4ee5\u901a\u8fc7 break\u3001continue\u3001return\u3001panic \u8bed\u53e5\u5f3a\u5236\u9000\u51fa\u5faa\u73af\u3002","title":"\u65e0\u9650\u5faa\u73af"},{"location":"Go/Basic/Golang-4-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/#for-range","text":"\u4f7f\u7528 for range \u53ef\u4ee5\u904d\u5386\u6570\u7ec4\u3001\u5207\u7247\u3001\u5b57\u7b26\u4e32\u3001map \u548c\u901a\u9053channel\u3002 \u901a\u8fc7 for range \u904d\u5386\u7684\u8fd4\u56de\u503c\u6709\u4ee5\u4e0b\u89c4\u5f8b\uff1a 1. \u6570\u7ec4\u3001\u5207\u7247\u3001\u5b57\u7b26\u4e32 \u8fd4\u56de**\u7d22\u5f15**\u548c**\u503c** 2. map \u8fd4\u56de**\u952e**\u548c**\u503c** 3. \u901a\u9053 channel \u53ea\u8fd4\u56de**\u901a\u9053\u5185\u7684\u503c** \u57fa\u672c\u8bed\u6cd5\u4e3a\uff1a for idx , val := range iter { ... } eg\uff1a func main () { numbers := [ 6 ] int { 1 , 2 , 3 , 5 } for i , x := range numbers { fmt . Printf ( \"\u7b2c %d \u4f4d x \u7684\u503c\u4e3a %d \\n\" , i , x ) } } // ---------------------------------------- // Output: \u7b2c 0 \u4f4d x \u7684\u503c\u4e3a 1 \u7b2c 1 \u4f4d x \u7684\u503c\u4e3a 2 \u7b2c 2 \u4f4d x \u7684\u503c\u4e3a 3 \u7b2c 3 \u4f4d x \u7684\u503c\u4e3a 5 \u7b2c 4 \u4f4d x \u7684\u503c\u4e3a 0 \u7b2c 5 \u4f4d x \u7684\u503c\u4e3a 0 \u6ce8\u610f\uff1a val \u59cb\u7ec8\u4e3a iter \u4e2d\u5bf9\u5e94\u7d22\u5f15\u7684\u503c\u62f7\u8d1d\uff0c\u56e0\u6b64\u5b83\u4e00\u822c\u53ea\u5177\u6709\u53ea\u8bfb\u6027\u8d28\uff0c\u5bf9\u5b83\u6240\u505a\u7684\u4efb\u4f55\u4fee\u6539\u90fd\u4e0d\u4f1a\u5f71\u54cd\u5230\u96c6\u5408\u4e2d\u539f\u6709\u7684\u503c\u3002\u5982\u679c val \u4e3a\u6307\u9488\uff0c\u5219\u4f1a\u4ea7\u751f\u6307\u9488\u7684\u62f7\u8d1d\uff0c\u4f9d\u65e7\u53ef\u4ee5\u4fee\u6539\u96c6\u5408\u4e2d\u7684\u539f\u503c\u3002 eg\uff1a func main () { a , b , c := 1 , 2 , 3 d , e , f := 4 , 5 , 6 pointer := [ 3 ] * int { & a , & b , & c } valuer := [ 3 ] int { d , e , f } fmt . Println ( a , b , c ) // 1 2 3 fmt . Println ( d , e , f ) // 4 5 6 for _ , p := range pointer { * p = * p + 10 } for _ , v := range valuer { v = v + 1 } fmt . Println ( a , b , c ) // 11 12 13 fmt . Println ( d , e , f ) // 4 5 6 }","title":"for range \u952e\u503c\u5faa\u73af"},{"location":"Go/Basic/Golang-4-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/#goto","text":"goto\u8bed\u53e5 \u901a\u8fc7\u6807\u7b7e\u8fdb\u884c\u4ee3\u7801\u95f4\u7684\u65e0\u6761\u4ef6\u8df3\u8f6c\u3002 \u6807\u7b7e\u5373\u67d0\u4e00\u884c\u7b2c\u4e00\u4e2a\u4e00\u5192\u53f7\uff08 : \uff09\u7ed3\u5c3e\u7684\u5355\u8bcd,\u4e3a\u4e86\u63d0\u5347\u53ef\u8bfb\u6027\uff0c\u4e00\u822c\u5efa\u8bae\u6807\u7b7e\u540d\u79f0\u4f7f\u7528\u5168\u5927\u5199\u3002 goto\u8bed\u53e5 \u53ef\u4ee5\u5728\u5feb\u901f\u8df3\u51fa\u5faa\u73af\u3001\u907f\u514d\u91cd\u590d\u9000\u51fa\u4e0a\u6709\u4e00\u5b9a\u7684\u5e2e\u52a9\u3002 Go \u8bed\u8a00\u4e2d\u4f7f\u7528 goto \u8bed\u53e5\u80fd\u7b80\u5316\u4e00\u4e9b\u4ee3\u7801\u7684\u5b9e\u73b0\u8fc7\u7a0b\u3002 func main () { for i := 0 ; i < 10 ; i ++ { if i == 6 { goto GOTOTAG } fmt . Println ( i ) } GOTOTAG : fmt . Println ( \"I'm break.\" ) } // ---------------------------------------- // Output: 0 1 2 3 4 5 I ' m break . \u4f7f\u7528 goto \u8bed\u53e5\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u5faa\u73af\uff0c\u4f46\u662f\u4e0d\u5efa\u8bae\u8fd9\u4e48\u505a\uff0c\u56e0\u4e3a\u6ee5\u7528 goto \u8bed\u53e5\u4f1a\u5199\u51fa\u610f\u5927\u5229\u9762\u6761\u4ee3\u7801 func main () { a := 1 L : if a < 10 { fmt . Println ( a ) a ++ goto L } } \u5982\u679c\u60a8\u5fc5\u987b\u4f7f\u7528 goto\uff0c\u5e94\u5f53\u53ea\u4f7f\u7528\u6b63\u5e8f\u7684\u6807\u7b7e\uff08 \u6807\u7b7e\u4f4d\u4e8e goto \u8bed\u53e5\u4e4b\u540e \uff09\uff0c\u4f46\u6ce8\u610f\u6807\u7b7e\u548c goto \u8bed\u53e5\u4e4b\u95f4\u4e0d\u80fd\u51fa\u73b0\u5b9a\u4e49\u65b0\u53d8\u91cf\u7684\u8bed\u53e5\uff0c\u5426\u5219\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u5931\u8d25\u3002","title":"goto \u8df3\u8f6c"},{"location":"Go/Basic/Golang-4-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/#breakcontinue","text":"break \uff1a\u8df3\u51fa\u6574\u4e2a\u5faa\u73af continue \uff1a\u8df3\u51fa\u672c\u6b21\u5faa\u73af break \u548c continue \u8bed\u53e5\u540e\u9762\u90fd\u53ef\u4ee5\u6dfb\u52a0\u6807\u7b7e\u3002 \u4e0d\u8fc7\u6807\u7b7e\u5fc5\u987b\u4f4d\u4e8e for\u3001switch\u3001select \u4ee3\u7801\u5757\u4e4b\u4e0a\u3002 eg\uff1a func main () { breakTag : for i := 0 ; i < 10 ; i ++ { if i == 5 { break breakTag } fmt . Println ( i ) } } // ---------------------------------------- // Output: 0 1 2 3 4","title":"break\u3001continue"},{"location":"Go/Basic/Golang-5-%E6%95%B0%E7%BB%84/","text":"\u6570\u7ec4\u7684\u5b9a\u4e49\u4e0e\u64cd\u4f5c 5-\u6570\u7ec4 \u00b6 \u6570\u7ec4\u662f\u540c\u4e00\u79cd\u6570\u636e\u7c7b\u578b\u5143\u7d20\u7684\u96c6\u5408\u3002 \u5728 Go \u4e2d \u6570\u7ec4\u4ece\u58f0\u660e\u65f6\u5c31\u786e\u5b9a\uff0c\u4f7f\u7528\u65f6\u53ef\u4ee5\u4fee\u6539\u6570\u7ec4\u6210\u5458\uff0c\u4f46\u4e0d\u80fd\u4fee\u6539\u6570\u7ec4\u5927\u5c0f\u3002 \u6570\u7ec4\u5b9a\u4e49 \u00b6 {% note warning , \u6ce8\u610f\uff1a\u6570\u7ec4\u662f\u503c\u7c7b\u578b\uff01\uff01\uff01 %} var identifier [ len ] type identifier \uff1a\u6570\u7ec4\u540d\u3001 len \uff1a\u6570\u7ec4\u957f\u5ea6\u3001 type \uff1a\u6570\u7ec4\u7c7b\u578b \u6570\u7ec4\u957f\u5ea6\u5fc5\u987b\u662f\u5e38\u91cf\uff0c\u4e14\u4e00\u65e6\u5b9a\u4e49\u5c31\u4e0d\u80fd\u66f4\u6539\u3002 [5]int \u548c [10]int \u662f\u4e0d\u540c\u7684\u7c7b\u578b\u3002 var arr1 [ 5 ] int var arr2 [ 8 ] int arr1 = arr2 // \u7981\u6b62\u8fd9\u6837\u505a\uff0c\u56e0\u4e3a\u6b64\u65f6 arr1 \u548c arr2 \u662f\u4e0d\u540c\u7684\u7c7b\u578b arr2 \u4e0d\u53ef\u4ee5\u8d4b\u503c\u7ed9 arr2\uff0c\u56e0\u4e3a\u5b83\u4fe9\u7c7b\u578b\u4e0d\u540c\uff0c \u5982\u679c\u6362\u6210 var arr1 [5]int \u548c var arr2 [5]int \u8fd9\u6837\u5c31\u53ef\u4ee5\u3002 func main () { var arr1 = [ 3 ] int { 12 , 3 } var arr2 [ 3 ] int arr2 = arr1 for _ , e := range arr2 { fmt . Println ( e ) } } // ---------------------------------------- // Output: 12 3 0 \u6570\u7ec4\u521d\u59cb\u5316 \u00b6 \u521d\u59cb\u5316\u65b9\u5f0f\u6709\u5f88\u591a\u79cd \u65b9\u6cd51 \u00b6 \u4f7f\u7528\u521d\u59cb\u5316\u5217\u8868\u8bbe\u7f6e\u6570\u7ec4\u5143\u7d20\u7684\u503c var identifier [ len ] type var identifier = [ len ] type { initial list } eg: var a [ 3 ] int var b = [ 3 ] int { 1 , 2 } var c = [ 3 ] string { \"Alice\" , \"Boii\" } fmt . Println ( a ) // [0 0 0] fmt . Println ( b ) // [1 2 0] fmt . Println ( c ) // [Alice Boii] \u65b9\u6cd52 \u00b6 \u8ba9\u7f16\u8bd1\u5668\u6839\u636e\u521d\u59cb\u503c\u4e2a\u6570\u81ea\u884c\u63a8\u65ad\u6570\u7ec4\u957f\u5ea6 var identifier = [ ... ] type { initial list } eg: var b = [ ... ] int { 1 , 2 , 3 , 4 } fmt . Println ( b ) // [1 2 3 4] fmt . Printf ( \"Type of b: %T \\n\" , b ) // Type of b: [4]int \u65b9\u6cd53 \u00b6 \u901a\u8fc7\u6307\u5b9a\u7d22\u5f15\u503c\u6765\u521d\u59cb\u5316\u6570\u7ec4\uff0c\u6570\u7ec4\u957f\u5ea6\u4e3a \u6700\u5927\u7684\u4e0b\u6807+1 \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u7684\u53ef\u4ee5\u4e0d\u6307\u5b9a\u6570\u7ec4\u957f\u5ea6\uff0c\u5982\u679c\u6307\u5b9a\u4e86\u6570\u7ec4\u957f\u5ea6\u4e14\u6ca1\u6709\u66f4\u5927\u7684\u4e0b\u6807\uff0c\u5219\u4ee5\u6307\u5b9a\u957f\u5ea6\u4e3a\u6700\u5927\u957f\u5ea6 var identifier = [ ... ] int { idx : elem , idx : elem } eg: func main () { a := [ ... ] int { 1 : 3 , 5 : 2 } b := [ 7 ] int { 0 : 2 , 4 : 5 } fmt . Println ( a ) // [0 3 0 0 0 2] fmt . Println ( b ) // [2 0 0 0 5 0 0] fmt . Printf ( \"Type of a: %T \\n\" , a ) // Type of a: [6]int fmt . Printf ( \"Type of b: %T \\n\" , b ) // Type of b: [7]int // b := [3]int{0: 2, 4: 5} // \u4e0a\u9762\u8fd9\u53e5\u4f1a\u62a5\u9519\uff0c\u6307\u5b9a\u957f\u5ea63\uff0c\u5374\u53c8\u6307\u5b9a\u4e86\u7d22\u5f154 } \u6570\u7ec4\u904d\u5386 \u00b6 \u6570\u7ec4\u904d\u5386\u53ef\u4ee5\u901a\u8fc7 for \u5faa\u73af\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7 for...range \uff0c\u6bd4\u8f83\u63a8\u8350 for...range func main () { str := [ ... ] string { \"\u5e7f\u5dde\" , \"\u6df1\u5733\" , \"\u4e1c\u839e\" } for i := 0 ; i < len ( str ); i ++ { fmt . Println ( str [ i ]) } for idx , value := range str { fmt . Println ( idx , value ) } } \u591a\u7ef4\u6570\u7ec4 \u00b6 Go \u4e2d\u652f\u6301\u591a\u7ef4\u6570\u7ec4\uff0c\u8fd9\u91cc\u4ee5\u4e8c\u7ef4\u6570\u7ec4\u4e3a\u4f8b\u3002 \u5b9a\u4e49 \u00b6 func main () { a := [ 3 ][ 2 ] string { { \"\u5e7f\u4e1c\" , \"\u5e7f\u5dde\" }, { \"\u6d59\u6c5f\" , \"\u676d\u5dde\" }, { \"\u56db\u5ddd\" , \"\u6210\u90fd\" }, } fmt . Println ( a ) // [[\u5e7f\u4e1c \u5e7f\u5dde] [\u6d59\u6c5f \u676d\u5dde] [\u56db\u5ddd \u6210\u90fd]] fmt . Println ( a [ 1 ][ 1 ]) // \u652f\u6301\u7d22\u5f15\u53d6\u503c\uff1a \u676d\u5dde } \u904d\u5386 \u00b6 func main () { a := [ 3 ][ 2 ] string { { \"\u5e7f\u4e1c\" , \"\u5e7f\u5dde\" }, { \"\u6d59\u6c5f\" , \"\u676d\u5dde\" }, { \"\u56db\u5ddd\" , \"\u6210\u90fd\" }, } for _ , v1 := range a { for _ , v2 := range v1 { fmt . Printf ( \"%s \\t\" , v2 ) } fmt . Println () } } // ---------------------------------------- // Output: \u5e7f\u4e1c \u5e7f\u5dde \u6d59\u6c5f \u676d\u5dde \u56db\u5ddd \u6210\u90fd **\u6ce8\u610f\uff1a**\u591a\u7ef4\u6570\u7ec4\u53ea\u6709\u7b2c\u4e00\u5c42\u53ef\u4ee5\u7701\u7565\u957f\u5ea6\u3002 eg\uff1a // \u5408\u6cd5\u5199\u6cd5 a := [ ... ][ 2 ] string { { \"\u5e7f\u4e1c\" , \"\u5e7f\u5dde\" }, { \"\u6d59\u6c5f\" , \"\u676d\u5dde\" }, { \"\u56db\u5ddd\" , \"\u6210\u90fd\" }, } // \u975e\u6cd5\u5199\u6cd5 a := [ ... ][ ... ] string { { \"\u5e7f\u4e1c\" , \"\u5e7f\u5dde\" }, { \"\u6d59\u6c5f\" , \"\u676d\u5dde\" }, { \"\u56db\u5ddd\" , \"\u6210\u90fd\" }, } \u6570\u7ec4\u662f\u503c\u7c7b\u578b \u00b6 \u6570\u7ec4\u662f\u503c\u7c7b\u578b\uff0c\u8d4b\u503c\u548c\u4f20\u53c2\u4f1a\u8d4b\u503c\u6574\u4e2a\u6570\u7ec4\u3002\u56e0\u6b64\u6539\u53d8\u526f\u672c\u7684\u503c\uff0c\u4e0d\u4f1a\u6539\u53d8\u672c\u8eab\u7684\u503c\u3002 func modifyArray ( x [ 3 ] int ) { x [ 0 ] = 100 } func modifyArray2 ( x [ 3 ][ 2 ] int ) { x [ 2 ][ 0 ] = 100 } func main () { a := [ 3 ] int { 10 , 20 , 30 } modifyArray ( a ) //\u5728modify\u4e2d\u4fee\u6539\u7684\u662fa\u7684\u526f\u672cx fmt . Println ( a ) //[10 20 30] b := [ 3 ][ 2 ] int { { 1 , 1 }, { 1 , 1 }, { 1 , 1 }, } modifyArray2 ( b ) //\u5728modify\u4e2d\u4fee\u6539\u7684\u662fb\u7684\u526f\u672cx fmt . Println ( b ) //[[1 1] [1 1] [1 1]] } \u6ce8\u610f\uff1a 1. \u6570\u7ec4\u652f\u6301 == \u3001 != \u64cd\u4f5c\u7b26\uff0c\u56e0\u4e3a\u5185\u5b58\u603b\u662f\u88ab\u521d\u59cb\u5316\u8fc7\u7684\u3002 2. [len]*type \u8868\u793a\u6307\u9488\u6570\u7ec4\uff0c\u672c\u8d28\u662f**\u6570\u7ec4**\uff0c\u5b58\u653e\u6307\u9488\u7684\u6570\u7ec4 3. *[len]type \u8868\u793a\u6570\u7ec4\u6307\u9488\uff0c\u672c\u8d28\u662f**\u6307\u9488**\uff0c\u6307\u5411\u6570\u7ec4\u7684\u6307\u9488","title":"5.\u6570\u7ec4"},{"location":"Go/Basic/Golang-5-%E6%95%B0%E7%BB%84/#5-","text":"\u6570\u7ec4\u662f\u540c\u4e00\u79cd\u6570\u636e\u7c7b\u578b\u5143\u7d20\u7684\u96c6\u5408\u3002 \u5728 Go \u4e2d \u6570\u7ec4\u4ece\u58f0\u660e\u65f6\u5c31\u786e\u5b9a\uff0c\u4f7f\u7528\u65f6\u53ef\u4ee5\u4fee\u6539\u6570\u7ec4\u6210\u5458\uff0c\u4f46\u4e0d\u80fd\u4fee\u6539\u6570\u7ec4\u5927\u5c0f\u3002","title":"5-\u6570\u7ec4"},{"location":"Go/Basic/Golang-5-%E6%95%B0%E7%BB%84/#_1","text":"{% note warning , \u6ce8\u610f\uff1a\u6570\u7ec4\u662f\u503c\u7c7b\u578b\uff01\uff01\uff01 %} var identifier [ len ] type identifier \uff1a\u6570\u7ec4\u540d\u3001 len \uff1a\u6570\u7ec4\u957f\u5ea6\u3001 type \uff1a\u6570\u7ec4\u7c7b\u578b \u6570\u7ec4\u957f\u5ea6\u5fc5\u987b\u662f\u5e38\u91cf\uff0c\u4e14\u4e00\u65e6\u5b9a\u4e49\u5c31\u4e0d\u80fd\u66f4\u6539\u3002 [5]int \u548c [10]int \u662f\u4e0d\u540c\u7684\u7c7b\u578b\u3002 var arr1 [ 5 ] int var arr2 [ 8 ] int arr1 = arr2 // \u7981\u6b62\u8fd9\u6837\u505a\uff0c\u56e0\u4e3a\u6b64\u65f6 arr1 \u548c arr2 \u662f\u4e0d\u540c\u7684\u7c7b\u578b arr2 \u4e0d\u53ef\u4ee5\u8d4b\u503c\u7ed9 arr2\uff0c\u56e0\u4e3a\u5b83\u4fe9\u7c7b\u578b\u4e0d\u540c\uff0c \u5982\u679c\u6362\u6210 var arr1 [5]int \u548c var arr2 [5]int \u8fd9\u6837\u5c31\u53ef\u4ee5\u3002 func main () { var arr1 = [ 3 ] int { 12 , 3 } var arr2 [ 3 ] int arr2 = arr1 for _ , e := range arr2 { fmt . Println ( e ) } } // ---------------------------------------- // Output: 12 3 0","title":"\u6570\u7ec4\u5b9a\u4e49"},{"location":"Go/Basic/Golang-5-%E6%95%B0%E7%BB%84/#_2","text":"\u521d\u59cb\u5316\u65b9\u5f0f\u6709\u5f88\u591a\u79cd","title":"\u6570\u7ec4\u521d\u59cb\u5316"},{"location":"Go/Basic/Golang-5-%E6%95%B0%E7%BB%84/#1","text":"\u4f7f\u7528\u521d\u59cb\u5316\u5217\u8868\u8bbe\u7f6e\u6570\u7ec4\u5143\u7d20\u7684\u503c var identifier [ len ] type var identifier = [ len ] type { initial list } eg: var a [ 3 ] int var b = [ 3 ] int { 1 , 2 } var c = [ 3 ] string { \"Alice\" , \"Boii\" } fmt . Println ( a ) // [0 0 0] fmt . Println ( b ) // [1 2 0] fmt . Println ( c ) // [Alice Boii]","title":"\u65b9\u6cd51"},{"location":"Go/Basic/Golang-5-%E6%95%B0%E7%BB%84/#2","text":"\u8ba9\u7f16\u8bd1\u5668\u6839\u636e\u521d\u59cb\u503c\u4e2a\u6570\u81ea\u884c\u63a8\u65ad\u6570\u7ec4\u957f\u5ea6 var identifier = [ ... ] type { initial list } eg: var b = [ ... ] int { 1 , 2 , 3 , 4 } fmt . Println ( b ) // [1 2 3 4] fmt . Printf ( \"Type of b: %T \\n\" , b ) // Type of b: [4]int","title":"\u65b9\u6cd52"},{"location":"Go/Basic/Golang-5-%E6%95%B0%E7%BB%84/#3","text":"\u901a\u8fc7\u6307\u5b9a\u7d22\u5f15\u503c\u6765\u521d\u59cb\u5316\u6570\u7ec4\uff0c\u6570\u7ec4\u957f\u5ea6\u4e3a \u6700\u5927\u7684\u4e0b\u6807+1 \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u7684\u53ef\u4ee5\u4e0d\u6307\u5b9a\u6570\u7ec4\u957f\u5ea6\uff0c\u5982\u679c\u6307\u5b9a\u4e86\u6570\u7ec4\u957f\u5ea6\u4e14\u6ca1\u6709\u66f4\u5927\u7684\u4e0b\u6807\uff0c\u5219\u4ee5\u6307\u5b9a\u957f\u5ea6\u4e3a\u6700\u5927\u957f\u5ea6 var identifier = [ ... ] int { idx : elem , idx : elem } eg: func main () { a := [ ... ] int { 1 : 3 , 5 : 2 } b := [ 7 ] int { 0 : 2 , 4 : 5 } fmt . Println ( a ) // [0 3 0 0 0 2] fmt . Println ( b ) // [2 0 0 0 5 0 0] fmt . Printf ( \"Type of a: %T \\n\" , a ) // Type of a: [6]int fmt . Printf ( \"Type of b: %T \\n\" , b ) // Type of b: [7]int // b := [3]int{0: 2, 4: 5} // \u4e0a\u9762\u8fd9\u53e5\u4f1a\u62a5\u9519\uff0c\u6307\u5b9a\u957f\u5ea63\uff0c\u5374\u53c8\u6307\u5b9a\u4e86\u7d22\u5f154 }","title":"\u65b9\u6cd53"},{"location":"Go/Basic/Golang-5-%E6%95%B0%E7%BB%84/#_3","text":"\u6570\u7ec4\u904d\u5386\u53ef\u4ee5\u901a\u8fc7 for \u5faa\u73af\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7 for...range \uff0c\u6bd4\u8f83\u63a8\u8350 for...range func main () { str := [ ... ] string { \"\u5e7f\u5dde\" , \"\u6df1\u5733\" , \"\u4e1c\u839e\" } for i := 0 ; i < len ( str ); i ++ { fmt . Println ( str [ i ]) } for idx , value := range str { fmt . Println ( idx , value ) } }","title":"\u6570\u7ec4\u904d\u5386"},{"location":"Go/Basic/Golang-5-%E6%95%B0%E7%BB%84/#_4","text":"Go \u4e2d\u652f\u6301\u591a\u7ef4\u6570\u7ec4\uff0c\u8fd9\u91cc\u4ee5\u4e8c\u7ef4\u6570\u7ec4\u4e3a\u4f8b\u3002","title":"\u591a\u7ef4\u6570\u7ec4"},{"location":"Go/Basic/Golang-5-%E6%95%B0%E7%BB%84/#_5","text":"func main () { a := [ 3 ][ 2 ] string { { \"\u5e7f\u4e1c\" , \"\u5e7f\u5dde\" }, { \"\u6d59\u6c5f\" , \"\u676d\u5dde\" }, { \"\u56db\u5ddd\" , \"\u6210\u90fd\" }, } fmt . Println ( a ) // [[\u5e7f\u4e1c \u5e7f\u5dde] [\u6d59\u6c5f \u676d\u5dde] [\u56db\u5ddd \u6210\u90fd]] fmt . Println ( a [ 1 ][ 1 ]) // \u652f\u6301\u7d22\u5f15\u53d6\u503c\uff1a \u676d\u5dde }","title":"\u5b9a\u4e49"},{"location":"Go/Basic/Golang-5-%E6%95%B0%E7%BB%84/#_6","text":"func main () { a := [ 3 ][ 2 ] string { { \"\u5e7f\u4e1c\" , \"\u5e7f\u5dde\" }, { \"\u6d59\u6c5f\" , \"\u676d\u5dde\" }, { \"\u56db\u5ddd\" , \"\u6210\u90fd\" }, } for _ , v1 := range a { for _ , v2 := range v1 { fmt . Printf ( \"%s \\t\" , v2 ) } fmt . Println () } } // ---------------------------------------- // Output: \u5e7f\u4e1c \u5e7f\u5dde \u6d59\u6c5f \u676d\u5dde \u56db\u5ddd \u6210\u90fd **\u6ce8\u610f\uff1a**\u591a\u7ef4\u6570\u7ec4\u53ea\u6709\u7b2c\u4e00\u5c42\u53ef\u4ee5\u7701\u7565\u957f\u5ea6\u3002 eg\uff1a // \u5408\u6cd5\u5199\u6cd5 a := [ ... ][ 2 ] string { { \"\u5e7f\u4e1c\" , \"\u5e7f\u5dde\" }, { \"\u6d59\u6c5f\" , \"\u676d\u5dde\" }, { \"\u56db\u5ddd\" , \"\u6210\u90fd\" }, } // \u975e\u6cd5\u5199\u6cd5 a := [ ... ][ ... ] string { { \"\u5e7f\u4e1c\" , \"\u5e7f\u5dde\" }, { \"\u6d59\u6c5f\" , \"\u676d\u5dde\" }, { \"\u56db\u5ddd\" , \"\u6210\u90fd\" }, }","title":"\u904d\u5386"},{"location":"Go/Basic/Golang-5-%E6%95%B0%E7%BB%84/#_7","text":"\u6570\u7ec4\u662f\u503c\u7c7b\u578b\uff0c\u8d4b\u503c\u548c\u4f20\u53c2\u4f1a\u8d4b\u503c\u6574\u4e2a\u6570\u7ec4\u3002\u56e0\u6b64\u6539\u53d8\u526f\u672c\u7684\u503c\uff0c\u4e0d\u4f1a\u6539\u53d8\u672c\u8eab\u7684\u503c\u3002 func modifyArray ( x [ 3 ] int ) { x [ 0 ] = 100 } func modifyArray2 ( x [ 3 ][ 2 ] int ) { x [ 2 ][ 0 ] = 100 } func main () { a := [ 3 ] int { 10 , 20 , 30 } modifyArray ( a ) //\u5728modify\u4e2d\u4fee\u6539\u7684\u662fa\u7684\u526f\u672cx fmt . Println ( a ) //[10 20 30] b := [ 3 ][ 2 ] int { { 1 , 1 }, { 1 , 1 }, { 1 , 1 }, } modifyArray2 ( b ) //\u5728modify\u4e2d\u4fee\u6539\u7684\u662fb\u7684\u526f\u672cx fmt . Println ( b ) //[[1 1] [1 1] [1 1]] } \u6ce8\u610f\uff1a 1. \u6570\u7ec4\u652f\u6301 == \u3001 != \u64cd\u4f5c\u7b26\uff0c\u56e0\u4e3a\u5185\u5b58\u603b\u662f\u88ab\u521d\u59cb\u5316\u8fc7\u7684\u3002 2. [len]*type \u8868\u793a\u6307\u9488\u6570\u7ec4\uff0c\u672c\u8d28\u662f**\u6570\u7ec4**\uff0c\u5b58\u653e\u6307\u9488\u7684\u6570\u7ec4 3. *[len]type \u8868\u793a\u6570\u7ec4\u6307\u9488\uff0c\u672c\u8d28\u662f**\u6307\u9488**\uff0c\u6307\u5411\u6570\u7ec4\u7684\u6307\u9488","title":"\u6570\u7ec4\u662f\u503c\u7c7b\u578b"},{"location":"Go/Basic/Golang-6-slice/","text":"6-\u5207\u7247 \u00b6 \u5207\u7247\u662f\u4e00\u4e2a\u62e5\u6709\u76f8\u540c\u6570\u636e\u7c7b\u578b\u5143\u7d20\u7684\u53ef\u53d8\u957f\u5ea6\u7684\u5e8f\u5217\u3002 \u6570\u7ec4\u662f**\u56fa\u5b9a**\u957f\u5ea6\uff0c\u5207\u7247\u662f**\u53ef\u53d8**\u957f\u5ea6 \u6570\u7ec4\u662f**\u503c\u7c7b\u578b**\uff0c\u5207\u7247\u662f**\u5f15\u7528\u7c7b\u578b** \u6570\u7ec4\u6709\u5f88\u591a\u5c40\u9650\u6027\uff0c\u5207\u7247\u975e\u5e38\u7075\u6d3b\uff0c\u652f\u6301\u81ea\u52a8\u6269\u5bb9 \u5207\u7247\u5185\u90e8\u7ed3\u6784\u5305\u542b \u5730\u5740 \u3001 \u957f\u5ea6 \u3001 \u5bb9\u91cf \uff0c\u4e00\u822c\u7528\u4e8e\u5feb\u901f\u64cd\u4f5c\u4e00\u5757\u6570\u636e\u96c6\u5408\u3002 \u521b\u5efa\u5207\u7247 \u00b6 \u6ce8\u610f\uff1a\u5207\u7247\u662f\u5f15\u7528\u7c7b\u578b\uff01\uff01\uff01 // \u5207\u7247 var identifier [] type var identifier = [] type { initial value } identifier := [] type { initial value } // \u6570\u7ec4 var identifier [ len ] type var identifier = [ ... ] type { initial value } identifier \uff1a\u5207\u7247\u540d\u3001 type \uff1a\u5207\u7247\u6570\u636e\u7c7b\u578b \u533a\u522b\u4e8e\u6570\u7ec4\uff0c\u5207\u7247\u5728\u5b9a\u4e49\u65f6\u4e0d\u7528\u586b\u5199 len\u3002 \u5b83\u548c\u521d\u59cb\u5316\u6570\u7ec4\u65f6\u7701\u7565 len \u4e0d\u540c\uff0c\u6570\u7ec4\u7701\u7565 len \u65f6\u8981\u5199 ... \uff0c\u5207\u7247\u5565\u4e5f\u4e0d\u7528\u5199\u3002 func main () { var a [] string // \u58f0\u660e\u4e00\u4e2a\u5b57\u7b26\u4e32\u5207\u7247 var b = [] int { 1 , 2 , 3 , 4 , 5 } // \u58f0\u660e\u4e00\u4e2a\u6574\u578b\u5207\u7247,\u5e76\u521d\u59cb\u5316 c := [] bool { false , true } // \u58f0\u660e\u4e00\u4e2a\u5e03\u5c14\u578b\u5207\u7247,\u5e76\u521d\u59cb\u5316 fmt . Println ( a ) // [] fmt . Println ( b ) // [1 2 3 4 5] fmt . Println ( c ) // [false, true] } Slice \u7684\u521b\u5efa\u65b9\u5f0f\u6709\u4e09\u79cd\uff1a \u901a\u8fc7\u4e0b\u6807\u7684\u65b9\u5f0f\u83b7\u5f97\u6570\u7ec4\u6216\u5207\u7247\u7684\u4e00\u90e8\u5206 \u4f7f\u7528\u5b57\u9762\u91cf\u521d\u59cb\u5316\u65b0\u7684\u5207\u7247 \u4f7f\u7528\u5173\u952e\u5b57 make \u521b\u5efa\u5207\u7247 arr := [ 8 ] int { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 } s1 := arr [ 2 : 6 ] // 1. \u901a\u8fc7\u4e0b\u6807\u57fa\u4e8e\u6570\u7ec4\u6216\u5207\u7247\u521b\u5efa s2 := [] int { 11 , 22 , 33 } // 2. \u901a\u8fc7\u5b57\u9762\u91cf\u521b\u5efa s3 := make ([] int , 10 , 20 ) // 3. \u901a\u8fc7\u5173\u952e\u5b57 make \u521b\u5efa \u57fa\u4e8e\u6570\u7ec4\u521b\u5efa \u00b6 \u5207\u7247\u5e95\u5c42\u662f\u6570\u7ec4\uff0c\u5f53\u5e95\u5c42\u6570\u7ec4\u4e0d\u591f\u7684\u65f6\u5019\uff0c\u5207\u7247\u5c31\u4f1a\u6269\u5bb9\u3002 \u4e0a\u9762\u7684\u5b9a\u4e49\u662f\u521b\u5efa\u4e00\u4e2a\u533f\u540d\u6570\u7ec4\uff0c\u8ba9\u5207\u7247\u6307\u5411\u8fd9\u4e2a\u533f\u540d\u6570\u7ec4\uff0c\u4e0b\u9762\u662f\u57fa\u4e8e\u6570\u7ec4\u5b9a\u4e49\u5207\u7247 identifier := array [ start_with : end : max ] func main () { // \u57fa\u4e8e\u6570\u7ec4\u5b9a\u4e49\u5207\u7247 arr := [ 8 ] int { 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 } b := arr [ 1 : 5 ] // \u5176\u8303\u56f4\u7528\u6570\u5b66\u8868\u793a\u4e3a\uff1a[1,5) \u4ecearr[1]\u53d6\u5230arr[4]\u4e0d\u5305\u542barr[5] fmt . Println ( b ) // [55 56 57 58 59] fmt . Printf ( \"%T \\n\" , b ) // []int // \u5207\u7247\u518d\u6b21\u5207\u7247 c := b [ 0 : len ( b )] // len(b)\u4e3a5\uff0c\u6240\u4ee5\u53d6\u4e86b[0]\u3001b[1]\u3001b[2]\u3001b[3]\u3001b[4]\uff0c\u76f8\u5f53\u4e8e\u590d\u5236\u4e00\u6574\u4e2a\u5207\u7247 fmt . Println ( c ) // [55 56 57 58 59] fmt . Printf ( \"%T \\n\" , c ) // []int } \u76f4\u63a5\u5b9a\u4e49\u5207\u7247 \u548c \u6307\u5b9a\u6570\u7ec4\u5b9a\u4e49\u5207\u7247 \u7684\u533a\u522b\u5728\u4e8e\uff1a \u76f4\u63a5\u5b9a\u4e49\u5207\u7247\u4f1a\u5f15\u7528\u4e00\u4e2a\u533f\u540d\u6570\u7ec4\uff0c\u6307\u5b9a\u6570\u7ec4\u5b9a\u4e49\u5207\u7247\u4f1a\u5f15\u7528\u6307\u5b9a\u6570\u7ec4 \u76f4\u63a5\u5b9a\u4e49\u5207\u7247 \u957f\u5ea6=\u5bb9\u91cf \uff0c\u6307\u5b9a\u6570\u7ec4\u5b9a\u4e49\u5207\u7247\u957f\u5ea6\u548c\u5bb9\u91cf\u89c6\u5177\u4f53\u60c5\u51b5 \u76f4\u63a5\u5b9a\u4e49\u5207\u7247 \u2193 \u6307\u5b9a\u6570\u7ec4\u5b9a\u4e49\u5207\u7247 \u2193 {% noteblock yellow %} \u5bb9\u91cf\u6307\u7684\u662f\u4ece\u63a5\u7247\u7b2c\u4e00\u4e2a\u5143\u7d20\u5230\u5e95\u5c42\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20 \u4f8b\u5982\u4e0a\u9762\u7b2c\u4e09\u5f20\u56fe\u4e2d\uff1a arr := [ 8 ] int { 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 } c := arr [ 3 : 6 ] len ( c ) // 3 cap ( c ) // 5 {% endnoteblock %} \u4f7f\u7528make()\u521b\u5efa \u00b6 \u5982\u679c\u9700\u8981**\u52a8\u6001**\u7684\u521b\u5efa\u4e00\u4e2a\u5207\u7247\uff0c\u53ef\u4ee5\u4f7f\u7528\u5185\u7f6e\u7684 make() \u51fd\u6570 \u57fa\u672c\u8bed\u6cd5\u4e3a\uff1a make ([] type , len , cap ) var identifier [] type = make ([] type , len , cap ) identifier := make ([] type , len , cap ) type \uff1a\u5207\u7247\u6570\u636e\u7c7b\u578b\u3001 len \uff1a\u957f\u5ea6\u3001 cap \uff1a\u5bb9\u91cf cap \u53ef\u4ee5\u4e0d\u586b\uff0c\u9ed8\u8ba4\u548c len \u76f8\u540c func main () { // make\u51fd\u6570\u6784\u9020\u5207\u7247 // make([]type, len, cap) d := make ([] int , 4 , 10 ) // \u6784\u9020\u4e00\u4e2a\u6574\u578b\u5207\u7247\uff0c\u586b\u51455\u4e2a\u5143\u7d20\uff0c\u6700\u5927\u5bb9\u91cf10 fmt . Println ( d ) // [0 0 0 0] fmt . Printf ( \"%T \\n\" , d ) // []int fmt . Println ( len ( d )) // 4 fmt . Println ( cap ( d )) // 10 } \u52a8\u6001\u5c31\u52a8\u6001\u5728\u4e8e\u5b83\u80fd\u4f7f\u7528\u53d8\u91cf\u54c8\u54c8\u54c8 func fn ( a int , b int ) [] int { return make ([] int , a , b ) } \u5207\u7247\u662f\u5f15\u7528\u7c7b\u578b \u00b6 \u5224\u7a7a \u00b6 \u68c0\u67e5\u5207\u7247\u662f\u5426\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u7528 s == nil \uff0c\u800c\u662f\u5e94\u8be5\u4f7f\u7528 len(s) == 0 \u5207\u7247\u662f\u4e00\u79cd\u5f15\u7528\u7c7b\u578b\uff0c\u5f53\u5b83\u88ab\u58f0\u660e\u7684\u65f6\u5019\uff0c\u6ca1\u6709\u6307\u5411\u4efb\u4f55\u6570\u7ec4\uff0c\u5305\u62ec\u533f\u540d\u6570\u7ec4\u4e5f\u6ca1\u6709\uff0c\u6b64\u65f6\u5207\u7247\u4e2d\u6307\u9488\u4e3a nil var s [] int // s == nil \u5f53\u5207\u7247\u88ab\u521d\u59cb\u5316\u7684\u65f6\u5019\uff0c\u5b83\u5c31\u6307\u5411\u4e86\u4e00\u4e2a\u6570\u7ec4\uff0c\u8fd9\u65f6\u5207\u7247\u4e2d\u7684\u6307\u9488\u4e0d\u4e3a nil \u3002 var s = [] int {} // s != nil \u5207\u7247\u4e0d\u80fd\u76f4\u63a5\u6bd4\u8f83 \u00b6 \u5207\u7247\u662f\u4e00\u79cd\u5f15\u7528\u7c7b\u578b\uff0c\u6211\u4eec\u4e0d\u80fd\u7528 == \u64cd\u4f5c\u7b26\u6765\u5224\u65ad\u4e24\u4e2a\u5207\u7247\u662f\u5426\u542b\u6709\u5168\u90e8\u76f8\u7b49\u5143\u7d20\u3002 \u5207\u7247\u552f\u4e00\u5408\u6cd5\u7684\u6bd4\u8f83\u64cd\u4f5c\u662f\u548c nil \u6bd4\u8f83\u3002 \u4e00\u4e2a nil \u503c\u7684\u5207\u7247\u5e76\u6ca1\u6709\u5e95\u5c42\u6570\u7ec4\uff0c\u4e00\u4e2a nil \u503c\u7684\u5207\u7247\u7684\u957f\u5ea6\u548c\u5bb9\u91cf\u90fd\u662f0\u3002 \u4f46\u662f\u6211\u4eec\u4e0d\u80fd\u8bf4\u4e00\u4e2a\u957f\u5ea6\u548c\u5bb9\u91cf\u90fd\u662f0\u7684\u5207\u7247\u4e00\u5b9a\u662f nil var s1 [] int //len(s1)=0; cap(s1)=0; s1==nil s2 := [] int {} //len(s2)=0; cap(s2)=0; s2!=nil s3 := make ([] int , 0 ) //len(s3)=0; cap(s3)=0; s3!=nil \u6240\u4ee5\u8981\u5224\u65ad\u4e00\u4e2a\u5207\u7247\u662f\u5426\u662f\u7a7a\u7684\uff0c\u8981\u662f\u7528 len(s) == 0 \u6765\u5224\u65ad\uff0c\u4e0d\u5e94\u8be5\u4f7f\u7528 s == nil \u6765\u5224\u65ad\u3002 \u5207\u7247\u7684\u62f7\u8d1d\u8d4b\u503c \u00b6 \u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\u6f14\u793a\u4e86\u62f7\u8d1d\u524d\u540e\u4e24\u4e2a\u53d8\u91cf\u5171\u4eab\u5e95\u5c42\u6570\u7ec4\uff0c\u5bf9\u4e00\u4e2a\u5207\u7247\u7684\u4fee\u6539\u4f1a\u5f71\u54cd\u53e6\u4e00\u4e2a\u5207\u7247\u7684\u5185\u5bb9\uff0c\u8fd9\u70b9\u9700\u8981\u7279\u522b\u6ce8\u610f\u3002 func main () { s1 := make ([] int , 3 ) //[0 0 0] s2 := s1 //\u5c06s1\u76f4\u63a5\u8d4b\u503c\u7ed9s2\uff0cs1\u548cs2\u5171\u7528\u4e00\u4e2a\u5e95\u5c42\u6570\u7ec4 s2 [ 0 ] = 100 fmt . Println ( s1 ) //[100 0 0] fmt . Println ( s2 ) //[100 0 0] } \u5207\u7247\u904d\u5386 \u00b6 \u5207\u7247\u7684\u904d\u5386\u65b9\u5f0f\u548c\u6570\u7ec4\u662f\u4e00\u81f4\u7684\uff0c\u652f\u6301\u7d22\u5f15\u904d\u5386\u548c for range \u904d\u5386\u3002 func main () { s := [] int { 1 , 3 , 5 } for i := 0 ; i < len ( s ); i ++ { fmt . Println ( i , s [ i ]) } for index , value := range s { fmt . Println ( index , value ) } } append() \u00b6 Go \u4e2d\u7684\u5185\u5efa\u51fd\u6570 append() \u53ef\u4ee5\u4e3a\u5207\u7247\u52a8\u6001\u6dfb\u52a0\u5143\u7d20\uff0c\u53ef\u4ee5\u4e00\u6b21\u6dfb\u52a0\u4e00\u4e2a\u6216\u591a\u4e2a\u5143\u7d20\u3002 append ( slice , elem_arr_or_slice ) eg\uff1a func main () { s := [] int { 1 , 2 , 3 , 4 , 5 } // [1 2 3 4 5] s = append ( s , 11 ) // [1 2 3 4 5 11] s = append ( s , 12 , 13 , 14 ) // [1 2 3 4 5 11 12 13 14] } append() \u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e5f\u53ef\u4ee5\u662f\u53e6\u4e00\u4e2a\u5207\u7247\uff0c\u4e0d\u8fc7\u8bb0\u5f97\u52a0\u4e0a ... func main () { s2 := [] int { 55 , 56 , 57 } s = append ( s , s2 ... ) } \u6ce8\u610f\uff1a \u901a\u8fc7var\u58f0\u660e\u7684\u96f6\u503c\u5207\u7247\u53ef\u4ee5\u5728 append() \u51fd\u6570\u76f4\u63a5\u4f7f\u7528\uff0c\u65e0\u9700\u521d\u59cb\u5316\u3002 // \u6b63\u786e var s [] int s = append ( s , 1 , 2 , 3 ) // X \u6ca1\u5fc5\u8981 var s = [] int {} s = append ( s , 1 , 2 , 3 ) // X \u6ca1\u5fc5\u8981 var s = make ([] int ) s = append ( s , 1 , 2 , 3 ) copy() \u00b6 \u5207\u7247\u662f\u5f15\u7528\u7c7b\u578b\uff0c\u5982\u679c\u76f4\u63a5 s1 = s2 \uff0c\u5176\u5b9e\u662f\u5c06 s2 \u4e2d\u7684\u6570\u7ec4\u5730\u5740\u8d4b\u503c\u7ed9 s1 \u7684\u6307\u9488\uff0cs1 \u4fee\u6539\u7684\u65f6\u5019 s2 \u4e5f\u4f1a\u53d7\u5f71\u54cd\u3002 \u8981\u5b9e\u73b0\u771f\u6b63\u7684\u590d\u5236\uff0c\u9700\u8981\u4f7f\u7528\u5185\u5efa\u51fd\u6570 copy() \u8fdb\u884c\u590d\u5236\u3002 copy ( destSlice , srcSlice ) destSlice \uff1a\u76ee\u6807\u5207\u7247\u3001 srcSlice \uff1a\u6570\u636e\u6765\u6e90\u5207\u7247 func main () { s1 := [] int { 1 , 2 , 3 , 4 } s2 := [] int { 12 , 13 , 14 } copy ( s1 , s2 ) fmt . Println ( s1 ) // [12 13 14 4] fmt . Println ( s2 ) // [12 13 14] s3 := [] int { 1 , 2 , 3 , 4 } s4 := [] int { 12 , 13 , 14 } copy ( s4 , s3 ) fmt . Println ( s3 ) // [1 2 3 4] fmt . Println ( s4 ) // [1 2 3] s5 := [] int { 1 , 2 , 3 , 4 } s6 := make ([] int , 4 ) copy ( s5 , s6 ) fmt . Println ( s5 ) // [0 0 0 0] fmt . Println ( s6 ) // [0 0 0 0] s7 := [] int { 1 , 2 , 3 , 4 } s8 := make ([] int , 4 ) copy ( s8 , s7 ) fmt . Println ( s7 ) // [1 2 3 4] fmt . Println ( s8 ) // [1 2 3 4] s8 [ 0 ] = 100 fmt . Println ( s7 ) // [1 2 3 4] fmt . Println ( s8 ) // [100 2 3 4] } [:] \u8bed\u6cd5 \u00b6 \u8fd9\u91cc\u9700\u8981\u8bf4\u660e\u4e00\u4e0b\uff0c\u65e0\u8bba\u4efb\u4f55\u8bed\u8a00\u7684 [:] \u8bed\u6cd5\u90fd\u662f\u5de6\u95ed\u53f3\u5f00\u7684\uff0c\u7528\u6570\u5b66\u8868\u8fbe\u5c31\u662f \\([start, end)\\) \u3002 \u5728 Python \u4e2d\uff0c [:] \u7684\u8bed\u6cd5\u89c4\u5219\u662f [low:high:step] \uff1b \u800c\u5728 Golang \u4e2d\u5219\u662f [low:high:max] \uff0c\u5176\u89c4\u5219\u662f\uff1a 0 <= low <= len(arr) <= high <= max <= cap(arr) \u3002 low \u7684\u53d6\u503c\u5728 0 \u81f3 \u5e95\u5c42\u7ed3\u6784\u957f\u5ea6 \uff0c\u53d6\u5e95\u5c42\u7ed3\u6784\u957f\u5ea6\u65f6\u4e3a\u7a7a\u5207\u7247 high \u7684\u53d6\u503c\u5728 low \u81f3 max \uff0c\u53d6 low \u65f6\u4e3a\u7a7a\u5207\u7247 max \u7684\u53d6\u503c\u5728 high \u81f3 \u5e95\u5c42\u7ed3\u6784\u5bb9\u91cf \uff0c\u53d6 high \u65f6\u65b0\u5207\u7247 len==cap \u4e3e\u4e2a\u6817\u5b50\uff1a func main () { a := [ 10 ] int { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 } s := a [ 2 : 6 : 10 ] // [low:high:max] fmt . Printf ( \"a: %v\\n\" , a ) // a: [0 1 2 3 4 5 6 7 8 9] fmt . Printf ( \"a len: %d\\n\" , len ( a )) // a len: 10 fmt . Printf ( \"a cap: %d\\n\" , cap ( a )) // a cap: 10 fmt . Printf ( \"s: %v\\n\" , s ) // s: [2 3 4 5] fmt . Printf ( \"s len: %d\\n\" , len ( s )) // s len: 4 fmt . Printf ( \"s cap: %d\\n\" , cap ( s )) // s cap: 8 } \u603b\u7ed3\u4e00\u4e0b\u5c31\u662f \u65b0\u5207\u7247\u7684\u5bb9\u91cf cap(s) = max - low \u65b0\u5207\u7247\u7684\u957f\u5ea6 len(s) = high - low low \u53d6\u503c\u5728 [0, len(arr)] high \u53d6\u503c\u5728 [low, max] max \u53d6\u503c\u5728 [hign, cap(arr)] \u5220\u9664 \u00b6 Go \u5e76\u6ca1\u6709\u63d0\u4f9b\u5220\u9664\u5207\u7247\u5143\u7d20\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5176\u672c\u8eab\u7684\u7279\u6027\u6765\u5220\u9664\u5143\u7d20 \u5207\u7247\u53ef\u4ee5\u53d6\u81ea\u5207\u7247\uff0c\u90a3\u6211\u4eec\u5c31\u5c06\u88ab\u5220\u9664\u5143\u7d20\u4e4b\u524d\u7684\u5143\u7d20\u5207\u4e0b\u6765\uff0c\u518d\u628a\u88ab\u5220\u9664\u5143\u7d20\u4e4b\u540e\u7684\u5143\u7d20\u5207\u4e0b\u6765\uff0c\u7136\u540e\u7528 append() \u62fc\u63a5 func main () { a := [] int { 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 } // \u5220\u9664\u4e0b\u6807\u4e3a2\u7684\u5143\u7d20 a = append ( a [: 2 ], a [ 3 :] ... ) fmt . Println ( a ) // [30, 31, 33, 34, 35, 36, 37] } \u7b80\u5355\u8bf4\u5c31\u662f a = append(a[:index], a[index+1:]...) \u5176\u4ed6\u64cd\u4f5c \u00b6 // append slice slice = append ( slice , slice2 ... ) // copy dest := make ([] int , len ( src )) copy ( dest , src ) // \u5220\u9664\u591a\u4e2a\u8fde\u7eed\u7684\u5143\u7d20 a = append ( a [: i ], a [ j :] ... ) // \u5220\u9664\u4e00\u4e2a\u5143\u7d20 i a = append ( a [: i ], a [ i + 1 :] ... ) // \u6269\u5c55 j \u4e2a\u5143\u7d20 a = append ( a , make ([] T , j ) ... ) // \u63d2\u5165\u5143\u7d20 x \u5230 i \u7684\u4f4d\u7f6e\u4e0a a = append ( a [: i ], append ([] T { x }, a [ i :] ... ) ... ) // push\uff0c\u8ffd\u52a0\u5230\u5c3e\u90e8 a = append ( a , x ) // pop\uff0c\u5c3e\u90e8\u5f39\u51fa x , a = a [ len ( a ) - 1 ], a [: len ( a ) - 1 ] // dequeue\uff0c\u961f\u5934\u51fa\u961f x , a = a [ 0 ], a [ 1 :] // enqueue\uff0c\u961f\u5c3e\u5165\u961f a = append ( a , x ) // shift\uff0c\u5934\u90e8\u53d6\u51fa x , a = a [ 0 ], a [ 1 :] // unshift\uff0c\u5934\u90e8\u52a0\u5165 a = append ([] T { x }, a ... ) \u603b\u7ed3 \u00b6 \u5207\u7247\u548c\u6570\u7ec4**\u4e4b\u95f4\u6709\u90a3\u4e48\u70b9\u50cf\u6570\u636e\u5e93\u4e2d\u7684 **\u57fa\u672c\u8868\u548c\u89c6\u56fe \u3002 \u57fa\u672c\u8868\u662f\u5b58\u50a8\u6570\u636e\u5b9a\u4e49\u548c\u6570\u636e\u7684\uff0c\u89c6\u56fe\u53ea\u5b58\u50a8\u6570\u636e\u5b9a\u4e49\u3002\u6240\u4ee5\u57fa\u672c\u8868\u6539\u53d8\u65f6\u89c6\u56fe\u4e5f\u6539\u53d8\u3002 \u6570\u7ec4\u662f\u5b58\u50a8\u5b9a\u4e49\u548c\u6570\u636e\u7684\uff0c\u5207\u7247\u53ea\u5b58\u50a8\u5b9a\u4e49\u3002\u6240\u4ee5\u6570\u7ec4\u5143\u7d20\u6539\u53d8\u65f6\u5207\u7247\u4e5f\u6539\u53d8\u3002 \u8fd9\u4e2a\u4f8b\u5b50\u53ef\u80fd\u4e0d\u662f\u5f88\u8d34\u5207\uff0c\u4f46\u8054\u7cfb\u4e00\u4e0b\u8fd9\u53e5\u8bdd\uff1a\u6570\u7ec4\u662f\u503c\u7c7b\u578b\uff0c\u5207\u7247\u662f\u5f15\u7528\u7c7b\u578b\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u6570\u7ec4\u662f\u5b9e\u5b9e\u5728\u5728\u5b58\u6570\u636e\u7684\u5730\u65b9\uff0c\u5207\u7247\u53ea\u662f\u5bf9\u67d0\u4e2a\u6570\u7ec4\u7684\u5f15\u7528\uff0c\u81ea\u5df1\u5e76\u6ca1\u6709\u6570\u636e\u3002","title":"6.slice"},{"location":"Go/Basic/Golang-6-slice/#6-","text":"\u5207\u7247\u662f\u4e00\u4e2a\u62e5\u6709\u76f8\u540c\u6570\u636e\u7c7b\u578b\u5143\u7d20\u7684\u53ef\u53d8\u957f\u5ea6\u7684\u5e8f\u5217\u3002 \u6570\u7ec4\u662f**\u56fa\u5b9a**\u957f\u5ea6\uff0c\u5207\u7247\u662f**\u53ef\u53d8**\u957f\u5ea6 \u6570\u7ec4\u662f**\u503c\u7c7b\u578b**\uff0c\u5207\u7247\u662f**\u5f15\u7528\u7c7b\u578b** \u6570\u7ec4\u6709\u5f88\u591a\u5c40\u9650\u6027\uff0c\u5207\u7247\u975e\u5e38\u7075\u6d3b\uff0c\u652f\u6301\u81ea\u52a8\u6269\u5bb9 \u5207\u7247\u5185\u90e8\u7ed3\u6784\u5305\u542b \u5730\u5740 \u3001 \u957f\u5ea6 \u3001 \u5bb9\u91cf \uff0c\u4e00\u822c\u7528\u4e8e\u5feb\u901f\u64cd\u4f5c\u4e00\u5757\u6570\u636e\u96c6\u5408\u3002","title":"6-\u5207\u7247"},{"location":"Go/Basic/Golang-6-slice/#_1","text":"\u6ce8\u610f\uff1a\u5207\u7247\u662f\u5f15\u7528\u7c7b\u578b\uff01\uff01\uff01 // \u5207\u7247 var identifier [] type var identifier = [] type { initial value } identifier := [] type { initial value } // \u6570\u7ec4 var identifier [ len ] type var identifier = [ ... ] type { initial value } identifier \uff1a\u5207\u7247\u540d\u3001 type \uff1a\u5207\u7247\u6570\u636e\u7c7b\u578b \u533a\u522b\u4e8e\u6570\u7ec4\uff0c\u5207\u7247\u5728\u5b9a\u4e49\u65f6\u4e0d\u7528\u586b\u5199 len\u3002 \u5b83\u548c\u521d\u59cb\u5316\u6570\u7ec4\u65f6\u7701\u7565 len \u4e0d\u540c\uff0c\u6570\u7ec4\u7701\u7565 len \u65f6\u8981\u5199 ... \uff0c\u5207\u7247\u5565\u4e5f\u4e0d\u7528\u5199\u3002 func main () { var a [] string // \u58f0\u660e\u4e00\u4e2a\u5b57\u7b26\u4e32\u5207\u7247 var b = [] int { 1 , 2 , 3 , 4 , 5 } // \u58f0\u660e\u4e00\u4e2a\u6574\u578b\u5207\u7247,\u5e76\u521d\u59cb\u5316 c := [] bool { false , true } // \u58f0\u660e\u4e00\u4e2a\u5e03\u5c14\u578b\u5207\u7247,\u5e76\u521d\u59cb\u5316 fmt . Println ( a ) // [] fmt . Println ( b ) // [1 2 3 4 5] fmt . Println ( c ) // [false, true] } Slice \u7684\u521b\u5efa\u65b9\u5f0f\u6709\u4e09\u79cd\uff1a \u901a\u8fc7\u4e0b\u6807\u7684\u65b9\u5f0f\u83b7\u5f97\u6570\u7ec4\u6216\u5207\u7247\u7684\u4e00\u90e8\u5206 \u4f7f\u7528\u5b57\u9762\u91cf\u521d\u59cb\u5316\u65b0\u7684\u5207\u7247 \u4f7f\u7528\u5173\u952e\u5b57 make \u521b\u5efa\u5207\u7247 arr := [ 8 ] int { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 } s1 := arr [ 2 : 6 ] // 1. \u901a\u8fc7\u4e0b\u6807\u57fa\u4e8e\u6570\u7ec4\u6216\u5207\u7247\u521b\u5efa s2 := [] int { 11 , 22 , 33 } // 2. \u901a\u8fc7\u5b57\u9762\u91cf\u521b\u5efa s3 := make ([] int , 10 , 20 ) // 3. \u901a\u8fc7\u5173\u952e\u5b57 make \u521b\u5efa","title":"\u521b\u5efa\u5207\u7247"},{"location":"Go/Basic/Golang-6-slice/#_2","text":"\u5207\u7247\u5e95\u5c42\u662f\u6570\u7ec4\uff0c\u5f53\u5e95\u5c42\u6570\u7ec4\u4e0d\u591f\u7684\u65f6\u5019\uff0c\u5207\u7247\u5c31\u4f1a\u6269\u5bb9\u3002 \u4e0a\u9762\u7684\u5b9a\u4e49\u662f\u521b\u5efa\u4e00\u4e2a\u533f\u540d\u6570\u7ec4\uff0c\u8ba9\u5207\u7247\u6307\u5411\u8fd9\u4e2a\u533f\u540d\u6570\u7ec4\uff0c\u4e0b\u9762\u662f\u57fa\u4e8e\u6570\u7ec4\u5b9a\u4e49\u5207\u7247 identifier := array [ start_with : end : max ] func main () { // \u57fa\u4e8e\u6570\u7ec4\u5b9a\u4e49\u5207\u7247 arr := [ 8 ] int { 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 } b := arr [ 1 : 5 ] // \u5176\u8303\u56f4\u7528\u6570\u5b66\u8868\u793a\u4e3a\uff1a[1,5) \u4ecearr[1]\u53d6\u5230arr[4]\u4e0d\u5305\u542barr[5] fmt . Println ( b ) // [55 56 57 58 59] fmt . Printf ( \"%T \\n\" , b ) // []int // \u5207\u7247\u518d\u6b21\u5207\u7247 c := b [ 0 : len ( b )] // len(b)\u4e3a5\uff0c\u6240\u4ee5\u53d6\u4e86b[0]\u3001b[1]\u3001b[2]\u3001b[3]\u3001b[4]\uff0c\u76f8\u5f53\u4e8e\u590d\u5236\u4e00\u6574\u4e2a\u5207\u7247 fmt . Println ( c ) // [55 56 57 58 59] fmt . Printf ( \"%T \\n\" , c ) // []int } \u76f4\u63a5\u5b9a\u4e49\u5207\u7247 \u548c \u6307\u5b9a\u6570\u7ec4\u5b9a\u4e49\u5207\u7247 \u7684\u533a\u522b\u5728\u4e8e\uff1a \u76f4\u63a5\u5b9a\u4e49\u5207\u7247\u4f1a\u5f15\u7528\u4e00\u4e2a\u533f\u540d\u6570\u7ec4\uff0c\u6307\u5b9a\u6570\u7ec4\u5b9a\u4e49\u5207\u7247\u4f1a\u5f15\u7528\u6307\u5b9a\u6570\u7ec4 \u76f4\u63a5\u5b9a\u4e49\u5207\u7247 \u957f\u5ea6=\u5bb9\u91cf \uff0c\u6307\u5b9a\u6570\u7ec4\u5b9a\u4e49\u5207\u7247\u957f\u5ea6\u548c\u5bb9\u91cf\u89c6\u5177\u4f53\u60c5\u51b5 \u76f4\u63a5\u5b9a\u4e49\u5207\u7247 \u2193 \u6307\u5b9a\u6570\u7ec4\u5b9a\u4e49\u5207\u7247 \u2193 {% noteblock yellow %} \u5bb9\u91cf\u6307\u7684\u662f\u4ece\u63a5\u7247\u7b2c\u4e00\u4e2a\u5143\u7d20\u5230\u5e95\u5c42\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20 \u4f8b\u5982\u4e0a\u9762\u7b2c\u4e09\u5f20\u56fe\u4e2d\uff1a arr := [ 8 ] int { 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 } c := arr [ 3 : 6 ] len ( c ) // 3 cap ( c ) // 5 {% endnoteblock %}","title":"\u57fa\u4e8e\u6570\u7ec4\u521b\u5efa"},{"location":"Go/Basic/Golang-6-slice/#make","text":"\u5982\u679c\u9700\u8981**\u52a8\u6001**\u7684\u521b\u5efa\u4e00\u4e2a\u5207\u7247\uff0c\u53ef\u4ee5\u4f7f\u7528\u5185\u7f6e\u7684 make() \u51fd\u6570 \u57fa\u672c\u8bed\u6cd5\u4e3a\uff1a make ([] type , len , cap ) var identifier [] type = make ([] type , len , cap ) identifier := make ([] type , len , cap ) type \uff1a\u5207\u7247\u6570\u636e\u7c7b\u578b\u3001 len \uff1a\u957f\u5ea6\u3001 cap \uff1a\u5bb9\u91cf cap \u53ef\u4ee5\u4e0d\u586b\uff0c\u9ed8\u8ba4\u548c len \u76f8\u540c func main () { // make\u51fd\u6570\u6784\u9020\u5207\u7247 // make([]type, len, cap) d := make ([] int , 4 , 10 ) // \u6784\u9020\u4e00\u4e2a\u6574\u578b\u5207\u7247\uff0c\u586b\u51455\u4e2a\u5143\u7d20\uff0c\u6700\u5927\u5bb9\u91cf10 fmt . Println ( d ) // [0 0 0 0] fmt . Printf ( \"%T \\n\" , d ) // []int fmt . Println ( len ( d )) // 4 fmt . Println ( cap ( d )) // 10 } \u52a8\u6001\u5c31\u52a8\u6001\u5728\u4e8e\u5b83\u80fd\u4f7f\u7528\u53d8\u91cf\u54c8\u54c8\u54c8 func fn ( a int , b int ) [] int { return make ([] int , a , b ) }","title":"\u4f7f\u7528make()\u521b\u5efa"},{"location":"Go/Basic/Golang-6-slice/#_3","text":"","title":"\u5207\u7247\u662f\u5f15\u7528\u7c7b\u578b"},{"location":"Go/Basic/Golang-6-slice/#_4","text":"\u68c0\u67e5\u5207\u7247\u662f\u5426\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u7528 s == nil \uff0c\u800c\u662f\u5e94\u8be5\u4f7f\u7528 len(s) == 0 \u5207\u7247\u662f\u4e00\u79cd\u5f15\u7528\u7c7b\u578b\uff0c\u5f53\u5b83\u88ab\u58f0\u660e\u7684\u65f6\u5019\uff0c\u6ca1\u6709\u6307\u5411\u4efb\u4f55\u6570\u7ec4\uff0c\u5305\u62ec\u533f\u540d\u6570\u7ec4\u4e5f\u6ca1\u6709\uff0c\u6b64\u65f6\u5207\u7247\u4e2d\u6307\u9488\u4e3a nil var s [] int // s == nil \u5f53\u5207\u7247\u88ab\u521d\u59cb\u5316\u7684\u65f6\u5019\uff0c\u5b83\u5c31\u6307\u5411\u4e86\u4e00\u4e2a\u6570\u7ec4\uff0c\u8fd9\u65f6\u5207\u7247\u4e2d\u7684\u6307\u9488\u4e0d\u4e3a nil \u3002 var s = [] int {} // s != nil","title":"\u5224\u7a7a"},{"location":"Go/Basic/Golang-6-slice/#_5","text":"\u5207\u7247\u662f\u4e00\u79cd\u5f15\u7528\u7c7b\u578b\uff0c\u6211\u4eec\u4e0d\u80fd\u7528 == \u64cd\u4f5c\u7b26\u6765\u5224\u65ad\u4e24\u4e2a\u5207\u7247\u662f\u5426\u542b\u6709\u5168\u90e8\u76f8\u7b49\u5143\u7d20\u3002 \u5207\u7247\u552f\u4e00\u5408\u6cd5\u7684\u6bd4\u8f83\u64cd\u4f5c\u662f\u548c nil \u6bd4\u8f83\u3002 \u4e00\u4e2a nil \u503c\u7684\u5207\u7247\u5e76\u6ca1\u6709\u5e95\u5c42\u6570\u7ec4\uff0c\u4e00\u4e2a nil \u503c\u7684\u5207\u7247\u7684\u957f\u5ea6\u548c\u5bb9\u91cf\u90fd\u662f0\u3002 \u4f46\u662f\u6211\u4eec\u4e0d\u80fd\u8bf4\u4e00\u4e2a\u957f\u5ea6\u548c\u5bb9\u91cf\u90fd\u662f0\u7684\u5207\u7247\u4e00\u5b9a\u662f nil var s1 [] int //len(s1)=0; cap(s1)=0; s1==nil s2 := [] int {} //len(s2)=0; cap(s2)=0; s2!=nil s3 := make ([] int , 0 ) //len(s3)=0; cap(s3)=0; s3!=nil \u6240\u4ee5\u8981\u5224\u65ad\u4e00\u4e2a\u5207\u7247\u662f\u5426\u662f\u7a7a\u7684\uff0c\u8981\u662f\u7528 len(s) == 0 \u6765\u5224\u65ad\uff0c\u4e0d\u5e94\u8be5\u4f7f\u7528 s == nil \u6765\u5224\u65ad\u3002","title":"\u5207\u7247\u4e0d\u80fd\u76f4\u63a5\u6bd4\u8f83"},{"location":"Go/Basic/Golang-6-slice/#_6","text":"\u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\u6f14\u793a\u4e86\u62f7\u8d1d\u524d\u540e\u4e24\u4e2a\u53d8\u91cf\u5171\u4eab\u5e95\u5c42\u6570\u7ec4\uff0c\u5bf9\u4e00\u4e2a\u5207\u7247\u7684\u4fee\u6539\u4f1a\u5f71\u54cd\u53e6\u4e00\u4e2a\u5207\u7247\u7684\u5185\u5bb9\uff0c\u8fd9\u70b9\u9700\u8981\u7279\u522b\u6ce8\u610f\u3002 func main () { s1 := make ([] int , 3 ) //[0 0 0] s2 := s1 //\u5c06s1\u76f4\u63a5\u8d4b\u503c\u7ed9s2\uff0cs1\u548cs2\u5171\u7528\u4e00\u4e2a\u5e95\u5c42\u6570\u7ec4 s2 [ 0 ] = 100 fmt . Println ( s1 ) //[100 0 0] fmt . Println ( s2 ) //[100 0 0] }","title":"\u5207\u7247\u7684\u62f7\u8d1d\u8d4b\u503c"},{"location":"Go/Basic/Golang-6-slice/#_7","text":"\u5207\u7247\u7684\u904d\u5386\u65b9\u5f0f\u548c\u6570\u7ec4\u662f\u4e00\u81f4\u7684\uff0c\u652f\u6301\u7d22\u5f15\u904d\u5386\u548c for range \u904d\u5386\u3002 func main () { s := [] int { 1 , 3 , 5 } for i := 0 ; i < len ( s ); i ++ { fmt . Println ( i , s [ i ]) } for index , value := range s { fmt . Println ( index , value ) } }","title":"\u5207\u7247\u904d\u5386"},{"location":"Go/Basic/Golang-6-slice/#append","text":"Go \u4e2d\u7684\u5185\u5efa\u51fd\u6570 append() \u53ef\u4ee5\u4e3a\u5207\u7247\u52a8\u6001\u6dfb\u52a0\u5143\u7d20\uff0c\u53ef\u4ee5\u4e00\u6b21\u6dfb\u52a0\u4e00\u4e2a\u6216\u591a\u4e2a\u5143\u7d20\u3002 append ( slice , elem_arr_or_slice ) eg\uff1a func main () { s := [] int { 1 , 2 , 3 , 4 , 5 } // [1 2 3 4 5] s = append ( s , 11 ) // [1 2 3 4 5 11] s = append ( s , 12 , 13 , 14 ) // [1 2 3 4 5 11 12 13 14] } append() \u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e5f\u53ef\u4ee5\u662f\u53e6\u4e00\u4e2a\u5207\u7247\uff0c\u4e0d\u8fc7\u8bb0\u5f97\u52a0\u4e0a ... func main () { s2 := [] int { 55 , 56 , 57 } s = append ( s , s2 ... ) } \u6ce8\u610f\uff1a \u901a\u8fc7var\u58f0\u660e\u7684\u96f6\u503c\u5207\u7247\u53ef\u4ee5\u5728 append() \u51fd\u6570\u76f4\u63a5\u4f7f\u7528\uff0c\u65e0\u9700\u521d\u59cb\u5316\u3002 // \u6b63\u786e var s [] int s = append ( s , 1 , 2 , 3 ) // X \u6ca1\u5fc5\u8981 var s = [] int {} s = append ( s , 1 , 2 , 3 ) // X \u6ca1\u5fc5\u8981 var s = make ([] int ) s = append ( s , 1 , 2 , 3 )","title":"append()"},{"location":"Go/Basic/Golang-6-slice/#copy","text":"\u5207\u7247\u662f\u5f15\u7528\u7c7b\u578b\uff0c\u5982\u679c\u76f4\u63a5 s1 = s2 \uff0c\u5176\u5b9e\u662f\u5c06 s2 \u4e2d\u7684\u6570\u7ec4\u5730\u5740\u8d4b\u503c\u7ed9 s1 \u7684\u6307\u9488\uff0cs1 \u4fee\u6539\u7684\u65f6\u5019 s2 \u4e5f\u4f1a\u53d7\u5f71\u54cd\u3002 \u8981\u5b9e\u73b0\u771f\u6b63\u7684\u590d\u5236\uff0c\u9700\u8981\u4f7f\u7528\u5185\u5efa\u51fd\u6570 copy() \u8fdb\u884c\u590d\u5236\u3002 copy ( destSlice , srcSlice ) destSlice \uff1a\u76ee\u6807\u5207\u7247\u3001 srcSlice \uff1a\u6570\u636e\u6765\u6e90\u5207\u7247 func main () { s1 := [] int { 1 , 2 , 3 , 4 } s2 := [] int { 12 , 13 , 14 } copy ( s1 , s2 ) fmt . Println ( s1 ) // [12 13 14 4] fmt . Println ( s2 ) // [12 13 14] s3 := [] int { 1 , 2 , 3 , 4 } s4 := [] int { 12 , 13 , 14 } copy ( s4 , s3 ) fmt . Println ( s3 ) // [1 2 3 4] fmt . Println ( s4 ) // [1 2 3] s5 := [] int { 1 , 2 , 3 , 4 } s6 := make ([] int , 4 ) copy ( s5 , s6 ) fmt . Println ( s5 ) // [0 0 0 0] fmt . Println ( s6 ) // [0 0 0 0] s7 := [] int { 1 , 2 , 3 , 4 } s8 := make ([] int , 4 ) copy ( s8 , s7 ) fmt . Println ( s7 ) // [1 2 3 4] fmt . Println ( s8 ) // [1 2 3 4] s8 [ 0 ] = 100 fmt . Println ( s7 ) // [1 2 3 4] fmt . Println ( s8 ) // [100 2 3 4] }","title":"copy()"},{"location":"Go/Basic/Golang-6-slice/#_8","text":"\u8fd9\u91cc\u9700\u8981\u8bf4\u660e\u4e00\u4e0b\uff0c\u65e0\u8bba\u4efb\u4f55\u8bed\u8a00\u7684 [:] \u8bed\u6cd5\u90fd\u662f\u5de6\u95ed\u53f3\u5f00\u7684\uff0c\u7528\u6570\u5b66\u8868\u8fbe\u5c31\u662f \\([start, end)\\) \u3002 \u5728 Python \u4e2d\uff0c [:] \u7684\u8bed\u6cd5\u89c4\u5219\u662f [low:high:step] \uff1b \u800c\u5728 Golang \u4e2d\u5219\u662f [low:high:max] \uff0c\u5176\u89c4\u5219\u662f\uff1a 0 <= low <= len(arr) <= high <= max <= cap(arr) \u3002 low \u7684\u53d6\u503c\u5728 0 \u81f3 \u5e95\u5c42\u7ed3\u6784\u957f\u5ea6 \uff0c\u53d6\u5e95\u5c42\u7ed3\u6784\u957f\u5ea6\u65f6\u4e3a\u7a7a\u5207\u7247 high \u7684\u53d6\u503c\u5728 low \u81f3 max \uff0c\u53d6 low \u65f6\u4e3a\u7a7a\u5207\u7247 max \u7684\u53d6\u503c\u5728 high \u81f3 \u5e95\u5c42\u7ed3\u6784\u5bb9\u91cf \uff0c\u53d6 high \u65f6\u65b0\u5207\u7247 len==cap \u4e3e\u4e2a\u6817\u5b50\uff1a func main () { a := [ 10 ] int { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 } s := a [ 2 : 6 : 10 ] // [low:high:max] fmt . Printf ( \"a: %v\\n\" , a ) // a: [0 1 2 3 4 5 6 7 8 9] fmt . Printf ( \"a len: %d\\n\" , len ( a )) // a len: 10 fmt . Printf ( \"a cap: %d\\n\" , cap ( a )) // a cap: 10 fmt . Printf ( \"s: %v\\n\" , s ) // s: [2 3 4 5] fmt . Printf ( \"s len: %d\\n\" , len ( s )) // s len: 4 fmt . Printf ( \"s cap: %d\\n\" , cap ( s )) // s cap: 8 } \u603b\u7ed3\u4e00\u4e0b\u5c31\u662f \u65b0\u5207\u7247\u7684\u5bb9\u91cf cap(s) = max - low \u65b0\u5207\u7247\u7684\u957f\u5ea6 len(s) = high - low low \u53d6\u503c\u5728 [0, len(arr)] high \u53d6\u503c\u5728 [low, max] max \u53d6\u503c\u5728 [hign, cap(arr)]","title":"[:] \u8bed\u6cd5"},{"location":"Go/Basic/Golang-6-slice/#_9","text":"Go \u5e76\u6ca1\u6709\u63d0\u4f9b\u5220\u9664\u5207\u7247\u5143\u7d20\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5176\u672c\u8eab\u7684\u7279\u6027\u6765\u5220\u9664\u5143\u7d20 \u5207\u7247\u53ef\u4ee5\u53d6\u81ea\u5207\u7247\uff0c\u90a3\u6211\u4eec\u5c31\u5c06\u88ab\u5220\u9664\u5143\u7d20\u4e4b\u524d\u7684\u5143\u7d20\u5207\u4e0b\u6765\uff0c\u518d\u628a\u88ab\u5220\u9664\u5143\u7d20\u4e4b\u540e\u7684\u5143\u7d20\u5207\u4e0b\u6765\uff0c\u7136\u540e\u7528 append() \u62fc\u63a5 func main () { a := [] int { 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 } // \u5220\u9664\u4e0b\u6807\u4e3a2\u7684\u5143\u7d20 a = append ( a [: 2 ], a [ 3 :] ... ) fmt . Println ( a ) // [30, 31, 33, 34, 35, 36, 37] } \u7b80\u5355\u8bf4\u5c31\u662f a = append(a[:index], a[index+1:]...)","title":"\u5220\u9664"},{"location":"Go/Basic/Golang-6-slice/#_10","text":"// append slice slice = append ( slice , slice2 ... ) // copy dest := make ([] int , len ( src )) copy ( dest , src ) // \u5220\u9664\u591a\u4e2a\u8fde\u7eed\u7684\u5143\u7d20 a = append ( a [: i ], a [ j :] ... ) // \u5220\u9664\u4e00\u4e2a\u5143\u7d20 i a = append ( a [: i ], a [ i + 1 :] ... ) // \u6269\u5c55 j \u4e2a\u5143\u7d20 a = append ( a , make ([] T , j ) ... ) // \u63d2\u5165\u5143\u7d20 x \u5230 i \u7684\u4f4d\u7f6e\u4e0a a = append ( a [: i ], append ([] T { x }, a [ i :] ... ) ... ) // push\uff0c\u8ffd\u52a0\u5230\u5c3e\u90e8 a = append ( a , x ) // pop\uff0c\u5c3e\u90e8\u5f39\u51fa x , a = a [ len ( a ) - 1 ], a [: len ( a ) - 1 ] // dequeue\uff0c\u961f\u5934\u51fa\u961f x , a = a [ 0 ], a [ 1 :] // enqueue\uff0c\u961f\u5c3e\u5165\u961f a = append ( a , x ) // shift\uff0c\u5934\u90e8\u53d6\u51fa x , a = a [ 0 ], a [ 1 :] // unshift\uff0c\u5934\u90e8\u52a0\u5165 a = append ([] T { x }, a ... )","title":"\u5176\u4ed6\u64cd\u4f5c"},{"location":"Go/Basic/Golang-6-slice/#_11","text":"\u5207\u7247\u548c\u6570\u7ec4**\u4e4b\u95f4\u6709\u90a3\u4e48\u70b9\u50cf\u6570\u636e\u5e93\u4e2d\u7684 **\u57fa\u672c\u8868\u548c\u89c6\u56fe \u3002 \u57fa\u672c\u8868\u662f\u5b58\u50a8\u6570\u636e\u5b9a\u4e49\u548c\u6570\u636e\u7684\uff0c\u89c6\u56fe\u53ea\u5b58\u50a8\u6570\u636e\u5b9a\u4e49\u3002\u6240\u4ee5\u57fa\u672c\u8868\u6539\u53d8\u65f6\u89c6\u56fe\u4e5f\u6539\u53d8\u3002 \u6570\u7ec4\u662f\u5b58\u50a8\u5b9a\u4e49\u548c\u6570\u636e\u7684\uff0c\u5207\u7247\u53ea\u5b58\u50a8\u5b9a\u4e49\u3002\u6240\u4ee5\u6570\u7ec4\u5143\u7d20\u6539\u53d8\u65f6\u5207\u7247\u4e5f\u6539\u53d8\u3002 \u8fd9\u4e2a\u4f8b\u5b50\u53ef\u80fd\u4e0d\u662f\u5f88\u8d34\u5207\uff0c\u4f46\u8054\u7cfb\u4e00\u4e0b\u8fd9\u53e5\u8bdd\uff1a\u6570\u7ec4\u662f\u503c\u7c7b\u578b\uff0c\u5207\u7247\u662f\u5f15\u7528\u7c7b\u578b\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u6570\u7ec4\u662f\u5b9e\u5b9e\u5728\u5728\u5b58\u6570\u636e\u7684\u5730\u65b9\uff0c\u5207\u7247\u53ea\u662f\u5bf9\u67d0\u4e2a\u6570\u7ec4\u7684\u5f15\u7528\uff0c\u81ea\u5df1\u5e76\u6ca1\u6709\u6570\u636e\u3002","title":"\u603b\u7ed3"},{"location":"Go/Basic/Golang-7-map/","text":"\u952e\u503c\u5bf9\u7684\u521b\u5efa\u4e0e\u4f7f\u7528 7-map \u00b6 map \u662f Go \u63d0\u4f9b\u7684\u4e00\u79cd\u6620\u5c04\u5173\u7cfb\u5bb9\u5668\uff0c\u5176\u5185\u90e8\u4f7f\u7528 \u6563\u5217\u8868(hash) \u5b9e\u73b0 map \u662f\u4e00\u79cd\u65e0\u5e8f\u7684\u57fa\u4e8e key-value \u7684\u6570\u636e\u7ed3\u6784 Go \u4e2d\u7684 map \u662f\u5f15\u7528\u7c7b\u578b\uff0c\u5fc5\u987b\u521d\u59cb\u5316\u624d\u80fd\u4f7f\u7528\u3002 key \u53ef\u4ee5\u662f\u4efb\u610f\u53ef\u7528 == \u6216 != \u6bd4\u8f83\u7684\u7c7b\u578b\uff0c\u5982\uff1astring\u3001int\u3001float \u6570\u7ec4\u3001\u5207\u7247\u4e0d\u80fd\u4f5c\u4e3a key \u6307\u9488\u548c\u63a5\u53e3\u7c7b\u578b\u53ef\u4ee5\u4f5c\u4e3a key \u5305\u542b\u6570\u7ec4\u5207\u7247\u7684\u7ed3\u6784\u4f53\u4e0d\u80fd\u4f5c\u4e3a key\uff0c\u53ea\u5305\u542b\u539f\u751f\u7c7b\u578b\u7684\u7ed3\u6784\u4f53\u53ef\u4ee5\u4f5c\u4e3a key \u5982\u679c\u7ed3\u6784\u4f53\u8981\u4f5c\u4e3a key \u53ef\u4ee5\u63d0\u4f9b Key() \u548c Hash() \u65b9\u6cd5 value \u53ef\u4ee5\u662f\u4efb\u610f\u7c7b\u578b \u901a\u8fc7 key \u5728map \u4e2d\u67e5\u627e\u662f\u5f88\u5feb\u7684\uff0c\u4f46\u662f\u8fd8\u662f\u6bd4\u6570\u7ec4\u548c\u5207\u7247\u6162100\u500d\u3002\u5982\u679c\u6027\u80fd\u5f88\u91cd\u8981\u7684\u8bdd\u8fd8\u662f\u7528\u5207\u7247\u6765\u89e3\u51b3\u95ee\u9898\u3002 map\u53ef\u4ee5\u7528\u51fd\u6570\u4f5c\u4e3a\u503c\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u7528\u6765\u505a\u5206\u652f\u7ed3\u6784\uff1a\u7528key\u6765\u9009\u62e9\u8981\u6267\u884c\u7684\u51fd\u6570\u3002 \u58f0\u660e \u00b6 {% note warning, \u6ce8\u610f\uff1amap \u662f\u5f15\u7528\u7c7b\u578b\uff01\uff01\uff01 %} \u5b9a\u4e49\u8bed\u6cd5\u5982\u4e0b var map1 map [ keyT ] valueT // \u793a\u4f8b var map1 map [ string ] int var map2 map [ int ] rune \u58f0\u660e\u65f6\u4e0d\u9700\u8981\u76f4\u5230map\u957f\u5ea6\uff0cmap\u662f\u53ef\u4ee5\u52a8\u6001\u589e\u957f\u7684 \u672a\u521d\u59cb\u5316\u7684map\u7684\u503c\u662f nil\uff0c\u9700\u8981\u4f7f\u7528 make() \u51fd\u6570\u6765\u5206\u914d\u5185\u5b58 make ( map [ keyT ] valueT , cap ) cap \u662f\u53ef\u9009\u7684\uff0c\u4f46\u662f\u6211\u4eec\u5e94\u8be5\u518d\u521d\u59cb\u5316map\u7684\u65f6\u5019\u5c31\u4e3a\u5176\u6307\u5b9a\u4e00\u4e2a\u5408\u9002\u7684\u5bb9\u91cf\u3002 eg\uff1a func main () { var m1 map [ int ] string m2 := make ( map [ int ] string ) fmt . Println ( m1 ) // map[] fmt . Println ( m2 ) // map[] fmt . Printf ( \"%T \\n\" , m1 ) // map[int]string fmt . Printf ( \"%T \\n\" , m2 ) // map[int]string } \u58f0\u660e\u5e76\u521d\u59cb\u5316 \u00b6 func main () { m1 := map [ int ] string { 1 : \"Alice\" , 2 : \"Boii\" , 3 : \"Candy\" , 4 : \"Danish\" , } fmt . Println ( m1 ) // map[1:Alice 2:Boii 3:Candy 4:Danish] fmt . Printf ( \"%T \\n\" , m1 ) // map[int]string } \u6ce8\u610f\uff1a**\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6bcf\u4e00\u5bf9 k-v \u540e\u9762\u90fd\u8981\u6709 , \uff0c**\u6700\u540e\u4e00\u5bf9\u4e5f\u8981\u6709 \u5355\u72ec\u8d4b\u503c \u00b6 func main () { m1 := make ( map [ int ] string ) m1 [ 1 ] = \"Alice\" m1 [ 2 ] = \"Boii\" m1 [ 5 ] = \"Eva\" fmt . Println ( m1 ) // map[1:Alice 2:Boii 5:Eva] } \u5224\u65ad\u952e\u662f\u5426\u5b58\u5728 \u00b6 Go \u4e2d\u6709\u4e2a\u5224\u65ad map \u4e2d\u952e\u662f\u5426\u5b58\u5728\u7684\u7279\u6b8a\u5199\u6cd5\uff0c\u57fa\u672c\u683c\u5f0f\u4e3a\uff1a val , ok := map [ key ] eg\uff1a func main () { m1 := map [ byte ] string { 'a' : \"Alice\" , 'b' : \"Boii\" , 'c' : \"Candy\" , 'd' : \"Danish\" , } val , ok := m1 [ 'a' ] fmt . Println ( val ) // Alice fmt . Println ( ok ) // true if val , ok := m1 [ 'b' ]; ok { fmt . Println ( \"I got\" , val ) } else { fmt . Println ( \"None.\" ) } } \u904d\u5386 \u00b6 \u53ef\u4ee5\u4f7f\u7528 for...range \u904d\u5386 func main () { m1 := map [ byte ] string { 'a' : \"Alice\" , 'b' : \"Boii\" , 'c' : \"Candy\" , 'd' : \"Danish\" , } for k , v := range m1 { fmt . Println ( k , v ) } } \u53ea\u60f3\u904d\u5386 key \u7684\u65f6\u5019\u53ef\u4ee5 for k := range m1 { fmt . Println ( k ) } \u53ea\u60f3\u904d\u5386 value \u7684\u65f6\u5019\u53ef\u4ee5 for _ , v := range m1 { fmt . Println ( v ) } {% note warning, \u6ce8\u610f\uff1a \u904d\u5386 map \u65f6\u5143\u7d20\u987a\u5e8f\u4e0e\u6dfb\u52a0\u952e\u503c\u5bf9\u987a\u5e8f\u65e0\u5173\u3002 %} delete() \u00b6 Go \u7684\u5185\u5efa\u51fd\u6570 delete() \u53ef\u4ee5\u4ece map \u4e2d\u5220\u9664\u4e00\u5bf9\u952e\u503c\u5bf9\uff0c\u683c\u5f0f\u5982\u4e0b\uff1a delete ( map , key ) eg\uff1a func main () { m1 := map [ int ] byte { 1 : 'A' , 2 : 'B' , 3 : 'C' , } fmt . Println ( m1 ) // map[1:65 2:66 3:67] delete ( m1 , 2 ) fmt . Println ( m1 ) // map[1:65 3:67] } \u503c\u4e3a\u5207\u7247\u7684map \u00b6 map \u4e2d value \u53ef\u4ee5\u662f\u4efb\u4f55\u7c7b\u578b\uff0c\u6240\u4ee5\u4e5f\u53ef\u4ee5\u662f\u5207\u7247\u7c7b\u578b var sm map [ keyT ][] T sm := make ( map [ keyT ][] T , cap ) sm := map [ keyT ][] T { initial value } []T \uff1a\u67d0\u79cd\u7c7b\u578b\u7684\u5207\u7247 eg\uff1a func main () { // \u521b\u5efa\u4e00\u4e2amap, key \u4e3a string, value \u4e3a []int\uff0c\u5bb9\u91cf\u4e3a5 sliceMap1 := make ( map [ string ][] int , 5 ) // var sliceMap1 map[string][]int \u7528\u8fd9\u79cd\u58f0\u660e\u65b9\u5f0f\u4e5f\u884c // \u4e3a map \u4e2d\u6bcf\u4e00\u5bf9 k-v \u521d\u59cb\u5316 sliceMap1 [ \"A\" ] = make ([] int , 3 , 3 ) sliceMap1 [ \"B\" ] = make ([] int , 3 , 3 ) sliceMap1 [ \"C\" ] = make ([] int , 3 , 3 ) sliceMap1 [ \"D\" ] = make ([] int , 3 , 3 ) sliceMap1 [ \"E\" ] = make ([] int , 3 , 3 ) fmt . Println ( \"1: \" , sliceMap1 ) // 1: map[A:[0 0 0] B:[0 0 0] C:[0 0 0] D:[0 0 0] E:[0 0 0]] for k , v := range sliceMap1 { fmt . Println ( k , v ) } // A [0 0 0] // B [0 0 0] // C [0 0 0] // D [0 0 0] // E [0 0 0] // \u7528\u8fd9\u79cd\u65b9\u5f0f\u521d\u59cb\u5316\u6548\u679c\u4e00\u6837 sliceMap2 := map [ string ][] int { \"A\" : { 1 , 2 , 3 }, \"B\" : make ([] int , 3 ), \"C\" : { 2 , 4 , 0 , 9 }, \"D\" : make ([] int , 3 ), \"E\" : make ([] int , 3 ), } fmt . Println ( \"2: \" , sliceMap2 ) // 2: map[A:[1 2 3] B:[0 0 0] C:[2 4 0 9] D:[0 0 0] E:[0 0 0]] for k , v := range sliceMap2 { fmt . Println ( k , v ) } // A [1 2 3] // B [0 0 0] // C [2 4 0 9] // D [0 0 0] // E [0 0 0] } \u503c\u4e3amap\u7684\u5207\u7247 \u00b6 \u770b\u8d77\u6765\u597d\u50cf\u6709\u70b9\u7ed5\uff0c\u4f46\u662f\u634b\u6e05\u695a\u5c31\u597d\u529e\u4e86 map[keyT]valT \u662fmap\u7c7b\u578b\uff0c []T \u662f\u5207\u7247\u7c7b\u578b\uff0c\u90a3\u4e48 []map[keyT]valT \u5c31\u662fmap\u7c7b\u578b\u5207\u7247\u4e86 // \u7c7b\u578b\u5b9a\u4e49 [] map [ keyT ] valT // \u58f0\u660e var identifier [] map [ keyT ] valT // \u58f0\u660e\u5e76\u521d\u59cb\u5316 var identifier = [] map [ keyT ] valT { { map1key1 : val , map1key2 : val , map1key3 : val }, { map2key1 : val , map2key2 : val , map2key3 : val }, { map3key1 : val , map3key2 : val , map3key3 : val }, } // \u58f0\u660e\u5e76\u521d\u59cb\u5316 identifier := [] map [ keyT ] valT { { map1key1 : val , map1key2 : val , map1key3 : val }, { map2key1 : val , map2key2 : val , map2key3 : val }, { map3key1 : val , map3key2 : val , map3key3 : val }, } // \u4f7f\u7528make identifier := make ([] map [ keyT ] valT , cap ) identifier [ skey ] = make ( map [ keyT ] valT ) identifier [ skey ][ mkey ] = val identifier [ skey ] = map [ keyT ] valT { mkey1 : val , mkey2 : val } eg\uff1a var ms [] map [ int ] string func main () { // \u58f0\u660e\u4e00\u4e2a\u5207\u7247\uff0cmap[int]string \u7c7b\u578b\u7684\uff0c\u5e76\u521d\u59cb\u5316 ms := [] map [ int ] string { { 1 : \"A\" , 2 : \"B\" , 3 : \"C\" }, { 4 : \"I\" , 6 : \"N\" , 9 : \"G\" }, { 3 : \"R\" , 7 : \"Y\" , 5 : \"Q\" }, make ( map [ int ] string ), } for _ , v := range ms { fmt . Println ( v ) } // map[1:A 2:B 3:C] // map[4:I 6:N 9:G] // map[3:R 5:Q 7:Y] // map[] } func main () { // make \u4e00\u4e2a\u5207\u7247\uff0c\u7c7b\u578b\u4e3a map[int]string, \u957f\u5ea6\u548c\u5bb9\u91cf\u90fd\u4e3a 3 mapSlice := make ([] map [ int ] string , 3 ) // \u4e3a\u5207\u7247\u7b2c\u4e00\u4e2a\u5143\u7d20\u521b\u5efa\u4e00\u4e2a map\uff0c\u7136\u540e\u4e3a\u5176\u9010\u4e2a\u6dfb\u52a0 k-v mapSlice [ 0 ] = make ( map [ int ] string ) mapSlice [ 0 ][ 1 ] = \"A\" mapSlice [ 0 ][ 2 ] = \"B\" mapSlice [ 0 ][ 3 ] = \"C\" // \u4e3a\u5207\u7247\u7b2c\u4e8c\u4e2a\u5143\u7d20 \u521b\u5efa\u5e76\u521d\u59cb\u5316\u4e00\u4e2a map mapSlice [ 1 ] = map [ int ] string { 4 : \"I\" , 6 : \"N\" , 9 : \"G\" } for _ , v := range mapSlice { fmt . Println ( v ) } // map[1:A 2:B 3:C] // map[4:I 6:N 9:G] // map[] } {% noteblock warning, \u6ce8\u610f %} Go \u5185\u7f6e\u7684 map \u4e0d\u662f\u5e76\u53d1\u5b89\u5168\u7684\uff0c\u5e76\u53d1\u5b89\u5168\u7684 map \u53ef\u4ee5\u4f7f\u7528\u6807\u51c6\u5305 sync \u4e2d\u7684 map \u4e0d\u8981\u76f4\u63a5\u4fee\u6539 map value \u4e2d\u67d0\u4e2a\u6210\u5458\u7684\u503c\u3002\u5982\u679c\u60f3\u4fee\u6539 map value \u4e2d\u7684\u67d0\u4e2a\u6210\u5458\u7684\u503c\uff0c\u5fc5\u987b\u6574\u4f53\u8d4b\u503c\u3002 eg\uff1a type User struct { name string age int } func main () { ma := make ( map [ rune ] User ) boii := User { \"Boii\" , 18 } ma [ 'a' ] = boii // ma['a'].age = 19 // ERROR\uff0c\u4e0d\u80fd\u901a\u8fc7 map \u5f15\u7528\u76f4\u63a5\u4fee\u6539 boii . age = 19 ma [ 'a' ] = boii // \u5fc5\u987b\u6574\u4f53\u66ff\u6362 } {% endnoteblock %} \u7ec3\u4e60 \u00b6 \u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u7edf\u8ba1\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u6bcf\u4e2a\u5355\u8bcd\u51fa\u73b0\u7684\u6b21\u6570\u3002\u6bd4\u5982\uff1a\u201dhow do you do\u201d \u4e2d how=1 do=2 you=1\u3002 \u601d\u8def\uff1a \u5148\u7528 strings.Split \u628a\u5355\u8bcd\u5207\u5272\u51fa\u6765 \u7136\u540e\u5229\u7528 map \uff0c\u628a\u5355\u8bcd\u4f5c\u4e3a key\uff0c\u51fa\u73b0\u9891\u6b21\u4f5c\u4e3a value\uff0c\u904d\u5386\u4e00\u4e0b\u5c31\u80fd\u5f97\u5230\u7b54\u6848 package main import ( \"fmt\" \"strings\" ) func main () { str := \"how do you do I do not know how to tell you\" strSplit := strings . Split ( str , \" \" ) strMap := make ( map [ string ] int ) for _ , word := range strSplit { strMap [ word ] += 1 } fmt . Println ( strMap ) } // ----------------------------------------- // Output: map [ I : 1 do : 3 how : 2 know : 1 not : 1 tell : 1 to : 1 you : 2 ]","title":"7.map"},{"location":"Go/Basic/Golang-7-map/#7-map","text":"map \u662f Go \u63d0\u4f9b\u7684\u4e00\u79cd\u6620\u5c04\u5173\u7cfb\u5bb9\u5668\uff0c\u5176\u5185\u90e8\u4f7f\u7528 \u6563\u5217\u8868(hash) \u5b9e\u73b0 map \u662f\u4e00\u79cd\u65e0\u5e8f\u7684\u57fa\u4e8e key-value \u7684\u6570\u636e\u7ed3\u6784 Go \u4e2d\u7684 map \u662f\u5f15\u7528\u7c7b\u578b\uff0c\u5fc5\u987b\u521d\u59cb\u5316\u624d\u80fd\u4f7f\u7528\u3002 key \u53ef\u4ee5\u662f\u4efb\u610f\u53ef\u7528 == \u6216 != \u6bd4\u8f83\u7684\u7c7b\u578b\uff0c\u5982\uff1astring\u3001int\u3001float \u6570\u7ec4\u3001\u5207\u7247\u4e0d\u80fd\u4f5c\u4e3a key \u6307\u9488\u548c\u63a5\u53e3\u7c7b\u578b\u53ef\u4ee5\u4f5c\u4e3a key \u5305\u542b\u6570\u7ec4\u5207\u7247\u7684\u7ed3\u6784\u4f53\u4e0d\u80fd\u4f5c\u4e3a key\uff0c\u53ea\u5305\u542b\u539f\u751f\u7c7b\u578b\u7684\u7ed3\u6784\u4f53\u53ef\u4ee5\u4f5c\u4e3a key \u5982\u679c\u7ed3\u6784\u4f53\u8981\u4f5c\u4e3a key \u53ef\u4ee5\u63d0\u4f9b Key() \u548c Hash() \u65b9\u6cd5 value \u53ef\u4ee5\u662f\u4efb\u610f\u7c7b\u578b \u901a\u8fc7 key \u5728map \u4e2d\u67e5\u627e\u662f\u5f88\u5feb\u7684\uff0c\u4f46\u662f\u8fd8\u662f\u6bd4\u6570\u7ec4\u548c\u5207\u7247\u6162100\u500d\u3002\u5982\u679c\u6027\u80fd\u5f88\u91cd\u8981\u7684\u8bdd\u8fd8\u662f\u7528\u5207\u7247\u6765\u89e3\u51b3\u95ee\u9898\u3002 map\u53ef\u4ee5\u7528\u51fd\u6570\u4f5c\u4e3a\u503c\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u7528\u6765\u505a\u5206\u652f\u7ed3\u6784\uff1a\u7528key\u6765\u9009\u62e9\u8981\u6267\u884c\u7684\u51fd\u6570\u3002","title":"7-map"},{"location":"Go/Basic/Golang-7-map/#_1","text":"{% note warning, \u6ce8\u610f\uff1amap \u662f\u5f15\u7528\u7c7b\u578b\uff01\uff01\uff01 %} \u5b9a\u4e49\u8bed\u6cd5\u5982\u4e0b var map1 map [ keyT ] valueT // \u793a\u4f8b var map1 map [ string ] int var map2 map [ int ] rune \u58f0\u660e\u65f6\u4e0d\u9700\u8981\u76f4\u5230map\u957f\u5ea6\uff0cmap\u662f\u53ef\u4ee5\u52a8\u6001\u589e\u957f\u7684 \u672a\u521d\u59cb\u5316\u7684map\u7684\u503c\u662f nil\uff0c\u9700\u8981\u4f7f\u7528 make() \u51fd\u6570\u6765\u5206\u914d\u5185\u5b58 make ( map [ keyT ] valueT , cap ) cap \u662f\u53ef\u9009\u7684\uff0c\u4f46\u662f\u6211\u4eec\u5e94\u8be5\u518d\u521d\u59cb\u5316map\u7684\u65f6\u5019\u5c31\u4e3a\u5176\u6307\u5b9a\u4e00\u4e2a\u5408\u9002\u7684\u5bb9\u91cf\u3002 eg\uff1a func main () { var m1 map [ int ] string m2 := make ( map [ int ] string ) fmt . Println ( m1 ) // map[] fmt . Println ( m2 ) // map[] fmt . Printf ( \"%T \\n\" , m1 ) // map[int]string fmt . Printf ( \"%T \\n\" , m2 ) // map[int]string }","title":"\u58f0\u660e"},{"location":"Go/Basic/Golang-7-map/#_2","text":"func main () { m1 := map [ int ] string { 1 : \"Alice\" , 2 : \"Boii\" , 3 : \"Candy\" , 4 : \"Danish\" , } fmt . Println ( m1 ) // map[1:Alice 2:Boii 3:Candy 4:Danish] fmt . Printf ( \"%T \\n\" , m1 ) // map[int]string } \u6ce8\u610f\uff1a**\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6bcf\u4e00\u5bf9 k-v \u540e\u9762\u90fd\u8981\u6709 , \uff0c**\u6700\u540e\u4e00\u5bf9\u4e5f\u8981\u6709","title":"\u58f0\u660e\u5e76\u521d\u59cb\u5316"},{"location":"Go/Basic/Golang-7-map/#_3","text":"func main () { m1 := make ( map [ int ] string ) m1 [ 1 ] = \"Alice\" m1 [ 2 ] = \"Boii\" m1 [ 5 ] = \"Eva\" fmt . Println ( m1 ) // map[1:Alice 2:Boii 5:Eva] }","title":"\u5355\u72ec\u8d4b\u503c"},{"location":"Go/Basic/Golang-7-map/#_4","text":"Go \u4e2d\u6709\u4e2a\u5224\u65ad map \u4e2d\u952e\u662f\u5426\u5b58\u5728\u7684\u7279\u6b8a\u5199\u6cd5\uff0c\u57fa\u672c\u683c\u5f0f\u4e3a\uff1a val , ok := map [ key ] eg\uff1a func main () { m1 := map [ byte ] string { 'a' : \"Alice\" , 'b' : \"Boii\" , 'c' : \"Candy\" , 'd' : \"Danish\" , } val , ok := m1 [ 'a' ] fmt . Println ( val ) // Alice fmt . Println ( ok ) // true if val , ok := m1 [ 'b' ]; ok { fmt . Println ( \"I got\" , val ) } else { fmt . Println ( \"None.\" ) } }","title":"\u5224\u65ad\u952e\u662f\u5426\u5b58\u5728"},{"location":"Go/Basic/Golang-7-map/#_5","text":"\u53ef\u4ee5\u4f7f\u7528 for...range \u904d\u5386 func main () { m1 := map [ byte ] string { 'a' : \"Alice\" , 'b' : \"Boii\" , 'c' : \"Candy\" , 'd' : \"Danish\" , } for k , v := range m1 { fmt . Println ( k , v ) } } \u53ea\u60f3\u904d\u5386 key \u7684\u65f6\u5019\u53ef\u4ee5 for k := range m1 { fmt . Println ( k ) } \u53ea\u60f3\u904d\u5386 value \u7684\u65f6\u5019\u53ef\u4ee5 for _ , v := range m1 { fmt . Println ( v ) } {% note warning, \u6ce8\u610f\uff1a \u904d\u5386 map \u65f6\u5143\u7d20\u987a\u5e8f\u4e0e\u6dfb\u52a0\u952e\u503c\u5bf9\u987a\u5e8f\u65e0\u5173\u3002 %}","title":"\u904d\u5386"},{"location":"Go/Basic/Golang-7-map/#delete","text":"Go \u7684\u5185\u5efa\u51fd\u6570 delete() \u53ef\u4ee5\u4ece map \u4e2d\u5220\u9664\u4e00\u5bf9\u952e\u503c\u5bf9\uff0c\u683c\u5f0f\u5982\u4e0b\uff1a delete ( map , key ) eg\uff1a func main () { m1 := map [ int ] byte { 1 : 'A' , 2 : 'B' , 3 : 'C' , } fmt . Println ( m1 ) // map[1:65 2:66 3:67] delete ( m1 , 2 ) fmt . Println ( m1 ) // map[1:65 3:67] }","title":"delete()"},{"location":"Go/Basic/Golang-7-map/#map","text":"map \u4e2d value \u53ef\u4ee5\u662f\u4efb\u4f55\u7c7b\u578b\uff0c\u6240\u4ee5\u4e5f\u53ef\u4ee5\u662f\u5207\u7247\u7c7b\u578b var sm map [ keyT ][] T sm := make ( map [ keyT ][] T , cap ) sm := map [ keyT ][] T { initial value } []T \uff1a\u67d0\u79cd\u7c7b\u578b\u7684\u5207\u7247 eg\uff1a func main () { // \u521b\u5efa\u4e00\u4e2amap, key \u4e3a string, value \u4e3a []int\uff0c\u5bb9\u91cf\u4e3a5 sliceMap1 := make ( map [ string ][] int , 5 ) // var sliceMap1 map[string][]int \u7528\u8fd9\u79cd\u58f0\u660e\u65b9\u5f0f\u4e5f\u884c // \u4e3a map \u4e2d\u6bcf\u4e00\u5bf9 k-v \u521d\u59cb\u5316 sliceMap1 [ \"A\" ] = make ([] int , 3 , 3 ) sliceMap1 [ \"B\" ] = make ([] int , 3 , 3 ) sliceMap1 [ \"C\" ] = make ([] int , 3 , 3 ) sliceMap1 [ \"D\" ] = make ([] int , 3 , 3 ) sliceMap1 [ \"E\" ] = make ([] int , 3 , 3 ) fmt . Println ( \"1: \" , sliceMap1 ) // 1: map[A:[0 0 0] B:[0 0 0] C:[0 0 0] D:[0 0 0] E:[0 0 0]] for k , v := range sliceMap1 { fmt . Println ( k , v ) } // A [0 0 0] // B [0 0 0] // C [0 0 0] // D [0 0 0] // E [0 0 0] // \u7528\u8fd9\u79cd\u65b9\u5f0f\u521d\u59cb\u5316\u6548\u679c\u4e00\u6837 sliceMap2 := map [ string ][] int { \"A\" : { 1 , 2 , 3 }, \"B\" : make ([] int , 3 ), \"C\" : { 2 , 4 , 0 , 9 }, \"D\" : make ([] int , 3 ), \"E\" : make ([] int , 3 ), } fmt . Println ( \"2: \" , sliceMap2 ) // 2: map[A:[1 2 3] B:[0 0 0] C:[2 4 0 9] D:[0 0 0] E:[0 0 0]] for k , v := range sliceMap2 { fmt . Println ( k , v ) } // A [1 2 3] // B [0 0 0] // C [2 4 0 9] // D [0 0 0] // E [0 0 0] }","title":"\u503c\u4e3a\u5207\u7247\u7684map"},{"location":"Go/Basic/Golang-7-map/#map_1","text":"\u770b\u8d77\u6765\u597d\u50cf\u6709\u70b9\u7ed5\uff0c\u4f46\u662f\u634b\u6e05\u695a\u5c31\u597d\u529e\u4e86 map[keyT]valT \u662fmap\u7c7b\u578b\uff0c []T \u662f\u5207\u7247\u7c7b\u578b\uff0c\u90a3\u4e48 []map[keyT]valT \u5c31\u662fmap\u7c7b\u578b\u5207\u7247\u4e86 // \u7c7b\u578b\u5b9a\u4e49 [] map [ keyT ] valT // \u58f0\u660e var identifier [] map [ keyT ] valT // \u58f0\u660e\u5e76\u521d\u59cb\u5316 var identifier = [] map [ keyT ] valT { { map1key1 : val , map1key2 : val , map1key3 : val }, { map2key1 : val , map2key2 : val , map2key3 : val }, { map3key1 : val , map3key2 : val , map3key3 : val }, } // \u58f0\u660e\u5e76\u521d\u59cb\u5316 identifier := [] map [ keyT ] valT { { map1key1 : val , map1key2 : val , map1key3 : val }, { map2key1 : val , map2key2 : val , map2key3 : val }, { map3key1 : val , map3key2 : val , map3key3 : val }, } // \u4f7f\u7528make identifier := make ([] map [ keyT ] valT , cap ) identifier [ skey ] = make ( map [ keyT ] valT ) identifier [ skey ][ mkey ] = val identifier [ skey ] = map [ keyT ] valT { mkey1 : val , mkey2 : val } eg\uff1a var ms [] map [ int ] string func main () { // \u58f0\u660e\u4e00\u4e2a\u5207\u7247\uff0cmap[int]string \u7c7b\u578b\u7684\uff0c\u5e76\u521d\u59cb\u5316 ms := [] map [ int ] string { { 1 : \"A\" , 2 : \"B\" , 3 : \"C\" }, { 4 : \"I\" , 6 : \"N\" , 9 : \"G\" }, { 3 : \"R\" , 7 : \"Y\" , 5 : \"Q\" }, make ( map [ int ] string ), } for _ , v := range ms { fmt . Println ( v ) } // map[1:A 2:B 3:C] // map[4:I 6:N 9:G] // map[3:R 5:Q 7:Y] // map[] } func main () { // make \u4e00\u4e2a\u5207\u7247\uff0c\u7c7b\u578b\u4e3a map[int]string, \u957f\u5ea6\u548c\u5bb9\u91cf\u90fd\u4e3a 3 mapSlice := make ([] map [ int ] string , 3 ) // \u4e3a\u5207\u7247\u7b2c\u4e00\u4e2a\u5143\u7d20\u521b\u5efa\u4e00\u4e2a map\uff0c\u7136\u540e\u4e3a\u5176\u9010\u4e2a\u6dfb\u52a0 k-v mapSlice [ 0 ] = make ( map [ int ] string ) mapSlice [ 0 ][ 1 ] = \"A\" mapSlice [ 0 ][ 2 ] = \"B\" mapSlice [ 0 ][ 3 ] = \"C\" // \u4e3a\u5207\u7247\u7b2c\u4e8c\u4e2a\u5143\u7d20 \u521b\u5efa\u5e76\u521d\u59cb\u5316\u4e00\u4e2a map mapSlice [ 1 ] = map [ int ] string { 4 : \"I\" , 6 : \"N\" , 9 : \"G\" } for _ , v := range mapSlice { fmt . Println ( v ) } // map[1:A 2:B 3:C] // map[4:I 6:N 9:G] // map[] } {% noteblock warning, \u6ce8\u610f %} Go \u5185\u7f6e\u7684 map \u4e0d\u662f\u5e76\u53d1\u5b89\u5168\u7684\uff0c\u5e76\u53d1\u5b89\u5168\u7684 map \u53ef\u4ee5\u4f7f\u7528\u6807\u51c6\u5305 sync \u4e2d\u7684 map \u4e0d\u8981\u76f4\u63a5\u4fee\u6539 map value \u4e2d\u67d0\u4e2a\u6210\u5458\u7684\u503c\u3002\u5982\u679c\u60f3\u4fee\u6539 map value \u4e2d\u7684\u67d0\u4e2a\u6210\u5458\u7684\u503c\uff0c\u5fc5\u987b\u6574\u4f53\u8d4b\u503c\u3002 eg\uff1a type User struct { name string age int } func main () { ma := make ( map [ rune ] User ) boii := User { \"Boii\" , 18 } ma [ 'a' ] = boii // ma['a'].age = 19 // ERROR\uff0c\u4e0d\u80fd\u901a\u8fc7 map \u5f15\u7528\u76f4\u63a5\u4fee\u6539 boii . age = 19 ma [ 'a' ] = boii // \u5fc5\u987b\u6574\u4f53\u66ff\u6362 } {% endnoteblock %}","title":"\u503c\u4e3amap\u7684\u5207\u7247"},{"location":"Go/Basic/Golang-7-map/#_6","text":"\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u7edf\u8ba1\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u6bcf\u4e2a\u5355\u8bcd\u51fa\u73b0\u7684\u6b21\u6570\u3002\u6bd4\u5982\uff1a\u201dhow do you do\u201d \u4e2d how=1 do=2 you=1\u3002 \u601d\u8def\uff1a \u5148\u7528 strings.Split \u628a\u5355\u8bcd\u5207\u5272\u51fa\u6765 \u7136\u540e\u5229\u7528 map \uff0c\u628a\u5355\u8bcd\u4f5c\u4e3a key\uff0c\u51fa\u73b0\u9891\u6b21\u4f5c\u4e3a value\uff0c\u904d\u5386\u4e00\u4e0b\u5c31\u80fd\u5f97\u5230\u7b54\u6848 package main import ( \"fmt\" \"strings\" ) func main () { str := \"how do you do I do not know how to tell you\" strSplit := strings . Split ( str , \" \" ) strMap := make ( map [ string ] int ) for _ , word := range strSplit { strMap [ word ] += 1 } fmt . Println ( strMap ) } // ----------------------------------------- // Output: map [ I : 1 do : 3 how : 2 know : 1 not : 1 tell : 1 to : 1 you : 2 ]","title":"\u7ec3\u4e60"},{"location":"Go/Basic/Golang-8-%E5%87%BD%E6%95%B0/","text":"\u51fd\u6570\u7684\u521b\u5efa\u4e0e\u4f7f\u7528 8-\u51fd\u6570 \u00b6 \u5982\u679c\u4e00\u4e2a\u52a8\u4f5c\u9700\u8981\u91cd\u590d\u6267\u884c\uff0c\u90a3\u5c31\u5e94\u8be5\u628a\u8fd9\u4e2a\u52a8\u4f5c\u5c01\u88c5\u5230\u51fd\u6570\u4e2d\u3002 \u5728 Go \u4e2d\uff0c\u51fd\u6570\u662f\u4e00\u7b49\u516c\u6c11 \u5b9a\u4e49 \u00b6 {% note warning, \u6ce8\u610f\uff1a\u51fd\u6570\u662f\u5f15\u7528\u7c7b\u578b\uff01\uff01\uff01 %} Go \u8bed\u8a00\u4e2d\u51fd\u6570\u7684\u57fa\u672c\u5f62\u5f0f\uff1a func \u51fd\u6570\u540d ( \u53c2\u6570\u5217\u8868 )( \u8fd4\u56de\u503c ){ \u51fd\u6570\u4f53 } - \u51fd\u6570\u540d\uff1a\u7531\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u4e0b\u5212\u7ebf\u7ec4\u6210\uff0c\u4f46\u4e0d\u80fd\u6570\u5b57\u5f00\u5934\uff1b\u540c\u4e00\u4e2a\u5305\u5185\uff0c\u51fd\u6570\u540d\u4e0d\u80fd\u91cd\u540d - \u53c2\u6570\uff1a\u7531\u53c2\u6570\u53d8\u91cf\u548c\u53d8\u91cf\u7c7b\u578b\u7ec4\u6210\uff0c\u591a\u4e2a\u53c2\u6570\u4f7f\u7528 , \u5206\u9694 - \u8fd4\u56de\u503c\uff1a\u7531\u8fd4\u56de\u53d8\u91cf\u548c\u53d8\u91cf\u7c7b\u578b\uff0c\u4e5f\u53ef\u53ea\u5199\u53d8\u91cf\u7c7b\u578b\uff0c\u591a\u4e2a\u8fd4\u56de\u503c\u5fc5\u987b\u7528 () \u5305\u88f9\uff0c\u5e76\u7528 , \u5206\u9694 - \u51fd\u6570\u4f53\uff1a\u5b9e\u73b0\u6307\u5b9a\u529f\u80fd\u7684\u4ee3\u7801 eg\uff1a\u6c42\u4e24\u6570\u4e4b\u548c func sum ( a int , b int ) int { return a + b } eg\uff1a\u65e0\u53c2\u6570\u65e0\u8fd4\u56de\u503c\u7684\u51fd\u6570 func sayHello () { fmt . Println ( \"Hello\" ) } \u8c03\u7528 \u00b6 \u901a\u8fc7 \u51fd\u6570\u540d(\u53c2\u6570) \u7684\u65b9\u5f0f\u8c03\u7528\uff0c\u5982\u679c\u5b9a\u4e49\u7684\u51fd\u6570\u6ca1\u6709\u8981\u6c42\u53c2\u6570\uff0c\u5219\u8c03\u7528\u65f6\u4e0d\u9700\u8981\u7ed9\u53c2\u6570 eg\uff1a func main () { res := sum ( 1 , 3 ) fmt . Println ( res ) } \u8c03\u7528\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\u65f6\u53ef\u4ee5\u4e0d\u63a5\u53d7\u5176\u8fd4\u56de\u503c\u3002 \u53c2\u6570 \u00b6 \u7c7b\u578b\u7b80\u5199 \u00b6 \u5982\u679c\u76f8\u90bb\u53d8\u91cf\u7c7b\u578b\u76f8\u540c\uff0c\u53ef\u4ee5\u53ea\u5199\u4e00\u4e2a eg\uff1a func fn ( x , y int , p , q string ) { fmt . Println ( x , y , p , q ) } x \u548c y \u5747\u4e3a int \u578b\uff0cx \u540e\u9762\u5c31\u53ef\u7701\u7565\uff1bp \u548c q \u90fd\u662f string \u578b\uff0cp \u540e\u9762\u5c31\u53ef\u4ee5\u7701\u7565 \u53ef\u53d8\u53c2\u6570 \u00b6 \u5982\u679c\u53c2\u6570\u6570\u91cf\u4e0d\u56fa\u5b9a\uff0c\u53ef\u4ee5\u5728\u7c7b\u578b\u524d\u9762\u52a0\u4e0a ... \uff0c\u4f46\u662f\u53ea\u80fd\u63a5\u6536\u8fd9\u79cd\u7c7b\u578b\u7684\u53c2\u6570\uff0c\u4e14\u6b64\u65f6\u8981\u6ce8\u610f\u7c7b\u578b\u7b80\u5199\u7684\u65b9\u6cd5 **\u6ce8\u610f\uff1a**\u548c\u56fa\u5b9a\u53c2\u6570\u642d\u914d\u65f6\uff0c\u53ef\u53d8\u53c2\u6570\u8981\u653e\u5728\u56fa\u5b9a\u53c2\u6570\u540e\u9762 func fn ( x int , y ... int ) { fmt . Println ( x ) // 1 fmt . Println ( y ) // [2 3 5] fmt . Printf ( \"%T \\n\" , y ) // []int } fn ( 1 , 2 , 3 , 5 ) // \u9519\u8bef\uff0c\u53ea\u80fd\u4f20\u9012int\u578b\uff1afn(1, 2, \"B\", \"C\") // \u9519\u8bef\uff0c\u5168\u90fd\u8981int\u578b\uff1a fn(1, \"A\", \"B\", \"C\") \u53ef\u53d8\u53c2\u6570\u5b9e\u9645\u4e0a\u662f\u901a\u8fc7\u5207\u7247\u5b9e\u73b0\u7684 \u5173\u4e8e\u7c7b\u578b\u7b80\u5199\uff1a // \u9519\u8bef func fn ( x , y ... int ) {} // \u6b63\u786e func fn ( x ... int ) {} func fn ( x int , y ... int ) {} func fn ( x , z int , y ... int ) {} \u5173\u4e8e\u53ef\u53d8\u53c2\u6570\u4f4d\u7f6e // \u9519\u8bef func fn ( y ... int , x int ) {} func fn ( x int , y ... int , s string ) {} // \u6b63\u786e func fn ( x int , y ... int ) {} \u8fd4\u56de\u503c \u00b6 \u591a\u8fd4\u56de\u503c \u00b6 Go \u4e2d\u652f\u6301\u591a\u8fd4\u56de\u503c\uff0c\u5982\u679c\u6709\u591a\u4e2a\u8fd4\u56de\u503c\u65f6\uff0c\u5fc5\u987b\u7528 () \u5305\u88f9\u8d77\u6765 eg\uff1a func calc ( x , y int ) ( int , int ) { return x + y , x - y } \u8c03\u7528\u4e4b\u540e\u53ef\u4ee5\u63a5\u6536\u8fd4\u56de\u503c\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u63a5\u6536\uff0c\u5982\u679c\u6307\u5411\u63a5\u6536\u4e00\u4e2a\uff0c\u53e6\u4e00\u4e2a\u53ef\u4ee5\u7528\u533f\u540d\u53d8\u91cf _ \u53bb\u63a5 // \u4e24\u4e2a\u90fd\u63a5\u6536 sum , sub := calc ( 10 , 5 ) // \u4e24\u4e2a\u90fd\u4e0d\u63a5\u6536 calc ( 10 , 5 ) // \u53ea\u63a5\u6536\u4e00\u4e2a _ , sub := calc ( 10 , 5 ) sum , _ := calc ( 10 , 5 ) \u8fd4\u56de\u503c\u547d\u540d \u00b6 \u51fd\u6570\u5b9a\u4e49\u65f6\u53ef\u4ee5\u7ed9\u8fd4\u56de\u503c\u547d\u540d\uff0c\u5e76\u5728\u51fd\u6570\u4f53\u4e2d\u76f4\u63a5\u4f7f\u7528\u8fd9\u4e9b\u53d8\u91cf\uff0c\u6700\u540e\u901a\u8fc7 return \u8fd4\u56de func calc ( x , y int ) ( sum , sub int ){ sum = x + y sub = x - y return } \u5982\u679c\u7ed9\u8fd4\u56de\u503c\u547d\u540d\u4e86\uff0c\u4f46\u662f\u53c8 return \u4e86\u522b\u7684\u53d8\u91cf\uff0c\u4ee5\u522b\u7684\u53d8\u91cf\u4e3a\u51c6 func calc ( x , y int ) ( sum int , diff int ) { sum = x + y diff = x - y mul := x * y div := x / y return mul , div } fmt . Println ( calc ( 10 , 5 )) // 50 2 \u51fd\u6570\u8fdb\u9636 \u00b6 \u53d8\u91cf\u4f5c\u7528\u57df \u00b6 \u51fd\u6570\u7c7b\u578b \u00b6 \u51fd\u6570\u53ef\u4ee5\u6709\u7c7b\u578b\uff0c\u4f7f\u7528\u5173\u952e\u5b57 type \u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u7c7b\u578b eg\uff1a type calculation func ( int , int ) int \u4e0a\u9762\u7684\u4f8b\u5b50\u5b9a\u4e49\u4e86\u4e00\u4e2a calculation \u7c7b\u578b\uff0c\u5b83\u662f\u4e00\u79cd\u51fd\u6570\u7c7b\u578b\uff0c\u4e00\u79cd\u63a5\u6536\u4e24\u4e2aint\u53c2\u6570\u8fd4\u56de\u4e00\u4e2aint\u503c\u7684\u51fd\u6570\u7c7b\u578b\u3002 \u65b9\u5f0f\u6ee1\u8db3\u4e0a\u9762\u7279\u70b9\u7684\u51fd\u6570\u90fd\u662f calculation \u7c7b\u578b\u3002 eg\uff1a func add ( x int , y int ) int { return x + y } func sub ( x , y int ) int { return x - y } add() \u548c sub() \u90fd\u662f calculation \u7c7b\u578b\uff0c\u90fd\u53ef\u4ee5\u8d4b\u503c\u7ed9 calculation \u7c7b\u578b\u53d8\u91cf var c calculation c = add res := c ( 10 , 5 ) fmt . Println ( res ) // 15 s := sub fmt . Println ( s ( 20 , 55 )) // -35 \u51fd\u6570\u53d8\u91cf \u00b6 \u5728 Go \u4e2d\uff0c\u51fd\u6570\u88ab\u770b\u4f5c\u662f\u7b2c\u4e00\u7c7b\u503c\uff0c\u8fd9\u610f\u5473\u7740\u51fd\u6570\u50cf\u53d8\u91cf\u4e00\u6837\uff0c\u6709\u7c7b\u578b\u3001\u6709\u503c\uff0c\u666e\u901a\u53d8\u91cf\u80fd\u505a\u7684\u4e8b\u51fd\u6570\u4e5f\u80fd\u505a\u3002 \u4f8b\u5982\u51fd\u6570\u7c7b\u578b\u7684\u4f8b\u5b50\uff0c\u5373\u4f7f\u4e0d\u5b9a\u4e49\u51fd\u6570\u7c7b\u578b\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5c06\u51fd\u6570\u8d4b\u503c\u7ed9\u53d8\u91cf func add ( x , y int ) int { return x + y } func main () { a := add fmt . Println ( a ( 10 , 20 )) // 30 } - \u8c03\u7528 nil \u7684\u51fd\u6570\u53d8\u91cf\u4f1a\u5bfc\u81f4 panic - \u51fd\u6570\u53d8\u91cf\u7684\u96f6\u503c nil \uff0c\u6240\u4ee5\u51fd\u6570\u53d8\u91cf\u53ef\u4ee5\u8ddf nil \u6bd4\u8f83\uff0c\u4f46\u51fd\u6570\u53d8\u91cf\u4e4b\u95f4\u4e0d\u80fd\u6bd4\u8f83\u3002 package main import \"fmt\" type processFunc func ( int ) bool // \u58f0\u660e\u4e00\u4e2a\u51fd\u6570\u7c7b\u578b func isOdd ( i int ) bool { // \u5b9a\u4e49\u8fd9\u79cd\u7c7b\u578b\u7684\u51fd\u6570 return i % 2 != 0 } func isEven ( i int ) bool { // \u5b9a\u4e49\u8fd9\u79cd\u7c7b\u578b\u7684\u51fd\u6570 return i % 2 == 0 } func filter ( slice [] int , f processFunc ) [] int { // \u63a5\u6536\u8fd9\u79cd\u7c7b\u578b\u7684\u51fd\u6570 var res [] int for _ , v := range slice { if f ( v ) { res = append ( res , v ) } } return res } func main () { s := [] int { 1 , 2 , 3 , 4 , 5 , 7 } fmt . Println ( \"s = \" , s ) // s = [1 2 3 4 5 7] odd := filter ( s , isOdd ) // \u8c03\u7528\u8fd9\u79cd\u7c7b\u578b\u7684\u51fd\u6570 even := filter ( s , isEven ) // \u8c03\u7528\u8fd9\u79cd\u7c7b\u578b\u7684\u51fd\u6570 fmt . Println ( \"Odd slice\" , odd ) // Odd slice [1 3 5 7] fmt . Println ( \"Even slice\" , even ) // Even slice [2 4] } \u533f\u540d\u51fd\u6570 \u00b6 \u6ca1\u6709\u540d\u5b57\u7684\u51fd\u6570\u5c31\u53eb\u533f\u540d\u51fd\u6570 \u57fa\u672c\u8bed\u6cd5\uff1a func ( \u51fd\u6570 ) ( \u8fd4\u56de\u503c ) { \u51fd\u6570\u4f53 } \u533f\u540d\u51fd\u6570\u6ca1\u6709\u51fd\u6570\u540d\uff0c\u6240\u4ee5\u9700\u8981\u53d8\u91cf\u6765\u4fdd\u5b58\uff0c\u6216\u8005\u4f5c\u4e3a\u7acb\u5373\u6267\u884c\u51fd\u6570 func main () { // \u5c06\u533f\u540d\u51fd\u6570\u4fdd\u5b58\u5230\u53d8\u91cf add := func ( x , y int ) int { return x + y } add ( 10 , 20 ) // \u901a\u8fc7\u53d8\u91cf\u8c03\u7528\u533f\u540d\u51fd\u6570 } func main () { // \u81ea\u6267\u884c\u51fd\u6570\uff1a\u533f\u540d\u51fd\u6570\u5b9a\u4e49\u5b8c\u52a0()\u76f4\u63a5\u6267\u884c func ( x , y int ) { fmt . Println ( x + y ) }( 10 , 20 ) } \u9ad8\u9636\u51fd\u6570 \u00b6 \u9ad8\u9636\u51fd\u6570\u5206\u4e3a \u51fd\u6570\u4f5c\u53c2\u6570 \u548c \u51fd\u6570\u4f5c\u8fd4\u56de\u503c \u51fd\u6570\u4f5c\u4e3a\u53c2\u6570 \u00b6 // \u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u4f7f\u7528\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570 // @param x int \u64cd\u4f5c\u65701 // @param y int \u64cd\u4f5c\u65702 // @param operate func(int, int) int \u64cd\u4f5c\u51fd\u6570 // @return int \u7ecf\u8fc7\u64cd\u4f5c\u51fd\u6570\u64cd\u4f5c\u7684\u7ed3\u679c func calc ( x int , y int , operate func ( int , int ) int ) int { return operate ( x , y ) } // \u5b9a\u4e49\u4e00\u4e2a\u64cd\u4f5c\u51fd\u6570 // @param x \u64cd\u4f5c\u65701 // @param y \u64cd\u4f5c\u65702 // @return \u4e24\u4e2a\u64cd\u4f5c\u6570\u76f8\u52a0\u7684\u7ed3\u679c func add ( x , y int ) int { return x + y } func main () { // \u8c03\u7528 calc \u51fd\u6570\uff0c\u628a add \u51fd\u6570\u4f20\u8fdb\u53bb res := calc ( 10 , 20 , add ) fmt . Println ( res ) // 30 } \u51fd\u6570\u4f5c\u4e3a\u8fd4\u56de\u503c \u00b6 func add ( x , y int ) int { return x + y } func sub ( x , y int ) int { return x - y } // \u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u6839\u636e\u4f20\u5165\u7684\u64cd\u4f5c\u7b26\u8fd4\u56de\u76f8\u5e94\u7684\u64cd\u4f5c\u51fd\u6570 // @param s string \u64cd\u4f5c\u7b26 // @return func(int, int) int, error \u64cd\u4f5c\u51fd\u6570 func do ( s string ) ( func ( int , int ) int , error ) { switch s { case \"+\" : return add , nil case \"-\" : return sub , nil default : return nil , errors . New ( \"\u975e\u6cd5\u64cd\u4f5c\u7b26\" ) } } func main () { fn , err := do ( \"+\" ) if err == nil { fmt . Println ( fn ( 10 , 20 )) // 20 } } \u95ed\u5305 \u00b6 a closure is a record storing a function together with an environment . **\u95ed\u5305**\u662f\u7531**\u51fd\u6570**\u548c\u4e0e\u5176\u76f8\u5173\u7684\u5f15\u7528**\u73af\u5883**\u7ec4\u5408\u800c\u6210\u7684\u5b9e\u4f53 \u3002 \u95ed\u5305\u80fd\u5c06\u5c40\u90e8\u53d8\u91cf\u5e26\u51fa\u5176\u4f5c\u7528\u57df func adder () func () int { var x int return func () int { x ++ return x } } func main () { i := adder () fmt . Println ( i ()) // 1 fmt . Println ( i ()) // 2 fmt . Println ( i ()) // 3 } \u76f8\u5f53\u4e8e\uff1a func adder () func () int { var x int f := func () int { x ++ return x } return f } func main () { i := adder () i () // 1 i () // 2 i () // 3 } \u7b49\u4e8e\u8bf4\uff0c\u5728 adder() \u4e2d\u58f0\u660e\u7684\u53d8\u91cf x \uff0c\u672c\u8be5\u5728 adder() \u8c03\u7528\u5b8c\u5c31\u88ab\u9500\u6bc1\uff0c\u5374\u88ab\u95ed\u5305\u5e26\u51fa\u4e86 x \u7684\u4f5c\u7528\u57df\uff08adder\u51fd\u6570\u5185\uff09\uff0c\u4f7f\u5f97\u5c40\u90e8\u53d8\u91cf x \u6ca1\u6709\u88ab\u9500\u6bc1\u3002\u5373\u5c40\u90e8\u53d8\u91cf x \u9003\u9038\u4e86\uff0c\u5b83\u7684\u751f\u547d\u5468\u671f\u6ca1\u6709\u968f\u7740\u5b83\u7684\u4f5c\u7528\u57df\u7ed3\u675f\u800c\u7ed3\u675f\u3002 defer \u8bed\u53e5 \u00b6 defer \u5c31\u662f\u5ef6\u8fdf\u7684\u610f\u601d\uff0c\u88ab defer \u5173\u952e\u5b57\u4fee\u9970\u7684\u51fd\u6570\u6216\u65b9\u6cd5\u4f1a\u5ef6\u8fdf\u6267\u884c\u3002 func main () { fmt . Println ( \"start\" ) defer fmt . Println ( 1 ) fmt . Println ( \"end\" ) } // --------------------- // Output: start end 1 \u7a0b\u5e8f\u5148\u6267\u884c\u7b2c\u4e00\u53e5\u6253\u5370\u4e86 start\uff0c\u5f80\u4e0b\u9047\u5230 defer \uff0c\u4e8e\u662f\u628a\u7b2c\u4e8c\u53e5\u5148\u538b\u5165\u6808\uff0c\u7136\u540e\u7ee7\u7eed\u6267\u884c\u7b2c\u4e09\u53e5\u6253\u5370\u4e86 end\u3002 \u518d\u7ee7\u7eed\u5f80\u4e0b\u5df2\u7ecf\u6ca1\u6709\uff0c\u51fd\u6570\u51c6\u5907\u7ed3\u675f\uff1b\u4f46\u662f\u5728\u7ed3\u675f\u4e4b\u524d\u9700\u5148\u51fa\u6808\uff0c\u4e5f\u5c31\u6267\u884c\u4e86\u7b2c\u4e8c\u53e5\uff0c\u6253\u5370\u4e86 1\u3002\u6700\u540e\u7ed3\u675f\u3002 \u8fd9\u5c31\u662f defer \u8bed\u53e5\u3002 {% noteblock info %} \u7531\u4e8e defer \u8bed\u53e5\u5ef6\u8fdf\u8c03\u7528\u7684\u7279\u6027\uff0c\u6240\u4ee5 defer \u8bed\u53e5\u80fd\u975e\u5e38\u65b9\u4fbf\u7684\u5904\u7406\u8d44\u6e90\u91ca\u653e\u7684\u95ee\u9898\u3002\u6bd4\u5982\uff1a\u5173\u95ed\u6587\u4ef6\u3001\u5173\u95ed\u6570\u636e\u5e93\u8fde\u63a5\u3001\u8d44\u6e90\u6e05\u7406\u3001\u91ca\u653e\u9501\u3001\u8bb0\u5f55\u65f6\u95f4\u7b49\u7b49\u3002 eg \uff1a func fn () { f , err := os . Open ( \"./main.go\" ) // \u6253\u5f00\u6587\u4ef6 defer f . Close () // \u51fd\u6570\u9000\u51fa\u4e4b\u524d\u5173\u95ed\u6587\u4ef6 if err != nil { fmr . Println ( err ) return } } {% endnoteblock %} \u591a\u4e2a defer \u7684\u6267\u884c\u987a\u5e8f \u00b6 \u5f53\u6709\u591a\u4e2a defer \u65f6\uff0c\u6309\u7167\u6808\u7684\u65b9\u5f0f\u6267\u884c\u3002\u5373\u5148 defer \u7684\u540e\u6267\u884c\u3002 eg\uff1a func fn () { fmt . Println ( \"start\" ) defer fmt . Println ( 1 ) defer fmt . Println ( 2 ) defer fmt . Println ( 3 ) fmt . Println ( \"end\" ) } // --------------------- // Output: start end 3 2 1 defer \u6267\u884c\u65f6\u673a \u00b6 Go \u4e2d\u7684 return \u8bed\u53e5\u5e76\u4e0d\u662f\u539f\u5b50\u64cd\u4f5c\uff0c\u5b83\u5206\u4e3a \u7ed9\u8fd4\u56de\u503c\u8d4b\u503c \u548c **RET\u6307\u4ee4**\u4e24\u6b65\u3002 \u800c defer \u8bed\u53e5\u6267\u884c\u7684\u65f6\u673a\u5728\u8fd4\u56de\u503c\u8d4b\u503c\u4e4b\u540e\uff0cRET\u6307\u4ee4\u6267\u884c\u4e4b\u524d\u3002","title":"8.\u51fd\u6570"},{"location":"Go/Basic/Golang-8-%E5%87%BD%E6%95%B0/#8-","text":"\u5982\u679c\u4e00\u4e2a\u52a8\u4f5c\u9700\u8981\u91cd\u590d\u6267\u884c\uff0c\u90a3\u5c31\u5e94\u8be5\u628a\u8fd9\u4e2a\u52a8\u4f5c\u5c01\u88c5\u5230\u51fd\u6570\u4e2d\u3002 \u5728 Go \u4e2d\uff0c\u51fd\u6570\u662f\u4e00\u7b49\u516c\u6c11","title":"8-\u51fd\u6570"},{"location":"Go/Basic/Golang-8-%E5%87%BD%E6%95%B0/#_1","text":"{% note warning, \u6ce8\u610f\uff1a\u51fd\u6570\u662f\u5f15\u7528\u7c7b\u578b\uff01\uff01\uff01 %} Go \u8bed\u8a00\u4e2d\u51fd\u6570\u7684\u57fa\u672c\u5f62\u5f0f\uff1a func \u51fd\u6570\u540d ( \u53c2\u6570\u5217\u8868 )( \u8fd4\u56de\u503c ){ \u51fd\u6570\u4f53 } - \u51fd\u6570\u540d\uff1a\u7531\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u4e0b\u5212\u7ebf\u7ec4\u6210\uff0c\u4f46\u4e0d\u80fd\u6570\u5b57\u5f00\u5934\uff1b\u540c\u4e00\u4e2a\u5305\u5185\uff0c\u51fd\u6570\u540d\u4e0d\u80fd\u91cd\u540d - \u53c2\u6570\uff1a\u7531\u53c2\u6570\u53d8\u91cf\u548c\u53d8\u91cf\u7c7b\u578b\u7ec4\u6210\uff0c\u591a\u4e2a\u53c2\u6570\u4f7f\u7528 , \u5206\u9694 - \u8fd4\u56de\u503c\uff1a\u7531\u8fd4\u56de\u53d8\u91cf\u548c\u53d8\u91cf\u7c7b\u578b\uff0c\u4e5f\u53ef\u53ea\u5199\u53d8\u91cf\u7c7b\u578b\uff0c\u591a\u4e2a\u8fd4\u56de\u503c\u5fc5\u987b\u7528 () \u5305\u88f9\uff0c\u5e76\u7528 , \u5206\u9694 - \u51fd\u6570\u4f53\uff1a\u5b9e\u73b0\u6307\u5b9a\u529f\u80fd\u7684\u4ee3\u7801 eg\uff1a\u6c42\u4e24\u6570\u4e4b\u548c func sum ( a int , b int ) int { return a + b } eg\uff1a\u65e0\u53c2\u6570\u65e0\u8fd4\u56de\u503c\u7684\u51fd\u6570 func sayHello () { fmt . Println ( \"Hello\" ) }","title":"\u5b9a\u4e49"},{"location":"Go/Basic/Golang-8-%E5%87%BD%E6%95%B0/#_2","text":"\u901a\u8fc7 \u51fd\u6570\u540d(\u53c2\u6570) \u7684\u65b9\u5f0f\u8c03\u7528\uff0c\u5982\u679c\u5b9a\u4e49\u7684\u51fd\u6570\u6ca1\u6709\u8981\u6c42\u53c2\u6570\uff0c\u5219\u8c03\u7528\u65f6\u4e0d\u9700\u8981\u7ed9\u53c2\u6570 eg\uff1a func main () { res := sum ( 1 , 3 ) fmt . Println ( res ) } \u8c03\u7528\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\u65f6\u53ef\u4ee5\u4e0d\u63a5\u53d7\u5176\u8fd4\u56de\u503c\u3002","title":"\u8c03\u7528"},{"location":"Go/Basic/Golang-8-%E5%87%BD%E6%95%B0/#_3","text":"","title":"\u53c2\u6570"},{"location":"Go/Basic/Golang-8-%E5%87%BD%E6%95%B0/#_4","text":"\u5982\u679c\u76f8\u90bb\u53d8\u91cf\u7c7b\u578b\u76f8\u540c\uff0c\u53ef\u4ee5\u53ea\u5199\u4e00\u4e2a eg\uff1a func fn ( x , y int , p , q string ) { fmt . Println ( x , y , p , q ) } x \u548c y \u5747\u4e3a int \u578b\uff0cx \u540e\u9762\u5c31\u53ef\u7701\u7565\uff1bp \u548c q \u90fd\u662f string \u578b\uff0cp \u540e\u9762\u5c31\u53ef\u4ee5\u7701\u7565","title":"\u7c7b\u578b\u7b80\u5199"},{"location":"Go/Basic/Golang-8-%E5%87%BD%E6%95%B0/#_5","text":"\u5982\u679c\u53c2\u6570\u6570\u91cf\u4e0d\u56fa\u5b9a\uff0c\u53ef\u4ee5\u5728\u7c7b\u578b\u524d\u9762\u52a0\u4e0a ... \uff0c\u4f46\u662f\u53ea\u80fd\u63a5\u6536\u8fd9\u79cd\u7c7b\u578b\u7684\u53c2\u6570\uff0c\u4e14\u6b64\u65f6\u8981\u6ce8\u610f\u7c7b\u578b\u7b80\u5199\u7684\u65b9\u6cd5 **\u6ce8\u610f\uff1a**\u548c\u56fa\u5b9a\u53c2\u6570\u642d\u914d\u65f6\uff0c\u53ef\u53d8\u53c2\u6570\u8981\u653e\u5728\u56fa\u5b9a\u53c2\u6570\u540e\u9762 func fn ( x int , y ... int ) { fmt . Println ( x ) // 1 fmt . Println ( y ) // [2 3 5] fmt . Printf ( \"%T \\n\" , y ) // []int } fn ( 1 , 2 , 3 , 5 ) // \u9519\u8bef\uff0c\u53ea\u80fd\u4f20\u9012int\u578b\uff1afn(1, 2, \"B\", \"C\") // \u9519\u8bef\uff0c\u5168\u90fd\u8981int\u578b\uff1a fn(1, \"A\", \"B\", \"C\") \u53ef\u53d8\u53c2\u6570\u5b9e\u9645\u4e0a\u662f\u901a\u8fc7\u5207\u7247\u5b9e\u73b0\u7684 \u5173\u4e8e\u7c7b\u578b\u7b80\u5199\uff1a // \u9519\u8bef func fn ( x , y ... int ) {} // \u6b63\u786e func fn ( x ... int ) {} func fn ( x int , y ... int ) {} func fn ( x , z int , y ... int ) {} \u5173\u4e8e\u53ef\u53d8\u53c2\u6570\u4f4d\u7f6e // \u9519\u8bef func fn ( y ... int , x int ) {} func fn ( x int , y ... int , s string ) {} // \u6b63\u786e func fn ( x int , y ... int ) {}","title":"\u53ef\u53d8\u53c2\u6570"},{"location":"Go/Basic/Golang-8-%E5%87%BD%E6%95%B0/#_6","text":"","title":"\u8fd4\u56de\u503c"},{"location":"Go/Basic/Golang-8-%E5%87%BD%E6%95%B0/#_7","text":"Go \u4e2d\u652f\u6301\u591a\u8fd4\u56de\u503c\uff0c\u5982\u679c\u6709\u591a\u4e2a\u8fd4\u56de\u503c\u65f6\uff0c\u5fc5\u987b\u7528 () \u5305\u88f9\u8d77\u6765 eg\uff1a func calc ( x , y int ) ( int , int ) { return x + y , x - y } \u8c03\u7528\u4e4b\u540e\u53ef\u4ee5\u63a5\u6536\u8fd4\u56de\u503c\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u63a5\u6536\uff0c\u5982\u679c\u6307\u5411\u63a5\u6536\u4e00\u4e2a\uff0c\u53e6\u4e00\u4e2a\u53ef\u4ee5\u7528\u533f\u540d\u53d8\u91cf _ \u53bb\u63a5 // \u4e24\u4e2a\u90fd\u63a5\u6536 sum , sub := calc ( 10 , 5 ) // \u4e24\u4e2a\u90fd\u4e0d\u63a5\u6536 calc ( 10 , 5 ) // \u53ea\u63a5\u6536\u4e00\u4e2a _ , sub := calc ( 10 , 5 ) sum , _ := calc ( 10 , 5 )","title":"\u591a\u8fd4\u56de\u503c"},{"location":"Go/Basic/Golang-8-%E5%87%BD%E6%95%B0/#_8","text":"\u51fd\u6570\u5b9a\u4e49\u65f6\u53ef\u4ee5\u7ed9\u8fd4\u56de\u503c\u547d\u540d\uff0c\u5e76\u5728\u51fd\u6570\u4f53\u4e2d\u76f4\u63a5\u4f7f\u7528\u8fd9\u4e9b\u53d8\u91cf\uff0c\u6700\u540e\u901a\u8fc7 return \u8fd4\u56de func calc ( x , y int ) ( sum , sub int ){ sum = x + y sub = x - y return } \u5982\u679c\u7ed9\u8fd4\u56de\u503c\u547d\u540d\u4e86\uff0c\u4f46\u662f\u53c8 return \u4e86\u522b\u7684\u53d8\u91cf\uff0c\u4ee5\u522b\u7684\u53d8\u91cf\u4e3a\u51c6 func calc ( x , y int ) ( sum int , diff int ) { sum = x + y diff = x - y mul := x * y div := x / y return mul , div } fmt . Println ( calc ( 10 , 5 )) // 50 2","title":"\u8fd4\u56de\u503c\u547d\u540d"},{"location":"Go/Basic/Golang-8-%E5%87%BD%E6%95%B0/#_9","text":"","title":"\u51fd\u6570\u8fdb\u9636"},{"location":"Go/Basic/Golang-8-%E5%87%BD%E6%95%B0/#_10","text":"","title":"\u53d8\u91cf\u4f5c\u7528\u57df"},{"location":"Go/Basic/Golang-8-%E5%87%BD%E6%95%B0/#_11","text":"\u51fd\u6570\u53ef\u4ee5\u6709\u7c7b\u578b\uff0c\u4f7f\u7528\u5173\u952e\u5b57 type \u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u7c7b\u578b eg\uff1a type calculation func ( int , int ) int \u4e0a\u9762\u7684\u4f8b\u5b50\u5b9a\u4e49\u4e86\u4e00\u4e2a calculation \u7c7b\u578b\uff0c\u5b83\u662f\u4e00\u79cd\u51fd\u6570\u7c7b\u578b\uff0c\u4e00\u79cd\u63a5\u6536\u4e24\u4e2aint\u53c2\u6570\u8fd4\u56de\u4e00\u4e2aint\u503c\u7684\u51fd\u6570\u7c7b\u578b\u3002 \u65b9\u5f0f\u6ee1\u8db3\u4e0a\u9762\u7279\u70b9\u7684\u51fd\u6570\u90fd\u662f calculation \u7c7b\u578b\u3002 eg\uff1a func add ( x int , y int ) int { return x + y } func sub ( x , y int ) int { return x - y } add() \u548c sub() \u90fd\u662f calculation \u7c7b\u578b\uff0c\u90fd\u53ef\u4ee5\u8d4b\u503c\u7ed9 calculation \u7c7b\u578b\u53d8\u91cf var c calculation c = add res := c ( 10 , 5 ) fmt . Println ( res ) // 15 s := sub fmt . Println ( s ( 20 , 55 )) // -35","title":"\u51fd\u6570\u7c7b\u578b"},{"location":"Go/Basic/Golang-8-%E5%87%BD%E6%95%B0/#_12","text":"\u5728 Go \u4e2d\uff0c\u51fd\u6570\u88ab\u770b\u4f5c\u662f\u7b2c\u4e00\u7c7b\u503c\uff0c\u8fd9\u610f\u5473\u7740\u51fd\u6570\u50cf\u53d8\u91cf\u4e00\u6837\uff0c\u6709\u7c7b\u578b\u3001\u6709\u503c\uff0c\u666e\u901a\u53d8\u91cf\u80fd\u505a\u7684\u4e8b\u51fd\u6570\u4e5f\u80fd\u505a\u3002 \u4f8b\u5982\u51fd\u6570\u7c7b\u578b\u7684\u4f8b\u5b50\uff0c\u5373\u4f7f\u4e0d\u5b9a\u4e49\u51fd\u6570\u7c7b\u578b\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5c06\u51fd\u6570\u8d4b\u503c\u7ed9\u53d8\u91cf func add ( x , y int ) int { return x + y } func main () { a := add fmt . Println ( a ( 10 , 20 )) // 30 } - \u8c03\u7528 nil \u7684\u51fd\u6570\u53d8\u91cf\u4f1a\u5bfc\u81f4 panic - \u51fd\u6570\u53d8\u91cf\u7684\u96f6\u503c nil \uff0c\u6240\u4ee5\u51fd\u6570\u53d8\u91cf\u53ef\u4ee5\u8ddf nil \u6bd4\u8f83\uff0c\u4f46\u51fd\u6570\u53d8\u91cf\u4e4b\u95f4\u4e0d\u80fd\u6bd4\u8f83\u3002 package main import \"fmt\" type processFunc func ( int ) bool // \u58f0\u660e\u4e00\u4e2a\u51fd\u6570\u7c7b\u578b func isOdd ( i int ) bool { // \u5b9a\u4e49\u8fd9\u79cd\u7c7b\u578b\u7684\u51fd\u6570 return i % 2 != 0 } func isEven ( i int ) bool { // \u5b9a\u4e49\u8fd9\u79cd\u7c7b\u578b\u7684\u51fd\u6570 return i % 2 == 0 } func filter ( slice [] int , f processFunc ) [] int { // \u63a5\u6536\u8fd9\u79cd\u7c7b\u578b\u7684\u51fd\u6570 var res [] int for _ , v := range slice { if f ( v ) { res = append ( res , v ) } } return res } func main () { s := [] int { 1 , 2 , 3 , 4 , 5 , 7 } fmt . Println ( \"s = \" , s ) // s = [1 2 3 4 5 7] odd := filter ( s , isOdd ) // \u8c03\u7528\u8fd9\u79cd\u7c7b\u578b\u7684\u51fd\u6570 even := filter ( s , isEven ) // \u8c03\u7528\u8fd9\u79cd\u7c7b\u578b\u7684\u51fd\u6570 fmt . Println ( \"Odd slice\" , odd ) // Odd slice [1 3 5 7] fmt . Println ( \"Even slice\" , even ) // Even slice [2 4] }","title":"\u51fd\u6570\u53d8\u91cf"},{"location":"Go/Basic/Golang-8-%E5%87%BD%E6%95%B0/#_13","text":"\u6ca1\u6709\u540d\u5b57\u7684\u51fd\u6570\u5c31\u53eb\u533f\u540d\u51fd\u6570 \u57fa\u672c\u8bed\u6cd5\uff1a func ( \u51fd\u6570 ) ( \u8fd4\u56de\u503c ) { \u51fd\u6570\u4f53 } \u533f\u540d\u51fd\u6570\u6ca1\u6709\u51fd\u6570\u540d\uff0c\u6240\u4ee5\u9700\u8981\u53d8\u91cf\u6765\u4fdd\u5b58\uff0c\u6216\u8005\u4f5c\u4e3a\u7acb\u5373\u6267\u884c\u51fd\u6570 func main () { // \u5c06\u533f\u540d\u51fd\u6570\u4fdd\u5b58\u5230\u53d8\u91cf add := func ( x , y int ) int { return x + y } add ( 10 , 20 ) // \u901a\u8fc7\u53d8\u91cf\u8c03\u7528\u533f\u540d\u51fd\u6570 } func main () { // \u81ea\u6267\u884c\u51fd\u6570\uff1a\u533f\u540d\u51fd\u6570\u5b9a\u4e49\u5b8c\u52a0()\u76f4\u63a5\u6267\u884c func ( x , y int ) { fmt . Println ( x + y ) }( 10 , 20 ) }","title":"\u533f\u540d\u51fd\u6570"},{"location":"Go/Basic/Golang-8-%E5%87%BD%E6%95%B0/#_14","text":"\u9ad8\u9636\u51fd\u6570\u5206\u4e3a \u51fd\u6570\u4f5c\u53c2\u6570 \u548c \u51fd\u6570\u4f5c\u8fd4\u56de\u503c","title":"\u9ad8\u9636\u51fd\u6570"},{"location":"Go/Basic/Golang-8-%E5%87%BD%E6%95%B0/#_15","text":"// \u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u4f7f\u7528\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570 // @param x int \u64cd\u4f5c\u65701 // @param y int \u64cd\u4f5c\u65702 // @param operate func(int, int) int \u64cd\u4f5c\u51fd\u6570 // @return int \u7ecf\u8fc7\u64cd\u4f5c\u51fd\u6570\u64cd\u4f5c\u7684\u7ed3\u679c func calc ( x int , y int , operate func ( int , int ) int ) int { return operate ( x , y ) } // \u5b9a\u4e49\u4e00\u4e2a\u64cd\u4f5c\u51fd\u6570 // @param x \u64cd\u4f5c\u65701 // @param y \u64cd\u4f5c\u65702 // @return \u4e24\u4e2a\u64cd\u4f5c\u6570\u76f8\u52a0\u7684\u7ed3\u679c func add ( x , y int ) int { return x + y } func main () { // \u8c03\u7528 calc \u51fd\u6570\uff0c\u628a add \u51fd\u6570\u4f20\u8fdb\u53bb res := calc ( 10 , 20 , add ) fmt . Println ( res ) // 30 }","title":"\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570"},{"location":"Go/Basic/Golang-8-%E5%87%BD%E6%95%B0/#_16","text":"func add ( x , y int ) int { return x + y } func sub ( x , y int ) int { return x - y } // \u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u6839\u636e\u4f20\u5165\u7684\u64cd\u4f5c\u7b26\u8fd4\u56de\u76f8\u5e94\u7684\u64cd\u4f5c\u51fd\u6570 // @param s string \u64cd\u4f5c\u7b26 // @return func(int, int) int, error \u64cd\u4f5c\u51fd\u6570 func do ( s string ) ( func ( int , int ) int , error ) { switch s { case \"+\" : return add , nil case \"-\" : return sub , nil default : return nil , errors . New ( \"\u975e\u6cd5\u64cd\u4f5c\u7b26\" ) } } func main () { fn , err := do ( \"+\" ) if err == nil { fmt . Println ( fn ( 10 , 20 )) // 20 } }","title":"\u51fd\u6570\u4f5c\u4e3a\u8fd4\u56de\u503c"},{"location":"Go/Basic/Golang-8-%E5%87%BD%E6%95%B0/#_17","text":"a closure is a record storing a function together with an environment . **\u95ed\u5305**\u662f\u7531**\u51fd\u6570**\u548c\u4e0e\u5176\u76f8\u5173\u7684\u5f15\u7528**\u73af\u5883**\u7ec4\u5408\u800c\u6210\u7684\u5b9e\u4f53 \u3002 \u95ed\u5305\u80fd\u5c06\u5c40\u90e8\u53d8\u91cf\u5e26\u51fa\u5176\u4f5c\u7528\u57df func adder () func () int { var x int return func () int { x ++ return x } } func main () { i := adder () fmt . Println ( i ()) // 1 fmt . Println ( i ()) // 2 fmt . Println ( i ()) // 3 } \u76f8\u5f53\u4e8e\uff1a func adder () func () int { var x int f := func () int { x ++ return x } return f } func main () { i := adder () i () // 1 i () // 2 i () // 3 } \u7b49\u4e8e\u8bf4\uff0c\u5728 adder() \u4e2d\u58f0\u660e\u7684\u53d8\u91cf x \uff0c\u672c\u8be5\u5728 adder() \u8c03\u7528\u5b8c\u5c31\u88ab\u9500\u6bc1\uff0c\u5374\u88ab\u95ed\u5305\u5e26\u51fa\u4e86 x \u7684\u4f5c\u7528\u57df\uff08adder\u51fd\u6570\u5185\uff09\uff0c\u4f7f\u5f97\u5c40\u90e8\u53d8\u91cf x \u6ca1\u6709\u88ab\u9500\u6bc1\u3002\u5373\u5c40\u90e8\u53d8\u91cf x \u9003\u9038\u4e86\uff0c\u5b83\u7684\u751f\u547d\u5468\u671f\u6ca1\u6709\u968f\u7740\u5b83\u7684\u4f5c\u7528\u57df\u7ed3\u675f\u800c\u7ed3\u675f\u3002","title":"\u95ed\u5305"},{"location":"Go/Basic/Golang-8-%E5%87%BD%E6%95%B0/#defer","text":"defer \u5c31\u662f\u5ef6\u8fdf\u7684\u610f\u601d\uff0c\u88ab defer \u5173\u952e\u5b57\u4fee\u9970\u7684\u51fd\u6570\u6216\u65b9\u6cd5\u4f1a\u5ef6\u8fdf\u6267\u884c\u3002 func main () { fmt . Println ( \"start\" ) defer fmt . Println ( 1 ) fmt . Println ( \"end\" ) } // --------------------- // Output: start end 1 \u7a0b\u5e8f\u5148\u6267\u884c\u7b2c\u4e00\u53e5\u6253\u5370\u4e86 start\uff0c\u5f80\u4e0b\u9047\u5230 defer \uff0c\u4e8e\u662f\u628a\u7b2c\u4e8c\u53e5\u5148\u538b\u5165\u6808\uff0c\u7136\u540e\u7ee7\u7eed\u6267\u884c\u7b2c\u4e09\u53e5\u6253\u5370\u4e86 end\u3002 \u518d\u7ee7\u7eed\u5f80\u4e0b\u5df2\u7ecf\u6ca1\u6709\uff0c\u51fd\u6570\u51c6\u5907\u7ed3\u675f\uff1b\u4f46\u662f\u5728\u7ed3\u675f\u4e4b\u524d\u9700\u5148\u51fa\u6808\uff0c\u4e5f\u5c31\u6267\u884c\u4e86\u7b2c\u4e8c\u53e5\uff0c\u6253\u5370\u4e86 1\u3002\u6700\u540e\u7ed3\u675f\u3002 \u8fd9\u5c31\u662f defer \u8bed\u53e5\u3002 {% noteblock info %} \u7531\u4e8e defer \u8bed\u53e5\u5ef6\u8fdf\u8c03\u7528\u7684\u7279\u6027\uff0c\u6240\u4ee5 defer \u8bed\u53e5\u80fd\u975e\u5e38\u65b9\u4fbf\u7684\u5904\u7406\u8d44\u6e90\u91ca\u653e\u7684\u95ee\u9898\u3002\u6bd4\u5982\uff1a\u5173\u95ed\u6587\u4ef6\u3001\u5173\u95ed\u6570\u636e\u5e93\u8fde\u63a5\u3001\u8d44\u6e90\u6e05\u7406\u3001\u91ca\u653e\u9501\u3001\u8bb0\u5f55\u65f6\u95f4\u7b49\u7b49\u3002 eg \uff1a func fn () { f , err := os . Open ( \"./main.go\" ) // \u6253\u5f00\u6587\u4ef6 defer f . Close () // \u51fd\u6570\u9000\u51fa\u4e4b\u524d\u5173\u95ed\u6587\u4ef6 if err != nil { fmr . Println ( err ) return } } {% endnoteblock %}","title":"defer \u8bed\u53e5"},{"location":"Go/Basic/Golang-8-%E5%87%BD%E6%95%B0/#defer_1","text":"\u5f53\u6709\u591a\u4e2a defer \u65f6\uff0c\u6309\u7167\u6808\u7684\u65b9\u5f0f\u6267\u884c\u3002\u5373\u5148 defer \u7684\u540e\u6267\u884c\u3002 eg\uff1a func fn () { fmt . Println ( \"start\" ) defer fmt . Println ( 1 ) defer fmt . Println ( 2 ) defer fmt . Println ( 3 ) fmt . Println ( \"end\" ) } // --------------------- // Output: start end 3 2 1","title":"\u591a\u4e2a defer \u7684\u6267\u884c\u987a\u5e8f"},{"location":"Go/Basic/Golang-8-%E5%87%BD%E6%95%B0/#defer_2","text":"Go \u4e2d\u7684 return \u8bed\u53e5\u5e76\u4e0d\u662f\u539f\u5b50\u64cd\u4f5c\uff0c\u5b83\u5206\u4e3a \u7ed9\u8fd4\u56de\u503c\u8d4b\u503c \u548c **RET\u6307\u4ee4**\u4e24\u6b65\u3002 \u800c defer \u8bed\u53e5\u6267\u884c\u7684\u65f6\u673a\u5728\u8fd4\u56de\u503c\u8d4b\u503c\u4e4b\u540e\uff0cRET\u6307\u4ee4\u6267\u884c\u4e4b\u524d\u3002","title":"defer \u6267\u884c\u65f6\u673a"},{"location":"Go/Basic/Golang-9-%E6%8C%87%E9%92%88/","text":"\u6307\u9488\u7684\u521b\u5efa\u4e0e\u4f7f\u7528 9-\u6307\u9488 \u00b6 \u533a\u522b\u4e8eC/C++\u4e2d\u7684\u6307\u9488\uff0cGo\u4e2d\u7684\u6307\u9488\u4e0d\u80fd\u8fdb\u884c\u504f\u79fb\u548c\u8fd0\u7b97\uff0c\u662f\u5b89\u5168\u6307\u9488\uff0c \u4efb\u4f55\u7a0b\u5e8f\u6570\u636e\u8f7d\u5165\u5185\u5b58\u540e\uff0c\u5728\u5185\u5b58\u90fd\u6709\u4ed6\u4eec\u7684\u5730\u5740\uff0c\u8fd9\u5c31\u662f\u6307\u9488\u3002 \u4e3a\u4e86\u4fdd\u5b58\u4e00\u4e2a\u6570\u636e\u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740\uff0c\u6211\u4eec\u5c31\u9700\u8981\u6307\u9488\u3002 Go \u4e2d\u7684\u6307\u9488\u64cd\u4f5c\u975e\u5e38\u7b80\u5355\uff1a & \u53d6\u5730\u5740\u7b26\u3001 * \u6839\u636e\u5730\u5740\u53d6\u503c\u3002 \u5b9a\u4e49\u6307\u9488\u3001\u6307\u9488\u53d6\u5730\u5740 \u00b6 {% note warning, \u6ce8\u610f\uff1a\u6307\u9488\u662f\u503c\u7c7b\u578b\uff01\uff01\uff01 %} var identifier * T var identifier * T = & variable identifier := & variable identifier \uff1a\u6307\u9488\u540d\u3001 T \u6307\u9488\u57fa\u7c7b\u578b\u3001 *T \u67d0\u7c7b\u578b\u6307\u9488\u3001 variable \uff1a\u53d8\u91cf\u3001 &variable \uff1a\u53d6\u53d8\u91cf\u5730\u5740 Go \u4e2d\u7684\u503c\u7c7b\u578b\uff08int\u3001float\u3001bool\u3001string\u3001\u6570\u7ec4\u3001struct\u7ed3\u6784\u4f53\uff09\u90fd\u6709\u5bf9\u5e94\u7c7b\u578b\u6307\u9488\uff0c\u5982 *int\u3001*float\u3001*string\u3001*bool\u3001*[5]int \u3002 func main () { i := 1 var p * int = & i fmt . Printf ( \"i: %d \\n\" , i ) // i: 1 fmt . Printf ( \"iaddr: %p \\n\" , & i ) // addr: 0xc000012090 fmt . Printf ( \"p: %p \\n\" , p ) // p: 0xc000012090 fmt . Printf ( \"paddr: %p \\n\" , & p ) // addr: 0xc000006028 fmt . Printf ( \"pint Type: %T \\n\" , p ) // pint Type: *int } \u6307\u9488\u53d6\u503c \u00b6 \u5b9a\u4e49\u6307\u9488\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u5bf9\u6307\u9488\u8fdb\u884c\u64cd\u4f5c\u4e86\u3002 \u6307\u9488\u7684\u64cd\u4f5c\u6709\u4e24\u79cd\uff1a & \u53d6\u5730\u5740\u3001 * \u6839\u636e\u5730\u5740\u53d6\u503c func main () { // \u6307\u9488\u53d6\u503c a := 10 b := & a fmt . Println ( b ) // b \u4e2d\u4fdd\u5b58\u7740 a \u7684\u5730\u5740 fmt . Println ( & a ) // \u53d6 a \u7684\u5730\u5740 fmt . Println ( a ) // a \u7684\u503c fmt . Println ( * b ) // \u53d6 b } // ------------------------------------ // Output: 0xc000012090 0xc000012090 10 10 \u53d6\u5730\u5740\u64cd\u4f5c\u7b26 & \u548c\u53d6\u503c\u64cd\u4f5c\u7b26 * \u662f\u4e00\u5bf9\u4e92\u8865\u64cd\u4f5c\u7b26\uff0c & \u53d6\u51fa\u5730\u5740\uff0c * \u6839\u636e\u5730\u5740\u53d6\u51fa\u5730\u5740\u6307\u5411\u7684\u503c\u3002 \u53d8\u91cf\u3001\u6307\u9488\u5730\u5740\u3001\u6307\u9488\u53d8\u91cf\u3001\u53d6\u5730\u5740\u3001\u53d6\u503c\u7684\u76f8\u4e92\u5173\u7cfb\u548c\u7279\u6027\u5982\u4e0b\uff1a \u5bf9\u53d8\u91cf\u8fdb\u884c\u53d6\u5730\u5740\uff08&\uff09\u64cd\u4f5c\uff0c\u53ef\u4ee5\u83b7\u5f97\u8fd9\u4e2a\u53d8\u91cf\u7684\u6307\u9488\u53d8\u91cf\u3002 \u6307\u9488\u53d8\u91cf\u7684\u503c\u662f\u6307\u9488\u5730\u5740\u3002 \u5bf9\u6307\u9488\u53d8\u91cf\u8fdb\u884c\u53d6\u503c\uff08*\uff09\u64cd\u4f5c\uff0c\u53ef\u4ee5\u83b7\u5f97\u6307\u9488\u53d8\u91cf\u6307\u5411\u7684\u539f\u53d8\u91cf\u7684\u503c\u3002 \u7ed3\u6784\u4f53\u6307\u9488 \u00b6 \u7ed3\u6784\u4f53\u6307\u9488\u8bbf\u95ee\u7ed3\u6784\u4f53\u5b57\u6bb5 \u540c \u7ed3\u6784\u4f53\u53d8\u91cf\u8bbf\u95ee\u7ed3\u6784\u4f53\u5b57\u6bb5\u4e00\u6837\uff0c\u4f7f\u7528 . \u70b9\u64cd\u4f5c\u7b26\uff0cGo \u6ca1\u6709 -> \u64cd\u4f5c\u7b26\u3002 eg: type User struct { // \u5b9a\u4e49\u7ed3\u6784\u4f53 name string age int } Boii := User { // \u5b9a\u4e49\u7ed3\u6784\u4f53\u53d8\u91cf name : \"Boii\" , age : 18 } p := & Boii // \u5b9a\u4e49\u7ed3\u6784\u4f53\u6307\u9488 fmt . Println ( p . name ) // \u7528 . \u70b9\u64cd\u4f5c\u7b26\u8bbf\u95ee\u6210\u5458 Boii \u6307\u9488\u505a\u5f62\u53c2 \u00b6 func fn1 ( x int ) { x = 100 } func fn2 ( x * int ) { * x = 100 } func main () { var a int = 10 fn1 ( a ) fmt . Println ( a ) // 10 var b * int = & a fn2 ( b ) fmt . Println ( a ) // 100 } \u6307\u9488\u505a\u8fd4\u56de\u503c \u00b6 Go \u5141\u8bb8\u4f7f\u7528\u201c\u6808\u9003\u9038\u201d\u673a\u5236\u5c06\u5c40\u90e8\u53d8\u91cf\u7684\u7a7a\u95f4\u5206\u914d\u5728\u5806\u4e0a\u3002 \u4f7f\u7528\u8fd9\u79cd\u673a\u5236\uff0c\u9700\u8981\u8fd4\u56de\u6307\u9488 eg\uff1a func add ( a , b int ) * int { sum := a + b return & sum } func main () { psum := add ( 10 , 20 ) fmt . Println ( psum ) // 0xc000012090 fmt . Println ( * psum ) // 30 } new \u548c make \u00b6 new \u00b6 new \u662f\u4e00\u4e2a\u5185\u7f6e\u51fd\u6570\uff0c\u5b83\u7684\u51fd\u6570\u7b7e\u540d\u5982\u4e0b\uff1a func new ( Type ) * Type Type \u8868\u793a\u7c7b\u578b\uff0cnew\u51fd\u6570\u53ea\u63a5\u6536\u4e00\u4e2a\u53c2\u6570\uff0c\u8fd9\u4e2a\u53c2\u6570\u53ea\u80fd\u662f\u7c7b\u578b *Type \u8868\u793a\u7c7b\u578b\u6307\u9488\uff0cnew \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u8be5\u7c7b\u578b\u5185\u5b58\u5730\u5740\u7684\u6307\u9488 new\u51fd\u6570\u53ef\u4ee5\u63a5\u53d7\u6240\u6709\u7c7b\u578b\uff0c\u4f7f\u7528new\u51fd\u6570\u53ef\u4ee5\u5f97\u5230\u7c7b\u578b\u7684\u6307\u9488\uff0c\u5e76\u4e14\u8fd9\u4e2a\u6307\u9488\u6307\u5411\u7684\u5185\u5b58\u5730\u5740\u4e2d\u5b58\u7740\u8be5\u7c7b\u578b\u7684\u96f6\u503c\u3002 func main () { a := new ( int ) b := new ([ 5 ] int ) c := new ([] string ) d := new ( map [ int ] string ) fmt . Printf ( \"a type: %T \\n\" , a ) // a type: *int fmt . Printf ( \"b type: %T \\n\" , b ) // b type: *[5]int fmt . Printf ( \"c type: %T \\n\" , c ) // c type: *[]string fmt . Printf ( \"d type: %T \\n\" , d ) // d type: *map[int]string fmt . Println ( * a ) // 0 fmt . Println ( * b ) // [0 0 0 0 0] fmt . Println ( * c ) // [] fmt . Println ( * d ) // map[] } new \u51fd\u6570\u4f1a\u5f00\u8f9f\u4e00\u5757\u7a7a\u95f4\uff0c\u7136\u540e\u628a\u8fd9\u5757\u7a7a\u95f4\u7684\u5730\u5740\u8fd4\u56de\u51fa\u53bb\uff0c\u8fd9\u6837\u5916\u9762\u7684\u6307\u9488\u53d8\u91cf\uff08a\u3001b\u3001c\u3001d\uff09\u5c31\u53ef\u4ee5\u64cd\u4f5c\u4e86\u3002 \u5982\u679c\u4ec5\u4ec5\u53ea\u662f\u58f0\u660e\u4e00\u4e2a\u6307\u9488\u53d8\u91cf\uff0c\u800c\u6ca1\u6709\u5f00\u8f9f\u5185\u5b58\u7a7a\u95f4\uff0c\u8fd9\u4e2a\u6307\u9488\u53d8\u91cf\u662f\u65e0\u6cd5\u4f7f\u7528\u7684\u3002 \u4ee5\u4e0b\u4e3a\u9519\u8bef\u793a\u4f8b\uff1a func main () { var i * int fmt . Println ( i ) * i = 10 // \u8fd9\u91cc\u4f1a\u5f15\u53d1 panic } // ------------------------------------ // Output: < nil > panic : runtime error : invalid memory address or nil pointer dereference [ signal 0xc0000005 code = 0x1 addr = 0x0 pc = 0x97581b ] goroutine 1 [ running ]: main . main () e : /--- CODE / GO / src / Hello / main . go : 23 + 0x7b exit status 2 \u4ece\u4e0a\u9762\u4f8b\u5b50\u53ef\u4ee5\u770b\u5230\uff0c\u58f0\u660e\u4e86\u4e00\u4e2a\u6307\u9488\uff0c\u9ed8\u8ba4\u503c\u4e3a nil \u3002 \u5728\u6ca1\u6709\u5206\u914d\u5185\u5b58\u7684\u60c5\u51b5\u4e0b\u53bb\u4f7f\u7528\u6307\u9488\uff0c\u4f1a\u5bfc\u81f4 panic \u3002 \u4ee5\u4e0b\u4e3a\u6b63\u786e\u793a\u4f8b\uff1a func main () { var i * int // \u58f0\u660e\u4e00\u4e2a\u6307\u9488\u53d8\u91cf fmt . Println ( i ) // <nil> | \u9ed8\u8ba4\u503c\u4e3a nil i = new ( int ) // \u7ed9\u8fd9\u4e2a\u6307\u9488\u5206\u914d\u5185\u5b58 * i = 10 // \u5b58\u4e2a\u503c\u8fdb\u53bb fmt . Println ( i ) // 0xc000012098 | \u5df2\u7ecf\u6709\u5185\u5b58\u7a7a\u95f4\u4e86 fmt . Println ( * i ) // 10 | \u6b63\u5e38~~ } make \u00b6 make \u4e5f\u662f\u7528\u4e8e\u5206\u914d\u5185\u5b58\uff0c\u4f46\u662f\u53ea\u80fd\u7528\u4e8e slice\u5207\u7247\u3001map\u5b57\u5178\u3001chan\u901a\u9053 \u7684\u5185\u5b58\u521b\u5efa\uff0c\u800c\u4e14\u5b83\u8fd4\u56de\u7684\u7c7b\u578b \u5c31\u662f\u8fd9\u4e09\u4e2a\u7c7b\u578b\u672c\u8eab\uff0c\u56e0\u4e3a\u8fd9\u4e09\u79cd\u7c7b\u578b\u5c31\u662f\u5f15\u7528\u7c7b\u578b\uff0c\u6240\u4ee5\u6ca1\u5fc5\u8981\u8fd4\u56de\u4ed6\u4eec\u7684\u6307\u9488\u4e86\u3002 make \u7684\u51fd\u6570\u7b7e\u540d\u5982\u4e0b\uff1a func make ( t Type , size ... IntegerType ) Type \u5728\u4f7f\u7528 slice\u3001map\u3001chan \u7684\u65f6\u5019\uff0c\u90fd\u9700\u8981\u4f7f\u7528 make \u8fdb\u884c\u521d\u59cb\u5316\uff0c\u7136\u540e\u624d\u53ef\u4ee5\u5bf9\u5b83\u4eec\u8fdb\u884c\u64cd\u4f5c func main () { c := new ([] string ) s := make ([] string , 10 ) d := new ( map [ int ] string ) e := make ( map [ int ] string ) fmt . Printf ( \"c type: %T \\n\" , c ) // c type: *[]string | string\u5207\u7247\u7c7b\u578b\u7684\u6307\u9488 fmt . Printf ( \"s type: %T \\n\" , s ) // s type: []string | string\u5207\u7247 fmt . Printf ( \"d type: %T \\n\" , d ) // d type: *map[int]string | map\u7c7b\u578b\u7684\u6307\u9488 fmt . Printf ( \"e type: %T \\n\" , e ) // e type: map[int]string | map } new \u548c make \u7684\u533a\u522b \u00b6 new \u8fd4\u56de\u7684\u662f**\u6307\u9488**\uff0cmake\u8fd4\u56de\u7684\u662f**\u7c7b\u578b\u672c\u8eab** new \u53ef\u4ee5\u7ed9\u6240\u6709\u7c7b\u578b\u7684**\u6307\u9488\u5f00\u8f9f\u7a7a\u95f4**\uff0cmake \u53ea\u80fd\u7528\u4e8e slice\u3001map\u3001chan \u7684**\u521d\u59cb\u5316**","title":"9.\u6307\u9488"},{"location":"Go/Basic/Golang-9-%E6%8C%87%E9%92%88/#9-","text":"\u533a\u522b\u4e8eC/C++\u4e2d\u7684\u6307\u9488\uff0cGo\u4e2d\u7684\u6307\u9488\u4e0d\u80fd\u8fdb\u884c\u504f\u79fb\u548c\u8fd0\u7b97\uff0c\u662f\u5b89\u5168\u6307\u9488\uff0c \u4efb\u4f55\u7a0b\u5e8f\u6570\u636e\u8f7d\u5165\u5185\u5b58\u540e\uff0c\u5728\u5185\u5b58\u90fd\u6709\u4ed6\u4eec\u7684\u5730\u5740\uff0c\u8fd9\u5c31\u662f\u6307\u9488\u3002 \u4e3a\u4e86\u4fdd\u5b58\u4e00\u4e2a\u6570\u636e\u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740\uff0c\u6211\u4eec\u5c31\u9700\u8981\u6307\u9488\u3002 Go \u4e2d\u7684\u6307\u9488\u64cd\u4f5c\u975e\u5e38\u7b80\u5355\uff1a & \u53d6\u5730\u5740\u7b26\u3001 * \u6839\u636e\u5730\u5740\u53d6\u503c\u3002","title":"9-\u6307\u9488"},{"location":"Go/Basic/Golang-9-%E6%8C%87%E9%92%88/#_1","text":"{% note warning, \u6ce8\u610f\uff1a\u6307\u9488\u662f\u503c\u7c7b\u578b\uff01\uff01\uff01 %} var identifier * T var identifier * T = & variable identifier := & variable identifier \uff1a\u6307\u9488\u540d\u3001 T \u6307\u9488\u57fa\u7c7b\u578b\u3001 *T \u67d0\u7c7b\u578b\u6307\u9488\u3001 variable \uff1a\u53d8\u91cf\u3001 &variable \uff1a\u53d6\u53d8\u91cf\u5730\u5740 Go \u4e2d\u7684\u503c\u7c7b\u578b\uff08int\u3001float\u3001bool\u3001string\u3001\u6570\u7ec4\u3001struct\u7ed3\u6784\u4f53\uff09\u90fd\u6709\u5bf9\u5e94\u7c7b\u578b\u6307\u9488\uff0c\u5982 *int\u3001*float\u3001*string\u3001*bool\u3001*[5]int \u3002 func main () { i := 1 var p * int = & i fmt . Printf ( \"i: %d \\n\" , i ) // i: 1 fmt . Printf ( \"iaddr: %p \\n\" , & i ) // addr: 0xc000012090 fmt . Printf ( \"p: %p \\n\" , p ) // p: 0xc000012090 fmt . Printf ( \"paddr: %p \\n\" , & p ) // addr: 0xc000006028 fmt . Printf ( \"pint Type: %T \\n\" , p ) // pint Type: *int }","title":"\u5b9a\u4e49\u6307\u9488\u3001\u6307\u9488\u53d6\u5730\u5740"},{"location":"Go/Basic/Golang-9-%E6%8C%87%E9%92%88/#_2","text":"\u5b9a\u4e49\u6307\u9488\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u5bf9\u6307\u9488\u8fdb\u884c\u64cd\u4f5c\u4e86\u3002 \u6307\u9488\u7684\u64cd\u4f5c\u6709\u4e24\u79cd\uff1a & \u53d6\u5730\u5740\u3001 * \u6839\u636e\u5730\u5740\u53d6\u503c func main () { // \u6307\u9488\u53d6\u503c a := 10 b := & a fmt . Println ( b ) // b \u4e2d\u4fdd\u5b58\u7740 a \u7684\u5730\u5740 fmt . Println ( & a ) // \u53d6 a \u7684\u5730\u5740 fmt . Println ( a ) // a \u7684\u503c fmt . Println ( * b ) // \u53d6 b } // ------------------------------------ // Output: 0xc000012090 0xc000012090 10 10 \u53d6\u5730\u5740\u64cd\u4f5c\u7b26 & \u548c\u53d6\u503c\u64cd\u4f5c\u7b26 * \u662f\u4e00\u5bf9\u4e92\u8865\u64cd\u4f5c\u7b26\uff0c & \u53d6\u51fa\u5730\u5740\uff0c * \u6839\u636e\u5730\u5740\u53d6\u51fa\u5730\u5740\u6307\u5411\u7684\u503c\u3002 \u53d8\u91cf\u3001\u6307\u9488\u5730\u5740\u3001\u6307\u9488\u53d8\u91cf\u3001\u53d6\u5730\u5740\u3001\u53d6\u503c\u7684\u76f8\u4e92\u5173\u7cfb\u548c\u7279\u6027\u5982\u4e0b\uff1a \u5bf9\u53d8\u91cf\u8fdb\u884c\u53d6\u5730\u5740\uff08&\uff09\u64cd\u4f5c\uff0c\u53ef\u4ee5\u83b7\u5f97\u8fd9\u4e2a\u53d8\u91cf\u7684\u6307\u9488\u53d8\u91cf\u3002 \u6307\u9488\u53d8\u91cf\u7684\u503c\u662f\u6307\u9488\u5730\u5740\u3002 \u5bf9\u6307\u9488\u53d8\u91cf\u8fdb\u884c\u53d6\u503c\uff08*\uff09\u64cd\u4f5c\uff0c\u53ef\u4ee5\u83b7\u5f97\u6307\u9488\u53d8\u91cf\u6307\u5411\u7684\u539f\u53d8\u91cf\u7684\u503c\u3002","title":"\u6307\u9488\u53d6\u503c"},{"location":"Go/Basic/Golang-9-%E6%8C%87%E9%92%88/#_3","text":"\u7ed3\u6784\u4f53\u6307\u9488\u8bbf\u95ee\u7ed3\u6784\u4f53\u5b57\u6bb5 \u540c \u7ed3\u6784\u4f53\u53d8\u91cf\u8bbf\u95ee\u7ed3\u6784\u4f53\u5b57\u6bb5\u4e00\u6837\uff0c\u4f7f\u7528 . \u70b9\u64cd\u4f5c\u7b26\uff0cGo \u6ca1\u6709 -> \u64cd\u4f5c\u7b26\u3002 eg: type User struct { // \u5b9a\u4e49\u7ed3\u6784\u4f53 name string age int } Boii := User { // \u5b9a\u4e49\u7ed3\u6784\u4f53\u53d8\u91cf name : \"Boii\" , age : 18 } p := & Boii // \u5b9a\u4e49\u7ed3\u6784\u4f53\u6307\u9488 fmt . Println ( p . name ) // \u7528 . \u70b9\u64cd\u4f5c\u7b26\u8bbf\u95ee\u6210\u5458 Boii","title":"\u7ed3\u6784\u4f53\u6307\u9488"},{"location":"Go/Basic/Golang-9-%E6%8C%87%E9%92%88/#_4","text":"func fn1 ( x int ) { x = 100 } func fn2 ( x * int ) { * x = 100 } func main () { var a int = 10 fn1 ( a ) fmt . Println ( a ) // 10 var b * int = & a fn2 ( b ) fmt . Println ( a ) // 100 }","title":"\u6307\u9488\u505a\u5f62\u53c2"},{"location":"Go/Basic/Golang-9-%E6%8C%87%E9%92%88/#_5","text":"Go \u5141\u8bb8\u4f7f\u7528\u201c\u6808\u9003\u9038\u201d\u673a\u5236\u5c06\u5c40\u90e8\u53d8\u91cf\u7684\u7a7a\u95f4\u5206\u914d\u5728\u5806\u4e0a\u3002 \u4f7f\u7528\u8fd9\u79cd\u673a\u5236\uff0c\u9700\u8981\u8fd4\u56de\u6307\u9488 eg\uff1a func add ( a , b int ) * int { sum := a + b return & sum } func main () { psum := add ( 10 , 20 ) fmt . Println ( psum ) // 0xc000012090 fmt . Println ( * psum ) // 30 }","title":"\u6307\u9488\u505a\u8fd4\u56de\u503c"},{"location":"Go/Basic/Golang-9-%E6%8C%87%E9%92%88/#new-make","text":"","title":"new \u548c make"},{"location":"Go/Basic/Golang-9-%E6%8C%87%E9%92%88/#new","text":"new \u662f\u4e00\u4e2a\u5185\u7f6e\u51fd\u6570\uff0c\u5b83\u7684\u51fd\u6570\u7b7e\u540d\u5982\u4e0b\uff1a func new ( Type ) * Type Type \u8868\u793a\u7c7b\u578b\uff0cnew\u51fd\u6570\u53ea\u63a5\u6536\u4e00\u4e2a\u53c2\u6570\uff0c\u8fd9\u4e2a\u53c2\u6570\u53ea\u80fd\u662f\u7c7b\u578b *Type \u8868\u793a\u7c7b\u578b\u6307\u9488\uff0cnew \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u8be5\u7c7b\u578b\u5185\u5b58\u5730\u5740\u7684\u6307\u9488 new\u51fd\u6570\u53ef\u4ee5\u63a5\u53d7\u6240\u6709\u7c7b\u578b\uff0c\u4f7f\u7528new\u51fd\u6570\u53ef\u4ee5\u5f97\u5230\u7c7b\u578b\u7684\u6307\u9488\uff0c\u5e76\u4e14\u8fd9\u4e2a\u6307\u9488\u6307\u5411\u7684\u5185\u5b58\u5730\u5740\u4e2d\u5b58\u7740\u8be5\u7c7b\u578b\u7684\u96f6\u503c\u3002 func main () { a := new ( int ) b := new ([ 5 ] int ) c := new ([] string ) d := new ( map [ int ] string ) fmt . Printf ( \"a type: %T \\n\" , a ) // a type: *int fmt . Printf ( \"b type: %T \\n\" , b ) // b type: *[5]int fmt . Printf ( \"c type: %T \\n\" , c ) // c type: *[]string fmt . Printf ( \"d type: %T \\n\" , d ) // d type: *map[int]string fmt . Println ( * a ) // 0 fmt . Println ( * b ) // [0 0 0 0 0] fmt . Println ( * c ) // [] fmt . Println ( * d ) // map[] } new \u51fd\u6570\u4f1a\u5f00\u8f9f\u4e00\u5757\u7a7a\u95f4\uff0c\u7136\u540e\u628a\u8fd9\u5757\u7a7a\u95f4\u7684\u5730\u5740\u8fd4\u56de\u51fa\u53bb\uff0c\u8fd9\u6837\u5916\u9762\u7684\u6307\u9488\u53d8\u91cf\uff08a\u3001b\u3001c\u3001d\uff09\u5c31\u53ef\u4ee5\u64cd\u4f5c\u4e86\u3002 \u5982\u679c\u4ec5\u4ec5\u53ea\u662f\u58f0\u660e\u4e00\u4e2a\u6307\u9488\u53d8\u91cf\uff0c\u800c\u6ca1\u6709\u5f00\u8f9f\u5185\u5b58\u7a7a\u95f4\uff0c\u8fd9\u4e2a\u6307\u9488\u53d8\u91cf\u662f\u65e0\u6cd5\u4f7f\u7528\u7684\u3002 \u4ee5\u4e0b\u4e3a\u9519\u8bef\u793a\u4f8b\uff1a func main () { var i * int fmt . Println ( i ) * i = 10 // \u8fd9\u91cc\u4f1a\u5f15\u53d1 panic } // ------------------------------------ // Output: < nil > panic : runtime error : invalid memory address or nil pointer dereference [ signal 0xc0000005 code = 0x1 addr = 0x0 pc = 0x97581b ] goroutine 1 [ running ]: main . main () e : /--- CODE / GO / src / Hello / main . go : 23 + 0x7b exit status 2 \u4ece\u4e0a\u9762\u4f8b\u5b50\u53ef\u4ee5\u770b\u5230\uff0c\u58f0\u660e\u4e86\u4e00\u4e2a\u6307\u9488\uff0c\u9ed8\u8ba4\u503c\u4e3a nil \u3002 \u5728\u6ca1\u6709\u5206\u914d\u5185\u5b58\u7684\u60c5\u51b5\u4e0b\u53bb\u4f7f\u7528\u6307\u9488\uff0c\u4f1a\u5bfc\u81f4 panic \u3002 \u4ee5\u4e0b\u4e3a\u6b63\u786e\u793a\u4f8b\uff1a func main () { var i * int // \u58f0\u660e\u4e00\u4e2a\u6307\u9488\u53d8\u91cf fmt . Println ( i ) // <nil> | \u9ed8\u8ba4\u503c\u4e3a nil i = new ( int ) // \u7ed9\u8fd9\u4e2a\u6307\u9488\u5206\u914d\u5185\u5b58 * i = 10 // \u5b58\u4e2a\u503c\u8fdb\u53bb fmt . Println ( i ) // 0xc000012098 | \u5df2\u7ecf\u6709\u5185\u5b58\u7a7a\u95f4\u4e86 fmt . Println ( * i ) // 10 | \u6b63\u5e38~~ }","title":"new"},{"location":"Go/Basic/Golang-9-%E6%8C%87%E9%92%88/#make","text":"make \u4e5f\u662f\u7528\u4e8e\u5206\u914d\u5185\u5b58\uff0c\u4f46\u662f\u53ea\u80fd\u7528\u4e8e slice\u5207\u7247\u3001map\u5b57\u5178\u3001chan\u901a\u9053 \u7684\u5185\u5b58\u521b\u5efa\uff0c\u800c\u4e14\u5b83\u8fd4\u56de\u7684\u7c7b\u578b \u5c31\u662f\u8fd9\u4e09\u4e2a\u7c7b\u578b\u672c\u8eab\uff0c\u56e0\u4e3a\u8fd9\u4e09\u79cd\u7c7b\u578b\u5c31\u662f\u5f15\u7528\u7c7b\u578b\uff0c\u6240\u4ee5\u6ca1\u5fc5\u8981\u8fd4\u56de\u4ed6\u4eec\u7684\u6307\u9488\u4e86\u3002 make \u7684\u51fd\u6570\u7b7e\u540d\u5982\u4e0b\uff1a func make ( t Type , size ... IntegerType ) Type \u5728\u4f7f\u7528 slice\u3001map\u3001chan \u7684\u65f6\u5019\uff0c\u90fd\u9700\u8981\u4f7f\u7528 make \u8fdb\u884c\u521d\u59cb\u5316\uff0c\u7136\u540e\u624d\u53ef\u4ee5\u5bf9\u5b83\u4eec\u8fdb\u884c\u64cd\u4f5c func main () { c := new ([] string ) s := make ([] string , 10 ) d := new ( map [ int ] string ) e := make ( map [ int ] string ) fmt . Printf ( \"c type: %T \\n\" , c ) // c type: *[]string | string\u5207\u7247\u7c7b\u578b\u7684\u6307\u9488 fmt . Printf ( \"s type: %T \\n\" , s ) // s type: []string | string\u5207\u7247 fmt . Printf ( \"d type: %T \\n\" , d ) // d type: *map[int]string | map\u7c7b\u578b\u7684\u6307\u9488 fmt . Printf ( \"e type: %T \\n\" , e ) // e type: map[int]string | map }","title":"make"},{"location":"Go/Basic/Golang-9-%E6%8C%87%E9%92%88/#new-make_1","text":"new \u8fd4\u56de\u7684\u662f**\u6307\u9488**\uff0cmake\u8fd4\u56de\u7684\u662f**\u7c7b\u578b\u672c\u8eab** new \u53ef\u4ee5\u7ed9\u6240\u6709\u7c7b\u578b\u7684**\u6307\u9488\u5f00\u8f9f\u7a7a\u95f4**\uff0cmake \u53ea\u80fd\u7528\u4e8e slice\u3001map\u3001chan \u7684**\u521d\u59cb\u5316**","title":"new \u548c make \u7684\u533a\u522b"},{"location":"Go/Basic/Golang-Go-Module/","text":"\u5f00\u542f Go Module \u6765\u7ba1\u7406\u4f60\u7684\u6a21\u5757 Go Module \u00b6 \u542f\u7528 GO111MODULE \u00b6 \u7248\u672c\u8981\u6c42\uff1ago 1.11+\uff0c1.13\u8d77\u9ed8\u8ba4\u5f00\u542f \u542f\u7528 go module \u652f\u6301\u9996\u5148\u8981\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\uff0c\u6709\u4e09\u4e2a\u53ef\u9009\u503c\uff1a{% span blue, auto %}\u3001{% span green, on %}\u3001{% span red, off %}\uff0c\u9ed8\u8ba4\u662f {% span blue, auto %}\u3002 GO111MODULE=off \u7981\u7528\u6a21\u5757\u652f\u6301\uff0c\u7f16\u8bd1\u65f6\u4f1a\u4ece GOPATH \u548c vendor \u6587\u4ef6\u5939\u4e2d\u67e5\u627e\u5305\u3002 GO111MODULE=on \u5f00\u542f\u6a21\u5757\u652f\u6301\uff0c\u7f16\u8bd1\u65f6\u4f1a\u5ffd\u7565 GOPATH \u548c vendor \u6587\u4ef6\u5939\uff0c\u53ea\u6839\u636e go.mod \u4e0b\u8f7d\u4f9d\u8d56\u3002 GO111MODULE=auto \uff0c\u5f53\u9879\u76ee\u5728 $GOPATH/src \u5916\u4e14\u9879\u76ee\u6839\u76ee\u5f55\u6709 go.mod \u6587\u4ef6\u65f6\uff0c\u5f00\u542f\u6a21\u5757\u652f\u6301\u3002 \u8bbe\u7f6e GO111MODULE=on \u4e4b\u540e\u5c31\u53ef\u4ee5\u4f7f\u7528 go module \u4e86\uff0c\u4ee5\u540e\u5c31\u6ca1\u5fc5\u8981\u5728 GOPATH \u4e2d\u521b\u5efa\u9879\u76ee\u4e86\u3002 \u4f7f\u7528 go module \u7ba1\u7406\u4f9d\u8d56\u540e\u4f1a\u5728\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u751f\u6210\u4e24\u4e2a\u6587\u4ef6 go.mod \u548c go.sum \u3002 \u5f00\u542f\u65b9\u5f0f\uff1a - windows\uff1a\u5728\u73af\u5883\u53d8\u91cf\u4e2d\u6dfb\u52a0\u4e00\u6761\u503c Linux\uff1a\u76f4\u63a5\u6267\u884c\u547d\u4ee4\u5230 /etc/profile \u6216 $HOME/.profile $ echo \"export GO111MODULE=auto\" >> /etc/profile \u6216\u8005 $ go env - w GO111MODULE = auto go mod \u547d\u4ee4 \u00b6 \u5e38\u7528 go mod \u547d\u4ee4\u5982\u4e0b\uff1a go mod init \u521d\u59cb\u5316\u5f53\u524d\u6587\u4ef6\u5939\uff0c\u521b\u5efa go.mod \u6587\u4ef6 go mod download \u4e0b\u8f7d\u4f9d\u8d56\u7684 module \u5230\u672c\u5730cache\uff08\u9ed8\u8ba4\u4e3a $GOPATH/pkg/mod\uff0c\u4f7f\u7528\u547d\u4ee4 go env GOMODCACHE \u53ef\u67e5\u770b\uff09 go mod edit \u7f16\u8f91 go.mod \u6587\u4ef6 go mod graph \u6253\u5370\u6a21\u5757\u4f9d\u8d56\u56fe go mod tidy \u589e\u52a0\u7f3a\u5c11\u7684 module\uff0c\u5220\u9664\u65e0\u7528\u7684 module go mod vendor \u5c06\u4f9d\u8d56\u590d\u5236\u5230 vendor \u4e0b\uff0cvendor \u76ee\u5f55\u4e0d\u5b58\u5728\u65f6\u4f1a\u81ea\u52a8\u521b\u5efa go mod verify \u68c0\u9a8c\u4f9d\u8d56 go mod why \u89e3\u91ca\u4e3a\u4ec0\u4e48\u8981\u4f9d\u8d56 go mod init \u521d\u59cb\u5316 \u00b6 \u521d\u59cb\u5316\u5f53\u524d\u6587\u4ef6\u5939\uff0c\u521b\u5efa go.mod \u6587\u4ef6\u3002 \u7b2c\u4e00\u6b65\uff0c\u5207\u6362\u5230\u9879\u76ee\u76ee\u5f55\u4e2d \u7b2c\u4e8c\u6b65\uff0c\u6267\u884c\u547d\u4ee4 go mod init module\u540d eg\uff1a go mod tidy \u6574\u7406\u4f9d\u8d56 \u00b6 \u6211\u4eec\u5728\u4ee3\u7801\u4e2d\u5220\u9664\u4f9d\u8d56\u4ee3\u7801\u540e\uff0c\u76f8\u5173\u7684\u4f9d\u8d56\u5e93\u5e76\u4e0d\u4f1a\u5728 go.mod \u6587\u4ef6\u4e2d\u81ea\u52a8\u79fb\u9664\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 go mod tidy \u547d\u4ee4\u66f4\u65b0 go.mod \u4e2d\u7684\u4f9d\u8d56\u5173\u7cfb\u3002 $ go mod tidy go mod edit \u7f16\u8f91mod\u6587\u4ef6 \u00b6 \u683c\u5f0f\u5316 \u00b6 \u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u624b\u52a8\u4fee\u6539go.mod\u6587\u4ef6\uff0c\u6240\u4ee5\u6709\u4e9b\u65f6\u5019\u9700\u8981\u683c\u5f0f\u5316\u8be5\u6587\u4ef6\u3002Go\u63d0\u4f9b\u4e86\u4e00\u4e0b\u547d\u4ee4\uff1a $ go mod edit -fmt \u6dfb\u52a0\u4f9d\u8d56\u9879 \u00b6 $ go mod edit -require = \u8981\u6dfb\u52a0\u7684\u6a21\u5757 eg\uff1a $ go mod edit -require = rsc.io/quote \u79fb\u9664\u4f9d\u8d56\u9879 \u00b6 $ go mod edit -droprequire = \u8981\u79fb\u9664\u7684\u6a21\u5757 eg\uff1a $ go mod edit -require = github.com/sirupsen/logrus@v1.7.1 go get \u00b6 \u5728\u9879\u76ee\u4e2d\u6267\u884c go get \u547d\u4ee4\u53ef\u4ee5\u4e0b\u8f7d\u4f9d\u8d56\u5305\uff0c\u5e76\u4e14\u8fd8\u53ef\u4ee5\u6307\u5b9a\u4e0b\u8f7d\u7684\u7248\u672c\u3002 \u8fd0\u884c go get -u \u5c06\u4f1a\u5347\u7ea7\u5230\u6700\u65b0\u7684\u6b21\u8981\u7248\u672c\u6216\u8005\u4fee\u8ba2\u7248\u672c(x.y.z, z\u662f\u4fee\u8ba2\u7248\u672c\u53f7\uff0c y\u662f\u6b21\u8981\u7248\u672c\u53f7) \u8fd0\u884c go get -u=patch \u5c06\u4f1a\u5347\u7ea7\u5230\u6700\u65b0\u7684\u4fee\u8ba2\u7248\u672c \u8fd0\u884c go get package@version \u5c06\u4f1a\u5347\u7ea7\u5230\u6307\u5b9a\u7684\u7248\u672c\u53f7 version $ go get \u5982\u679c\u4e0b\u8f7d\u6240\u6709\u4f9d\u8d56\u53ef\u4ee5\u4f7f\u7528 go mod download \u547d\u4ee4\u3002 go.mod \u6587\u4ef6 \u00b6 go.mod \u6709 5 \u79cd\u6307\u4ee4\uff1a module \u3001 go \u3001 require \u3001 exclude \u3001 replace module \uff1a\u5b9a\u4e49\u6a21\u5757\u8def\u5f84 go \uff1a\u8bbe\u7f6e\u9884\u671f\u7684\u8bed\u8a00\u7248\u672c require \uff1a\u4f9d\u8d56\u5305\u5217\u8868\u53ca\u7248\u672c exclude \uff1a\u7981\u6b62\u4f9d\u8d56\u5305\u5217\u8868\uff08\u4ec5\u5728\u5f53\u524d\u6a21\u5757\u4e3a\u4e3b\u6a21\u5757\u65f6\u751f\u6548\uff09 replace \uff1a\u66ff\u6362\u4f9d\u8d56\u5305\u5217\u8868\uff08\u4ec5\u5728\u5f53\u524d\u6a21\u5757\u4e3a\u4e3b\u6a21\u5757\u65f6\u751f\u6548\uff09 module my / thing go 1.16 require other / thing v1 .0.2 // \u8fd9\u662f\u6ce8\u91ca require new /thing/v2 v2.3.4 // indirect require \uff08 new /thing v2.3.4 old / thing v0 .0.0 - 20190603091049 - 60506 f45cf65 \uff09 exclude old / thing v1 .2.3 replace bad / thing v1 .4.5 => good / thing v1 .4.5 \u8bed\u4e49\u5316\u7248\u672c \u00b6 \u8bed\u4e49\u5316\u7248\u672c\u53f7\u683c\u5f0f\u4e3a\uff1a X.Y.Z \uff08\u4e3b\u7248\u672c\u53f7.\u6b21\u7248\u672c\u53f7.\u4fee\u8ba2\u53f7\uff09\uff0c\u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b\uff1a \u8fdb\u884c\u4e0d\u5411\u4e0b\u517c\u5bb9\u7684\u4fee\u6539\u65f6\uff0c\u9012\u589e\u4e3b\u7248\u672c\u53f7\u3002 API \u4fdd\u6301\u5411\u4e0b\u517c\u5bb9\u7684\u65b0\u589e\u53ca\u4fee\u6539\u65f6\uff0c\u9012\u589e\u6b21\u7248\u672c\u53f7\u3002 \u4fee\u590d\u95ee\u9898\u4f46\u4e0d\u5f71\u54cd API \u65f6\uff0c\u9012\u589e\u4fee\u8ba2\u53f7\u3002 \u4f8b\u5982\uff1a \u6709\u4e00\u4e2a\u8bed\u4e49\u5316\u7248\u672c\u53f7\u4e3a\uff1a v0.1.2 \uff0c\u5219\u5176\u4e3b\u7248\u672c\u53f7\u4e3a 0\uff0c\u6b21\u7248\u672c\u4e3a 1\uff0c\u4fee\u8ba2\u53f7\u4e3a 2\u3002 \u800c\u524d\u9762\u7684 v \u662f version\uff08\u7248\u672c\uff09\u7684\u9996\u5b57\u6bcd\uff0c\u662f Go \u8bed\u8a00\u60ef\u4f8b\u4f7f\u7528\u7684\uff0c\u6807\u51c6\u7684\u8bed\u4e49\u5316\u7248\u672c\u6ca1\u6709\u8fd9\u4e2a\u7ea6\u5b9a\u3002 \u6240\u4ee5\u5728\u4f7f\u7528 Go \u547d\u4ee4\u884c\u5de5\u5177\u6216 go.mod \u6587\u4ef6\u65f6\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u8bed\u4e49\u5316\u7248\u672c\u53f7\u6765\u8fdb\u884c\u6a21\u5757\u67e5\u8be2\uff0c\u5177\u4f53\u89c4\u5219\u5982\u4e0b\uff1a \u9ed8\u8ba4\u503c\uff08 @latest \uff09\uff1a\u5c06\u5339\u914d**\u6700\u65b0\u53ef\u7528**\u7684\u6807\u7b7e\u7248\u672c\u6216\u6e90\u7801\u5e93\u7684\u6700\u65b0\u672a\u6807\u7b7e\u7248\u672c\u3002 \u6307\u5b9a\u67d0\u4e2a commit\uff08 @c854792 \uff09\uff1a\u5c06\u5339\u914d\u8be5 commit \u65f6\u7684\u7248\u672c\u3002 \u6307\u5b9a\u67d0\u4e2a\u5206\u652f\uff08 @master \uff09\uff1a\u5c06\u5339\u914d\u8be5**\u5206\u652f**\u7248\u672c\u3002 \u5b8c\u5168\u6307\u5b9a\u7248\u672c\uff08 @v1.2.3 \uff09\uff1a\u5c06\u5339\u914d\u8be5**\u6307\u5b9a**\u7248\u672c\u3002 \u7248\u672c\u524d\u7f00\uff08 @v1 \u6216 @v1.2 \uff09\uff1a\u5c06\u5339\u914d\u5177\u6709\u8be5**\u524d\u7f00**\u7684**\u6700\u65b0\u53ef\u7528**\u6807\u7b7e\u7248\u672c\u3002 \u7248\u672c\u6bd4\u8f83\uff08 @<v1.2.3 \u6216 @>=v1.5.6 \uff09\uff1a\u5c06\u5339\u914d**\u6700\u63a5\u8fd1\u6bd4\u8f83\u76ee\u6807**\u7684\u53ef\u7528\u6807\u7b7e\u7248\u672c\u3002< \u5219\u4e3a\u5c0f\u4e8e\u8be5\u7248\u672c\u7684\u6700\u65b0\u7248\u672c\uff0c> \u5219\u4e3a\u5927\u4e8e\u7248\u672c\u7684\u6700\u65e7\u7248\u672c\u3002\u5f53\u4f7f\u7528\u7c7b Unix \u7cfb\u7edf\u65f6\uff0c\u9700\u7528\u5f15\u53f7\u5c06\u5b57\u7b26\u4e32\u5305\u88f9\u8d77\u6765\u4ee5\u9632\u6b62\u5927\u4e8e\u5c0f\u4e8e\u53f7\u88ab\u89e3\u91ca\u4e3a\u91cd\u5b9a\u5411\u3002 \u5982\uff1a go get 'github.com/gin-gonic/gin@<v1.2.3' \u3002 \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u4e3a\u4e86\u80fd\u8ba9 Go Modules \u7684\u4f7f\u7528\u8005\u80fd\u591f\u4ece\u65e7\u7248\u672c\u66f4\u65b9\u4fbf\u5730\u5347\u7ea7\u81f3\u65b0\u7248\u672c\uff0cGo \u8bed\u8a00\u5b98\u65b9\u63d0\u51fa\u4e86\u4e24\u4e2a\u91cd\u8981\u7684\u89c4\u5219\uff1a \u5bfc\u5165\u517c\u5bb9\u6027\u89c4\u5219\uff08import compatibility rule\uff09\uff1a\u5982\u679c\u65e7\u5305\u548c\u65b0\u5305\u5177\u6709\u76f8\u540c\u7684\u5bfc\u5165\u8def\u5f84\uff0c\u5219\u65b0\u5305\u5fc5\u987b\u5411\u540e\u517c\u5bb9\u65e7\u5305\u3002 \u8bed\u4e49\u5316\u5bfc\u5165\u7248\u672c\u89c4\u5219\uff08semantic import versioning rule\uff09\uff1a\u6bcf\u4e2a\u4e0d\u540c\u4e3b\u7248\u672c\uff08\u5373\u4e0d\u517c\u5bb9\u7684\u5305 v1 \u6216 v2\uff09\u4f7f\u7528\u4e0d\u540c\u7684\u5bfc\u5165\u8def\u5f84\uff0c\u4ee5\u4e3b\u7248\u672c\u7ed3\u5c3e\uff0c\u4e14\u6bcf\u4e2a\u4e3b\u7248\u672c\u4e2d\u6700\u591a\u4e00\u4e2a\u3002\u5982\uff1a\u4e00\u4e2a rsc.io/quote\u3001\u4e00\u4e2a rsc.io/quote/v2\u3001\u4e00\u4e2a rsc.io/quote/v3\u3002 \u800c\u4e0e Git \u5206\u652f\u7684\u96c6\u6210\u5982\u4e0b\uff1a \u53c2\u8003 Go Modules \u8be6\u89e3 \u5728\u9879\u76ee\u4e2d\u4f7f\u7528 go module \u00b6 \u65e2\u6709\u9879\u76ee \u00b6 \u5982\u679c\u9700\u8981\u5bf9\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684\u9879\u76ee\u542f\u7528 go module \uff0c\u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u64cd\u4f5c\uff1a \u5728\u9879\u76ee\u76ee\u5f55\u4e0b\u6267\u884c go mod init \uff0c\u751f\u6210\u4e00\u4e2ago.mod\u6587\u4ef6\u3002 \u6267\u884c go get \uff0c\u67e5\u627e\u5e76\u8bb0\u5f55\u5f53\u524d\u9879\u76ee\u7684\u4f9d\u8d56\uff0c\u540c\u65f6\u751f\u6210\u4e00\u4e2ago.sum\u8bb0\u5f55\u6bcf\u4e2a\u4f9d\u8d56\u5e93\u7684\u7248\u672c\u548c\u54c8\u5e0c\u503c\u3002 \u65b0\u9879\u76ee \u00b6 \u5bf9\u4e8e\u4e00\u4e2a\u65b0\u521b\u5efa\u7684\u9879\u76ee\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u9879\u76ee\u6587\u4ef6\u5939\u4e0b\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u64cd\u4f5c\uff1a \u6267\u884c go mod init \u9879\u76ee\u540d \u547d\u4ee4\uff0c\u5728\u5f53\u524d\u9879\u76ee\u6587\u4ef6\u5939\u4e0b\u521b\u5efa\u4e00\u4e2a go.mod \u6587\u4ef6\u3002 \u624b\u52a8\u7f16\u8f91 go.mod \u4e2d\u7684 require \u4f9d\u8d56\u9879\u6216\u6267\u884c go get \u81ea\u52a8\u53d1\u73b0\u3001\u7ef4\u62a4\u4f9d\u8d56\u3002 \u5982\u679c\u6ca1\u53cd\u5e94\uff0c\u53ef\u4ee5\u8bd5\u8bd5 go mod tidy VSCode-go \u7684\u5751 \u00b6 \u5f00\u542f GOMODULE \u5c31\u62a5\u9519 \u00b6 \u62a5\u9519\u4fe1\u606f\uff1a found module \"golang.org/x/tools\" twice in the workspace \u4e00\u5f00\u59cb\u7684\u65f6\u5019\u6211\u662f\u5728 VSC \u91cc\u5efa\u4e86\u4e00\u4e2a\u5de5\u4f5c\u533a\uff0c\u628a GOPATH \u6240\u5728\u76ee\u5f55\u6dfb\u52a0\u5728\u5de5\u4f5c\u533a\u91cc\uff0c\u7136\u540e\u5f00\u542f GO111MODULE=auto\uff0c\u7ed3\u679c\u5c31\u4e00\u76f4\u62a5\u9519\u3002 \u540e\u6765**\u65b0\u5efa\u4e00\u4e2a\u5de5\u4f5c\u533a**\uff0c\u628a\u81ea\u5df1\u653e\u9879\u76ee\u7684\u6587\u4ef6\u5939\u6dfb\u52a0\u5230\u5de5\u4f5c\u533a\uff0c\u5c31\u6ca1\u4e8b\u4e86\u3002 \u6211\u7684 GOPATH\uff1a GOPATH=E:\\---CODE\\GO\\root GOPATH \u653e\u8fdb\u53bb\u7684\u5de5\u4f5c\u533a\uff1a \u6ca1\u6709 GOPATH \u7684\u5de5\u4f5c\u533a \u76f8\u5b89\u65e0\u4e8b go tools \u4e0b\u8f7d\u5931\u8d25 \u00b6 \u89e3\u51b3\u529e\u6cd5\uff1a\u628a GOPROXY \u6539\u5230 https://goproxy.cn \u3002\u963f\u91cc\u4e91\u90a3\u4e2a\u6709\u65f6\u5019\u4e0d\u884c\uff0c\u5b98\u7f51\u88ab\u5899\u3002 \u6211\u8bd5\u4e86\u53ea\u6709\u8fd9\u4e2a\u5730\u5740\u4e00\u6b21\u8fc7\u3002 \u7b2c\u4e00\u6b65\uff1a\u4fee\u6539\u73af\u5883\u53d8\u91cf GOPROXY \u7b2c\u4e8c\u6b65\uff1a\u786e\u4fdd GOPATH \u4e0b\u6709 bin \u3001 pkg \u3001 src \u4e09\u4e2a\u76ee\u5f55 \u7b2c\u4e09\u6b65\uff1a\u5728 VSC \u4e2d\u6309\u4e0b Ctrl+Shift+P \u5524\u9192\u5feb\u6377\u547d\u4ee4\u884c\uff0c\u8f93\u5165\uff1a Go:install/Update Tools \uff0c\u56de\u8f66\u3002 \u7b2c\u56db\u6b65\uff1a\u5168\u9009\uff0c\u7136\u540e\u70b9\u51fb OK \u5f00\u59cb\u4e0b\u8f7d \u7b2c\u56db\u6b65\uff1a\u4e1d\u6ed1\u987a\u7545\u4e00\u6b21\u8fc7","title":"Go Module"},{"location":"Go/Basic/Golang-Go-Module/#go-module","text":"","title":"Go Module"},{"location":"Go/Basic/Golang-Go-Module/#go111module","text":"\u7248\u672c\u8981\u6c42\uff1ago 1.11+\uff0c1.13\u8d77\u9ed8\u8ba4\u5f00\u542f \u542f\u7528 go module \u652f\u6301\u9996\u5148\u8981\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\uff0c\u6709\u4e09\u4e2a\u53ef\u9009\u503c\uff1a{% span blue, auto %}\u3001{% span green, on %}\u3001{% span red, off %}\uff0c\u9ed8\u8ba4\u662f {% span blue, auto %}\u3002 GO111MODULE=off \u7981\u7528\u6a21\u5757\u652f\u6301\uff0c\u7f16\u8bd1\u65f6\u4f1a\u4ece GOPATH \u548c vendor \u6587\u4ef6\u5939\u4e2d\u67e5\u627e\u5305\u3002 GO111MODULE=on \u5f00\u542f\u6a21\u5757\u652f\u6301\uff0c\u7f16\u8bd1\u65f6\u4f1a\u5ffd\u7565 GOPATH \u548c vendor \u6587\u4ef6\u5939\uff0c\u53ea\u6839\u636e go.mod \u4e0b\u8f7d\u4f9d\u8d56\u3002 GO111MODULE=auto \uff0c\u5f53\u9879\u76ee\u5728 $GOPATH/src \u5916\u4e14\u9879\u76ee\u6839\u76ee\u5f55\u6709 go.mod \u6587\u4ef6\u65f6\uff0c\u5f00\u542f\u6a21\u5757\u652f\u6301\u3002 \u8bbe\u7f6e GO111MODULE=on \u4e4b\u540e\u5c31\u53ef\u4ee5\u4f7f\u7528 go module \u4e86\uff0c\u4ee5\u540e\u5c31\u6ca1\u5fc5\u8981\u5728 GOPATH \u4e2d\u521b\u5efa\u9879\u76ee\u4e86\u3002 \u4f7f\u7528 go module \u7ba1\u7406\u4f9d\u8d56\u540e\u4f1a\u5728\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u751f\u6210\u4e24\u4e2a\u6587\u4ef6 go.mod \u548c go.sum \u3002 \u5f00\u542f\u65b9\u5f0f\uff1a - windows\uff1a\u5728\u73af\u5883\u53d8\u91cf\u4e2d\u6dfb\u52a0\u4e00\u6761\u503c Linux\uff1a\u76f4\u63a5\u6267\u884c\u547d\u4ee4\u5230 /etc/profile \u6216 $HOME/.profile $ echo \"export GO111MODULE=auto\" >> /etc/profile \u6216\u8005 $ go env - w GO111MODULE = auto","title":"\u542f\u7528 GO111MODULE"},{"location":"Go/Basic/Golang-Go-Module/#go-mod","text":"\u5e38\u7528 go mod \u547d\u4ee4\u5982\u4e0b\uff1a go mod init \u521d\u59cb\u5316\u5f53\u524d\u6587\u4ef6\u5939\uff0c\u521b\u5efa go.mod \u6587\u4ef6 go mod download \u4e0b\u8f7d\u4f9d\u8d56\u7684 module \u5230\u672c\u5730cache\uff08\u9ed8\u8ba4\u4e3a $GOPATH/pkg/mod\uff0c\u4f7f\u7528\u547d\u4ee4 go env GOMODCACHE \u53ef\u67e5\u770b\uff09 go mod edit \u7f16\u8f91 go.mod \u6587\u4ef6 go mod graph \u6253\u5370\u6a21\u5757\u4f9d\u8d56\u56fe go mod tidy \u589e\u52a0\u7f3a\u5c11\u7684 module\uff0c\u5220\u9664\u65e0\u7528\u7684 module go mod vendor \u5c06\u4f9d\u8d56\u590d\u5236\u5230 vendor \u4e0b\uff0cvendor \u76ee\u5f55\u4e0d\u5b58\u5728\u65f6\u4f1a\u81ea\u52a8\u521b\u5efa go mod verify \u68c0\u9a8c\u4f9d\u8d56 go mod why \u89e3\u91ca\u4e3a\u4ec0\u4e48\u8981\u4f9d\u8d56","title":"go mod \u547d\u4ee4"},{"location":"Go/Basic/Golang-Go-Module/#go-mod-init","text":"\u521d\u59cb\u5316\u5f53\u524d\u6587\u4ef6\u5939\uff0c\u521b\u5efa go.mod \u6587\u4ef6\u3002 \u7b2c\u4e00\u6b65\uff0c\u5207\u6362\u5230\u9879\u76ee\u76ee\u5f55\u4e2d \u7b2c\u4e8c\u6b65\uff0c\u6267\u884c\u547d\u4ee4 go mod init module\u540d eg\uff1a","title":"go mod init \u521d\u59cb\u5316"},{"location":"Go/Basic/Golang-Go-Module/#go-mod-tidy","text":"\u6211\u4eec\u5728\u4ee3\u7801\u4e2d\u5220\u9664\u4f9d\u8d56\u4ee3\u7801\u540e\uff0c\u76f8\u5173\u7684\u4f9d\u8d56\u5e93\u5e76\u4e0d\u4f1a\u5728 go.mod \u6587\u4ef6\u4e2d\u81ea\u52a8\u79fb\u9664\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 go mod tidy \u547d\u4ee4\u66f4\u65b0 go.mod \u4e2d\u7684\u4f9d\u8d56\u5173\u7cfb\u3002 $ go mod tidy","title":"go mod tidy \u6574\u7406\u4f9d\u8d56"},{"location":"Go/Basic/Golang-Go-Module/#go-mod-edit-mod","text":"","title":"go mod edit \u7f16\u8f91mod\u6587\u4ef6"},{"location":"Go/Basic/Golang-Go-Module/#_1","text":"\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u624b\u52a8\u4fee\u6539go.mod\u6587\u4ef6\uff0c\u6240\u4ee5\u6709\u4e9b\u65f6\u5019\u9700\u8981\u683c\u5f0f\u5316\u8be5\u6587\u4ef6\u3002Go\u63d0\u4f9b\u4e86\u4e00\u4e0b\u547d\u4ee4\uff1a $ go mod edit -fmt","title":"\u683c\u5f0f\u5316"},{"location":"Go/Basic/Golang-Go-Module/#_2","text":"$ go mod edit -require = \u8981\u6dfb\u52a0\u7684\u6a21\u5757 eg\uff1a $ go mod edit -require = rsc.io/quote","title":"\u6dfb\u52a0\u4f9d\u8d56\u9879"},{"location":"Go/Basic/Golang-Go-Module/#_3","text":"$ go mod edit -droprequire = \u8981\u79fb\u9664\u7684\u6a21\u5757 eg\uff1a $ go mod edit -require = github.com/sirupsen/logrus@v1.7.1","title":"\u79fb\u9664\u4f9d\u8d56\u9879"},{"location":"Go/Basic/Golang-Go-Module/#go-get","text":"\u5728\u9879\u76ee\u4e2d\u6267\u884c go get \u547d\u4ee4\u53ef\u4ee5\u4e0b\u8f7d\u4f9d\u8d56\u5305\uff0c\u5e76\u4e14\u8fd8\u53ef\u4ee5\u6307\u5b9a\u4e0b\u8f7d\u7684\u7248\u672c\u3002 \u8fd0\u884c go get -u \u5c06\u4f1a\u5347\u7ea7\u5230\u6700\u65b0\u7684\u6b21\u8981\u7248\u672c\u6216\u8005\u4fee\u8ba2\u7248\u672c(x.y.z, z\u662f\u4fee\u8ba2\u7248\u672c\u53f7\uff0c y\u662f\u6b21\u8981\u7248\u672c\u53f7) \u8fd0\u884c go get -u=patch \u5c06\u4f1a\u5347\u7ea7\u5230\u6700\u65b0\u7684\u4fee\u8ba2\u7248\u672c \u8fd0\u884c go get package@version \u5c06\u4f1a\u5347\u7ea7\u5230\u6307\u5b9a\u7684\u7248\u672c\u53f7 version $ go get \u5982\u679c\u4e0b\u8f7d\u6240\u6709\u4f9d\u8d56\u53ef\u4ee5\u4f7f\u7528 go mod download \u547d\u4ee4\u3002","title":"go get"},{"location":"Go/Basic/Golang-Go-Module/#gomod","text":"go.mod \u6709 5 \u79cd\u6307\u4ee4\uff1a module \u3001 go \u3001 require \u3001 exclude \u3001 replace module \uff1a\u5b9a\u4e49\u6a21\u5757\u8def\u5f84 go \uff1a\u8bbe\u7f6e\u9884\u671f\u7684\u8bed\u8a00\u7248\u672c require \uff1a\u4f9d\u8d56\u5305\u5217\u8868\u53ca\u7248\u672c exclude \uff1a\u7981\u6b62\u4f9d\u8d56\u5305\u5217\u8868\uff08\u4ec5\u5728\u5f53\u524d\u6a21\u5757\u4e3a\u4e3b\u6a21\u5757\u65f6\u751f\u6548\uff09 replace \uff1a\u66ff\u6362\u4f9d\u8d56\u5305\u5217\u8868\uff08\u4ec5\u5728\u5f53\u524d\u6a21\u5757\u4e3a\u4e3b\u6a21\u5757\u65f6\u751f\u6548\uff09 module my / thing go 1.16 require other / thing v1 .0.2 // \u8fd9\u662f\u6ce8\u91ca require new /thing/v2 v2.3.4 // indirect require \uff08 new /thing v2.3.4 old / thing v0 .0.0 - 20190603091049 - 60506 f45cf65 \uff09 exclude old / thing v1 .2.3 replace bad / thing v1 .4.5 => good / thing v1 .4.5","title":"go.mod \u6587\u4ef6"},{"location":"Go/Basic/Golang-Go-Module/#_4","text":"\u8bed\u4e49\u5316\u7248\u672c\u53f7\u683c\u5f0f\u4e3a\uff1a X.Y.Z \uff08\u4e3b\u7248\u672c\u53f7.\u6b21\u7248\u672c\u53f7.\u4fee\u8ba2\u53f7\uff09\uff0c\u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b\uff1a \u8fdb\u884c\u4e0d\u5411\u4e0b\u517c\u5bb9\u7684\u4fee\u6539\u65f6\uff0c\u9012\u589e\u4e3b\u7248\u672c\u53f7\u3002 API \u4fdd\u6301\u5411\u4e0b\u517c\u5bb9\u7684\u65b0\u589e\u53ca\u4fee\u6539\u65f6\uff0c\u9012\u589e\u6b21\u7248\u672c\u53f7\u3002 \u4fee\u590d\u95ee\u9898\u4f46\u4e0d\u5f71\u54cd API \u65f6\uff0c\u9012\u589e\u4fee\u8ba2\u53f7\u3002 \u4f8b\u5982\uff1a \u6709\u4e00\u4e2a\u8bed\u4e49\u5316\u7248\u672c\u53f7\u4e3a\uff1a v0.1.2 \uff0c\u5219\u5176\u4e3b\u7248\u672c\u53f7\u4e3a 0\uff0c\u6b21\u7248\u672c\u4e3a 1\uff0c\u4fee\u8ba2\u53f7\u4e3a 2\u3002 \u800c\u524d\u9762\u7684 v \u662f version\uff08\u7248\u672c\uff09\u7684\u9996\u5b57\u6bcd\uff0c\u662f Go \u8bed\u8a00\u60ef\u4f8b\u4f7f\u7528\u7684\uff0c\u6807\u51c6\u7684\u8bed\u4e49\u5316\u7248\u672c\u6ca1\u6709\u8fd9\u4e2a\u7ea6\u5b9a\u3002 \u6240\u4ee5\u5728\u4f7f\u7528 Go \u547d\u4ee4\u884c\u5de5\u5177\u6216 go.mod \u6587\u4ef6\u65f6\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u8bed\u4e49\u5316\u7248\u672c\u53f7\u6765\u8fdb\u884c\u6a21\u5757\u67e5\u8be2\uff0c\u5177\u4f53\u89c4\u5219\u5982\u4e0b\uff1a \u9ed8\u8ba4\u503c\uff08 @latest \uff09\uff1a\u5c06\u5339\u914d**\u6700\u65b0\u53ef\u7528**\u7684\u6807\u7b7e\u7248\u672c\u6216\u6e90\u7801\u5e93\u7684\u6700\u65b0\u672a\u6807\u7b7e\u7248\u672c\u3002 \u6307\u5b9a\u67d0\u4e2a commit\uff08 @c854792 \uff09\uff1a\u5c06\u5339\u914d\u8be5 commit \u65f6\u7684\u7248\u672c\u3002 \u6307\u5b9a\u67d0\u4e2a\u5206\u652f\uff08 @master \uff09\uff1a\u5c06\u5339\u914d\u8be5**\u5206\u652f**\u7248\u672c\u3002 \u5b8c\u5168\u6307\u5b9a\u7248\u672c\uff08 @v1.2.3 \uff09\uff1a\u5c06\u5339\u914d\u8be5**\u6307\u5b9a**\u7248\u672c\u3002 \u7248\u672c\u524d\u7f00\uff08 @v1 \u6216 @v1.2 \uff09\uff1a\u5c06\u5339\u914d\u5177\u6709\u8be5**\u524d\u7f00**\u7684**\u6700\u65b0\u53ef\u7528**\u6807\u7b7e\u7248\u672c\u3002 \u7248\u672c\u6bd4\u8f83\uff08 @<v1.2.3 \u6216 @>=v1.5.6 \uff09\uff1a\u5c06\u5339\u914d**\u6700\u63a5\u8fd1\u6bd4\u8f83\u76ee\u6807**\u7684\u53ef\u7528\u6807\u7b7e\u7248\u672c\u3002< \u5219\u4e3a\u5c0f\u4e8e\u8be5\u7248\u672c\u7684\u6700\u65b0\u7248\u672c\uff0c> \u5219\u4e3a\u5927\u4e8e\u7248\u672c\u7684\u6700\u65e7\u7248\u672c\u3002\u5f53\u4f7f\u7528\u7c7b Unix \u7cfb\u7edf\u65f6\uff0c\u9700\u7528\u5f15\u53f7\u5c06\u5b57\u7b26\u4e32\u5305\u88f9\u8d77\u6765\u4ee5\u9632\u6b62\u5927\u4e8e\u5c0f\u4e8e\u53f7\u88ab\u89e3\u91ca\u4e3a\u91cd\u5b9a\u5411\u3002 \u5982\uff1a go get 'github.com/gin-gonic/gin@<v1.2.3' \u3002 \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u4e3a\u4e86\u80fd\u8ba9 Go Modules \u7684\u4f7f\u7528\u8005\u80fd\u591f\u4ece\u65e7\u7248\u672c\u66f4\u65b9\u4fbf\u5730\u5347\u7ea7\u81f3\u65b0\u7248\u672c\uff0cGo \u8bed\u8a00\u5b98\u65b9\u63d0\u51fa\u4e86\u4e24\u4e2a\u91cd\u8981\u7684\u89c4\u5219\uff1a \u5bfc\u5165\u517c\u5bb9\u6027\u89c4\u5219\uff08import compatibility rule\uff09\uff1a\u5982\u679c\u65e7\u5305\u548c\u65b0\u5305\u5177\u6709\u76f8\u540c\u7684\u5bfc\u5165\u8def\u5f84\uff0c\u5219\u65b0\u5305\u5fc5\u987b\u5411\u540e\u517c\u5bb9\u65e7\u5305\u3002 \u8bed\u4e49\u5316\u5bfc\u5165\u7248\u672c\u89c4\u5219\uff08semantic import versioning rule\uff09\uff1a\u6bcf\u4e2a\u4e0d\u540c\u4e3b\u7248\u672c\uff08\u5373\u4e0d\u517c\u5bb9\u7684\u5305 v1 \u6216 v2\uff09\u4f7f\u7528\u4e0d\u540c\u7684\u5bfc\u5165\u8def\u5f84\uff0c\u4ee5\u4e3b\u7248\u672c\u7ed3\u5c3e\uff0c\u4e14\u6bcf\u4e2a\u4e3b\u7248\u672c\u4e2d\u6700\u591a\u4e00\u4e2a\u3002\u5982\uff1a\u4e00\u4e2a rsc.io/quote\u3001\u4e00\u4e2a rsc.io/quote/v2\u3001\u4e00\u4e2a rsc.io/quote/v3\u3002 \u800c\u4e0e Git \u5206\u652f\u7684\u96c6\u6210\u5982\u4e0b\uff1a \u53c2\u8003 Go Modules \u8be6\u89e3","title":"\u8bed\u4e49\u5316\u7248\u672c"},{"location":"Go/Basic/Golang-Go-Module/#go-module_1","text":"","title":"\u5728\u9879\u76ee\u4e2d\u4f7f\u7528 go module"},{"location":"Go/Basic/Golang-Go-Module/#_5","text":"\u5982\u679c\u9700\u8981\u5bf9\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684\u9879\u76ee\u542f\u7528 go module \uff0c\u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u64cd\u4f5c\uff1a \u5728\u9879\u76ee\u76ee\u5f55\u4e0b\u6267\u884c go mod init \uff0c\u751f\u6210\u4e00\u4e2ago.mod\u6587\u4ef6\u3002 \u6267\u884c go get \uff0c\u67e5\u627e\u5e76\u8bb0\u5f55\u5f53\u524d\u9879\u76ee\u7684\u4f9d\u8d56\uff0c\u540c\u65f6\u751f\u6210\u4e00\u4e2ago.sum\u8bb0\u5f55\u6bcf\u4e2a\u4f9d\u8d56\u5e93\u7684\u7248\u672c\u548c\u54c8\u5e0c\u503c\u3002","title":"\u65e2\u6709\u9879\u76ee"},{"location":"Go/Basic/Golang-Go-Module/#_6","text":"\u5bf9\u4e8e\u4e00\u4e2a\u65b0\u521b\u5efa\u7684\u9879\u76ee\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u9879\u76ee\u6587\u4ef6\u5939\u4e0b\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u64cd\u4f5c\uff1a \u6267\u884c go mod init \u9879\u76ee\u540d \u547d\u4ee4\uff0c\u5728\u5f53\u524d\u9879\u76ee\u6587\u4ef6\u5939\u4e0b\u521b\u5efa\u4e00\u4e2a go.mod \u6587\u4ef6\u3002 \u624b\u52a8\u7f16\u8f91 go.mod \u4e2d\u7684 require \u4f9d\u8d56\u9879\u6216\u6267\u884c go get \u81ea\u52a8\u53d1\u73b0\u3001\u7ef4\u62a4\u4f9d\u8d56\u3002 \u5982\u679c\u6ca1\u53cd\u5e94\uff0c\u53ef\u4ee5\u8bd5\u8bd5 go mod tidy","title":"\u65b0\u9879\u76ee"},{"location":"Go/Basic/Golang-Go-Module/#vscode-go","text":"","title":"VSCode-go \u7684\u5751"},{"location":"Go/Basic/Golang-Go-Module/#gomodule","text":"\u62a5\u9519\u4fe1\u606f\uff1a found module \"golang.org/x/tools\" twice in the workspace \u4e00\u5f00\u59cb\u7684\u65f6\u5019\u6211\u662f\u5728 VSC \u91cc\u5efa\u4e86\u4e00\u4e2a\u5de5\u4f5c\u533a\uff0c\u628a GOPATH \u6240\u5728\u76ee\u5f55\u6dfb\u52a0\u5728\u5de5\u4f5c\u533a\u91cc\uff0c\u7136\u540e\u5f00\u542f GO111MODULE=auto\uff0c\u7ed3\u679c\u5c31\u4e00\u76f4\u62a5\u9519\u3002 \u540e\u6765**\u65b0\u5efa\u4e00\u4e2a\u5de5\u4f5c\u533a**\uff0c\u628a\u81ea\u5df1\u653e\u9879\u76ee\u7684\u6587\u4ef6\u5939\u6dfb\u52a0\u5230\u5de5\u4f5c\u533a\uff0c\u5c31\u6ca1\u4e8b\u4e86\u3002 \u6211\u7684 GOPATH\uff1a GOPATH=E:\\---CODE\\GO\\root GOPATH \u653e\u8fdb\u53bb\u7684\u5de5\u4f5c\u533a\uff1a \u6ca1\u6709 GOPATH \u7684\u5de5\u4f5c\u533a \u76f8\u5b89\u65e0\u4e8b","title":"\u5f00\u542f GOMODULE \u5c31\u62a5\u9519"},{"location":"Go/Basic/Golang-Go-Module/#go-tools","text":"\u89e3\u51b3\u529e\u6cd5\uff1a\u628a GOPROXY \u6539\u5230 https://goproxy.cn \u3002\u963f\u91cc\u4e91\u90a3\u4e2a\u6709\u65f6\u5019\u4e0d\u884c\uff0c\u5b98\u7f51\u88ab\u5899\u3002 \u6211\u8bd5\u4e86\u53ea\u6709\u8fd9\u4e2a\u5730\u5740\u4e00\u6b21\u8fc7\u3002 \u7b2c\u4e00\u6b65\uff1a\u4fee\u6539\u73af\u5883\u53d8\u91cf GOPROXY \u7b2c\u4e8c\u6b65\uff1a\u786e\u4fdd GOPATH \u4e0b\u6709 bin \u3001 pkg \u3001 src \u4e09\u4e2a\u76ee\u5f55 \u7b2c\u4e09\u6b65\uff1a\u5728 VSC \u4e2d\u6309\u4e0b Ctrl+Shift+P \u5524\u9192\u5feb\u6377\u547d\u4ee4\u884c\uff0c\u8f93\u5165\uff1a Go:install/Update Tools \uff0c\u56de\u8f66\u3002 \u7b2c\u56db\u6b65\uff1a\u5168\u9009\uff0c\u7136\u540e\u70b9\u51fb OK \u5f00\u59cb\u4e0b\u8f7d \u7b2c\u56db\u6b65\uff1a\u4e1d\u6ed1\u987a\u7545\u4e00\u6b21\u8fc7","title":"go tools \u4e0b\u8f7d\u5931\u8d25"},{"location":"Go/Basic/Golang-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/","text":"\u7c7b\u578b\u8f6c\u6362\u7684\u4e09\u79cd\u65b9\u5f0f \u7c7b\u578b\u8f6c\u6362 \u00b6 Go \u4e0d\u4f1a\u5bf9\u6570\u636e\u8fdb\u884c\u9690\u5f0f\u8f6c\u6362\uff0c\u53ea\u80fd\u663e\u5f0f\u7684\u624b\u52a8\u8f6c\u6362 \u7b80\u5355\u7684\u8f6c\u6362 \u00b6 T ( expression ) eg\uff1a int ( time . Now (). Weekday ()) // \u661f\u671f\u8f6cint int ( time . now (). Month ()) // \u6708\u4efd\u8f6cint var a float32 a = 3.14 b := int ( a ) // float32 \u8f6c int \u6ce8\u610f\uff1a\u8fd9\u79cd\u65b9\u5f0f\u4e0d\u662f\u6240\u6709\u6570\u636e\u7c7b\u578b\u90fd\u80fd\u8f6c\u6362\u7684\u3002 1. \u4f8b\u5982 string \u7c7b\u578b\u7684 \"Boii\" \u8f6c int \u5c31\u4f1a\u5931\u8d25 2. \u4f4e\u7cbe\u5ea6\u8f6c\u9ad8\u7cbe\u5ea6\u65f6\u662f\u5b89\u5168\u7684\uff0c\u9ad8\u7cbe\u5ea6\u8f6c\u4f4e\u7cbe\u5ea6\u5219\u4f1a\u4e22\u5931\u7cbe\u5ea6\uff0c\u4f8b\u5982 float64\u8f6cfloat32 3. \u4e0d\u80fd\u5bf9 int\u3001float \u540c string \u4e92\u8f6c\uff0c\u8de8\u5927\u7c7b\u578b\u8f6c\u6362\uff0c\u53ef\u4ee5\u4f7f\u7528 strconv \u5305 \u63d0\u4f9b\u7684\u51fd\u6570 strconv \u5305 \u00b6 strconv \u5305\u63d0\u4f9b\u4e86\u57fa\u672c\u6570\u636e\u7c7b\u578b\u4e4b\u95f4\u7684\u7c7b\u578b\u8f6c\u6362\u529f\u80fd\u3002 string -> int : Atoi() \u00b6 \u5c06 string \u8f6c\u6362\u4e3a int\uff1aAtoi() Atoi() \u51fd\u6570\u7b7e\u540d\uff1a func Atoi ( s string ) ( int , error ) \u7531\u4e8e string \u6709\u53ef\u80fd\u65e0\u6cd5\u8f6c\u6362\u4e3a int\uff0c\u6240\u4ee5\u63d0\u4f9b\u4e86\u4e24\u4e2a\u8fd4\u56de\u503c - \u7b2c\u4e00\u4e2a\u662f\u8f6c\u6362\u6210 int \u7684\u503c - \u7b2c\u4e8c\u4e2a\u662f\u8fd4\u56de\u662f\u5426\u8f6c\u6362\u6210\u529f eg\uff1a // success i , err := strconv . Atoi ( \"3\" ) fmt . Print ( i + 5 ) // 8 // fail i , err := strconv . Atoi ( \"a\" ) if err != nil { fmt . Print ( \"Converted FAILED!\" ) } int -> string : Itoa() \u00b6 func Itoa ( i int ) string eg\uff1a a := strconv . Itoa ( 18 ) fmt . Println ( a ) // 18 fmt . Printf ( \"%T \\n\" , a ) // string string -> T : ParseT() \u00b6 Parse \u7c7b\u51fd\u6570\u7528\u4e8e\u5c06\u5b57\u7b26\u8f6c\u8f6c\u6362\u4e3a\u7ed9\u5b9a\u7c7b\u578b\u7684\u503c ParseBool(str string) \u00b6 eg\uff1a b , err := strconv . ParseBool ( \"true\" ) if err == nil { fmt . Println ( b ) // true } ParseBool \u7684\u5185\u90e8\u5b9e\u73b0\u975e\u5e38\u7b80\u5355 func ParseBool ( str string ) ( bool , error ) { switch str { case \"1\" , \"t\" , \"T\" , \"true\" , \"TRUE\" , \"True\" : return true , nil case \"0\" , \"f\" , \"F\" , \"false\" , \"FALSE\" , \"False\" : return false , nil } return false , syntaxError ( \"ParseBool\" , str ) } ParseInt(s string, base int, bitSize int) \u00b6 s\uff1a\u8981\u89e3\u6790 int \u7684\u5b57\u7b26\u4e32 base\uff1a\u6307\u5b9a\u5b57\u7b26\u4e32\u4e2d\u6570\u5b57\u7684\u8fdb\u5236\uff082\u523036\uff09\uff0c\u5982\u679c\u4e3a0\uff0c\u4f1a\u4ece\u5b57\u7b26\u4e32\u524d\u7f6e\u5224\u65ad\uff1a 0b \u4ee3\u88682\u8fdb\u5236 0o \u4ee3\u88688\u8fdb\u5236 0x \u4ee3\u886816\u8fdb\u5236 \u5426\u5219\u662f10\u8fdb\u5236\u3002 bitSize\uff1a\u6307\u5b9a\u7ed3\u679c\u5fc5\u987b\u80fd\u65e0\u6ea2\u51fa\u8d4b\u503c\u7684\u6574\u6570\u7c7b\u578b\uff0c0\u30018\u300116\u300132\u300164 \u5206\u522b\u4ee3\u8868 int\u3001int8\u3001int16\u3001int32\u3001int64 eg\uff1a i , err := strconv . ParseInt ( \"-C\" , 16 , 0 ) if err == nil { fmt . Println ( i ) // -12 fmt . Printf ( \"%T \\n\" , i ) // int64 } \u5341\u516d\u8fdb\u5236\u4e2d\uff0cC\u4ee3\u886812\uff0c\u4f8b\u5b50\u4e2d\u4f20\u9012\u7684\u662f -C \uff0c\u4e5f\u5c31\u662f-12 ParseUint(s string, base int, bitSize int) \u00b6 \u548c Parseuint \u4e00\u6837\uff0c\u4e0d\u8fc7\u662f\u9488\u5bf9 \u65e0\u7b26\u53f7\u6574\u578b\u7684\uff0c\u5982\u679c\u4f20\u9012\u4e00\u4e2a\u6709\u7b26\u53f7\u7684\u6570\u5b57\u5b57\u7b26\u4e32\uff0c\u4f1a\u8f6c\u6362\u5931\u8d25 eg\uff1a // success u , err := strconv . ParseUint ( \"45\" , 7 , 0 ) if err == nil { fmt . Println ( u ) // 33 fmt . Printf ( \"%T \\n\" , u ) // uint64 } // fail u , err := strconv . ParseUint ( \"-10\" , 10 , 0 ) if err != nil { fmt . Print ( \"Converted FAILED!\" ) } 7\u8fdb\u5236\u7684 45 \u7b49\u4e8e 10\u8fdb\u5236\u768433 ParseFloat(s string, bitSize int) \u00b6 s\uff1a\u8981\u89e3\u6790\u6210 float \u7684\u5b57\u7b26\u4e32\uff0c bitSize\uff1a\u6307\u5b9a\u4e86\u671f\u671b\u7684\u63a5\u6536\u7c7b\u578b\uff0c32\u662ffloat32\uff08\u8fd4\u56de\u503c\u53ef\u4ee5\u4e0d\u6539\u53d8\u7cbe\u786e\u503c\u7684\u8d4b\u503c\u7ed9float32\uff09\uff0c64\u662ffloat64\u3002 eg\uff1a f , err := strconv . ParseFloat ( \"3.14\" , 64 ) if err == nil { fmt . Println ( f ) // 3.14 fmt . Printf ( \"%T \\n\" , f ) // float64 } bitSize \u8868\u793a\u4f4d\u6570\uff0c\u53ea\u80fd\u586b 64\u621632\uff0c\u4e0d\u8fc7 ParseFloat \u53ea\u80fd\u63a5\u653664\u4f4d\u7c7b\u578b\u7684\u6d6e\u70b9\u6570\uff0c\u5373\u4f7f bitSize \u4f60\u586b32\uff0c\u4f9d\u7136\u4f1a\u8fd4\u56de\u4e00\u4e2a float64 \u7c7b\u578b\u7684\u6570\u636e\u7ed9\u4f60\uff0c\u56e0\u4e3a\u5176\u5185\u90e8\u5b9e\u73b0\u662f\u8c03\u7528\u4e86\u4e00\u4e2a atof32() \u7684\u51fd\u6570\uff0c\u7136\u540e return float64(f) func ParseFloat ( s string , bitSize int ) ( float64 , error ) { f , n , err := parseFloatPrefix ( s , bitSize ) if err == nil && n != len ( s ) { return 0 , syntaxError ( fnParseFloat , s ) } return f , err } func parseFloatPrefix ( s string , bitSize int ) ( float64 , int , error ) { if bitSize == 32 { f , n , err := atof32 ( s ) return float64 ( f ), n , err } return atof64 ( s ) } ParseComplex(s string, bitSize int) \u00b6 s\uff1a\u8981\u89e3\u6790\u6210 float \u7684\u5b57\u7b26\u4e32\uff0c bitSize\uff1a\u6307\u5b9a\u4e86\u671f\u671b\u7684\u63a5\u6536\u7c7b\u578b\uff0c64\u662fcomplex64\uff08\u8fd4\u56de\u503c\u53ef\u4ee5\u4e0d\u6539\u53d8\u7cbe\u786e\u503c\u7684\u8d4b\u503c\u7ed9float32\uff09\uff0c128\u662fcomplex128\u3002 eg\uff1a c , err := strconv . ParseComplex ( \"3+4i\" , 128 ) if err == nil { fmt . Println ( c ) // (3+4i) fmt . Printf ( \"%T \\n\" , c ) // complex128 } T -> string : FormatT() \u00b6 FormatT \u7cfb\u5217\u51fd\u6570\u7528\u4e8e\u5c06 T \u7c7b\u578b\u6570\u636e\u8f6c\u6210\u5b57\u7b26\u4e32 FormatBool \u00b6 \u51fd\u6570\u7b7e\u540d\uff1a FormatBool ( b bool ) string eg\uff1a b := strconv . FormatBool ( true ) fmt . Println ( b ) // true FormatInt \u00b6 \u51fd\u6570\u7b7e\u540d\uff1a FormatInt ( i int64 , base int ) string - i\uff1a\u8981\u8f6c\u6210\u5b57\u7b26\u4e32\u7684\u6570\u5b57\uff0c\u5fc5\u987b\u662f int64 \u7c7b\u578b - base\uff1a\u8981\u8f6c\u6210\u4ec0\u4e48\u8fdb\u5236\u518d\u8f6c\u5b57\u7b26\u4e32 eg\uff1a i1 := strconv . FormatInt ( 31 , 16 ) fmt . Println ( i1 ) // 1f ,\u5c06 10\u8fdb\u5236\u768431 \u8f6c\u6210 16\u8fdb\u5236\u76841f \u7136\u540e\u8f6c\u6210\u5b57\u7b26\u4e32\u8fd4\u56de i2 := strconv . FormatInt ( - 0x1E , 8 ) fmt . Println ( i2 ) // -36, \u5c06 16\u8fdb\u5236\u7684-1E \u8f6c\u6210 8\u8fdb\u5236\u7684-36 \u7136\u540e\u8f6c\u6210\u5b57\u7b26\u4e32\u8fd4\u56de FormatUint \u00b6 \u51fd\u6570\u7b7e\u540d\uff1a FormatUint ( i uint64 , base int ) string - i\uff1a\u8981\u8f6c\u6210\u5b57\u7b26\u4e32\u7684\u6570\u5b57\uff0c\u5fc5\u987b\u662f uint64 \u7c7b\u578b - base\uff1a\u8981\u8f6c\u6210\u4ec0\u4e48\u8fdb\u5236\u518d\u8f6c\u5b57\u7b26\u4e32 eg\uff1a u := strconv . FormatUint ( 12 , 8 ) fmt . Println ( u ) // 14, \u5c06 10\u8fdb\u5236\u768412 \u8f6c\u6210 8\u8fdb\u5236\u768414 \u7136\u540e\u8f6c\u6210\u5b57\u7b26\u4e32\u8fd4\u56de FormatFloat \u00b6 \u51fd\u6570\u7b7e\u540d\uff1a FormatFloat ( f float64 , fmt byte , prec , bitSize int ) string - f\uff1a\u8981\u8f6c\u6210\u5b57\u7b26\u4e32\u7684\u6d6e\u70b9\u6570 - fmt\uff1a['f', 'b', 'e', 'E', 'g', 'G']\uff1b\u8868\u793a\u683c\u5f0f - f\uff1a000.000 - b\uff1a000p\u00b1000 \u4e8c\u8fdb\u5236\u6307\u6570 - e\uff1a0.0000e\u00b100 \u5341\u8fdb\u5236\u6307\u6570 - E\uff1a0.0000E\u00b100 \u5341\u8fdb\u5236\u6307\u6570 - g\uff1a\u6307\u6570\u5f88\u5927\u65f6\u7528e\u683c\u5f0f\uff0c\u4e0d\u5927\u65f6\u7528f\u683c\u5f0f - G\uff1a\u6307\u6570\u5f88\u5927\u65f6\u7528E\u683c\u5f0f\uff0c\u4e0d\u5927\u65f6\u7528f\u683c\u5f0f - prec\uff1a - \u5bf9\u4e8e f\u683c\u5f0f\u3001e\u683c\u5f0f\u3001E\u683c\u5f0f\uff1a\u63a7\u5236\u5c0f\u6570\u70b9\u540e\u4f4d\u6570 - \u5bf9\u4e8e g\u683c\u5f0f\u3001G\u683c\u5f0f\uff1a\u63a7\u5236\u4e2d\u6570\u5b57\u4e2a\u6570 - \u4e3a-1\u65f6\uff0c\u4ee3\u8868\u4f7f\u7528\u6700\u5c11\u6570\u91cf\u7684\u3001\u4f46\u53c8\u5fc5\u9700\u7684\u6570\u5b57\u6765\u8868\u793af - bitSize\uff1a\u8868\u793a\u6d6e\u70b9\u6570\u6765\u6e90\u7c7b\u578b\uff0832\uff1afloat32\u300164\uff1afloat64\uff09 eg\uff1a v := 4.12345678 ff64 := strconv . FormatFloat ( v , 'f' , 30 , 64 ) ff32 := strconv . FormatFloat ( v , 'f' , 30 , 32 ) fb := strconv . FormatFloat ( v , 'b' , 10 , 32 ) fe := strconv . FormatFloat ( v , 'e' , - 1 , 32 ) fe10 := strconv . FormatFloat ( v , 'e' , 10 , 32 ) fg := strconv . FormatFloat ( v , 'g' , 10 , 32 ) fmt . Println ( ff64 ) // 4.123456779999999710639713157434 fmt . Println ( ff32 ) // 4.123456954956054687500000000000 fmt . Println ( fb ) // 8647516p-21 fmt . Println ( fe ) // 4.123457e+00 fmt . Println ( fe10 ) // 4.1234569550e+00 fmt . Println ( fg ) // 4.123456955 FormatComplex \u00b6 \u51fd\u6570\u7b7e\u540d\uff1a FormatComplex ( c complex128 , fmt byte , prec , bitSize int ) string - f\uff1a\u8981\u8f6c\u6210\u5b57\u7b26\u4e32\u7684\u590d\u6570 - fmt\uff1a['f', 'b', 'e', 'E', 'g', 'G']\uff1b\u8868\u793a\u683c\u5f0f - f\uff1a000.000 - b\uff1a000p\u00b1000 \u4e8c\u8fdb\u5236\u6307\u6570 - e\uff1a0.0000e\u00b100 \u5341\u8fdb\u5236\u6307\u6570 - E\uff1a0.0000E\u00b100 \u5341\u8fdb\u5236\u6307\u6570 - g\uff1a\u6307\u6570\u5f88\u5927\u65f6\u7528e\u683c\u5f0f\uff0c\u4e0d\u5927\u65f6\u7528f\u683c\u5f0f - G\uff1a\u6307\u6570\u5f88\u5927\u65f6\u7528E\u683c\u5f0f\uff0c\u4e0d\u5927\u65f6\u7528f\u683c\u5f0f - prec\uff1a - \u5bf9\u4e8e f\u683c\u5f0f\u3001e\u683c\u5f0f\u3001E\u683c\u5f0f\uff1a\u63a7\u5236\u5c0f\u6570\u70b9\u540e\u4f4d\u6570 - \u5bf9\u4e8e g\u683c\u5f0f\u3001G\u683c\u5f0f\uff1a\u63a7\u5236\u4e2d\u6570\u5b57\u4e2a\u6570 - \u4e3a-1\u65f6\uff0c\u4ee3\u8868\u4f7f\u7528\u6700\u5c11\u6570\u91cf\u7684\u3001\u4f46\u53c8\u5fc5\u9700\u7684\u6570\u5b57\u6765\u8868\u793af - bitSize\uff1a\u8868\u793a\u590d\u6570\u6765\u6e90\u7c7b\u578b\uff0864\uff1acomplex64\u3001128\uff1acomplex128\uff09 eg\uff1a c := strconv . FormatComplex ( 3 + 8i , 'e' , 10 , 64 ) fmt . Println ( c ) // (3.0000000000e+00+8.0000000000e+00i) T -> string & append to slice : AppendT() \u00b6 AppendT \u7cfb\u5217\u51fd\u6570\u7528\u4e8e\u5c06 T \u8f6c\u6210\u5b57\u7b26\u4e32\u540e append \u5230\u4e00\u4e2a \u5207\u7247 slice \u4e2d package main import ( \"fmt\" \"strconv\" ) func main () { // \u58f0\u660e\u4e00\u4e2aslice b10 := [] byte ( \"int (base 10):\" ) // \u5c06\u8f6c\u6362\u4e3a10\u8fdb\u5236\u7684string\uff0c\u8ffd\u52a0\u5230slice\u4e2d b10 = strconv . AppendInt ( b10 , - 42 , 10 ) fmt . Println ( string ( b10 )) // int (base 10):-42 b16 := [] byte ( \"int (base 16):\" ) b16 = strconv . AppendInt ( b16 , - 42 , 16 ) fmt . Println ( string ( b16 )) // int (base 16):-2a } \u7c7b\u578b\u65ad\u8a00 \u00b6 \u7c7b\u578b\u65ad\u8a00\u5206\u4e24\u79cd\u5f62\u5f0f\uff1a Type Assertion \u548c Type Switch \u3002 Type Assertion \u00b6 expression .( Type ) eg\uff1a t := i .( T ) t , ok := i .( T ) Type Assertion \u7684\u4f5c\u7528\u6709\u4e24\u4e2a\uff1a \u68c0\u67e5 i \u662f\u5426\u4e3a nil \u68c0\u67e5 i \u7684\u503c\u662f\u5426\u4e3a T \u7c7b\u578b \u4f7f\u7528\u65b9\u5f0f\u6709\u4e24\u79cd: t := i.(T) \uff1a \u8bf4\u660e \uff1a\u53ef\u4ee5\u65ad\u8a00\u4e00\u4e2a\u63a5\u53e3\u5bf9\u8c61 i \u7684\u503c\u4e0d\u662f nil \uff0c\u5e76\u4e14\u503c\u662f T \u7c7b\u578b\u3002 \u65ad\u8a00\u6210\u529f \uff1a\u8fd4\u56de i \u7684\u503c\u7ed9 t \u65ad\u8a00\u5931\u8d25 \uff1a\u5f15\u53d1 panic t, ok := i.(T) \u8bf4\u660e \uff1a\u53ef\u4ee5\u65ad\u8a00\u4e00\u4e2a\u63a5\u53e3\u5bf9\u8c61 i \u7684\u503c\u4e0d\u662f nil \uff0c\u5e76\u4e14\u503c\u662f T \u7c7b\u578b\u3002 \u65ad\u8a00\u6210\u529f \uff1a\u8fd4\u56de i \u7684\u503c\u7ed9 t \uff0c ok \u7684\u503c\u7f6e\u4e3a true \u65ad\u8a00\u5931\u8d25 \uff1a\u8fd4\u56de T \u7684\u96f6\u503c\u7ed9 t \uff0c ok \u7684\u503c\u7f6e\u4e3a false eg\uff1a t := i.(T) func main () { var i interface {} = 10 t1 := i .( int ) fmt . Println ( t1 ) // 10 fmt . Println ( \"+++++++++++++++++++++\" ) t2 := i .( string ) // \u8fd9\u91cc\u4f1a\u5f15\u53d1 panic fmt . Println ( t2 ) } // -------------------------------------- // Output: 10 +++++++++++++++++++++ panic : interface conversion : interface {} is int , not string \u63a5\u53e3\u503c\u4e3a nil \u65f6\uff0c\u65ad\u8a00\u4f1a\u5f15\u53d1 panic func main () { var i interface {} // i \u7684\u503c\u4e3a nil t := i .( interface {}) // \u8fd9\u91cc\u4f1a\u5f15\u53d1 panic fmt . Println ( t ) } // -------------------------------------- // Output: panic : interface conversion : interface is nil , not interface {} 2. t, ok := i.(T) func main () { var i1 interface {} = 10 t1 , ok := i1 .( interface {}) fmt . Printf ( \"t1: %d, %v\\n\" , t1 , ok ) // t1: 10, true t2 , ok := i1 .( int ) fmt . Printf ( \"t2: %v, %v\\n\" , t2 , ok ) // t2: 10, true t3 , ok := i1 .( string ) fmt . Printf ( \"t3: %v, %v\\n\" , t3 , ok ) // t3: , false var i2 interface {} t4 , ok := i2 .( interface {}) fmt . Printf ( \"t4: %v, %v\\n\" , t4 , ok ) // t4: <nil>, false i2 = \"Boii\" t5 , ok := i2 .( int ) fmt . Printf ( \"t5: %v, %v\\n\" , t5 , ok ) // t5: 0, false t6 , ok := i2 .( string ) fmt . Printf ( \"t6: %v, %v\\n\" , t6 , ok ) // t6: Boii, true } // -------------------------------------- // Output: t1 : 10 , true t2 : 10 , true t3 : , false t4 : < nil >, false t5 : 0 , false t6 : Boii , true \u867d\u7136 t3\u3001t4\u3001t5 \u65ad\u8a00\u5931\u8d25\uff0c\u4f46\u6ca1\u6709\u5f15\u53d1 panic Type Switch \u00b6 \u4e0a\u9762\u7684\u65b9\u5f0f\u9002\u5408 \u65ad\u8a00\u6307\u5b9a\u4e00\u79cd\u7c7b\u578b\uff0c\u5982\u679c\u9700\u8981\u65ad\u8a00 \u63a5\u53e3\u5bf9\u8c61 i \u662f\u591a\u79cd\u7c7b\u578b\u4e2d\u7684\u4e00\u79cd\uff0c\u5219\u9700\u8981\u7528 Type Switch\u3002 switch t := \u63a5\u53e3\u5bf9\u8c61 .( type ) { case T1 : ... case T2 : ... case nil : ... default : ... } \u63a5\u53e3\u5bf9\u8c61.(type) \u4e2d\u7684 .(type) \u662f\u56fa\u5b9a\u683c\u5f0f\uff0c\u4e0d\u8981\u4fee\u6539\u3002 func typeSwitch ( i interface {}) { switch t := i .( type ) { case int : fmt . Println ( t , \"is int.\" ) case string : fmt . Println ( t , \"is string.\" ) case float64 : fmt . Println ( t , \"is float64\" ) case nil : fmt . Println ( t , \"is nil\" ) default : fmt . Println ( t , \"\u5565\u4e5f\u4e0d\u662f\" ) } } func main () { var i interface {} typeSwitch ( i ) // <nil> is nil typeSwitch ( \"Boii\" ) // Boii is string. typeSwitch ( 3.14 ) // 3.14 is float64 typeSwitch ( true ) // true \u5565\u4e5f\u4e0d\u662f } t \u662f\u4ec0\u4e48\u7c7b\u578b\u5c31\u8d70\u4ec0\u4e48\u5206\u652f\uff0c t \u662f nil \u5c31\u8d70 case nil \u5206\u652f\uff0c\u6ca1\u6709\u4e00\u4e2a\u6ee1\u8db3\u5c31\u8d70 default \u5206\u652f\u3002 default \u5206\u652f\u662f\u53ef\u9009\u7684\u3002","title":"\u7c7b\u578b\u8f6c\u6362"},{"location":"Go/Basic/Golang-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/#_1","text":"Go \u4e0d\u4f1a\u5bf9\u6570\u636e\u8fdb\u884c\u9690\u5f0f\u8f6c\u6362\uff0c\u53ea\u80fd\u663e\u5f0f\u7684\u624b\u52a8\u8f6c\u6362","title":"\u7c7b\u578b\u8f6c\u6362"},{"location":"Go/Basic/Golang-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/#_2","text":"T ( expression ) eg\uff1a int ( time . Now (). Weekday ()) // \u661f\u671f\u8f6cint int ( time . now (). Month ()) // \u6708\u4efd\u8f6cint var a float32 a = 3.14 b := int ( a ) // float32 \u8f6c int \u6ce8\u610f\uff1a\u8fd9\u79cd\u65b9\u5f0f\u4e0d\u662f\u6240\u6709\u6570\u636e\u7c7b\u578b\u90fd\u80fd\u8f6c\u6362\u7684\u3002 1. \u4f8b\u5982 string \u7c7b\u578b\u7684 \"Boii\" \u8f6c int \u5c31\u4f1a\u5931\u8d25 2. \u4f4e\u7cbe\u5ea6\u8f6c\u9ad8\u7cbe\u5ea6\u65f6\u662f\u5b89\u5168\u7684\uff0c\u9ad8\u7cbe\u5ea6\u8f6c\u4f4e\u7cbe\u5ea6\u5219\u4f1a\u4e22\u5931\u7cbe\u5ea6\uff0c\u4f8b\u5982 float64\u8f6cfloat32 3. \u4e0d\u80fd\u5bf9 int\u3001float \u540c string \u4e92\u8f6c\uff0c\u8de8\u5927\u7c7b\u578b\u8f6c\u6362\uff0c\u53ef\u4ee5\u4f7f\u7528 strconv \u5305 \u63d0\u4f9b\u7684\u51fd\u6570","title":"\u7b80\u5355\u7684\u8f6c\u6362"},{"location":"Go/Basic/Golang-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/#strconv","text":"strconv \u5305\u63d0\u4f9b\u4e86\u57fa\u672c\u6570\u636e\u7c7b\u578b\u4e4b\u95f4\u7684\u7c7b\u578b\u8f6c\u6362\u529f\u80fd\u3002","title":"strconv \u5305"},{"location":"Go/Basic/Golang-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/#string-int-atoi","text":"\u5c06 string \u8f6c\u6362\u4e3a int\uff1aAtoi() Atoi() \u51fd\u6570\u7b7e\u540d\uff1a func Atoi ( s string ) ( int , error ) \u7531\u4e8e string \u6709\u53ef\u80fd\u65e0\u6cd5\u8f6c\u6362\u4e3a int\uff0c\u6240\u4ee5\u63d0\u4f9b\u4e86\u4e24\u4e2a\u8fd4\u56de\u503c - \u7b2c\u4e00\u4e2a\u662f\u8f6c\u6362\u6210 int \u7684\u503c - \u7b2c\u4e8c\u4e2a\u662f\u8fd4\u56de\u662f\u5426\u8f6c\u6362\u6210\u529f eg\uff1a // success i , err := strconv . Atoi ( \"3\" ) fmt . Print ( i + 5 ) // 8 // fail i , err := strconv . Atoi ( \"a\" ) if err != nil { fmt . Print ( \"Converted FAILED!\" ) }","title":"string -&gt; int : Atoi()"},{"location":"Go/Basic/Golang-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/#int-string-itoa","text":"func Itoa ( i int ) string eg\uff1a a := strconv . Itoa ( 18 ) fmt . Println ( a ) // 18 fmt . Printf ( \"%T \\n\" , a ) // string","title":"int -&gt; string : Itoa()"},{"location":"Go/Basic/Golang-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/#string-t-parset","text":"Parse \u7c7b\u51fd\u6570\u7528\u4e8e\u5c06\u5b57\u7b26\u8f6c\u8f6c\u6362\u4e3a\u7ed9\u5b9a\u7c7b\u578b\u7684\u503c","title":"string -&gt; T : ParseT()"},{"location":"Go/Basic/Golang-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/#parseboolstr-string","text":"eg\uff1a b , err := strconv . ParseBool ( \"true\" ) if err == nil { fmt . Println ( b ) // true } ParseBool \u7684\u5185\u90e8\u5b9e\u73b0\u975e\u5e38\u7b80\u5355 func ParseBool ( str string ) ( bool , error ) { switch str { case \"1\" , \"t\" , \"T\" , \"true\" , \"TRUE\" , \"True\" : return true , nil case \"0\" , \"f\" , \"F\" , \"false\" , \"FALSE\" , \"False\" : return false , nil } return false , syntaxError ( \"ParseBool\" , str ) }","title":"ParseBool(str string)"},{"location":"Go/Basic/Golang-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/#parseints-string-base-int-bitsize-int","text":"s\uff1a\u8981\u89e3\u6790 int \u7684\u5b57\u7b26\u4e32 base\uff1a\u6307\u5b9a\u5b57\u7b26\u4e32\u4e2d\u6570\u5b57\u7684\u8fdb\u5236\uff082\u523036\uff09\uff0c\u5982\u679c\u4e3a0\uff0c\u4f1a\u4ece\u5b57\u7b26\u4e32\u524d\u7f6e\u5224\u65ad\uff1a 0b \u4ee3\u88682\u8fdb\u5236 0o \u4ee3\u88688\u8fdb\u5236 0x \u4ee3\u886816\u8fdb\u5236 \u5426\u5219\u662f10\u8fdb\u5236\u3002 bitSize\uff1a\u6307\u5b9a\u7ed3\u679c\u5fc5\u987b\u80fd\u65e0\u6ea2\u51fa\u8d4b\u503c\u7684\u6574\u6570\u7c7b\u578b\uff0c0\u30018\u300116\u300132\u300164 \u5206\u522b\u4ee3\u8868 int\u3001int8\u3001int16\u3001int32\u3001int64 eg\uff1a i , err := strconv . ParseInt ( \"-C\" , 16 , 0 ) if err == nil { fmt . Println ( i ) // -12 fmt . Printf ( \"%T \\n\" , i ) // int64 } \u5341\u516d\u8fdb\u5236\u4e2d\uff0cC\u4ee3\u886812\uff0c\u4f8b\u5b50\u4e2d\u4f20\u9012\u7684\u662f -C \uff0c\u4e5f\u5c31\u662f-12","title":"ParseInt(s string, base int, bitSize int)"},{"location":"Go/Basic/Golang-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/#parseuints-string-base-int-bitsize-int","text":"\u548c Parseuint \u4e00\u6837\uff0c\u4e0d\u8fc7\u662f\u9488\u5bf9 \u65e0\u7b26\u53f7\u6574\u578b\u7684\uff0c\u5982\u679c\u4f20\u9012\u4e00\u4e2a\u6709\u7b26\u53f7\u7684\u6570\u5b57\u5b57\u7b26\u4e32\uff0c\u4f1a\u8f6c\u6362\u5931\u8d25 eg\uff1a // success u , err := strconv . ParseUint ( \"45\" , 7 , 0 ) if err == nil { fmt . Println ( u ) // 33 fmt . Printf ( \"%T \\n\" , u ) // uint64 } // fail u , err := strconv . ParseUint ( \"-10\" , 10 , 0 ) if err != nil { fmt . Print ( \"Converted FAILED!\" ) } 7\u8fdb\u5236\u7684 45 \u7b49\u4e8e 10\u8fdb\u5236\u768433","title":"ParseUint(s string, base int, bitSize int)"},{"location":"Go/Basic/Golang-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/#parsefloats-string-bitsize-int","text":"s\uff1a\u8981\u89e3\u6790\u6210 float \u7684\u5b57\u7b26\u4e32\uff0c bitSize\uff1a\u6307\u5b9a\u4e86\u671f\u671b\u7684\u63a5\u6536\u7c7b\u578b\uff0c32\u662ffloat32\uff08\u8fd4\u56de\u503c\u53ef\u4ee5\u4e0d\u6539\u53d8\u7cbe\u786e\u503c\u7684\u8d4b\u503c\u7ed9float32\uff09\uff0c64\u662ffloat64\u3002 eg\uff1a f , err := strconv . ParseFloat ( \"3.14\" , 64 ) if err == nil { fmt . Println ( f ) // 3.14 fmt . Printf ( \"%T \\n\" , f ) // float64 } bitSize \u8868\u793a\u4f4d\u6570\uff0c\u53ea\u80fd\u586b 64\u621632\uff0c\u4e0d\u8fc7 ParseFloat \u53ea\u80fd\u63a5\u653664\u4f4d\u7c7b\u578b\u7684\u6d6e\u70b9\u6570\uff0c\u5373\u4f7f bitSize \u4f60\u586b32\uff0c\u4f9d\u7136\u4f1a\u8fd4\u56de\u4e00\u4e2a float64 \u7c7b\u578b\u7684\u6570\u636e\u7ed9\u4f60\uff0c\u56e0\u4e3a\u5176\u5185\u90e8\u5b9e\u73b0\u662f\u8c03\u7528\u4e86\u4e00\u4e2a atof32() \u7684\u51fd\u6570\uff0c\u7136\u540e return float64(f) func ParseFloat ( s string , bitSize int ) ( float64 , error ) { f , n , err := parseFloatPrefix ( s , bitSize ) if err == nil && n != len ( s ) { return 0 , syntaxError ( fnParseFloat , s ) } return f , err } func parseFloatPrefix ( s string , bitSize int ) ( float64 , int , error ) { if bitSize == 32 { f , n , err := atof32 ( s ) return float64 ( f ), n , err } return atof64 ( s ) }","title":"ParseFloat(s string, bitSize int)"},{"location":"Go/Basic/Golang-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/#parsecomplexs-string-bitsize-int","text":"s\uff1a\u8981\u89e3\u6790\u6210 float \u7684\u5b57\u7b26\u4e32\uff0c bitSize\uff1a\u6307\u5b9a\u4e86\u671f\u671b\u7684\u63a5\u6536\u7c7b\u578b\uff0c64\u662fcomplex64\uff08\u8fd4\u56de\u503c\u53ef\u4ee5\u4e0d\u6539\u53d8\u7cbe\u786e\u503c\u7684\u8d4b\u503c\u7ed9float32\uff09\uff0c128\u662fcomplex128\u3002 eg\uff1a c , err := strconv . ParseComplex ( \"3+4i\" , 128 ) if err == nil { fmt . Println ( c ) // (3+4i) fmt . Printf ( \"%T \\n\" , c ) // complex128 }","title":"ParseComplex(s string, bitSize int)"},{"location":"Go/Basic/Golang-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/#t-string-formatt","text":"FormatT \u7cfb\u5217\u51fd\u6570\u7528\u4e8e\u5c06 T \u7c7b\u578b\u6570\u636e\u8f6c\u6210\u5b57\u7b26\u4e32","title":"T -&gt; string : FormatT()"},{"location":"Go/Basic/Golang-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/#formatbool","text":"\u51fd\u6570\u7b7e\u540d\uff1a FormatBool ( b bool ) string eg\uff1a b := strconv . FormatBool ( true ) fmt . Println ( b ) // true","title":"FormatBool"},{"location":"Go/Basic/Golang-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/#formatint","text":"\u51fd\u6570\u7b7e\u540d\uff1a FormatInt ( i int64 , base int ) string - i\uff1a\u8981\u8f6c\u6210\u5b57\u7b26\u4e32\u7684\u6570\u5b57\uff0c\u5fc5\u987b\u662f int64 \u7c7b\u578b - base\uff1a\u8981\u8f6c\u6210\u4ec0\u4e48\u8fdb\u5236\u518d\u8f6c\u5b57\u7b26\u4e32 eg\uff1a i1 := strconv . FormatInt ( 31 , 16 ) fmt . Println ( i1 ) // 1f ,\u5c06 10\u8fdb\u5236\u768431 \u8f6c\u6210 16\u8fdb\u5236\u76841f \u7136\u540e\u8f6c\u6210\u5b57\u7b26\u4e32\u8fd4\u56de i2 := strconv . FormatInt ( - 0x1E , 8 ) fmt . Println ( i2 ) // -36, \u5c06 16\u8fdb\u5236\u7684-1E \u8f6c\u6210 8\u8fdb\u5236\u7684-36 \u7136\u540e\u8f6c\u6210\u5b57\u7b26\u4e32\u8fd4\u56de","title":"FormatInt"},{"location":"Go/Basic/Golang-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/#formatuint","text":"\u51fd\u6570\u7b7e\u540d\uff1a FormatUint ( i uint64 , base int ) string - i\uff1a\u8981\u8f6c\u6210\u5b57\u7b26\u4e32\u7684\u6570\u5b57\uff0c\u5fc5\u987b\u662f uint64 \u7c7b\u578b - base\uff1a\u8981\u8f6c\u6210\u4ec0\u4e48\u8fdb\u5236\u518d\u8f6c\u5b57\u7b26\u4e32 eg\uff1a u := strconv . FormatUint ( 12 , 8 ) fmt . Println ( u ) // 14, \u5c06 10\u8fdb\u5236\u768412 \u8f6c\u6210 8\u8fdb\u5236\u768414 \u7136\u540e\u8f6c\u6210\u5b57\u7b26\u4e32\u8fd4\u56de","title":"FormatUint"},{"location":"Go/Basic/Golang-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/#formatfloat","text":"\u51fd\u6570\u7b7e\u540d\uff1a FormatFloat ( f float64 , fmt byte , prec , bitSize int ) string - f\uff1a\u8981\u8f6c\u6210\u5b57\u7b26\u4e32\u7684\u6d6e\u70b9\u6570 - fmt\uff1a['f', 'b', 'e', 'E', 'g', 'G']\uff1b\u8868\u793a\u683c\u5f0f - f\uff1a000.000 - b\uff1a000p\u00b1000 \u4e8c\u8fdb\u5236\u6307\u6570 - e\uff1a0.0000e\u00b100 \u5341\u8fdb\u5236\u6307\u6570 - E\uff1a0.0000E\u00b100 \u5341\u8fdb\u5236\u6307\u6570 - g\uff1a\u6307\u6570\u5f88\u5927\u65f6\u7528e\u683c\u5f0f\uff0c\u4e0d\u5927\u65f6\u7528f\u683c\u5f0f - G\uff1a\u6307\u6570\u5f88\u5927\u65f6\u7528E\u683c\u5f0f\uff0c\u4e0d\u5927\u65f6\u7528f\u683c\u5f0f - prec\uff1a - \u5bf9\u4e8e f\u683c\u5f0f\u3001e\u683c\u5f0f\u3001E\u683c\u5f0f\uff1a\u63a7\u5236\u5c0f\u6570\u70b9\u540e\u4f4d\u6570 - \u5bf9\u4e8e g\u683c\u5f0f\u3001G\u683c\u5f0f\uff1a\u63a7\u5236\u4e2d\u6570\u5b57\u4e2a\u6570 - \u4e3a-1\u65f6\uff0c\u4ee3\u8868\u4f7f\u7528\u6700\u5c11\u6570\u91cf\u7684\u3001\u4f46\u53c8\u5fc5\u9700\u7684\u6570\u5b57\u6765\u8868\u793af - bitSize\uff1a\u8868\u793a\u6d6e\u70b9\u6570\u6765\u6e90\u7c7b\u578b\uff0832\uff1afloat32\u300164\uff1afloat64\uff09 eg\uff1a v := 4.12345678 ff64 := strconv . FormatFloat ( v , 'f' , 30 , 64 ) ff32 := strconv . FormatFloat ( v , 'f' , 30 , 32 ) fb := strconv . FormatFloat ( v , 'b' , 10 , 32 ) fe := strconv . FormatFloat ( v , 'e' , - 1 , 32 ) fe10 := strconv . FormatFloat ( v , 'e' , 10 , 32 ) fg := strconv . FormatFloat ( v , 'g' , 10 , 32 ) fmt . Println ( ff64 ) // 4.123456779999999710639713157434 fmt . Println ( ff32 ) // 4.123456954956054687500000000000 fmt . Println ( fb ) // 8647516p-21 fmt . Println ( fe ) // 4.123457e+00 fmt . Println ( fe10 ) // 4.1234569550e+00 fmt . Println ( fg ) // 4.123456955","title":"FormatFloat"},{"location":"Go/Basic/Golang-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/#formatcomplex","text":"\u51fd\u6570\u7b7e\u540d\uff1a FormatComplex ( c complex128 , fmt byte , prec , bitSize int ) string - f\uff1a\u8981\u8f6c\u6210\u5b57\u7b26\u4e32\u7684\u590d\u6570 - fmt\uff1a['f', 'b', 'e', 'E', 'g', 'G']\uff1b\u8868\u793a\u683c\u5f0f - f\uff1a000.000 - b\uff1a000p\u00b1000 \u4e8c\u8fdb\u5236\u6307\u6570 - e\uff1a0.0000e\u00b100 \u5341\u8fdb\u5236\u6307\u6570 - E\uff1a0.0000E\u00b100 \u5341\u8fdb\u5236\u6307\u6570 - g\uff1a\u6307\u6570\u5f88\u5927\u65f6\u7528e\u683c\u5f0f\uff0c\u4e0d\u5927\u65f6\u7528f\u683c\u5f0f - G\uff1a\u6307\u6570\u5f88\u5927\u65f6\u7528E\u683c\u5f0f\uff0c\u4e0d\u5927\u65f6\u7528f\u683c\u5f0f - prec\uff1a - \u5bf9\u4e8e f\u683c\u5f0f\u3001e\u683c\u5f0f\u3001E\u683c\u5f0f\uff1a\u63a7\u5236\u5c0f\u6570\u70b9\u540e\u4f4d\u6570 - \u5bf9\u4e8e g\u683c\u5f0f\u3001G\u683c\u5f0f\uff1a\u63a7\u5236\u4e2d\u6570\u5b57\u4e2a\u6570 - \u4e3a-1\u65f6\uff0c\u4ee3\u8868\u4f7f\u7528\u6700\u5c11\u6570\u91cf\u7684\u3001\u4f46\u53c8\u5fc5\u9700\u7684\u6570\u5b57\u6765\u8868\u793af - bitSize\uff1a\u8868\u793a\u590d\u6570\u6765\u6e90\u7c7b\u578b\uff0864\uff1acomplex64\u3001128\uff1acomplex128\uff09 eg\uff1a c := strconv . FormatComplex ( 3 + 8i , 'e' , 10 , 64 ) fmt . Println ( c ) // (3.0000000000e+00+8.0000000000e+00i)","title":"FormatComplex"},{"location":"Go/Basic/Golang-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/#t-string-append-to-slice-appendt","text":"AppendT \u7cfb\u5217\u51fd\u6570\u7528\u4e8e\u5c06 T \u8f6c\u6210\u5b57\u7b26\u4e32\u540e append \u5230\u4e00\u4e2a \u5207\u7247 slice \u4e2d package main import ( \"fmt\" \"strconv\" ) func main () { // \u58f0\u660e\u4e00\u4e2aslice b10 := [] byte ( \"int (base 10):\" ) // \u5c06\u8f6c\u6362\u4e3a10\u8fdb\u5236\u7684string\uff0c\u8ffd\u52a0\u5230slice\u4e2d b10 = strconv . AppendInt ( b10 , - 42 , 10 ) fmt . Println ( string ( b10 )) // int (base 10):-42 b16 := [] byte ( \"int (base 16):\" ) b16 = strconv . AppendInt ( b16 , - 42 , 16 ) fmt . Println ( string ( b16 )) // int (base 16):-2a }","title":"T -&gt; string &amp; append to slice : AppendT()"},{"location":"Go/Basic/Golang-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/#_3","text":"\u7c7b\u578b\u65ad\u8a00\u5206\u4e24\u79cd\u5f62\u5f0f\uff1a Type Assertion \u548c Type Switch \u3002","title":"\u7c7b\u578b\u65ad\u8a00"},{"location":"Go/Basic/Golang-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/#type-assertion","text":"expression .( Type ) eg\uff1a t := i .( T ) t , ok := i .( T ) Type Assertion \u7684\u4f5c\u7528\u6709\u4e24\u4e2a\uff1a \u68c0\u67e5 i \u662f\u5426\u4e3a nil \u68c0\u67e5 i \u7684\u503c\u662f\u5426\u4e3a T \u7c7b\u578b \u4f7f\u7528\u65b9\u5f0f\u6709\u4e24\u79cd: t := i.(T) \uff1a \u8bf4\u660e \uff1a\u53ef\u4ee5\u65ad\u8a00\u4e00\u4e2a\u63a5\u53e3\u5bf9\u8c61 i \u7684\u503c\u4e0d\u662f nil \uff0c\u5e76\u4e14\u503c\u662f T \u7c7b\u578b\u3002 \u65ad\u8a00\u6210\u529f \uff1a\u8fd4\u56de i \u7684\u503c\u7ed9 t \u65ad\u8a00\u5931\u8d25 \uff1a\u5f15\u53d1 panic t, ok := i.(T) \u8bf4\u660e \uff1a\u53ef\u4ee5\u65ad\u8a00\u4e00\u4e2a\u63a5\u53e3\u5bf9\u8c61 i \u7684\u503c\u4e0d\u662f nil \uff0c\u5e76\u4e14\u503c\u662f T \u7c7b\u578b\u3002 \u65ad\u8a00\u6210\u529f \uff1a\u8fd4\u56de i \u7684\u503c\u7ed9 t \uff0c ok \u7684\u503c\u7f6e\u4e3a true \u65ad\u8a00\u5931\u8d25 \uff1a\u8fd4\u56de T \u7684\u96f6\u503c\u7ed9 t \uff0c ok \u7684\u503c\u7f6e\u4e3a false eg\uff1a t := i.(T) func main () { var i interface {} = 10 t1 := i .( int ) fmt . Println ( t1 ) // 10 fmt . Println ( \"+++++++++++++++++++++\" ) t2 := i .( string ) // \u8fd9\u91cc\u4f1a\u5f15\u53d1 panic fmt . Println ( t2 ) } // -------------------------------------- // Output: 10 +++++++++++++++++++++ panic : interface conversion : interface {} is int , not string \u63a5\u53e3\u503c\u4e3a nil \u65f6\uff0c\u65ad\u8a00\u4f1a\u5f15\u53d1 panic func main () { var i interface {} // i \u7684\u503c\u4e3a nil t := i .( interface {}) // \u8fd9\u91cc\u4f1a\u5f15\u53d1 panic fmt . Println ( t ) } // -------------------------------------- // Output: panic : interface conversion : interface is nil , not interface {} 2. t, ok := i.(T) func main () { var i1 interface {} = 10 t1 , ok := i1 .( interface {}) fmt . Printf ( \"t1: %d, %v\\n\" , t1 , ok ) // t1: 10, true t2 , ok := i1 .( int ) fmt . Printf ( \"t2: %v, %v\\n\" , t2 , ok ) // t2: 10, true t3 , ok := i1 .( string ) fmt . Printf ( \"t3: %v, %v\\n\" , t3 , ok ) // t3: , false var i2 interface {} t4 , ok := i2 .( interface {}) fmt . Printf ( \"t4: %v, %v\\n\" , t4 , ok ) // t4: <nil>, false i2 = \"Boii\" t5 , ok := i2 .( int ) fmt . Printf ( \"t5: %v, %v\\n\" , t5 , ok ) // t5: 0, false t6 , ok := i2 .( string ) fmt . Printf ( \"t6: %v, %v\\n\" , t6 , ok ) // t6: Boii, true } // -------------------------------------- // Output: t1 : 10 , true t2 : 10 , true t3 : , false t4 : < nil >, false t5 : 0 , false t6 : Boii , true \u867d\u7136 t3\u3001t4\u3001t5 \u65ad\u8a00\u5931\u8d25\uff0c\u4f46\u6ca1\u6709\u5f15\u53d1 panic","title":"Type Assertion"},{"location":"Go/Basic/Golang-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/#type-switch","text":"\u4e0a\u9762\u7684\u65b9\u5f0f\u9002\u5408 \u65ad\u8a00\u6307\u5b9a\u4e00\u79cd\u7c7b\u578b\uff0c\u5982\u679c\u9700\u8981\u65ad\u8a00 \u63a5\u53e3\u5bf9\u8c61 i \u662f\u591a\u79cd\u7c7b\u578b\u4e2d\u7684\u4e00\u79cd\uff0c\u5219\u9700\u8981\u7528 Type Switch\u3002 switch t := \u63a5\u53e3\u5bf9\u8c61 .( type ) { case T1 : ... case T2 : ... case nil : ... default : ... } \u63a5\u53e3\u5bf9\u8c61.(type) \u4e2d\u7684 .(type) \u662f\u56fa\u5b9a\u683c\u5f0f\uff0c\u4e0d\u8981\u4fee\u6539\u3002 func typeSwitch ( i interface {}) { switch t := i .( type ) { case int : fmt . Println ( t , \"is int.\" ) case string : fmt . Println ( t , \"is string.\" ) case float64 : fmt . Println ( t , \"is float64\" ) case nil : fmt . Println ( t , \"is nil\" ) default : fmt . Println ( t , \"\u5565\u4e5f\u4e0d\u662f\" ) } } func main () { var i interface {} typeSwitch ( i ) // <nil> is nil typeSwitch ( \"Boii\" ) // Boii is string. typeSwitch ( 3.14 ) // 3.14 is float64 typeSwitch ( true ) // true \u5565\u4e5f\u4e0d\u662f } t \u662f\u4ec0\u4e48\u7c7b\u578b\u5c31\u8d70\u4ec0\u4e48\u5206\u652f\uff0c t \u662f nil \u5c31\u8d70 case nil \u5206\u652f\uff0c\u6ca1\u6709\u4e00\u4e2a\u6ee1\u8db3\u5c31\u8d70 default \u5206\u652f\u3002 default \u5206\u652f\u662f\u53ef\u9009\u7684\u3002","title":"Type Switch"},{"location":"Go/Framework/gin/Gin-0-Get-Start/","text":"Hello Gin. GetStart \u00b6 \u8981\u6c42 \u00b6 >= Go v1.13 \u5b89\u88c5 \u00b6 \u524d\u63d0\uff1a \u5b89\u88c5 Golang \u8bbe\u7f6e Go \u5de5\u4f5c\u533a \u4e0b\u8f7d\u5e76\u5b89\u88c5 gin\uff1a $ go get -u github.com/gin-gonic/gin \u5728\u4ee3\u7801\u4e2d\u5f15\u5165 import \"github.com/gin-gonic/gin\" import \"net/http\" \u5f00\u59cb \u00b6 \u5148\u521b\u5efa\u4e00\u4e2ago\u6587\u4ef6 $ touch demo.go \u63a5\u7740\u7f16\u5199\u4e0b\u9762\u7684\u4ee3\u7801\uff1a package main import ( \"github.com/gin-gonic/gin\" \"net/http\" ) func main () { app := gin . Default () app . GET ( \"/hi\" , func ( c * gin . Context ) { c . JSON ( http . StatusOK , gin . H { \"msg\" : \"Hello Gin!\" , }) }) app . Run () // \u9ed8\u8ba4\u8fd0\u884c\u5728 8080 \u7aef\u53e3 } \u7136\u540e\u6267\u884c go run demo.go \u547d\u4ee4\u8fd0\u884c\u4ee3\u7801\uff1a $ go rum demo.go \u6700\u540e\u6253\u5f00\u6d4f\u89c8\u5668\u8bbf\u95ee http://localhost:8080/hi","title":"Get start"},{"location":"Go/Framework/gin/Gin-0-Get-Start/#getstart","text":"","title":"GetStart"},{"location":"Go/Framework/gin/Gin-0-Get-Start/#_1","text":">= Go v1.13","title":"\u8981\u6c42"},{"location":"Go/Framework/gin/Gin-0-Get-Start/#_2","text":"\u524d\u63d0\uff1a \u5b89\u88c5 Golang \u8bbe\u7f6e Go \u5de5\u4f5c\u533a \u4e0b\u8f7d\u5e76\u5b89\u88c5 gin\uff1a $ go get -u github.com/gin-gonic/gin \u5728\u4ee3\u7801\u4e2d\u5f15\u5165 import \"github.com/gin-gonic/gin\" import \"net/http\"","title":"\u5b89\u88c5"},{"location":"Go/Framework/gin/Gin-0-Get-Start/#_3","text":"\u5148\u521b\u5efa\u4e00\u4e2ago\u6587\u4ef6 $ touch demo.go \u63a5\u7740\u7f16\u5199\u4e0b\u9762\u7684\u4ee3\u7801\uff1a package main import ( \"github.com/gin-gonic/gin\" \"net/http\" ) func main () { app := gin . Default () app . GET ( \"/hi\" , func ( c * gin . Context ) { c . JSON ( http . StatusOK , gin . H { \"msg\" : \"Hello Gin!\" , }) }) app . Run () // \u9ed8\u8ba4\u8fd0\u884c\u5728 8080 \u7aef\u53e3 } \u7136\u540e\u6267\u884c go run demo.go \u547d\u4ee4\u8fd0\u884c\u4ee3\u7801\uff1a $ go rum demo.go \u6700\u540e\u6253\u5f00\u6d4f\u89c8\u5668\u8bbf\u95ee http://localhost:8080/hi","title":"\u5f00\u59cb"},{"location":"Go/Framework/gin/Gin-1-%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE/","text":"Gin \u8fd4\u56de\u6570\u636e\u683c\u5f0f \u8fd4\u56de \u00b6 \u5728\u63a5\u6536\u5230\u8bf7\u6c42\uff0c\u7ecf\u8fc7\u4e00\u756a\u5904\u7406\u4e4b\u540e\uff0c\u6211\u4eec\u9700\u8981\u8fd4\u56de\u7ed3\u679c\uff0c\u4e5f\u5c31\u662f\u54cd\u5e94\u8bf7\u6c42\u3002 \u54cd\u5e94\u8bf7\u6c42\u7684\u683c\u5f0f\u6709 >= 5\u79cd\u683c\u5f0f\uff1a []byte string JSON XML YAML protobuf Template []byte \u65b9\u5f0f \u00b6 \u8fd4\u56de\u5b57\u8282\u5207\u7247\u683c\u5f0f\u65f6\uff0c\u9700\u8981\u4f7f\u7528 gin.Context.Writer \u7684 Write \u65b9\u6cd5\uff0c\u5c06\u5b57\u8282\u5207\u7247\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\u5373\u53ef\uff0c\u65e0\u9700\u586b\u5199\u72b6\u6001\u7801\u3002 func main () { r := gin . Default () r . GET ( \"/byte\" , func ( c * gin . Context ) { fullpath := \"\u8bf7\u6c42\u8def\u5f84\uff1a \" + c . FullPath () c . Writer . Write ([] byte ( fullpath )) }) r . Run () } string \u65b9\u5f0f \u00b6 \u4f7f\u7528 string \u65b9\u5f0f\u5219\u65b9\u4fbf\u8bb8\u591a\uff0c\u76f4\u63a5\u4f7f\u7528 gin.Context \u7684 String \u65b9\u6cd5\uff1b func ( c * Context ) String ( code int , format string , values ... interface {}); \u53c2\u6570\u542b\u4e49\u4e3a \u72b6\u6001\u7801\u3001\u683c\u5f0f\u5b57\u7b26\u4e32\u3001\u503c \u3002 func main () { r := gin . Default () r . GET ( \"/byte\" , func ( c * gin . Context ) { fullpath := \"\u8bf7\u6c42\u8def\u5f84\uff1a \" + c . FullPath () c . String ( 200 , \"\u8bf7\u6c42\u8def\u5f84: %s\" , c . FullPath ()) }) r . Run () } JSON \u683c\u5f0f \u00b6 \u6700\u5e38\u7528\u7684\u5c31\u662f\u8fd4\u56de JSON \u683c\u5f0f\uff0c\u65b9\u6cd5\u65f6\u4f7f\u7528 gin.Context \u7684 JSON \u65b9\u6cd5\uff1a func ( c * Context ) JSON ( code int , obj interface {}); \u53c2\u6570\u542b\u4e49\u4e3a \u72b6\u6001\u7801\u3001\u6570\u636e \u8fd4\u56de\u7684\u6570\u636e\u53ef\u4ee5\u7528 map[string]interface{} \u6765\u88c5\u8f7d\uff0c\u800c gin \u8d34\u5fc3\u7684\u4e3a\u8fd9\u4e2a\u7c7b\u578b\u505a\u4e86\u5b9a\u4e49 gin.H \u3002 \u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 gin.H \uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u5199\u957f\u957f\u4e00\u4e32\u4e86\u3002 func main () { r := gin . Default () r . GET ( \"/json1\" , func ( c * gin . Context ) { // \u65b9\u6cd51 \u4f7f\u7528 map[string]interface{}\uff0c\u5373 gin.H data := gin . H { \"name\" : \"Boii\" , \"age\" : 17 , } c . JSON ( http . StatusOK , data ) }) r . Run () } \u9664\u4e86 gin.H \uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528\u7ed3\u6784\u4f53\u6765\u88c5\u8f7d\u6211\u4eec\u7684\u6570\u636e\u3002 func main () { r := gin . Default () r . GET ( \"/json2\" , func ( c * gin . Context ) { // \u65b9\u6cd52 \u4f7f\u7528\u7ed3\u6784\u4f53 data := struct { Name string `json:\"name\"` Age int `json:\"age\"` }{ \"Boii\" , 18 } c . JSON ( http . StatusOK , data ) }) r . Run () } YAML \u683c\u5f0f \u00b6 yaml \u4e5f\u662f\u4e00\u79cd\u5f88\u597d\u7528\u7684\u683c\u5f0f\uff0c\u8fd1\u5e74\u6765\u4e5f\u5f00\u59cb\u9010\u6e10\u5174\u8d77 func ( c * Context ) YAML ( code int , obj interface {}); \u53c2\u6570\u542b\u4e49\u4e3a \u72b6\u6001\u7801\u3001\u6570\u636e \uff0c\u57fa\u672c\u548cJSON\u662f\u4e00\u6837\u7684\uff0c\u6570\u636e\u53ef\u4ee5\u4f7f\u7528 gin.H \u4e5f\u53ef\u4ee5\u4f7f\u7528\u7ed3\u6784\u4f53\u3002 func main () { r := gin . Default () r . GET ( \"/json1\" , func ( c * gin . Context ) { // \u65b9\u6cd51 \u4f7f\u7528 map[string]interface{}\uff0c\u5373 gin.H data := gin . H { \"name\" : \"Boii\" , \"age\" : 17 , } c . YAML ( http . StatusOK , data ) }) r . Run () } \u9664\u4e86 gin.H \uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528\u7ed3\u6784\u4f53\u6765\u88c5\u8f7d\u6211\u4eec\u7684\u6570\u636e\u3002 func main () { r := gin . Default () r . GET ( \"/json2\" , func ( c * gin . Context ) { // \u65b9\u6cd52 \u4f7f\u7528\u7ed3\u6784\u4f53 data := struct { Name string `json:\"name\"` Age int `json:\"age\"` }{ \"Boii\" , 18 } c . YAML ( http . StatusOK , data ) }) r . Run () } XML \u683c\u5f0f \u00b6 \u8fd8\u6709\u4e00\u79cd\u4e5f\u662f\u5f88\u5e38\u7528\u7684\u683c\u5f0f\u662f XML\uff0c\u4f46\u662f\u8fd9\u79cd\u53ea\u80fd\u4f7f\u7528 gin.H \uff0c\u4e0d\u80fd\u4f7f\u7528\u7ed3\u6784\u4f53\u88c5\u8f7d\u6570\u636e\u3002 func ( c * Context ) XML ( code int , obj interface {}); func main () { r := gin . Default () r . GET ( \"/xml\" , func ( c * gin . Context ) { data := gin . H { \"name\" : \"Boii\" , \"age\" : 18 , } c . XML ( http . StatusOK , data ) }) r . Run () }","title":"\u8fd4\u56de\u6570\u636e"},{"location":"Go/Framework/gin/Gin-1-%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE/#_1","text":"\u5728\u63a5\u6536\u5230\u8bf7\u6c42\uff0c\u7ecf\u8fc7\u4e00\u756a\u5904\u7406\u4e4b\u540e\uff0c\u6211\u4eec\u9700\u8981\u8fd4\u56de\u7ed3\u679c\uff0c\u4e5f\u5c31\u662f\u54cd\u5e94\u8bf7\u6c42\u3002 \u54cd\u5e94\u8bf7\u6c42\u7684\u683c\u5f0f\u6709 >= 5\u79cd\u683c\u5f0f\uff1a []byte string JSON XML YAML protobuf Template","title":"\u8fd4\u56de"},{"location":"Go/Framework/gin/Gin-1-%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE/#byte","text":"\u8fd4\u56de\u5b57\u8282\u5207\u7247\u683c\u5f0f\u65f6\uff0c\u9700\u8981\u4f7f\u7528 gin.Context.Writer \u7684 Write \u65b9\u6cd5\uff0c\u5c06\u5b57\u8282\u5207\u7247\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\u5373\u53ef\uff0c\u65e0\u9700\u586b\u5199\u72b6\u6001\u7801\u3002 func main () { r := gin . Default () r . GET ( \"/byte\" , func ( c * gin . Context ) { fullpath := \"\u8bf7\u6c42\u8def\u5f84\uff1a \" + c . FullPath () c . Writer . Write ([] byte ( fullpath )) }) r . Run () }","title":"[]byte \u65b9\u5f0f"},{"location":"Go/Framework/gin/Gin-1-%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE/#string","text":"\u4f7f\u7528 string \u65b9\u5f0f\u5219\u65b9\u4fbf\u8bb8\u591a\uff0c\u76f4\u63a5\u4f7f\u7528 gin.Context \u7684 String \u65b9\u6cd5\uff1b func ( c * Context ) String ( code int , format string , values ... interface {}); \u53c2\u6570\u542b\u4e49\u4e3a \u72b6\u6001\u7801\u3001\u683c\u5f0f\u5b57\u7b26\u4e32\u3001\u503c \u3002 func main () { r := gin . Default () r . GET ( \"/byte\" , func ( c * gin . Context ) { fullpath := \"\u8bf7\u6c42\u8def\u5f84\uff1a \" + c . FullPath () c . String ( 200 , \"\u8bf7\u6c42\u8def\u5f84: %s\" , c . FullPath ()) }) r . Run () }","title":"string \u65b9\u5f0f"},{"location":"Go/Framework/gin/Gin-1-%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE/#json","text":"\u6700\u5e38\u7528\u7684\u5c31\u662f\u8fd4\u56de JSON \u683c\u5f0f\uff0c\u65b9\u6cd5\u65f6\u4f7f\u7528 gin.Context \u7684 JSON \u65b9\u6cd5\uff1a func ( c * Context ) JSON ( code int , obj interface {}); \u53c2\u6570\u542b\u4e49\u4e3a \u72b6\u6001\u7801\u3001\u6570\u636e \u8fd4\u56de\u7684\u6570\u636e\u53ef\u4ee5\u7528 map[string]interface{} \u6765\u88c5\u8f7d\uff0c\u800c gin \u8d34\u5fc3\u7684\u4e3a\u8fd9\u4e2a\u7c7b\u578b\u505a\u4e86\u5b9a\u4e49 gin.H \u3002 \u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 gin.H \uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u5199\u957f\u957f\u4e00\u4e32\u4e86\u3002 func main () { r := gin . Default () r . GET ( \"/json1\" , func ( c * gin . Context ) { // \u65b9\u6cd51 \u4f7f\u7528 map[string]interface{}\uff0c\u5373 gin.H data := gin . H { \"name\" : \"Boii\" , \"age\" : 17 , } c . JSON ( http . StatusOK , data ) }) r . Run () } \u9664\u4e86 gin.H \uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528\u7ed3\u6784\u4f53\u6765\u88c5\u8f7d\u6211\u4eec\u7684\u6570\u636e\u3002 func main () { r := gin . Default () r . GET ( \"/json2\" , func ( c * gin . Context ) { // \u65b9\u6cd52 \u4f7f\u7528\u7ed3\u6784\u4f53 data := struct { Name string `json:\"name\"` Age int `json:\"age\"` }{ \"Boii\" , 18 } c . JSON ( http . StatusOK , data ) }) r . Run () }","title":"JSON \u683c\u5f0f"},{"location":"Go/Framework/gin/Gin-1-%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE/#yaml","text":"yaml \u4e5f\u662f\u4e00\u79cd\u5f88\u597d\u7528\u7684\u683c\u5f0f\uff0c\u8fd1\u5e74\u6765\u4e5f\u5f00\u59cb\u9010\u6e10\u5174\u8d77 func ( c * Context ) YAML ( code int , obj interface {}); \u53c2\u6570\u542b\u4e49\u4e3a \u72b6\u6001\u7801\u3001\u6570\u636e \uff0c\u57fa\u672c\u548cJSON\u662f\u4e00\u6837\u7684\uff0c\u6570\u636e\u53ef\u4ee5\u4f7f\u7528 gin.H \u4e5f\u53ef\u4ee5\u4f7f\u7528\u7ed3\u6784\u4f53\u3002 func main () { r := gin . Default () r . GET ( \"/json1\" , func ( c * gin . Context ) { // \u65b9\u6cd51 \u4f7f\u7528 map[string]interface{}\uff0c\u5373 gin.H data := gin . H { \"name\" : \"Boii\" , \"age\" : 17 , } c . YAML ( http . StatusOK , data ) }) r . Run () } \u9664\u4e86 gin.H \uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528\u7ed3\u6784\u4f53\u6765\u88c5\u8f7d\u6211\u4eec\u7684\u6570\u636e\u3002 func main () { r := gin . Default () r . GET ( \"/json2\" , func ( c * gin . Context ) { // \u65b9\u6cd52 \u4f7f\u7528\u7ed3\u6784\u4f53 data := struct { Name string `json:\"name\"` Age int `json:\"age\"` }{ \"Boii\" , 18 } c . YAML ( http . StatusOK , data ) }) r . Run () }","title":"YAML \u683c\u5f0f"},{"location":"Go/Framework/gin/Gin-1-%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE/#xml","text":"\u8fd8\u6709\u4e00\u79cd\u4e5f\u662f\u5f88\u5e38\u7528\u7684\u683c\u5f0f\u662f XML\uff0c\u4f46\u662f\u8fd9\u79cd\u53ea\u80fd\u4f7f\u7528 gin.H \uff0c\u4e0d\u80fd\u4f7f\u7528\u7ed3\u6784\u4f53\u88c5\u8f7d\u6570\u636e\u3002 func ( c * Context ) XML ( code int , obj interface {}); func main () { r := gin . Default () r . GET ( \"/xml\" , func ( c * gin . Context ) { data := gin . H { \"name\" : \"Boii\" , \"age\" : 18 , } c . XML ( http . StatusOK , data ) }) r . Run () }","title":"XML \u683c\u5f0f"},{"location":"Go/Framework/gin/Gin-2-%E6%8E%A5%E6%94%B6%E8%AF%B7%E6%B1%82/","text":"\u63a5\u6536\u8bf7\u6c42 \u63a5\u6536\u8bf7\u6c42 \u00b6 \u4f5c\u4e3a\u4e00\u4e2a\u670d\u52a1\u5668\uff0c\u6700\u57fa\u672c\u7684\u4efb\u52a1\u5c31\u662f\u63a5\u6536\u8bf7\u6c42\uff0c\u7136\u540e\u662f\u8fd4\u56de\u7ed3\u679c\u3002 \u5ba2\u6237\u7aef\u53d1\u6765\u7684\u8bf7\u6c42\u53ef\u4ee5\u6709\u591a\u79cd\uff0c\u5982 GET\u3001POST\u3001PUT\u3001DELETE\u3002 \u6700\u57fa\u672c\u7684\u5c31\u662f GET\u3001POST \u4e24\u79cd\uff0c\u4e0d\u8fc7\u8fd9\u91cc\u8fd8\u662f\u5efa\u8bae\u9075\u5faa RESTful \u89c4\u8303\u3002 \u57fa\u672c\u5904\u7406\uff1aHandle() \u00b6 gin \u63a5\u6536\u8bf7\u6c42\u6709\u4e00\u79cd\u6700\u57fa\u672c\u7684\u65b9\u6cd5\uff0c\u4f7f\u7528 Handle() \u65b9\u6cd5\u3002 \u5176\u65b9\u6cd5\u7b7e\u540d\u5982\u4e0b\uff1a func ( group * RouterGroup ) Handle ( httpMethod , relativePath string , handlers ... HandlerFunc ) IRoutes ; \u5176\u63a5\u53d7\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a HTTP \u8bf7\u6c42\u65b9\u5f0f\uff0c\u7b2c\u4e8c\u4e2a\u4e3a\u8def\u7531\u8def\u5f84\uff0c\u7b2c\u4e09\u4e2a\u4e3a\u8be5\u8bf7\u6c42\u5bf9\u5e94\u7684\u5904\u7406\u51fd\u6570\u3002 \u6700\u57fa\u672c\u7684\u6817\u5b50\uff0c\u63a5\u6536\u4e00\u4e2a GET \u8bf7\u6c42\uff1a func main () { app := gin . Default () app . Handle ( \"GET\" , \"/hello\" , func ( c * gin . Context ) { c . JSON ( http . StatusOK , gin . H { \"msg\" : \"Hello!\" , }) }) app . Run ( \":9090\" ) } \u7b2c4\u884c\u8c03\u7528\u4e86 Handle() \uff0c\u8bf7\u6c42\u65b9\u5f0f\u4e3a GET \u65b9\u6cd5\uff0c\u8def\u7531\u8def\u5f84\u4e3a /hello \uff0c\u5904\u7406\u65b9\u6cd5\u662f\u8fd4\u56de\u4e00\u4e32JSON\u6570\u636e\u3002 \u6d4f\u89c8\u5668\u8bbf\u95ee http://localhost:9090/hello \u53ef\u5f97\u5230\u4e0b\u9762\u7684\u7ed3\u679c \u63a5\u6536 POST\u3001PUT \u7b49\u65b9\u5f0f\u7684\u8bf7\u6c42**\uff1a \u901a\u8fc7 Handle() \u7b2c\u4e00\u4e2a\u53c2\u6570\u6211\u4eec\u53ef\u4ee5\u63a5\u6536\u4e0d\u540c\u65b9\u5f0f\u7684\u8bf7\u6c42\uff0c\u4f8b\u5982 POST func main () { r := gin . Default () // http://127.0.0.1:9090/login r . Handle ( \"POST\" , \"/login\" , func ( c * gin . Context ) { // \u5904\u7406 POST \u8bf7\u6c42 user := c . PostForm ( \"user\" ) // \u83b7\u53d6\u8868\u5355\u53c2\u6570 pass := c . PostForm ( \"pass\" ) // \u83b7\u53d6\u8868\u5355\u53c2\u6570 // \u5904\u7406\u4e1a\u52a1\u903b\u8f91 if user == \"Boii\" && pass == \"123\" { c . JSON ( http . StatusOK , gin . H { \"code\" : 2001 , \"msg\" : \"\u767b\u5f55\u6210\u529f\" , }) return } c . YAML ( http . StatusOK , gin . H { \"code\" : 4001 , \"msg\" : \"\u767b\u5f55\u5931\u8d25\" , }) }) r . Run ( \":9090\" ) } \u901a\u8fc7 Postman \u53ef\u4ee5\u8bbe\u5b9a\u8868\u5355\u53c2\u6570\u7136\u540e\u53d1\u8d77\u8bf7\u6c42\uff0c\u6211\u4eec\u7528gin\u5199\u7684\u4ee3\u7801\u5c31\u53ef\u4ee5\u63a5\u6536\u5230\u4e00\u4e2a POST \u8bf7\u6c42\uff0c\u5e76\u8fdb\u884c\u5904\u7406\u3002 \u53ef\u4ee5\u770b\u5230\uff0c Postman \u4e2d\u8bbe\u7f6e\u4e86\u4e24\u4e2a\u53c2\u6570 user \u548c pass \uff0c\u5411 http://localhost:9090/login \u53d1\u6e05\u8bf7\u6c42\u3002 \u5173\u4e8e\u83b7\u53d6\u53c2\u6570\u540e\u9762\u4f1a\u8be6\u89e3\u3002 \u5feb\u6377\u65b9\u5f0f\uff1agin.GET()\u3001gin.POST()... \u00b6 \u50cf GET\u3001POST\u3001PUT\u3001DELETE \u7b49\u8fd9\u4e9b HTTP\u65b9\u5f0f\u7684\u5904\u7406\u51fd\u6570\u4f1a\u5f88\u5e38\u7528\uff0c\u6240\u4ee5 gin \u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u65b9\u6cd5\u4f9b\u6211\u4eec\u66f4\u65b9\u4fbf\u7684\u4f7f\u7528\u3002 // POST is a shortcut for router.Handle(\"POST\", path, handle). func ( group * RouterGroup ) POST ( relativePath string , handlers ... HandlerFunc ) IRoutes { return group . handle ( http . MethodPost , relativePath , handlers ) } // GET is a shortcut for router.Handle(\"GET\", path, handle). func ( group * RouterGroup ) GET ( relativePath string , handlers ... HandlerFunc ) IRoutes { return group . handle ( http . MethodGet , relativePath , handlers ) } // DELETE is a shortcut for router.Handle(\"DELETE\", path, handle). func ( group * RouterGroup ) DELETE ( relativePath string , handlers ... HandlerFunc ) IRoutes { return group . handle ( http . MethodDelete , relativePath , handlers ) } // PATCH is a shortcut for router.Handle(\"PATCH\", path, handle). func ( group * RouterGroup ) PATCH ( relativePath string , handlers ... HandlerFunc ) IRoutes { return group . handle ( http . MethodPatch , relativePath , handlers ) } // PUT is a shortcut for router.Handle(\"PUT\", path, handle). func ( group * RouterGroup ) PUT ( relativePath string , handlers ... HandlerFunc ) IRoutes { return group . handle ( http . MethodPut , relativePath , handlers ) } // OPTIONS is a shortcut for router.Handle(\"OPTIONS\", path, handle). func ( group * RouterGroup ) OPTIONS ( relativePath string , handlers ... HandlerFunc ) IRoutes { return group . handle ( http . MethodOptions , relativePath , handlers ) } // HEAD is a shortcut for router.Handle(\"HEAD\", path, handle). func ( group * RouterGroup ) HEAD ( relativePath string , handlers ... HandlerFunc ) IRoutes { return group . handle ( http . MethodHead , relativePath , handlers ) } \u901a\u8fc7\u6e90\u7801\u53ef\u4ee5\u770b\u51fa\uff0cgin \u5f88\u8d34\u5fc3\u7684\u505a\u4e86\u4e00\u5c42\u5c01\u88c5\uff0c\u63d0\u4f9b\u4e86\u5bf9\u5e94\u8bf7\u6c42\u65b9\u5f0f\u7684 shortcut \uff0c\u4f7f\u5f00\u53d1\u8005\u66f4\u65b9\u4fbf\u7684\u8c03\u7528\u3002 \u53c2\u6570\u4e0a\u53ea\u9700\u8981\u4f20\u9012 \u8def\u7531\u8def\u5f84 \u548c \u5904\u7406\u51fd\u6570 \u5373\u53ef\uff0c\u8fd9\u4e9b\u201c\u5feb\u6377\u65b9\u5f0f\u201d\u4f1a\u5e2e\u6211\u4eec\u8c03\u7528 handle() \u3002 eg\uff1a func main () { r := gin . Default () // http://127.0.0.1:9090/hello r . GET ( \"/hello\" , func ( c * gin . Context ) { c . JSON ( http . StatusOK , gin . H { \"msg\" : \"Hello\" }) }) r . Run ( \":9090\" ) } func main () { r := gin . Default () // http://127.0.0.1:9090/login r . POST ( \"/login\" , func ( c * gin . Context ) { c . JSON ( http . StatusOK , gin . H { \"msg\" : \"Hello\" }) }) r . Run ( \":9090\" ) } 404 \u9875\u9762 \u00b6 func main () { r := gin . Default () r . NoRoute ( func ( c * gin . Context ) { c . HTML ( http . StatusNotFound , \"views/404.html\" , nil ) }) r . Run ( \":9090\" ) } \u4e0d\u9700\u8981\u6307\u5b9a\u8def\u5f84\uff0c\u53ea\u8981\u7528\u6237\u8bbf\u95ee\u4e0d\u5b58\u5728\u7684\u8def\u5f84\uff0c\u5c31\u4f1a\u6267\u884c\u6b64\u8def\u7531\u3002 \u5904\u7406\u8bf7\u6c42\u53c2\u6570 \u00b6 \u83b7\u53d6 GET \u8bf7\u6c42\u7684\u53c2\u6570 \u00b6 GET \u8bf7\u6c42\u7684\u53c2\u6570\u4f1a\u663e\u5f0f\u7684\u643a\u5e26\u5728URL\u4e2d\u3002 \u53ef\u4ee5\u901a\u8fc7 gin.Context.Query() \u6216 gin.Context.DefaultQuery() \u4e24\u79cd\u65b9\u6cd5\u83b7\u53d6\u3002 \u4ed6\u4eec\u7684\u533a\u522b\u662f DefaultQuery() \u9700\u8981\u586b\u5165\u9ed8\u8ba4\u503c\u3002 func ( c * Context ) Query ( key string ) string ; func ( c * Context ) DefaultQuery ( key , defaultValue string ) string ; eg\uff1a func main () { r := gin . Default () r . GET ( \"/hello\" , func ( c * gin . Context ) { name := c . Query ( \"name\" ) age := c . DefaultQuery ( \"age\" ) c . JSON ( 200 , gin . H { \"msg\" : \"Hello \" + name + \", you're \" + age }) }) r . Run ( \":9090\" ) } \u83b7\u53d6 POST \u8868\u5355\u53c2\u6570 \u00b6 POST \u8bf7\u6c42\u7684\u53c2\u6570\u4e0d\u4f1a\u663e\u5f0f\u7684\u643a\u5e26\u5728URL\u4e2d\uff0c\u800c\u662f\u5305\u88f9\u5728\u8bf7\u6c42\u4f53 Body \u4e2d\uff0c\u662f\u901a\u8fc7\u8868\u5355\u63d0\u4ea4\u7684\u3002 \u53ef\u4ee5\u901a\u8fc7 gin.Context.Postform() \u6216 gin.Context.DefaultPostform() \u4e24\u79cd\u65b9\u6cd5\u83b7\u53d6\u3002 \u540c\u6837\u4ed6\u4eec\u7684\u533a\u522b\u4ec5\u5728\u4e8e\u4e00\u4e2a\u9700\u8981\u586b\u5165\u9ed8\u8ba4\u503c\u3002 func ( c * Context ) PostForm ( key string ) string ; func ( c * Context ) DefaultPostForm ( key , defaultValue string ) string ; eg\uff1a func main () { r := gin . Default () // http://127.0.0.1:9090/login r . POST ( \"/login\" , func ( c * gin . Context ) { user := c . DefaultPostForm ( \"user\" , \"admin\" ) pass := c . PostForm ( \"pass\" ) if user == \"Boii\" && pass == \"123\" { c . JSON ( http . StatusOK , gin . H { \"code\" : 2001 , \"msg\" : \"\u767b\u5f55\u6210\u529f\" , }) return } c . YAML ( http . StatusOK , gin . H { \"code\" : 4001 , \"msg\" : \"\u767b\u5f55\u5931\u8d25\" , }) }) r . Run ( \":9090\" ) } \u5904\u7406\u5176\u4ed6\u683c\u5f0f\u7684\u8bf7\u6c42\u53c2\u6570 \u00b6 \u9664\u4e86URL\u4e2d\u7684\u53c2\u6570\u3001\u8868\u5355\u63d0\u4ea4\u7684\u53c2\u6570\uff0c\u5728\u5ba2\u6237\u7aef\u53d1\u8d77 HTTP \u8bf7\u6c42\u65f6\u8fd8\u53ef\u4ee5\u4f7f\u7528 JSON\u3001XML\u3001YAML \u7b49\u683c\u5f0f\u3002 \u83b7\u53d6\u8fd9\u4e9b\u683c\u5f0f\u7684\u53c2\u6570\uff0c\u53ef\u4ee5\u901a\u8fc7 gin.Context.Bind() \u6765\u83b7\u53d6\uff0c Bind() \u6709\u4e00\u7cfb\u5217\u7684\u65b9\u6cd5\uff1a func ( c * Context ) Bind ( obj interface {}) error ; func ( c * Context ) BindJSON ( obj interface {}) error ; func ( c * Context ) BindXML ( obj interface {}) error ; func ( c * Context ) BindQuery ( obj interface {}) error ; func ( c * Context ) BindYAML ( obj interface {}) error ; func ( c * Context ) BindHeader ( obj interface {}) error ; func ( c * Context ) BindUri ( obj interface {}) error ; func ( c * Context ) MustBindWith ( obj interface {}, b binding . Binding ) error ; \u663e\u7136\uff0c\u8981\u89e3\u6790\u8bf7\u6c42\u4e2d\u4ec0\u4e48\u7c7b\u578b\u7684\u6570\u636e\u5c31\u8c03\u7528\u4ec0\u4e48\u65b9\u6cd5\uff0c\u53c2\u6570 obj \u9700\u8981\u6211\u4eec\u4f20\u5165\u4e00\u4e2a\u7ed3\u6784\u4f53\u53d8\u91cf\uff0c\u7528\u4e8e\u88c5\u8f7d\u89e3\u6790\u540e\u7684\u6570\u636e\u3002 \u7ed3\u6784\u4f53\u6bcf\u4e2a\u5b57\u6bb5\u90fd\u9700\u8981\u6709 tag\uff0c\u5426\u5219\u4f1a\u89e3\u6790\u5931\u8d25\u3002 type UserInfo struct { User string Pass string } var u UserInfo func main () { r := gin . Default () r . POST ( \"/login\" , func ( c * gin . Context ) { c . BindJSON ( & u ) c . JSON ( 200 , gin . H { \"user\" : u . User , \"pass\" : u . Pass , }) }) r . Run ( \":9090\" ) } \u4e0a\u9762\u7684\u4f8b\u5b50\u53ef\u4ee5\u89e3\u6790 HTTP \u8bf7\u6c42\u4e2d\u901a\u8fc7 JSON \u643a\u5e26\u7684\u6570\u636e\u3002 Bind() \u00b6 \u5982\u679c\u60f3\u6839\u636e\u8bf7\u6c42\u4e2d\u7684 content-type \u5c5e\u6027\u6765\u9009\u62e9\uff0c\u53ef\u4ee5\u4f7f\u7528 Bind() \u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u4f1a // gin \u6e90\u7801 // context.go // Bind checks the Content-Type to select a binding engine automatically, // Depending the \"Content-Type\" header different bindings are used: // \"application/json\" --> JSON binding // \"application/xml\" --> XML binding // otherwise --> returns an error. // It parses the request's body as JSON if Content-Type == \"application/json\" using JSON or XML as a JSON input. // It decodes the json payload into the struct specified as a pointer. // It writes a 400 error and sets Content-Type header \"text/plain\" in the response if input is not valid. func ( c * Context ) Bind ( obj interface {}) error { b := binding . Default ( c . Request . Method , c . ContentType ()) return c . MustBindWith ( obj , b ) } // gin \u6e90\u7801 // binding.go // Default returns the appropriate Binding instance based on the HTTP method // and the content type. func Default ( method , contentType string ) Binding { if method == http . MethodGet { return Form } switch contentType { case MIMEJSON : return JSON case MIMEXML , MIMEXML2 : return XML case MIMEPROTOBUF : return ProtoBuf case MIMEMSGPACK , MIMEMSGPACK2 : return MsgPack case MIMEYAML : return YAML case MIMEMultipartPOSTForm : return FormMultipart default : // case MIMEPOSTForm: return Form } } \u53ef\u4ee5\u770b\u5230\uff0ccontext \u4e2d\u7684 Bind() \u65b9\u6cd5\u8c03\u7528\u4e86 binding.Default() \u65b9\u6cd5; \u5728 binding.Default() \u65b9\u6cd5\u4e2d\uff0c\u5982\u679c\u8bf7\u6c42\u65b9\u5f0f\u662f GET \u5219\u8fd4\u56de Form\uff0c\u5426\u5219\u7684\u8bdd\uff0c\u6839\u636e\u8bf7\u6c42\u4e2d\u7684 content-type \u5c5e\u6027\u8fd4\u56de\u5bf9\u5e94\u7684\u683c\u5f0f\u3002 \u63a5\u7740\u4f1a\u8c03\u7528 gin.Context.MustBindWith(obj, b) -> gin.Context.ShouldBindWith(obj, b) -> b.Bind() \uff1b \u5230 b.Bind() \u8fd9\u91cc\u7684\u65f6\u5019\uff0c\u4f1a\u6839\u636e b \u7684\u7c7b\u578b\u8c03\u7528\u5404\u81ea\u7684 Bind() \u65b9\u6cd5\u3002 \u4f8b\u5982 JSON \u7684\u8bdd\u4f1a\u8c03\u7528 jsonBinding.Bind() \u65b9\u6cd5\uff0c\u7136\u540e\u5728\u91cc\u9762\u8c03\u7528 decodeJSON() \u65b9\u6cd5\u3002 \u4e00\u6b21\u89e3\u6790\u591a\u4e2a\u53c2\u6570 \u00b6 \u4e0a\u9762\u767b\u5f55\u7684\u6817\u5b50\u4e2d\uff0c\u6211\u4eec\u7b80\u7b80\u5355\u5355\u7684\u83b7\u53d6\u4e86\u4e24\u4e2a\u53c2\u6570\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u4e24\u6b21 Postform() \u65b9\u6cd5\u3002 \u4f46\u662f\u5f53\u53c2\u6570\u591a\u8d77\u6765\u7684\u65f6\u5019\uff0c\u8fd9\u79cd\u65b9\u5f0f\u5e76\u4e0d\u662f\u5f88\u597d\u3002\u597d\u5728 gin \u8fd8\u63d0\u4f9b\u53e6\u5916\u7684\u65b9\u6cd5\u65b9\u4fbf\u6211\u4eec\u4e00\u6b21\u89e3\u6790\u591a\u4e2a\u53c2\u6570\u3002 \u8981\u4e00\u6b21\u89e3\u6790\u591a\u4e2a\u53c2\u6570\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a \u7ed3\u6784\u4f53 \u6765\u88c5\u8f7d\u8fd9\u4e9b\u53c2\u6570\u7684\u503c\uff0c\u7136\u540e\u5c06\u7ed3\u6784\u4f53\u4f20\u7ed9 gin.Context.Bind() \u3001 gin.Context.ShouldBind() \u3001 gin.Context.ShouldBindQuery() \u7b49\u65b9\u6cd5\u3002 func ( c * Context ) ShouldBind ( obj interface {}) error ; func ( c * Context ) ShouldBindQuery ( obj interface {}) error ; \u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u5b9a\u4e49\u7684\u8fd9\u4e2a\u7ed3\u6784\u4f53\u6bcf\u4e2a\u5b57\u6bb5\u90fd\u9700\u8981\u6709 tag\uff0c\u5426\u5219\u4f1a\u89e3\u6790\u5931\u8d25\u3002 \u4f8b\u5982\uff1a func main () { r := gin . Default () type UserInfo struct { User string `form:\"user\"` Pass string `form:\"pass\"` } // http://127.0.0.1:9090/login r . POST ( \"/login\" , func ( c * gin . Context ) { var u UserInfo c . ShouldBind ( & u ) c . JSON ( http . StatusOK , gin . H { \"code\" : 2001 , \"msg\" : \"\u767b\u5f55\u6210\u529f\" , \"user\" : u . User , \"pass\" : u . Pass , }) }) r . Run ( \":9090\" ) } \u6548\u679c\u662f\u4e00\u6837\u7684\u3002 \u89e3\u6790\u8def\u7531\u8def\u5f84\u4e2d\u7684\u53c2\u6570 \u00b6 gin.Context.Param() \u00b6 \u8def\u7531\u8def\u5f84\u6709\u65f6\u5019\u5e76\u4e0d\u56fa\u5b9a\uff0c\u800c\u662f\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u53d8\u5316\u7684\u3002 \u4f8b\u5982\u4e0b\u9762\u7684\u6817\u5b50\uff0c\u4e0d\u540c\u7684\u7528\u6237\u6709\u4e0d\u540c\u7684ID\uff0c\u8981\u83b7\u53d6\u8fd9\u4e2aID\uff0c\u9700\u8981\u7528\u5230 gin.Context.Param() \u65b9\u6cd5\uff0c\u586b\u5165\u5192\u53f7\u901a\u914d\u7b26\u540e\u9762\u7684\u53d8\u91cf id \u5373\u53ef\u3002 \u5728\u4f7f\u7528 PUT\u3001DELETE \u7b49\u8bf7\u6c42\u65b9\u6cd5\u7684\u65f6\u5019\u662f\u4fee\u6539\u3001\u5220\u9664\u67d0\u6761\u8bb0\u5f55\u7684\u76ee\u7684\uff0c\u8fd9\u9700\u8981\u5728\u8def\u5f84\u4e2d\u6307\u5b9a\u4e00\u4e2a\u5173\u952e\u503c\uff08\u5982 id \uff09\uff0c\u8fd9\u91cc\u5c31\u53ef\u4ee5\u7528\u50cf\u4e0b\u9762\u8fd9\u6837\u53bb\u89e3\u6790\u3002 func main () { r := gin . Default () // http://127.0.0.1:9090/user/10086 r . PUT ( \"/user/:id\" , func ( c * gin . Context ) { userId := c . Param ( \"id\" ) c . JSON ( http . StatusOK , gin . H { \"code\" : 2001 , \"msg\" : \"ID is \" + userId , }) }) r . Run ( \":9090\" ) } gin.Context.Params \u00b6 \u9664\u4e86 Param() \uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528 Params.Get() \u3001 Params.ByName() \u53bb\u83b7\u53d6\u60f3\u8981\u7684\u53c2\u6570\u3002 func main () { r := gin . Default () // http://127.0.0.1:9090/Boii/18/1234567 r . GET ( \"/params/:name/:age/:tele\" , func ( c * gin . Context ) { params := c . Params name , _ := params . Get ( \"name\" ) age := params . ByName ( \"age\" ) tele := c . Param ( \"tele\" ) c . JSON ( http . StatusOK , gin . H { \"name\" : name , \"age\" : age , \"tele\" : tele , }) }) r . Run ( \":9090\" ) }","title":"\u63a5\u6536\u8bf7\u6c42"},{"location":"Go/Framework/gin/Gin-2-%E6%8E%A5%E6%94%B6%E8%AF%B7%E6%B1%82/#_1","text":"\u4f5c\u4e3a\u4e00\u4e2a\u670d\u52a1\u5668\uff0c\u6700\u57fa\u672c\u7684\u4efb\u52a1\u5c31\u662f\u63a5\u6536\u8bf7\u6c42\uff0c\u7136\u540e\u662f\u8fd4\u56de\u7ed3\u679c\u3002 \u5ba2\u6237\u7aef\u53d1\u6765\u7684\u8bf7\u6c42\u53ef\u4ee5\u6709\u591a\u79cd\uff0c\u5982 GET\u3001POST\u3001PUT\u3001DELETE\u3002 \u6700\u57fa\u672c\u7684\u5c31\u662f GET\u3001POST \u4e24\u79cd\uff0c\u4e0d\u8fc7\u8fd9\u91cc\u8fd8\u662f\u5efa\u8bae\u9075\u5faa RESTful \u89c4\u8303\u3002","title":"\u63a5\u6536\u8bf7\u6c42"},{"location":"Go/Framework/gin/Gin-2-%E6%8E%A5%E6%94%B6%E8%AF%B7%E6%B1%82/#handle","text":"gin \u63a5\u6536\u8bf7\u6c42\u6709\u4e00\u79cd\u6700\u57fa\u672c\u7684\u65b9\u6cd5\uff0c\u4f7f\u7528 Handle() \u65b9\u6cd5\u3002 \u5176\u65b9\u6cd5\u7b7e\u540d\u5982\u4e0b\uff1a func ( group * RouterGroup ) Handle ( httpMethod , relativePath string , handlers ... HandlerFunc ) IRoutes ; \u5176\u63a5\u53d7\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a HTTP \u8bf7\u6c42\u65b9\u5f0f\uff0c\u7b2c\u4e8c\u4e2a\u4e3a\u8def\u7531\u8def\u5f84\uff0c\u7b2c\u4e09\u4e2a\u4e3a\u8be5\u8bf7\u6c42\u5bf9\u5e94\u7684\u5904\u7406\u51fd\u6570\u3002 \u6700\u57fa\u672c\u7684\u6817\u5b50\uff0c\u63a5\u6536\u4e00\u4e2a GET \u8bf7\u6c42\uff1a func main () { app := gin . Default () app . Handle ( \"GET\" , \"/hello\" , func ( c * gin . Context ) { c . JSON ( http . StatusOK , gin . H { \"msg\" : \"Hello!\" , }) }) app . Run ( \":9090\" ) } \u7b2c4\u884c\u8c03\u7528\u4e86 Handle() \uff0c\u8bf7\u6c42\u65b9\u5f0f\u4e3a GET \u65b9\u6cd5\uff0c\u8def\u7531\u8def\u5f84\u4e3a /hello \uff0c\u5904\u7406\u65b9\u6cd5\u662f\u8fd4\u56de\u4e00\u4e32JSON\u6570\u636e\u3002 \u6d4f\u89c8\u5668\u8bbf\u95ee http://localhost:9090/hello \u53ef\u5f97\u5230\u4e0b\u9762\u7684\u7ed3\u679c \u63a5\u6536 POST\u3001PUT \u7b49\u65b9\u5f0f\u7684\u8bf7\u6c42**\uff1a \u901a\u8fc7 Handle() \u7b2c\u4e00\u4e2a\u53c2\u6570\u6211\u4eec\u53ef\u4ee5\u63a5\u6536\u4e0d\u540c\u65b9\u5f0f\u7684\u8bf7\u6c42\uff0c\u4f8b\u5982 POST func main () { r := gin . Default () // http://127.0.0.1:9090/login r . Handle ( \"POST\" , \"/login\" , func ( c * gin . Context ) { // \u5904\u7406 POST \u8bf7\u6c42 user := c . PostForm ( \"user\" ) // \u83b7\u53d6\u8868\u5355\u53c2\u6570 pass := c . PostForm ( \"pass\" ) // \u83b7\u53d6\u8868\u5355\u53c2\u6570 // \u5904\u7406\u4e1a\u52a1\u903b\u8f91 if user == \"Boii\" && pass == \"123\" { c . JSON ( http . StatusOK , gin . H { \"code\" : 2001 , \"msg\" : \"\u767b\u5f55\u6210\u529f\" , }) return } c . YAML ( http . StatusOK , gin . H { \"code\" : 4001 , \"msg\" : \"\u767b\u5f55\u5931\u8d25\" , }) }) r . Run ( \":9090\" ) } \u901a\u8fc7 Postman \u53ef\u4ee5\u8bbe\u5b9a\u8868\u5355\u53c2\u6570\u7136\u540e\u53d1\u8d77\u8bf7\u6c42\uff0c\u6211\u4eec\u7528gin\u5199\u7684\u4ee3\u7801\u5c31\u53ef\u4ee5\u63a5\u6536\u5230\u4e00\u4e2a POST \u8bf7\u6c42\uff0c\u5e76\u8fdb\u884c\u5904\u7406\u3002 \u53ef\u4ee5\u770b\u5230\uff0c Postman \u4e2d\u8bbe\u7f6e\u4e86\u4e24\u4e2a\u53c2\u6570 user \u548c pass \uff0c\u5411 http://localhost:9090/login \u53d1\u6e05\u8bf7\u6c42\u3002 \u5173\u4e8e\u83b7\u53d6\u53c2\u6570\u540e\u9762\u4f1a\u8be6\u89e3\u3002","title":"\u57fa\u672c\u5904\u7406\uff1aHandle()"},{"location":"Go/Framework/gin/Gin-2-%E6%8E%A5%E6%94%B6%E8%AF%B7%E6%B1%82/#gingetginpost","text":"\u50cf GET\u3001POST\u3001PUT\u3001DELETE \u7b49\u8fd9\u4e9b HTTP\u65b9\u5f0f\u7684\u5904\u7406\u51fd\u6570\u4f1a\u5f88\u5e38\u7528\uff0c\u6240\u4ee5 gin \u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u65b9\u6cd5\u4f9b\u6211\u4eec\u66f4\u65b9\u4fbf\u7684\u4f7f\u7528\u3002 // POST is a shortcut for router.Handle(\"POST\", path, handle). func ( group * RouterGroup ) POST ( relativePath string , handlers ... HandlerFunc ) IRoutes { return group . handle ( http . MethodPost , relativePath , handlers ) } // GET is a shortcut for router.Handle(\"GET\", path, handle). func ( group * RouterGroup ) GET ( relativePath string , handlers ... HandlerFunc ) IRoutes { return group . handle ( http . MethodGet , relativePath , handlers ) } // DELETE is a shortcut for router.Handle(\"DELETE\", path, handle). func ( group * RouterGroup ) DELETE ( relativePath string , handlers ... HandlerFunc ) IRoutes { return group . handle ( http . MethodDelete , relativePath , handlers ) } // PATCH is a shortcut for router.Handle(\"PATCH\", path, handle). func ( group * RouterGroup ) PATCH ( relativePath string , handlers ... HandlerFunc ) IRoutes { return group . handle ( http . MethodPatch , relativePath , handlers ) } // PUT is a shortcut for router.Handle(\"PUT\", path, handle). func ( group * RouterGroup ) PUT ( relativePath string , handlers ... HandlerFunc ) IRoutes { return group . handle ( http . MethodPut , relativePath , handlers ) } // OPTIONS is a shortcut for router.Handle(\"OPTIONS\", path, handle). func ( group * RouterGroup ) OPTIONS ( relativePath string , handlers ... HandlerFunc ) IRoutes { return group . handle ( http . MethodOptions , relativePath , handlers ) } // HEAD is a shortcut for router.Handle(\"HEAD\", path, handle). func ( group * RouterGroup ) HEAD ( relativePath string , handlers ... HandlerFunc ) IRoutes { return group . handle ( http . MethodHead , relativePath , handlers ) } \u901a\u8fc7\u6e90\u7801\u53ef\u4ee5\u770b\u51fa\uff0cgin \u5f88\u8d34\u5fc3\u7684\u505a\u4e86\u4e00\u5c42\u5c01\u88c5\uff0c\u63d0\u4f9b\u4e86\u5bf9\u5e94\u8bf7\u6c42\u65b9\u5f0f\u7684 shortcut \uff0c\u4f7f\u5f00\u53d1\u8005\u66f4\u65b9\u4fbf\u7684\u8c03\u7528\u3002 \u53c2\u6570\u4e0a\u53ea\u9700\u8981\u4f20\u9012 \u8def\u7531\u8def\u5f84 \u548c \u5904\u7406\u51fd\u6570 \u5373\u53ef\uff0c\u8fd9\u4e9b\u201c\u5feb\u6377\u65b9\u5f0f\u201d\u4f1a\u5e2e\u6211\u4eec\u8c03\u7528 handle() \u3002 eg\uff1a func main () { r := gin . Default () // http://127.0.0.1:9090/hello r . GET ( \"/hello\" , func ( c * gin . Context ) { c . JSON ( http . StatusOK , gin . H { \"msg\" : \"Hello\" }) }) r . Run ( \":9090\" ) } func main () { r := gin . Default () // http://127.0.0.1:9090/login r . POST ( \"/login\" , func ( c * gin . Context ) { c . JSON ( http . StatusOK , gin . H { \"msg\" : \"Hello\" }) }) r . Run ( \":9090\" ) }","title":"\u5feb\u6377\u65b9\u5f0f\uff1agin.GET()\u3001gin.POST()..."},{"location":"Go/Framework/gin/Gin-2-%E6%8E%A5%E6%94%B6%E8%AF%B7%E6%B1%82/#404","text":"func main () { r := gin . Default () r . NoRoute ( func ( c * gin . Context ) { c . HTML ( http . StatusNotFound , \"views/404.html\" , nil ) }) r . Run ( \":9090\" ) } \u4e0d\u9700\u8981\u6307\u5b9a\u8def\u5f84\uff0c\u53ea\u8981\u7528\u6237\u8bbf\u95ee\u4e0d\u5b58\u5728\u7684\u8def\u5f84\uff0c\u5c31\u4f1a\u6267\u884c\u6b64\u8def\u7531\u3002","title":"404 \u9875\u9762"},{"location":"Go/Framework/gin/Gin-2-%E6%8E%A5%E6%94%B6%E8%AF%B7%E6%B1%82/#_2","text":"","title":"\u5904\u7406\u8bf7\u6c42\u53c2\u6570"},{"location":"Go/Framework/gin/Gin-2-%E6%8E%A5%E6%94%B6%E8%AF%B7%E6%B1%82/#get","text":"GET \u8bf7\u6c42\u7684\u53c2\u6570\u4f1a\u663e\u5f0f\u7684\u643a\u5e26\u5728URL\u4e2d\u3002 \u53ef\u4ee5\u901a\u8fc7 gin.Context.Query() \u6216 gin.Context.DefaultQuery() \u4e24\u79cd\u65b9\u6cd5\u83b7\u53d6\u3002 \u4ed6\u4eec\u7684\u533a\u522b\u662f DefaultQuery() \u9700\u8981\u586b\u5165\u9ed8\u8ba4\u503c\u3002 func ( c * Context ) Query ( key string ) string ; func ( c * Context ) DefaultQuery ( key , defaultValue string ) string ; eg\uff1a func main () { r := gin . Default () r . GET ( \"/hello\" , func ( c * gin . Context ) { name := c . Query ( \"name\" ) age := c . DefaultQuery ( \"age\" ) c . JSON ( 200 , gin . H { \"msg\" : \"Hello \" + name + \", you're \" + age }) }) r . Run ( \":9090\" ) }","title":"\u83b7\u53d6 GET \u8bf7\u6c42\u7684\u53c2\u6570"},{"location":"Go/Framework/gin/Gin-2-%E6%8E%A5%E6%94%B6%E8%AF%B7%E6%B1%82/#post","text":"POST \u8bf7\u6c42\u7684\u53c2\u6570\u4e0d\u4f1a\u663e\u5f0f\u7684\u643a\u5e26\u5728URL\u4e2d\uff0c\u800c\u662f\u5305\u88f9\u5728\u8bf7\u6c42\u4f53 Body \u4e2d\uff0c\u662f\u901a\u8fc7\u8868\u5355\u63d0\u4ea4\u7684\u3002 \u53ef\u4ee5\u901a\u8fc7 gin.Context.Postform() \u6216 gin.Context.DefaultPostform() \u4e24\u79cd\u65b9\u6cd5\u83b7\u53d6\u3002 \u540c\u6837\u4ed6\u4eec\u7684\u533a\u522b\u4ec5\u5728\u4e8e\u4e00\u4e2a\u9700\u8981\u586b\u5165\u9ed8\u8ba4\u503c\u3002 func ( c * Context ) PostForm ( key string ) string ; func ( c * Context ) DefaultPostForm ( key , defaultValue string ) string ; eg\uff1a func main () { r := gin . Default () // http://127.0.0.1:9090/login r . POST ( \"/login\" , func ( c * gin . Context ) { user := c . DefaultPostForm ( \"user\" , \"admin\" ) pass := c . PostForm ( \"pass\" ) if user == \"Boii\" && pass == \"123\" { c . JSON ( http . StatusOK , gin . H { \"code\" : 2001 , \"msg\" : \"\u767b\u5f55\u6210\u529f\" , }) return } c . YAML ( http . StatusOK , gin . H { \"code\" : 4001 , \"msg\" : \"\u767b\u5f55\u5931\u8d25\" , }) }) r . Run ( \":9090\" ) }","title":"\u83b7\u53d6 POST \u8868\u5355\u53c2\u6570"},{"location":"Go/Framework/gin/Gin-2-%E6%8E%A5%E6%94%B6%E8%AF%B7%E6%B1%82/#_3","text":"\u9664\u4e86URL\u4e2d\u7684\u53c2\u6570\u3001\u8868\u5355\u63d0\u4ea4\u7684\u53c2\u6570\uff0c\u5728\u5ba2\u6237\u7aef\u53d1\u8d77 HTTP \u8bf7\u6c42\u65f6\u8fd8\u53ef\u4ee5\u4f7f\u7528 JSON\u3001XML\u3001YAML \u7b49\u683c\u5f0f\u3002 \u83b7\u53d6\u8fd9\u4e9b\u683c\u5f0f\u7684\u53c2\u6570\uff0c\u53ef\u4ee5\u901a\u8fc7 gin.Context.Bind() \u6765\u83b7\u53d6\uff0c Bind() \u6709\u4e00\u7cfb\u5217\u7684\u65b9\u6cd5\uff1a func ( c * Context ) Bind ( obj interface {}) error ; func ( c * Context ) BindJSON ( obj interface {}) error ; func ( c * Context ) BindXML ( obj interface {}) error ; func ( c * Context ) BindQuery ( obj interface {}) error ; func ( c * Context ) BindYAML ( obj interface {}) error ; func ( c * Context ) BindHeader ( obj interface {}) error ; func ( c * Context ) BindUri ( obj interface {}) error ; func ( c * Context ) MustBindWith ( obj interface {}, b binding . Binding ) error ; \u663e\u7136\uff0c\u8981\u89e3\u6790\u8bf7\u6c42\u4e2d\u4ec0\u4e48\u7c7b\u578b\u7684\u6570\u636e\u5c31\u8c03\u7528\u4ec0\u4e48\u65b9\u6cd5\uff0c\u53c2\u6570 obj \u9700\u8981\u6211\u4eec\u4f20\u5165\u4e00\u4e2a\u7ed3\u6784\u4f53\u53d8\u91cf\uff0c\u7528\u4e8e\u88c5\u8f7d\u89e3\u6790\u540e\u7684\u6570\u636e\u3002 \u7ed3\u6784\u4f53\u6bcf\u4e2a\u5b57\u6bb5\u90fd\u9700\u8981\u6709 tag\uff0c\u5426\u5219\u4f1a\u89e3\u6790\u5931\u8d25\u3002 type UserInfo struct { User string Pass string } var u UserInfo func main () { r := gin . Default () r . POST ( \"/login\" , func ( c * gin . Context ) { c . BindJSON ( & u ) c . JSON ( 200 , gin . H { \"user\" : u . User , \"pass\" : u . Pass , }) }) r . Run ( \":9090\" ) } \u4e0a\u9762\u7684\u4f8b\u5b50\u53ef\u4ee5\u89e3\u6790 HTTP \u8bf7\u6c42\u4e2d\u901a\u8fc7 JSON \u643a\u5e26\u7684\u6570\u636e\u3002","title":"\u5904\u7406\u5176\u4ed6\u683c\u5f0f\u7684\u8bf7\u6c42\u53c2\u6570"},{"location":"Go/Framework/gin/Gin-2-%E6%8E%A5%E6%94%B6%E8%AF%B7%E6%B1%82/#bind","text":"\u5982\u679c\u60f3\u6839\u636e\u8bf7\u6c42\u4e2d\u7684 content-type \u5c5e\u6027\u6765\u9009\u62e9\uff0c\u53ef\u4ee5\u4f7f\u7528 Bind() \u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u4f1a // gin \u6e90\u7801 // context.go // Bind checks the Content-Type to select a binding engine automatically, // Depending the \"Content-Type\" header different bindings are used: // \"application/json\" --> JSON binding // \"application/xml\" --> XML binding // otherwise --> returns an error. // It parses the request's body as JSON if Content-Type == \"application/json\" using JSON or XML as a JSON input. // It decodes the json payload into the struct specified as a pointer. // It writes a 400 error and sets Content-Type header \"text/plain\" in the response if input is not valid. func ( c * Context ) Bind ( obj interface {}) error { b := binding . Default ( c . Request . Method , c . ContentType ()) return c . MustBindWith ( obj , b ) } // gin \u6e90\u7801 // binding.go // Default returns the appropriate Binding instance based on the HTTP method // and the content type. func Default ( method , contentType string ) Binding { if method == http . MethodGet { return Form } switch contentType { case MIMEJSON : return JSON case MIMEXML , MIMEXML2 : return XML case MIMEPROTOBUF : return ProtoBuf case MIMEMSGPACK , MIMEMSGPACK2 : return MsgPack case MIMEYAML : return YAML case MIMEMultipartPOSTForm : return FormMultipart default : // case MIMEPOSTForm: return Form } } \u53ef\u4ee5\u770b\u5230\uff0ccontext \u4e2d\u7684 Bind() \u65b9\u6cd5\u8c03\u7528\u4e86 binding.Default() \u65b9\u6cd5; \u5728 binding.Default() \u65b9\u6cd5\u4e2d\uff0c\u5982\u679c\u8bf7\u6c42\u65b9\u5f0f\u662f GET \u5219\u8fd4\u56de Form\uff0c\u5426\u5219\u7684\u8bdd\uff0c\u6839\u636e\u8bf7\u6c42\u4e2d\u7684 content-type \u5c5e\u6027\u8fd4\u56de\u5bf9\u5e94\u7684\u683c\u5f0f\u3002 \u63a5\u7740\u4f1a\u8c03\u7528 gin.Context.MustBindWith(obj, b) -> gin.Context.ShouldBindWith(obj, b) -> b.Bind() \uff1b \u5230 b.Bind() \u8fd9\u91cc\u7684\u65f6\u5019\uff0c\u4f1a\u6839\u636e b \u7684\u7c7b\u578b\u8c03\u7528\u5404\u81ea\u7684 Bind() \u65b9\u6cd5\u3002 \u4f8b\u5982 JSON \u7684\u8bdd\u4f1a\u8c03\u7528 jsonBinding.Bind() \u65b9\u6cd5\uff0c\u7136\u540e\u5728\u91cc\u9762\u8c03\u7528 decodeJSON() \u65b9\u6cd5\u3002","title":"Bind()"},{"location":"Go/Framework/gin/Gin-2-%E6%8E%A5%E6%94%B6%E8%AF%B7%E6%B1%82/#_4","text":"\u4e0a\u9762\u767b\u5f55\u7684\u6817\u5b50\u4e2d\uff0c\u6211\u4eec\u7b80\u7b80\u5355\u5355\u7684\u83b7\u53d6\u4e86\u4e24\u4e2a\u53c2\u6570\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u4e24\u6b21 Postform() \u65b9\u6cd5\u3002 \u4f46\u662f\u5f53\u53c2\u6570\u591a\u8d77\u6765\u7684\u65f6\u5019\uff0c\u8fd9\u79cd\u65b9\u5f0f\u5e76\u4e0d\u662f\u5f88\u597d\u3002\u597d\u5728 gin \u8fd8\u63d0\u4f9b\u53e6\u5916\u7684\u65b9\u6cd5\u65b9\u4fbf\u6211\u4eec\u4e00\u6b21\u89e3\u6790\u591a\u4e2a\u53c2\u6570\u3002 \u8981\u4e00\u6b21\u89e3\u6790\u591a\u4e2a\u53c2\u6570\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a \u7ed3\u6784\u4f53 \u6765\u88c5\u8f7d\u8fd9\u4e9b\u53c2\u6570\u7684\u503c\uff0c\u7136\u540e\u5c06\u7ed3\u6784\u4f53\u4f20\u7ed9 gin.Context.Bind() \u3001 gin.Context.ShouldBind() \u3001 gin.Context.ShouldBindQuery() \u7b49\u65b9\u6cd5\u3002 func ( c * Context ) ShouldBind ( obj interface {}) error ; func ( c * Context ) ShouldBindQuery ( obj interface {}) error ; \u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u5b9a\u4e49\u7684\u8fd9\u4e2a\u7ed3\u6784\u4f53\u6bcf\u4e2a\u5b57\u6bb5\u90fd\u9700\u8981\u6709 tag\uff0c\u5426\u5219\u4f1a\u89e3\u6790\u5931\u8d25\u3002 \u4f8b\u5982\uff1a func main () { r := gin . Default () type UserInfo struct { User string `form:\"user\"` Pass string `form:\"pass\"` } // http://127.0.0.1:9090/login r . POST ( \"/login\" , func ( c * gin . Context ) { var u UserInfo c . ShouldBind ( & u ) c . JSON ( http . StatusOK , gin . H { \"code\" : 2001 , \"msg\" : \"\u767b\u5f55\u6210\u529f\" , \"user\" : u . User , \"pass\" : u . Pass , }) }) r . Run ( \":9090\" ) } \u6548\u679c\u662f\u4e00\u6837\u7684\u3002","title":"\u4e00\u6b21\u89e3\u6790\u591a\u4e2a\u53c2\u6570"},{"location":"Go/Framework/gin/Gin-2-%E6%8E%A5%E6%94%B6%E8%AF%B7%E6%B1%82/#_5","text":"","title":"\u89e3\u6790\u8def\u7531\u8def\u5f84\u4e2d\u7684\u53c2\u6570"},{"location":"Go/Framework/gin/Gin-2-%E6%8E%A5%E6%94%B6%E8%AF%B7%E6%B1%82/#gincontextparam","text":"\u8def\u7531\u8def\u5f84\u6709\u65f6\u5019\u5e76\u4e0d\u56fa\u5b9a\uff0c\u800c\u662f\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u53d8\u5316\u7684\u3002 \u4f8b\u5982\u4e0b\u9762\u7684\u6817\u5b50\uff0c\u4e0d\u540c\u7684\u7528\u6237\u6709\u4e0d\u540c\u7684ID\uff0c\u8981\u83b7\u53d6\u8fd9\u4e2aID\uff0c\u9700\u8981\u7528\u5230 gin.Context.Param() \u65b9\u6cd5\uff0c\u586b\u5165\u5192\u53f7\u901a\u914d\u7b26\u540e\u9762\u7684\u53d8\u91cf id \u5373\u53ef\u3002 \u5728\u4f7f\u7528 PUT\u3001DELETE \u7b49\u8bf7\u6c42\u65b9\u6cd5\u7684\u65f6\u5019\u662f\u4fee\u6539\u3001\u5220\u9664\u67d0\u6761\u8bb0\u5f55\u7684\u76ee\u7684\uff0c\u8fd9\u9700\u8981\u5728\u8def\u5f84\u4e2d\u6307\u5b9a\u4e00\u4e2a\u5173\u952e\u503c\uff08\u5982 id \uff09\uff0c\u8fd9\u91cc\u5c31\u53ef\u4ee5\u7528\u50cf\u4e0b\u9762\u8fd9\u6837\u53bb\u89e3\u6790\u3002 func main () { r := gin . Default () // http://127.0.0.1:9090/user/10086 r . PUT ( \"/user/:id\" , func ( c * gin . Context ) { userId := c . Param ( \"id\" ) c . JSON ( http . StatusOK , gin . H { \"code\" : 2001 , \"msg\" : \"ID is \" + userId , }) }) r . Run ( \":9090\" ) }","title":"gin.Context.Param()"},{"location":"Go/Framework/gin/Gin-2-%E6%8E%A5%E6%94%B6%E8%AF%B7%E6%B1%82/#gincontextparams","text":"\u9664\u4e86 Param() \uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528 Params.Get() \u3001 Params.ByName() \u53bb\u83b7\u53d6\u60f3\u8981\u7684\u53c2\u6570\u3002 func main () { r := gin . Default () // http://127.0.0.1:9090/Boii/18/1234567 r . GET ( \"/params/:name/:age/:tele\" , func ( c * gin . Context ) { params := c . Params name , _ := params . Get ( \"name\" ) age := params . ByName ( \"age\" ) tele := c . Param ( \"tele\" ) c . JSON ( http . StatusOK , gin . H { \"name\" : name , \"age\" : age , \"tele\" : tele , }) }) r . Run ( \":9090\" ) }","title":"gin.Context.Params"},{"location":"Go/Framework/gin/Gin-3-%E8%B7%AF%E7%94%B1%E7%BB%84/","text":"\u8def\u7531\u548c\u8def\u7531\u7ec4\u7684\u521b\u5efa\u548c\u5b9e\u73b0 \u8def\u7531\u7ec4 \u00b6 \u5f00\u53d1\u4e2d\u5e38\u5e38\u4f1a\u9047\u5230\u4e00\u79cd\u9700\u6c42\uff1a \u5c06\u7cfb\u7edf\u5212\u5206\u6210\u591a\u4e2a\u6a21\u5757\uff0c\u4f8b\u5982\u7528\u6237\u7ba1\u7406\u6a21\u5757\u3001\u4e66\u7c4d\u7ba1\u7406\u6a21\u5757\u7b49\uff0c\u8fd9\u4e9b\u6a21\u5757\u4e0b\u5404\u81ea\u6709\u5b50\u6a21\u5757\u3002 \u5728\u8bbe\u8ba1\u8def\u7531\u8def\u5f84\u7684\u65f6\u5019\u53ef\u80fd\u5c31\u9700\u8981\u8bbe\u7f6e\u6210\u4e0b\u9762\u7684\u6837\u5b50\uff1a /user/register /user/login /user/:id/info /user/:id/setting /book/add /book/search/:id /book/remove/:id /book/modify/:id \u8fd9\u6837\u7684\u8bbe\u8ba1\u867d\u7136\u6ca1\u6709\u4ec0\u4e48\u95ee\u9898\uff0c\u4f46\u662f\u4e0d\u65b9\u4fbf\u7ba1\u7406\uff0c\u5982\u679c\u7a81\u7136\u5bf9 user \u6216\u8005 book \u8fd9\u4e2a\u5927\u7684\u6a21\u5757\u8fdb\u884c\u4fee\u6539\u8fd8\u5bfc\u81f4\u6240\u6709\u5b50\u6a21\u5757\u5168\u90e8\u90fd\u8981\u6539\u52a8\u3002 \u6240\u4ee5\u5408\u7406\u7684\u4f7f\u7528 \u8def\u7531\u7ec4 \u53ef\u4ee5\u5f88\u597d\u7684\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u3002 \u793a\u4f8b \u00b6 // main.go func main () { r := gin . Default () // \u521b\u5efa /user \u8def\u7531\u7ec4 userG := r . Group ( \"/user\" ) // {} \u662f\u4e66\u5199\u89c4\u8303 { userG . POST ( \"/register\" , Register ) userG . POST ( \"/login\" , Login ) } // \u521b\u5efa /book \u8def\u7531\u7ec4 bookG := r . Group ( \"/book\" ) { bookG . GET ( \"/search/:id\" , SearchBook ) bookG . DELETE ( \"/remove/:id\" , RemoveBook ) } r . Run ( \":9090\" ) } // routes.go type UserInfo struct { User string `form:\"user\"` Pass string `form:\"pass\"` } func Register ( c * gin . Context ) { var u UserInfo c . ShouldBind ( & u ) c . JSON ( http . StatusOK , gin . H { \"msg\" : \"Hello \" + u . User }) } func Login ( c * gin . Context ) { var u UserInfo c . ShouldBind ( & u ) c . JSON ( http . StatusOK , gin . H { \"msg\" : \"Hello \" + u . User }) } func SearchBook ( c * gin . Context ) { bookID := c . Param ( \"id\" ) c . JSON ( http . StatusOK , gin . H { \"msg\" : \"ID \" + bookID }) } func RemoveBook ( c * gin . Context ) { bookID := c . Param ( \"id\" ) c . JSON ( http . StatusOK , gin . H { \"msg\" : \"ID \" + bookID + \"was removed.\" }) } \u9996\u5148\u901a\u8fc7 gin.Group() \u4f20\u5165\u7ec4\u7684\u5171\u540c\u524d\u7f00\uff0c\u4f8b\u5982\u4e0a\u9762\u7684 /user \u3001 /book \uff0c\u83b7\u5f97\u4e00\u4e2a\u8def\u7531\u7ec4\u5bf9\u8c61 \u7136\u540e\u5c31\u53ef\u4ee5\u50cf\u4e4b\u524d\u4e00\u6837\u7684\u53bb\u7ed1\u5b9a\u5404\u4e2a\u5b50\u8def\u7531\u4e86\u3002\u4e4b\u524d\u7684 GET() \u3001 POST() \u7b49\u65b9\u6cd5\u540c\u6837\u9002\u7528\u3002 \u6548\u679c\uff1a \u8def\u7531\u62c6\u5206\u548c\u6ce8\u518c \u00b6","title":"\u8def\u7531\u7ec4"},{"location":"Go/Framework/gin/Gin-3-%E8%B7%AF%E7%94%B1%E7%BB%84/#_1","text":"\u5f00\u53d1\u4e2d\u5e38\u5e38\u4f1a\u9047\u5230\u4e00\u79cd\u9700\u6c42\uff1a \u5c06\u7cfb\u7edf\u5212\u5206\u6210\u591a\u4e2a\u6a21\u5757\uff0c\u4f8b\u5982\u7528\u6237\u7ba1\u7406\u6a21\u5757\u3001\u4e66\u7c4d\u7ba1\u7406\u6a21\u5757\u7b49\uff0c\u8fd9\u4e9b\u6a21\u5757\u4e0b\u5404\u81ea\u6709\u5b50\u6a21\u5757\u3002 \u5728\u8bbe\u8ba1\u8def\u7531\u8def\u5f84\u7684\u65f6\u5019\u53ef\u80fd\u5c31\u9700\u8981\u8bbe\u7f6e\u6210\u4e0b\u9762\u7684\u6837\u5b50\uff1a /user/register /user/login /user/:id/info /user/:id/setting /book/add /book/search/:id /book/remove/:id /book/modify/:id \u8fd9\u6837\u7684\u8bbe\u8ba1\u867d\u7136\u6ca1\u6709\u4ec0\u4e48\u95ee\u9898\uff0c\u4f46\u662f\u4e0d\u65b9\u4fbf\u7ba1\u7406\uff0c\u5982\u679c\u7a81\u7136\u5bf9 user \u6216\u8005 book \u8fd9\u4e2a\u5927\u7684\u6a21\u5757\u8fdb\u884c\u4fee\u6539\u8fd8\u5bfc\u81f4\u6240\u6709\u5b50\u6a21\u5757\u5168\u90e8\u90fd\u8981\u6539\u52a8\u3002 \u6240\u4ee5\u5408\u7406\u7684\u4f7f\u7528 \u8def\u7531\u7ec4 \u53ef\u4ee5\u5f88\u597d\u7684\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u3002","title":"\u8def\u7531\u7ec4"},{"location":"Go/Framework/gin/Gin-3-%E8%B7%AF%E7%94%B1%E7%BB%84/#_2","text":"// main.go func main () { r := gin . Default () // \u521b\u5efa /user \u8def\u7531\u7ec4 userG := r . Group ( \"/user\" ) // {} \u662f\u4e66\u5199\u89c4\u8303 { userG . POST ( \"/register\" , Register ) userG . POST ( \"/login\" , Login ) } // \u521b\u5efa /book \u8def\u7531\u7ec4 bookG := r . Group ( \"/book\" ) { bookG . GET ( \"/search/:id\" , SearchBook ) bookG . DELETE ( \"/remove/:id\" , RemoveBook ) } r . Run ( \":9090\" ) } // routes.go type UserInfo struct { User string `form:\"user\"` Pass string `form:\"pass\"` } func Register ( c * gin . Context ) { var u UserInfo c . ShouldBind ( & u ) c . JSON ( http . StatusOK , gin . H { \"msg\" : \"Hello \" + u . User }) } func Login ( c * gin . Context ) { var u UserInfo c . ShouldBind ( & u ) c . JSON ( http . StatusOK , gin . H { \"msg\" : \"Hello \" + u . User }) } func SearchBook ( c * gin . Context ) { bookID := c . Param ( \"id\" ) c . JSON ( http . StatusOK , gin . H { \"msg\" : \"ID \" + bookID }) } func RemoveBook ( c * gin . Context ) { bookID := c . Param ( \"id\" ) c . JSON ( http . StatusOK , gin . H { \"msg\" : \"ID \" + bookID + \"was removed.\" }) } \u9996\u5148\u901a\u8fc7 gin.Group() \u4f20\u5165\u7ec4\u7684\u5171\u540c\u524d\u7f00\uff0c\u4f8b\u5982\u4e0a\u9762\u7684 /user \u3001 /book \uff0c\u83b7\u5f97\u4e00\u4e2a\u8def\u7531\u7ec4\u5bf9\u8c61 \u7136\u540e\u5c31\u53ef\u4ee5\u50cf\u4e4b\u524d\u4e00\u6837\u7684\u53bb\u7ed1\u5b9a\u5404\u4e2a\u5b50\u8def\u7531\u4e86\u3002\u4e4b\u524d\u7684 GET() \u3001 POST() \u7b49\u65b9\u6cd5\u540c\u6837\u9002\u7528\u3002 \u6548\u679c\uff1a","title":"\u793a\u4f8b"},{"location":"Go/Framework/gin/Gin-3-%E8%B7%AF%E7%94%B1%E7%BB%84/#_3","text":"","title":"\u8def\u7531\u62c6\u5206\u548c\u6ce8\u518c"},{"location":"Go/Framework/gin/Gin-4-%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E9%87%8D%E5%AE%9A%E5%90%91/","text":"\u4e0a\u4f20\u3001\u4e0b\u8f7d\u548c\u91cd\u5b9a\u5411 \u4e0a\u4f20\u4e0b\u8f7d\u548c\u91cd\u5b9a\u5411 \u00b6 \u6587\u4ef6\u4e0a\u4f20\u662f\u540e\u7aef\u5f00\u53d1\u4e2d\u5f88\u5e38\u89c1\u7684\u9700\u6c42\u3002 \u6587\u4ef6\u4e0a\u4f20\u7684\u539f\u7406\u65e0\u975e\u662f\u5ba2\u6237\u7aef \u9009\u62e9\u6587\u4ef6\u5e76\u70b9\u51fb\u4e0a\u4f20 \uff0c\u6d4f\u89c8\u5668\u5c06\u6587\u4ef6\u5185\u5bb9\u8bfb\u53d6\u7136\u540e\u4f20\u9001\u5230\u670d\u52a1\u5668\uff1b \u670d\u52a1\u7aef\u8bfb\u53d6\u6570\u636e\u5e76\u65b0\u5efa\u6587\u4ef6\uff0c\u5199\u5165\u6d4f\u89c8\u5668\u4f20\u8f93\u8fc7\u6765\u7684\u5185\u5bb9\u3002 \u5355\u4e2a\u6587\u4ef6\u4e0a\u4f20 \u00b6 \u524d\u7aef\u90e8\u5206 \u00b6 <!DOCTYPE html> < html lang = \"zh-CN\" > < head > < meta charset = \"UTF-8\" > </ head > < body > < form action = \"/upload\" method = \"post\" enctype = \"multipart/form-data\" > < input type = \"file\" name = \"f1\" /> < input type = \"submit\" value = \"\u4e0a\u4f20\" /> </ form > </ body > </ html > \u524d\u7aef\u9700\u8981\u7528\u4e00\u4e2a\u8868\u5355\u6765\u8fdb\u884c\u4e0a\u4f20\uff0c\u8fd9\u91cc\u6211\u4eec\u8bbe\u7f6e\u4e86\u8868\u5355\u63d0\u4ea4\u7684\u8bf7\u6c42\u65b9\u5f0f\u4e3a POST\u3002 \u6ce8\u610f\u4e00\u5b9a\u8981\u6307\u5b9a\u7f16\u7801\u7c7b\u578b enctype=\"multipart/form-data\" \u4e0a\u4f20\u6587\u4ef6\u540e\u70b9\u51fb\u4e0a\u4f20\u6309\u94ae\u4f1a\u5411 http://localhost:9090/upload \u8fd9\u4e2a\u8def\u5f84\u53d1\u8d77POST\u8bf7\u6c42\u3002 \u540e\u7aef\u90e8\u5206 \u00b6 func main () { r := gin . Default () r . POST ( \"/upload\" , func ( c * gin . Context ) { // \u4ece\u8bf7\u6c42\u4e2d\u8bfb\u53d6\u6587\u4ef6 f , _ := c . FormFile ( \"f1\" ) // \u4fdd\u5b58\u6587\u4ef6 c . SaveUploadedFile ( f , \"./\" + f . Filename ) // \u7ed9\u5ba2\u6237\u7aef\u8fd4\u56de\u4e0a\u4f20\u6210\u529f\u7684\u6d88\u606f c . JSON ( 200 , gin . H { \"code\" : 2003 , \"msg\" : \"\u4e0a\u4f20\u6210\u529f\" }) }) r . Run ( \":9090\" ) } \u540e\u7aef\u7684\u5904\u7406\u4e3b\u8981\u52063\u6b65\uff1a \u4ece\u8bf7\u6c42\u4e2d\u8bfb\u53d6\u6587\u4ef6 \u4fdd\u5b58\u6587\u4ef6 \u7ed9\u5ba2\u6237\u7aef\u8fd4\u56de\u4e0a\u4f20\u6210\u529f\u7684\u6d88\u606f \u901a\u8fc7 gin.FormFile() \u53ef\u4ee5\u83b7\u53d6\u524d\u7aef\u4e0a\u4f20\u7684\u6587\u4ef6\uff0c\u53c2\u6570\u662f <input /> \u6807\u7b7e\u7684 name \u5c5e\u6027\uff0c\u901a\u8fc7\u53c2\u6570\u53ef\u4ee5\u5b9a\u4f4d\u5230\u4e0a\u4f20\u7684\u4efb\u4f55\u4e00\u4e2a\u6587\u4ef6\u3002 \u83b7\u53d6\u5230\u6587\u4ef6\u540e\u53ef\u4ee5\u4fdd\u5b58\u5728\u6570\u636e\u5e93\u4e2d\uff0c\u6216\u8005\u901a\u8fc7 gin.SaveUploadedFile() \u5c06\u6587\u4ef6\u4fdd\u5b58\u5728\u67d0\u4e2a\u4f4d\u7f6e\uff0c\u53ea\u9700\u8981\u5c06\u6587\u4ef6\u5bf9\u8c61 f \u548c \u8def\u5f84\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\u5373\u53ef\u3002 \u6700\u540e\u7ed9\u5ba2\u6237\u7aef\u8fd4\u56de\u4e00\u6761\u4e0a\u4f20\u6210\u529f\u7684\u6d88\u606f\u3002 \u6d4b\u8bd5 \u00b6 \u4f7f\u7528 Postman \u00b6 \u4f7f\u7528 PostMan \u65f6\u9700\u8981\u7ed9 Header \u6dfb\u52a0\u4e00\u4e2a\u5c5e\u6027 Content-Type: multipart/form-data \u7136\u540e\u5728 Body \u4e2d\u7684 form-data \u4e2d\u4e0a\u4f20\u6570\u636e \u4f7f\u7528 curl \u547d\u4ee4 \u00b6 curl -X POST http://localhost:9090/upload \\ -F \"file=@/xx/xx/xxx.zip\" \\ -H \"Content-Type: multipart/form-data\" \u591a\u4e2a\u6587\u4ef6\u4e0a\u4f20 \u00b6 \u524d\u7aef\u90e8\u5206 \u00b6 <!DOCTYPE html> < html lang = \"zh-CN\" > < head > < meta charset = \"UTF-8\" > </ head > < body > < form action = \"/upload_multi\" method = \"post\" enctype = \"multipart/form-data\" > < input type = \"file\" name = \"files\" multiple > < input type = \"submit\" value = \"\u4e0a\u4f20\" > </ form > </ body > </ html > \u540e\u7aef\u90e8\u5206 \u00b6 func main () { r := gin . Default () r . POST ( \"/upload\" , func ( c * gin . Context ) { // \u4ece\u8bf7\u6c42\u4e2d\u8bfb\u53d6\u6587\u4ef6 form , _ := c . MultipartForm () files := form . File [ \"files\" ] // \u9010\u4e2a\u4fdd\u5b58\u6587\u4ef6 for _ , file := range files { c . SaveUploadedFile ( f , \"./\" + f . Filename ) } // \u7ed9\u5ba2\u6237\u7aef\u8fd4\u56de\u4e0a\u4f20\u6210\u529f\u7684\u6d88\u606f c . JSON ( 200 , gin . H { \"code\" : 2003 , \"msg\" : \"\u4e0a\u4f20\u6210\u529f\" }) }) r . Run ( \":9090\" ) } \u5355\u4e2a\u6587\u4ef6\u4e0a\u4f20\u548c\u591a\u4e2a\u6587\u4ef6\u4e0a\u4f20\u53ea\u6709\u4e00\u70b9\u70b9\u533a\u522b \u591a\u4e2a\u6587\u4ef6\u4e0a\u4f20\u4f7f\u7528 gin.Context.MultipartForm() \u6765\u83b7\u53d6\uff0c\u8be5\u65b9\u6cd5\u4f1a\u8fd4\u56de\u4e00\u4e2a Form \u7ed3\u6784\u4f53\uff0c\u7ed3\u6784\u4f53\u4e2dmap\u7c7b\u578b\u5b57\u6bb5 File \u5b58\u50a8\u4e86\u6240\u6709\u5df2\u4e0a\u4f20\u7684\u6587\u4ef6 \u901a\u8fc7\u904d\u5386\u6765\u9010\u4e2a\u5904\u7406\uff0c\u7136\u540e\u7ed9\u5ba2\u6237\u7aef\u8fd4\u56de\u4e0a\u4f20\u6210\u529f\u7684\u6d88\u606f\u5373\u53ef\u3002 \u4e0a\u4f20\u6587\u4ef6\u5927\u5c0f\u9650\u5236 \u00b6 gin \u9ed8\u8ba4\u4e0a\u4f20\u7684\u6587\u4ef6\u5927\u5c0f\u6700\u5927\u4e3a 32Mb\uff0c\u5982\u679c\u8981\u8c03\u5c0f\u6216\u8c03\u5927\uff0c\u53ef\u4ee5\u8bbe\u7f6e gin.Engine.MaxMultipartMemory eg\uff1a func main () { r := gin . Default () // \u4e3a multipart forms \u8bbe\u7f6e\u8f83\u9ad8\u7684\u5185\u5b58\u9650\u5236 (\u9ed8\u8ba4\u662f 32 MiB) r . MaxMultipartMemory = 2 << 30 ; // 2*2^30 byte = 2Gb r . Run ( \":9090\" ) } \u4e0b\u8f7d\u6587\u4ef6 \u00b6 \u5b9e\u73b0\u4e0b\u8f7d\u529f\u80fd\u8981\u5148\u83b7\u53d6\u6587\u4ef6\u540d\uff0c\u7136\u540e\u7ed9\u54cd\u5e94\u5934\u6dfb\u52a0\u4e00\u4e2a\u5c5e\u6027 Content-Disposition: attachment; filename=\u6587\u4ef6\u540d \u7136\u540e\u8c03\u7528 gin.Context.File() \u65b9\u6cd5\uff0c\u4f20\u5165\u6587\u4ef6\u8def\u5f84\u5373\u53ef\u3002 func main () { r := gin . Default () filename := \"a.txt\" r . GET ( \"/download\" , func ( c * gin . Context ) { // \u83b7\u53d6\u6587\u4ef6\u540d filename := \"a.txt\" // \u8bbe\u7f6e\u54cd\u5e94\u5934 c . Header ( \"Content-Disposition\" , \"attachment; filename=\" + filename ) // \u5411\u5ba2\u6237\u7aef\u8fd4\u56de\u6587\u4ef6\u6570\u636e c . File ( \"./\" + filename ) } r . Run ( \":9090\" ) } \u5f53\u7136\uff0c\u8fd8\u53ef\u4ee5\u5728\u54cd\u5e94\u5934\u4e2d\u6dfb\u52a0\u66f4\u591a\u4fe1\u606f func main () { r := gin . Default () filename := \"a.txt\" r . GET ( \"/download\" , func ( c * gin . Context ) { // \u83b7\u53d6\u6587\u4ef6\u540d filename := \"a.txt\" // \u8bbe\u7f6e\u72b6\u6001\u7801 c . Writer . WriteHeader ( http . StatusOK ) // \u6dfb\u52a0\u5185\u5bb9\u4f4d\u7f6e\u58f0\u660e c . Header ( \"Content-Disposition\" , \"attachment; filename=\" + filename ) // \u6dfb\u52a0\u5185\u5bb9\u7c7b\u578b\u58f0\u660e c . Header ( \"Content-Type\" , \"application/text/plain\" ) // \u5411\u5ba2\u6237\u7aef\u8fd4\u56de\u6570\u636e c . File ( \"./\" + filename ) } r . Run ( \":9090\" ) } \u6ce8\u610f\uff01 c.File(path) \u4e2d\u7684\u53c2\u6570 path \u6700\u597d\u662f\u7edd\u5bf9\u8def\u5f84\uff0c\u53ef\u4ee5\u4f7f\u7528 path.Join(\u8def\u5f84, \u6587\u4ef6\u540d) \u6765\u5f97\u5230\u7edd\u5bf9\u8def\u5f84\u3002 \u5904\u7406\u4e0d\u597d path \u53c2\u6570\u5bb9\u6613\u51fa\u9519\u3002 \u91cd\u5b9a\u5411 \u548c \u8f6c\u53d1 \u00b6 \u91cd\u5b9a\u5411\u548c\u8f6c\u53d1\u5728\u5b9e\u9645\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u5f88\u6709\u5fc5\u8981\u3002 \u6bd4\u5982\u5bf9 API \u8fdb\u884c\u5347\u7ea7\u540e\uff0c\u4e00\u4e9b\u539f\u672c\u7684\u8bf7\u6c42\u8def\u5f84\u4e0d\u518d\u4f7f\u7528\uff0c\u4f46\u662f\u4e3a\u4e86\u517c\u5bb9\uff0c\u9632\u6b62\u4e00\u4e9b\u65e7\u7248\u672c\u7ee7\u7eed\u8bf7\u6c42\u7684\u65f6\u5019\u8bf7\u6c42\u5931\u8d25\uff0c\u6240\u4ee5\u9700\u8981\u5bf9\u539f\u672c\u7684\u8def\u7531\u505a\u91cd\u5b9a\u5411\u6216\u8f6c\u53d1\u5904\u7406\u3002 \u533a\u522b\uff1a \u91cd\u5b9a\u5411\uff1a\u7528\u6237\u8bf7\u6c42\u4e00\u4e2a\u65e7\u7684\u5730\u5740\u7684\u65f6\u5019\uff0c\u8fd4\u56de301\uff0c\u5e76\u544a\u77e5\u65b0\u5730\u5740\uff1b\u7136\u540e\u7528\u6237\u518d\u6b21\u8bf7\u6c42\u65b0\u5730\u5740\uff0c\u5f97\u5230\u6b63\u786e\u8fd4\u56de\u3002 \u91cd\u5b9a\u5411\uff1a\u91cd\u5b9a\u5411\u8fc7\u540e\u6d4f\u89c8\u5668\u7684URL\u4f1a\u53d1\u751f\u53d8\u5316\u3002 \u91cd\u5b9a\u5411\uff1a\u53ef\u4ee5\u5c06\u8bf7\u6c42\u8f6c\u5230\u522b\u7684\u5730\u5740\uff0c\u8fd9\u4e2a\u5730\u5740\u53ef\u4ee5\u662f\u5916\u90e8\u94fe\u63a5\uff0c\u4e5f\u53ef\u4ee5\u662f\u5185\u90e8\u5176\u4ed6\u8def\u7531\u3002 \u8f6c\u53d1\uff1a\u7528\u6237\u8bf7\u6c42\u4e00\u4e2a\u65e7\u5730\u5740\u7684\u65f6\u5019\uff0c\u670d\u52a1\u7aef\u5185\u90e8\u5c06\u8bf7\u6c42\u8def\u5f84\u4fee\u6539\u4e3a\u65b0\u5730\u5740\uff0c\u7136\u540e\u8fd4\u56de\u7ed9\u7528\u6237 \u8f6c\u53d1\uff1a\u8f6c\u53d1\u8fc7\u540e\u6d4f\u89c8\u5668\u7684URL\u4e0d\u4f1a\u53d1\u751f\u53d8\u5316\u3002 \u8f6c\u53d1\uff1a\u53ea\u80fd\u8f6c\u53d1\u5230\u7ad9\u5185\u8def\u7531\u3002 \u91cd\u5b9a\u5411 \u00b6 c . Redirect ( http . StatusMovedPermanently , \"\u91cd\u5b9a\u5411\u7684\u8def\u5f84\" ) eg\uff1a func main () { r := gin . Default () r . GET ( \"/index\" , func ( c * gin . Context ) { c . JSON ( http . StatusOK , gin . H { \"msg\" : c . FullPath () }) }) // \u91cd\u5b9a\u5411\u5230\u7ad9\u5185\u5176\u4ed6\u8def\u7531 r . GET ( \"/redirect\" , func ( c * gin . Context ) { c . Redirect ( http . StatusMovedPermanently , \"/index\" ) }) // \u91cd\u5b9a\u5411\u5230\u7ad9\u5916\u94fe\u63a5 r . GET ( \"/redirect2\" , func ( c * gin . Context ) { c . Redirect ( http . StatusMovedPermanently , \"https://www.boii.xyz\" ) }) r . Run ( \":9090\" ) } \u8f6c\u53d1 \u00b6 c . Request . URL . Path = \"\u8f6c\u53d1\u7684\u76ee\u6807\u8def\u5f84\" eg\uff1a func main () { r := gin . Default () r . GET ( \"/index\" , func ( c * gin . Context ) { c . JSON ( http . StatusOK , gin . H { \"msg\" : c . FullPath () }) }) // \u8f6c\u53d1\u5230\u7ad9\u5185\u5176\u4ed6\u8def\u7531 r . GET ( \"/forward\" , func ( c * gin . Context ) { // URL \u4e0d\u4f1a\u6539\u53d8 c . Request . URL . Path = \"/index\" // \u4fee\u6539\u8bf7\u6c42\u7684\u76ee\u6807\u8def\u5f84 r . HandleContext ( c ) }) r . Run ( \":9090\" ) }","title":"\u4e0a\u4f20\u4e0b\u8f7d\u91cd\u5b9a\u5411"},{"location":"Go/Framework/gin/Gin-4-%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E9%87%8D%E5%AE%9A%E5%90%91/#_1","text":"\u6587\u4ef6\u4e0a\u4f20\u662f\u540e\u7aef\u5f00\u53d1\u4e2d\u5f88\u5e38\u89c1\u7684\u9700\u6c42\u3002 \u6587\u4ef6\u4e0a\u4f20\u7684\u539f\u7406\u65e0\u975e\u662f\u5ba2\u6237\u7aef \u9009\u62e9\u6587\u4ef6\u5e76\u70b9\u51fb\u4e0a\u4f20 \uff0c\u6d4f\u89c8\u5668\u5c06\u6587\u4ef6\u5185\u5bb9\u8bfb\u53d6\u7136\u540e\u4f20\u9001\u5230\u670d\u52a1\u5668\uff1b \u670d\u52a1\u7aef\u8bfb\u53d6\u6570\u636e\u5e76\u65b0\u5efa\u6587\u4ef6\uff0c\u5199\u5165\u6d4f\u89c8\u5668\u4f20\u8f93\u8fc7\u6765\u7684\u5185\u5bb9\u3002","title":"\u4e0a\u4f20\u4e0b\u8f7d\u548c\u91cd\u5b9a\u5411"},{"location":"Go/Framework/gin/Gin-4-%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E9%87%8D%E5%AE%9A%E5%90%91/#_2","text":"","title":"\u5355\u4e2a\u6587\u4ef6\u4e0a\u4f20"},{"location":"Go/Framework/gin/Gin-4-%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E9%87%8D%E5%AE%9A%E5%90%91/#_3","text":"<!DOCTYPE html> < html lang = \"zh-CN\" > < head > < meta charset = \"UTF-8\" > </ head > < body > < form action = \"/upload\" method = \"post\" enctype = \"multipart/form-data\" > < input type = \"file\" name = \"f1\" /> < input type = \"submit\" value = \"\u4e0a\u4f20\" /> </ form > </ body > </ html > \u524d\u7aef\u9700\u8981\u7528\u4e00\u4e2a\u8868\u5355\u6765\u8fdb\u884c\u4e0a\u4f20\uff0c\u8fd9\u91cc\u6211\u4eec\u8bbe\u7f6e\u4e86\u8868\u5355\u63d0\u4ea4\u7684\u8bf7\u6c42\u65b9\u5f0f\u4e3a POST\u3002 \u6ce8\u610f\u4e00\u5b9a\u8981\u6307\u5b9a\u7f16\u7801\u7c7b\u578b enctype=\"multipart/form-data\" \u4e0a\u4f20\u6587\u4ef6\u540e\u70b9\u51fb\u4e0a\u4f20\u6309\u94ae\u4f1a\u5411 http://localhost:9090/upload \u8fd9\u4e2a\u8def\u5f84\u53d1\u8d77POST\u8bf7\u6c42\u3002","title":"\u524d\u7aef\u90e8\u5206"},{"location":"Go/Framework/gin/Gin-4-%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E9%87%8D%E5%AE%9A%E5%90%91/#_4","text":"func main () { r := gin . Default () r . POST ( \"/upload\" , func ( c * gin . Context ) { // \u4ece\u8bf7\u6c42\u4e2d\u8bfb\u53d6\u6587\u4ef6 f , _ := c . FormFile ( \"f1\" ) // \u4fdd\u5b58\u6587\u4ef6 c . SaveUploadedFile ( f , \"./\" + f . Filename ) // \u7ed9\u5ba2\u6237\u7aef\u8fd4\u56de\u4e0a\u4f20\u6210\u529f\u7684\u6d88\u606f c . JSON ( 200 , gin . H { \"code\" : 2003 , \"msg\" : \"\u4e0a\u4f20\u6210\u529f\" }) }) r . Run ( \":9090\" ) } \u540e\u7aef\u7684\u5904\u7406\u4e3b\u8981\u52063\u6b65\uff1a \u4ece\u8bf7\u6c42\u4e2d\u8bfb\u53d6\u6587\u4ef6 \u4fdd\u5b58\u6587\u4ef6 \u7ed9\u5ba2\u6237\u7aef\u8fd4\u56de\u4e0a\u4f20\u6210\u529f\u7684\u6d88\u606f \u901a\u8fc7 gin.FormFile() \u53ef\u4ee5\u83b7\u53d6\u524d\u7aef\u4e0a\u4f20\u7684\u6587\u4ef6\uff0c\u53c2\u6570\u662f <input /> \u6807\u7b7e\u7684 name \u5c5e\u6027\uff0c\u901a\u8fc7\u53c2\u6570\u53ef\u4ee5\u5b9a\u4f4d\u5230\u4e0a\u4f20\u7684\u4efb\u4f55\u4e00\u4e2a\u6587\u4ef6\u3002 \u83b7\u53d6\u5230\u6587\u4ef6\u540e\u53ef\u4ee5\u4fdd\u5b58\u5728\u6570\u636e\u5e93\u4e2d\uff0c\u6216\u8005\u901a\u8fc7 gin.SaveUploadedFile() \u5c06\u6587\u4ef6\u4fdd\u5b58\u5728\u67d0\u4e2a\u4f4d\u7f6e\uff0c\u53ea\u9700\u8981\u5c06\u6587\u4ef6\u5bf9\u8c61 f \u548c \u8def\u5f84\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\u5373\u53ef\u3002 \u6700\u540e\u7ed9\u5ba2\u6237\u7aef\u8fd4\u56de\u4e00\u6761\u4e0a\u4f20\u6210\u529f\u7684\u6d88\u606f\u3002","title":"\u540e\u7aef\u90e8\u5206"},{"location":"Go/Framework/gin/Gin-4-%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E9%87%8D%E5%AE%9A%E5%90%91/#_5","text":"","title":"\u6d4b\u8bd5"},{"location":"Go/Framework/gin/Gin-4-%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E9%87%8D%E5%AE%9A%E5%90%91/#postman","text":"\u4f7f\u7528 PostMan \u65f6\u9700\u8981\u7ed9 Header \u6dfb\u52a0\u4e00\u4e2a\u5c5e\u6027 Content-Type: multipart/form-data \u7136\u540e\u5728 Body \u4e2d\u7684 form-data \u4e2d\u4e0a\u4f20\u6570\u636e","title":"\u4f7f\u7528 Postman"},{"location":"Go/Framework/gin/Gin-4-%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E9%87%8D%E5%AE%9A%E5%90%91/#curl","text":"curl -X POST http://localhost:9090/upload \\ -F \"file=@/xx/xx/xxx.zip\" \\ -H \"Content-Type: multipart/form-data\"","title":"\u4f7f\u7528 curl \u547d\u4ee4"},{"location":"Go/Framework/gin/Gin-4-%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E9%87%8D%E5%AE%9A%E5%90%91/#_6","text":"","title":"\u591a\u4e2a\u6587\u4ef6\u4e0a\u4f20"},{"location":"Go/Framework/gin/Gin-4-%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E9%87%8D%E5%AE%9A%E5%90%91/#_7","text":"<!DOCTYPE html> < html lang = \"zh-CN\" > < head > < meta charset = \"UTF-8\" > </ head > < body > < form action = \"/upload_multi\" method = \"post\" enctype = \"multipart/form-data\" > < input type = \"file\" name = \"files\" multiple > < input type = \"submit\" value = \"\u4e0a\u4f20\" > </ form > </ body > </ html >","title":"\u524d\u7aef\u90e8\u5206"},{"location":"Go/Framework/gin/Gin-4-%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E9%87%8D%E5%AE%9A%E5%90%91/#_8","text":"func main () { r := gin . Default () r . POST ( \"/upload\" , func ( c * gin . Context ) { // \u4ece\u8bf7\u6c42\u4e2d\u8bfb\u53d6\u6587\u4ef6 form , _ := c . MultipartForm () files := form . File [ \"files\" ] // \u9010\u4e2a\u4fdd\u5b58\u6587\u4ef6 for _ , file := range files { c . SaveUploadedFile ( f , \"./\" + f . Filename ) } // \u7ed9\u5ba2\u6237\u7aef\u8fd4\u56de\u4e0a\u4f20\u6210\u529f\u7684\u6d88\u606f c . JSON ( 200 , gin . H { \"code\" : 2003 , \"msg\" : \"\u4e0a\u4f20\u6210\u529f\" }) }) r . Run ( \":9090\" ) } \u5355\u4e2a\u6587\u4ef6\u4e0a\u4f20\u548c\u591a\u4e2a\u6587\u4ef6\u4e0a\u4f20\u53ea\u6709\u4e00\u70b9\u70b9\u533a\u522b \u591a\u4e2a\u6587\u4ef6\u4e0a\u4f20\u4f7f\u7528 gin.Context.MultipartForm() \u6765\u83b7\u53d6\uff0c\u8be5\u65b9\u6cd5\u4f1a\u8fd4\u56de\u4e00\u4e2a Form \u7ed3\u6784\u4f53\uff0c\u7ed3\u6784\u4f53\u4e2dmap\u7c7b\u578b\u5b57\u6bb5 File \u5b58\u50a8\u4e86\u6240\u6709\u5df2\u4e0a\u4f20\u7684\u6587\u4ef6 \u901a\u8fc7\u904d\u5386\u6765\u9010\u4e2a\u5904\u7406\uff0c\u7136\u540e\u7ed9\u5ba2\u6237\u7aef\u8fd4\u56de\u4e0a\u4f20\u6210\u529f\u7684\u6d88\u606f\u5373\u53ef\u3002","title":"\u540e\u7aef\u90e8\u5206"},{"location":"Go/Framework/gin/Gin-4-%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E9%87%8D%E5%AE%9A%E5%90%91/#_9","text":"gin \u9ed8\u8ba4\u4e0a\u4f20\u7684\u6587\u4ef6\u5927\u5c0f\u6700\u5927\u4e3a 32Mb\uff0c\u5982\u679c\u8981\u8c03\u5c0f\u6216\u8c03\u5927\uff0c\u53ef\u4ee5\u8bbe\u7f6e gin.Engine.MaxMultipartMemory eg\uff1a func main () { r := gin . Default () // \u4e3a multipart forms \u8bbe\u7f6e\u8f83\u9ad8\u7684\u5185\u5b58\u9650\u5236 (\u9ed8\u8ba4\u662f 32 MiB) r . MaxMultipartMemory = 2 << 30 ; // 2*2^30 byte = 2Gb r . Run ( \":9090\" ) }","title":"\u4e0a\u4f20\u6587\u4ef6\u5927\u5c0f\u9650\u5236"},{"location":"Go/Framework/gin/Gin-4-%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E9%87%8D%E5%AE%9A%E5%90%91/#_10","text":"\u5b9e\u73b0\u4e0b\u8f7d\u529f\u80fd\u8981\u5148\u83b7\u53d6\u6587\u4ef6\u540d\uff0c\u7136\u540e\u7ed9\u54cd\u5e94\u5934\u6dfb\u52a0\u4e00\u4e2a\u5c5e\u6027 Content-Disposition: attachment; filename=\u6587\u4ef6\u540d \u7136\u540e\u8c03\u7528 gin.Context.File() \u65b9\u6cd5\uff0c\u4f20\u5165\u6587\u4ef6\u8def\u5f84\u5373\u53ef\u3002 func main () { r := gin . Default () filename := \"a.txt\" r . GET ( \"/download\" , func ( c * gin . Context ) { // \u83b7\u53d6\u6587\u4ef6\u540d filename := \"a.txt\" // \u8bbe\u7f6e\u54cd\u5e94\u5934 c . Header ( \"Content-Disposition\" , \"attachment; filename=\" + filename ) // \u5411\u5ba2\u6237\u7aef\u8fd4\u56de\u6587\u4ef6\u6570\u636e c . File ( \"./\" + filename ) } r . Run ( \":9090\" ) } \u5f53\u7136\uff0c\u8fd8\u53ef\u4ee5\u5728\u54cd\u5e94\u5934\u4e2d\u6dfb\u52a0\u66f4\u591a\u4fe1\u606f func main () { r := gin . Default () filename := \"a.txt\" r . GET ( \"/download\" , func ( c * gin . Context ) { // \u83b7\u53d6\u6587\u4ef6\u540d filename := \"a.txt\" // \u8bbe\u7f6e\u72b6\u6001\u7801 c . Writer . WriteHeader ( http . StatusOK ) // \u6dfb\u52a0\u5185\u5bb9\u4f4d\u7f6e\u58f0\u660e c . Header ( \"Content-Disposition\" , \"attachment; filename=\" + filename ) // \u6dfb\u52a0\u5185\u5bb9\u7c7b\u578b\u58f0\u660e c . Header ( \"Content-Type\" , \"application/text/plain\" ) // \u5411\u5ba2\u6237\u7aef\u8fd4\u56de\u6570\u636e c . File ( \"./\" + filename ) } r . Run ( \":9090\" ) } \u6ce8\u610f\uff01 c.File(path) \u4e2d\u7684\u53c2\u6570 path \u6700\u597d\u662f\u7edd\u5bf9\u8def\u5f84\uff0c\u53ef\u4ee5\u4f7f\u7528 path.Join(\u8def\u5f84, \u6587\u4ef6\u540d) \u6765\u5f97\u5230\u7edd\u5bf9\u8def\u5f84\u3002 \u5904\u7406\u4e0d\u597d path \u53c2\u6570\u5bb9\u6613\u51fa\u9519\u3002","title":"\u4e0b\u8f7d\u6587\u4ef6"},{"location":"Go/Framework/gin/Gin-4-%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E9%87%8D%E5%AE%9A%E5%90%91/#_11","text":"\u91cd\u5b9a\u5411\u548c\u8f6c\u53d1\u5728\u5b9e\u9645\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u5f88\u6709\u5fc5\u8981\u3002 \u6bd4\u5982\u5bf9 API \u8fdb\u884c\u5347\u7ea7\u540e\uff0c\u4e00\u4e9b\u539f\u672c\u7684\u8bf7\u6c42\u8def\u5f84\u4e0d\u518d\u4f7f\u7528\uff0c\u4f46\u662f\u4e3a\u4e86\u517c\u5bb9\uff0c\u9632\u6b62\u4e00\u4e9b\u65e7\u7248\u672c\u7ee7\u7eed\u8bf7\u6c42\u7684\u65f6\u5019\u8bf7\u6c42\u5931\u8d25\uff0c\u6240\u4ee5\u9700\u8981\u5bf9\u539f\u672c\u7684\u8def\u7531\u505a\u91cd\u5b9a\u5411\u6216\u8f6c\u53d1\u5904\u7406\u3002 \u533a\u522b\uff1a \u91cd\u5b9a\u5411\uff1a\u7528\u6237\u8bf7\u6c42\u4e00\u4e2a\u65e7\u7684\u5730\u5740\u7684\u65f6\u5019\uff0c\u8fd4\u56de301\uff0c\u5e76\u544a\u77e5\u65b0\u5730\u5740\uff1b\u7136\u540e\u7528\u6237\u518d\u6b21\u8bf7\u6c42\u65b0\u5730\u5740\uff0c\u5f97\u5230\u6b63\u786e\u8fd4\u56de\u3002 \u91cd\u5b9a\u5411\uff1a\u91cd\u5b9a\u5411\u8fc7\u540e\u6d4f\u89c8\u5668\u7684URL\u4f1a\u53d1\u751f\u53d8\u5316\u3002 \u91cd\u5b9a\u5411\uff1a\u53ef\u4ee5\u5c06\u8bf7\u6c42\u8f6c\u5230\u522b\u7684\u5730\u5740\uff0c\u8fd9\u4e2a\u5730\u5740\u53ef\u4ee5\u662f\u5916\u90e8\u94fe\u63a5\uff0c\u4e5f\u53ef\u4ee5\u662f\u5185\u90e8\u5176\u4ed6\u8def\u7531\u3002 \u8f6c\u53d1\uff1a\u7528\u6237\u8bf7\u6c42\u4e00\u4e2a\u65e7\u5730\u5740\u7684\u65f6\u5019\uff0c\u670d\u52a1\u7aef\u5185\u90e8\u5c06\u8bf7\u6c42\u8def\u5f84\u4fee\u6539\u4e3a\u65b0\u5730\u5740\uff0c\u7136\u540e\u8fd4\u56de\u7ed9\u7528\u6237 \u8f6c\u53d1\uff1a\u8f6c\u53d1\u8fc7\u540e\u6d4f\u89c8\u5668\u7684URL\u4e0d\u4f1a\u53d1\u751f\u53d8\u5316\u3002 \u8f6c\u53d1\uff1a\u53ea\u80fd\u8f6c\u53d1\u5230\u7ad9\u5185\u8def\u7531\u3002","title":"\u91cd\u5b9a\u5411 \u548c \u8f6c\u53d1"},{"location":"Go/Framework/gin/Gin-4-%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E9%87%8D%E5%AE%9A%E5%90%91/#_12","text":"c . Redirect ( http . StatusMovedPermanently , \"\u91cd\u5b9a\u5411\u7684\u8def\u5f84\" ) eg\uff1a func main () { r := gin . Default () r . GET ( \"/index\" , func ( c * gin . Context ) { c . JSON ( http . StatusOK , gin . H { \"msg\" : c . FullPath () }) }) // \u91cd\u5b9a\u5411\u5230\u7ad9\u5185\u5176\u4ed6\u8def\u7531 r . GET ( \"/redirect\" , func ( c * gin . Context ) { c . Redirect ( http . StatusMovedPermanently , \"/index\" ) }) // \u91cd\u5b9a\u5411\u5230\u7ad9\u5916\u94fe\u63a5 r . GET ( \"/redirect2\" , func ( c * gin . Context ) { c . Redirect ( http . StatusMovedPermanently , \"https://www.boii.xyz\" ) }) r . Run ( \":9090\" ) }","title":"\u91cd\u5b9a\u5411"},{"location":"Go/Framework/gin/Gin-4-%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E9%87%8D%E5%AE%9A%E5%90%91/#_13","text":"c . Request . URL . Path = \"\u8f6c\u53d1\u7684\u76ee\u6807\u8def\u5f84\" eg\uff1a func main () { r := gin . Default () r . GET ( \"/index\" , func ( c * gin . Context ) { c . JSON ( http . StatusOK , gin . H { \"msg\" : c . FullPath () }) }) // \u8f6c\u53d1\u5230\u7ad9\u5185\u5176\u4ed6\u8def\u7531 r . GET ( \"/forward\" , func ( c * gin . Context ) { // URL \u4e0d\u4f1a\u6539\u53d8 c . Request . URL . Path = \"/index\" // \u4fee\u6539\u8bf7\u6c42\u7684\u76ee\u6807\u8def\u5f84 r . HandleContext ( c ) }) r . Run ( \":9090\" ) }","title":"\u8f6c\u53d1"},{"location":"Go/Framework/gin/Gin-5-%E4%B8%AD%E9%97%B4%E4%BB%B6/","text":"\u4e2d\u95f4\u4ef6\u7684\u521b\u5efa\u548c\u4f7f\u7528 \u4e2d\u95f4\u4ef6 \u00b6 \u7528\u5728 \u5ba2\u6237\u7aef \u4e0e \u670d\u52a1\u7aef \u4e4b\u95f4\u7684\u63d2\u4ef6\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a \u4e2d\u95f4\u4ef6 \u3002 \u4e2d\u95f4\u4ef6\u662f\u4e00\u4e2a\u6982\u5ff5\uff0c\u5176\u5b9e\u8d28\u5c31\u662f\u4e00\u4e9b\u9075\u5faa\u4e00\u5b9a\u89c4\u8303\u7684\u51fd\u6570\uff0c\u4e5f\u79f0\u505a \u94a9\u5b50\u51fd\u6570(Hook) \u3002 \u4e2d\u95f4\u4ef6\u9002\u5408\u5904\u7406\u4e00\u4e9b\u516c\u5171\u7684\u4e1a\u52a1\u903b\u8f91\uff0c\u6bd4\u5982\u767b\u5f55\u8ba4\u8bc1\u3001\u6743\u9650\u6821\u9a8c\u3001\u6570\u636e\u5206\u9875\u3001\u8bb0\u5f55\u65e5\u5fd7\u3001\u8017\u65f6\u7edf\u8ba1\u7b49\u3002 \u5b9a\u4e49\u4e2d\u95f4\u4ef6 \u00b6 \u5b9a\u4e49\u4e00\u4e2a\u4e2d\u95f4\u4ef6\uff0c\u5176\u5b9e\u5c31\u662f\u5b9a\u4e49\u4e00\u4e2a gin.HandlerFunc \u8fd9\u4e2a HandlerFunc \u5176\u5b9e\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u4f8b\u5982\u524d\u9762\u6211\u4eec\u5df2\u7ecf\u5199\u4e86\u5f88\u591a\u6b21\u7684 GET\u8bf7\u6c42\u3001POST\u8bf7\u6c42\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u8def\u7531\u8def\u5f84\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5199\u7684\u5c31\u662f\u8fd9\u79cd\u683c\u5f0f\u7684\u5904\u7406\u51fd\u6570\u3002 func ( group * RouterGroup ) GET ( relativePath string , handlers ... HandlerFunc ) IRoutes \u5bf9\u4e8e\u8fd9\u4e2a HandlerFunc \uff0c\u6e90\u7801\u4e2d\u662f\u8fd9\u6837\u5b9a\u4e49\u7684\uff1a //gin.go // HandlerFunc defines the handler used by gin middleware as return value. type HandlerFunc func ( * Context ) \u5f62\u53c2\u5217\u8868\u53ea\u6709\u4e00\u4e2a *gin.Context \u7c7b\u578b\u7684\u53c2\u6570\uff0c\u6ca1\u6709\u8fd4\u56de\u503c\u3002 \u8fd9\u6837\u7684\u51fd\u6570\u5c31\u662f\u4e00\u4e2a HandlerFunc \uff0c\u5c31\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u4e2d\u95f4\u4ef6\u3002 eg\uff1a\u5b9a\u4e49\u4e00\u4e2a\u8ba1\u65f6\u4e2d\u95f4\u4ef6 func timer ( c * gin . Context ) { start := time . Now () c . Next () end := time . Since ( start ) fmt . Println ( end ) } \u7b80\u7b80\u5355\u5355\uff0c\u4e0a\u9762\u7684\u6817\u5b50\u5c31\u5df2\u7ecf\u5b9a\u4e49\u4e86\u4e00\u4e2a\u540d\u4e3a timer \u7684\u4e2d\u95f4\u4ef6\uff0c\u7528\u4e8e\u8ba1\u65f6\u3002 \u8fd9\u91cc\u7684 c.Next() \u662f\u4e3b\u52a8\u8c03\u7528\u540e\u9762\u7684 HandlerFunc \uff0c\u5b83\u8fd8\u6709\u4e00\u4e2a\u5144\u5f1f\uff1a c.Abort() \uff0c\u8fd9\u4e2a\u6211\u4eec\u653e\u5728\u540e\u9762\u8bb2\u3002 \u5c40\u90e8\u6ce8\u518c\u4e2d\u95f4\u4ef6 \u00b6 \u4f7f\u7528\u4e2d\u95f4\u4ef6\u4e5f\u5f88\u7b80\u5355\uff0c\u6211\u4eec\u5728\u63a5\u6536\u8bf7\u6c42\u7684\u65f6\u5019\uff0c\u5373\u7f16\u5199 Handler() \u3001\u6216\u8005 GET() \u8fd9\u4e9b\u65b9\u6cd5\u65f6\uff0c\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u5c31\u53ef\u4ee5\u4f20\u5165\u4e00\u4e2a\u6216\u591a\u4e2a HandlerFunc \u3002 eg: func sleep ( c * gin . Context ) { start := time . Now () time . Sleep ( time . Second ) // \u7761\u7720\u4e00\u79d2 end := time . Since ( start ) fmt . Println ( \"sleep middleware: \" , end ) } func indexHandler ( c * gin . Context ) { fmt . Println ( \"Index handler\" ) c . JSON ( http . StatusOK , gin . H { \"msg\" : \"Here is index.\" }) } func main () { r := gin . Default () r . GET ( \"/\" , sleep , indexHandler ) // \u5c40\u90e8\u6ce8\u518c\u4e2d\u95f4\u4ef6\u5230\u6b64\u8def\u7531 r . Run ( \":9090\" ) } \u8f93\u51fa\uff1a \u4e0a\u9762\u7684\u6817\u5b50\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u5c40\u90e8\u6ce8\u518c\u5c31\u662f\u628a\u4e2d\u95f4\u4ef6\u5199\u5728\u9700\u8981\u4f7f\u7528\u8be5\u4e2d\u95f4\u4ef6\u7684\u8def\u7531\u4e2d\u3002 \u8fd9\u91cc timer \u548c indexHandler \u672c\u8d28\u4e0a\u90fd\u662f\u4e00\u6837\u7684\uff0c\u4f46\u662f\u88ab\u8c03\u7528\u987a\u5e8f\u4e0d\u540c\u3002 \u5ba2\u6237\u7aef\u8bf7\u6c42 / \u8fd9\u4e2a\u8def\u5f84\u65f6\uff0c\u4f1a\u5148\u8c03\u7528 timer \u8fd9\u4e2a\u4e2d\u95f4\u4ef6\uff0c\u7b49\u5b83\u6267\u884c\u5b8c\u540e\u518d\u53bb\u6267\u884c indexHandler \u3002 \u5168\u5c40\u6ce8\u518c\u4e2d\u95f4\u4ef6 \u00b6 \u5168\u5c40\u6ce8\u518c\u4e2d\u95f4\u4ef6\uff0c\u4f1a\u4f7f\u5f97\u8be5\u4f5c\u7528\u57df\u4e0b\u6240\u6709\u8def\u7531\u90fd\u4f1a\u6267\u884c\u5bf9\u5e94\u7684\u4e2d\u95f4\u4ef6\u3002\u6ce8\u518c\u65f6\u4f7f\u7528 Use() \u65b9\u6cd5\u3002 \u5565\u610f\u601d\u5462\uff1f \u5c31\u662f\u8bf4\uff0c\u5047\u8bbe\u4f60\u5b9a\u4e49\u4e86 r := gin.Default() \uff0c \u7136\u540e\u4f60\u5199 r.Use(timer) \uff0c\u8fd9\u6837\u4f60\u7684\u7f51\u7ad9\u6240\u6709\u7684\u8def\u7531\u90fd\u4f1a\u6267\u884c timer \u8fd9\u4e2a\u4e2d\u95f4\u4ef6\u3002 \u5982\u679c\u4f60\u662f\u7528 userG := r.Group(\"/user\") \uff0c\u7136\u540e\u5199 userG.Use(timer) \uff0c\u8fd9\u6837 userG \u8fd9\u4e2a\u8def\u7531\u7ec4\u4e0b\u6240\u6709\u8def\u7531\u90fd\u4f1a\u6267\u884c timer \u8fd9\u4e2a\u4e2d\u95f4\u4ef6 \u800c\u7ec4\u5916\u7684\u5176\u4ed6\u8def\u7531\u5e76\u4e0d\u4e00\u5b9a\u4f1a\u6267\u884c timer\u3002 eg\uff1a // \u5b9a\u4e49\u4e00\u4e2a\u4e2d\u95f4\u4ef6 func timer ( c * gin . Context ) { start := time . Now () c . Next () end := time . Since ( start ) fmt . Println ( end ) } func main () { r := gin . Default () userG := r . Group ( \"/user\" ) // \u5b9a\u4e49\u4e00\u4e2a\u8def\u7531\u7ec4 userG userG . Use ( timer ) // \u7ed1\u5b9a timer \u4e2d\u95f4\u4ef6 { // \u4ee5\u4e0b\u4e24\u4e2a\u8def\u7531\u4f1a\u6267\u884c timer \u4e2d\u95f4\u4ef6 userG . POST ( \"/register\" , Register ) userG . POST ( \"/login\" , Login ) } // \u5b9a\u4e49\u4e00\u4e2a\u8def\u7531\u7ec4 boogG bookG := r . Group ( \"/book\" ) { // \u4ee5\u4e0b\u4e24\u4e2a\u8def\u7531\u4e0d\u4f1a\u6267\u884c timer \u4e2d\u95f4\u4ef6 bookG . GET ( \"/search/:id\" , SearchBook ) bookG . DELETE ( \"/remove/:id\" , RemoveBook ) } r . Run ( \":9090\" ) } ... \u53ef\u4ee5\u6e05\u695a\u770b\u5230\uff0c\u8bf7\u6c42 /user \u7ec4\u4e0b\u7684\u8def\u5f84\u65f6\uff0c\u8c03\u7528\u4e86 timer \u6253\u5370\u4e86\u65f6\u95f4\uff0c\u800c\u8bf7\u6c42 /book \u7ec4\u65f6\u6ca1\u6709\u3002 \u4e2d\u95f4\u94fe\uff08\u804c\u8d23\u94fe\u6a21\u5f0f\uff09 \u00b6 c.Next() \u00b6 \u4e0a\u9762\u7684\u6817\u5b50\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u5230\u4e86 c.Next() \u51fd\u6570\uff0c\u8fd9\u4f1a\u6539\u53d8\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u3002 \u4e2d\u95f4\u4ef6\u91cc\u6ca1\u6709\u4f7f\u7528\u5230 c.Next() \u7684\u65f6\u5019\uff0c\u5176\u6267\u884c\u6d41\u5982\u4e0b \u6ca1\u6709 c.Next() \u7684\u65f6\u5019\u4f1a\u6267\u884c\u5b8c\u524d\u4e00\u4e2a\u4e2d\u95f4\u4ef6\uff0c\u5c31\u6267\u884c\u4e0b\u4e00\u4e2a\u4e2d\u95f4\u4ef6\u3002 \u800c\u5728\u4e2d\u95f4\u4ef6\u4e2d\u4f7f\u7528 c.Next() \u65f6\u5219\u4f1a\u6539\u53d8\u5176\u6267\u884c\u6d41\u3002 \u5176\u5b9e\u5c31\u662f\u5c06\u4e0b\u4e00\u4e2a\u4e2d\u95f4\u4ef6\u7684\u6267\u884c\u65f6\u673a\u63d0\u524d\u4e86\uff0c\u4f46\u662f\u4e0b\u4e00\u4e2a\u4e2d\u95f4\u4ef6\u6267\u884c\u5b8c\u4ee5\u540e\u8fd8\u4f1a\u56de\u5230\u5f53\u524d\u7684\u4e2d\u95f4\u4ef6\u3002 \u5176\u6267\u884c\u6d41\u5982\u4e0b\u56fe\uff1a eg\uff1a // \u4e2d\u95f4\u4ef61 func m1 ( c * gin . Context ) { fmt . Println ( \"m1 in...\" ) c . Next () fmt . Println ( \"m1 out...\" ) } // \u4e2d\u95f4\u4ef62 func m2 ( c * gin . Context ) { fmt . Println ( \"m2 in...\" ) c . Next () fmt . Println ( \"m2 out...\" ) } // \u9996\u9875\u5904\u7406\u51fd\u6570 func indexHandler ( c * gin . Context ) { fmt . Println ( \"Index handler in...\" ) c . JSON ( http . StatusOK , gin . H { \"msg\" : \"Here is index.\" , }) c . Next () fmt . Println ( \"Index handler out...\" ) } func main () { r := gin . Default () r . GET ( \"/\" , m1 , m2 , indexHandler ) // \u4f9d\u6b21\u5c40\u90e8\u6ce8\u518c\u4e09\u4e2a\u4e2d\u95f4\u4ef6 r . Run ( \":9090\" ) } \u4e09\u4e2a HandlerFunc \u7684\u6ce8\u518c\u987a\u5e8f\u4f9d\u6b21\u662f m1\u3001m2\u3001indexHandler \u6bcf\u4e2a\u90fd\u8c03\u7528\u4e86 c.Next() \uff0c \u6240\u4ee5\u4ed6\u4eec\u7684\u6267\u884c\u6d41\u5e94\u8be5\u662f\uff1a c.Abort() \u00b6 c.Abort() \u662f c.Next() \u7684\u5144\u5f1f\u3002 c.Next() \u8c03\u7528\u4e0b\u4e00\u4e2a HandlerFunc; c.Abort() \u963b\u6b62\u8c03\u7528\u4e0b\u4e00\u4e2a HandlerFunc\u3002\u4e00\u65e6\u963b\u6b62\u4e86\uff0c\u5219\u540e\u9762\u4e0d\u7ba1\u6709\u591a\u5c11\u4e2a HandlerFunc\uff0c\u5b83\u4eec\u90fd\u6ca1\u6709\u673a\u4f1a\u6267\u884c\u4e86\u3002 eg\uff1a // \u4e2d\u95f4\u4ef61 func m1 ( c * gin . Context ) { fmt . Println ( \"m1 in...\" ) c . Next () fmt . Println ( \"m1 out...\" ) } // \u4e2d\u95f4\u4ef62 func m2 ( c * gin . Context ) { fmt . Println ( \"m2 in...\" ) c . Abort () // \u963b\u6b62\u8c03\u7528\u540e\u9762\u7684 HandlerFunc fmt . Println ( \"m2 out...\" ) } // \u4e2d\u95f4\u4ef63 func m3 ( c * gin . Context ) { fmt . Println ( \"m3 in...\" ) c . Next () fmt . Println ( \"m3 out...\" ) } // \u9996\u9875\u5904\u7406\u51fd\u6570 func indexHandler ( c * gin . Context ) { fmt . Println ( \"Index handler in...\" ) c . JSON ( http . StatusOK , gin . H { \"msg\" : \"Here is index.\" , }) c . Next () fmt . Println ( \"Index handler out...\" ) } func main () { r := gin . Default () r . GET ( \"/\" , m1 , m2 , m3 , indexHandler ) // \u4f9d\u6b21\u5c40\u90e8\u6ce8\u518c\u56db\u4e2a\u4e2d\u95f4\u4ef6 r . Run ( \":9090\" ) } \u5728 m2 \u7684\u65f6\u5019\u8c03\u7528\u4e86 c.Abort() \uff0c\u6240\u4ee5\u540e\u9762\u7684 m3\u3001indexHandler \u90fd\u6ca1\u6709\u673a\u4f1a\u6267\u884c\u4e86\u3002 \u4e2d\u95f4\u4ef6\u4e4b\u95f4\u6570\u636e\u4f20\u9012 \u00b6 \u4e2d\u95f4\u4ef6\u4e4b\u95f4\u8981\u4f20\u9012\u6570\u636e\uff0c\u53ef\u4ee5\u901a\u8fc7 c.Set(key, value) \u7684\u65b9\u5f0f\u53d1\u9001\uff0c\u5728\u83b7\u53d6\u7684\u5730\u65b9\u7528 c.Get(key) \u7684\u65b9\u5f0f\u83b7\u53d6\u3002 \u83b7\u53d6\u7684\u65b9\u6cd5\u6709\u975e\u5e38\u591a\uff0c\u5982\u4e0b\u56fe\uff1a \u5728\u8fd9\u91cc\u7684\u83b7\u53d6\u8981\u6ce8\u610f\u6267\u884c\u6d41\u7684\u95ee\u9898\uff0c\u5982\u679c\u7b2c2\u4e2a\u4e2d\u95f4\u4ef6\u6267\u884c c.Set() \uff0c\u4f46\u662f\u5728\u7b2c1\u4e2a\u4e2d\u95f4\u4ef6\u5c31\u6267\u884c\u4e86 c.Get() \uff0c\u90a3\u4f1a\u4ec0\u4e48\u90fd\u62ff\u4e0d\u5230\u3002 eg\uff1a // \u4e2d\u95f4\u4ef61 func m1 ( c * gin . Context ) { fmt . Println ( \"m1 in...\" ) c . Set ( \"k\" , 123 ) // \u8bbe\u7f6e\u6570\u636e c . Next () fmt . Println ( \"m1 out...\" ) } // \u9996\u9875\u5904\u7406\u51fd\u6570 func indexHandler ( c * gin . Context ) { fmt . Println ( \"Index handler in...\" ) fmt . Println ( c . MustGet ( \"k\" )) // \u83b7\u53d6\u6570\u636e c . JSON ( http . StatusOK , gin . H { \"msg\" : \"Here is index.\" , }) fmt . Println ( \"Index handler out...\" ) } func main () { r := gin . Default () r . GET ( \"/\" , m1 , indexHandler ) r . Run ( \":9090\" ) } \u9ed8\u8ba4\u4e2d\u95f4\u4ef6 \u00b6 gin.Default() \u9ed8\u8ba4\u4f7f\u7528\u4e86 Logger \u548c Recovery \u4e2d\u95f4\u4ef6\uff0c\u5176\u4e2d\uff1a Logger\u4e2d\u95f4\u4ef6 \u5c06\u65e5\u5fd7\u5199\u5165 gin.DefaultWriter \uff0c\u5373\u4f7f\u914d\u7f6e\u4e86 GIN_MODE=release \u3002 Recovery\u4e2d\u95f4\u4ef6 \u4f1a recover \u4efb\u4f55 panic\u3002\u5982\u679c\u6709panic\u7684\u8bdd\uff0c\u4f1a\u5199\u5165500\u54cd\u5e94\u7801\u3002 \u5982\u679c\u4e0d\u60f3\u4f7f\u7528\u4e0a\u9762\u4e24\u4e2a\u9ed8\u8ba4\u7684\u4e2d\u95f4\u4ef6\uff0c\u53ef\u4ee5\u4f7f\u7528 gin.New() \u65b0\u5efa\u4e00\u4e2a\u6ca1\u6709\u4efb\u4f55\u9ed8\u8ba4\u4e2d\u95f4\u4ef6\u7684\u8def\u7531\u3002 \u5e76\u53d1\u6ce8\u610f\u4e8b\u9879 \u00b6 gin\u4e2d\u95f4\u4ef6\u4e2d\u4f7f\u7528goroutine \u5f53\u5728\u4e2d\u95f4\u4ef6\u6216 handler \u4e2d\u542f\u52a8\u65b0\u7684 goroutine \u65f6\uff0c\u4e0d\u80fd\u4f7f\u7528\u539f\u59cb\u7684\u4e0a\u4e0b\u6587 \uff08c *gin.Context\uff09 \uff0c\u5fc5\u987b\u4f7f\u7528\u5176\u53ea\u8bfb\u526f\u672c \uff08c.Copy()\uff09 \u3002 func m1 ( c * gin . Context ) { start := time . Now () end := time . Since ( start ) c . Set ( \"timer\" , end ) // go func(c) // \u9519\u8bef\uff01\uff01\uff01 go func ( c * gin . Context ) { // \u53ea\u80fd\u4f7f\u7528\u4e0a\u4e0b\u6587\u7684\u62f7\u8d1d\uff0c\u4e0d\u80fd\u4f7f\u7528\u539f\u672c\u7684\u4e0a\u4e0b\u6587 fmt . Println ( \"Other goroutine: \" , c . MustGet ( \"timer\" )) }( c . Copy ()) } func indexHandler ( c * gin . Context ) { timer := c . MustGet ( \"timer\" ) fmt . Println ( \"indexHandler: \" , timer ) } func main () { r := gin . Default () r . GET ( \"/\" , indexHandler ) r . Run ( \":9090\" ) }","title":"\u4e2d\u95f4\u4ef6"},{"location":"Go/Framework/gin/Gin-5-%E4%B8%AD%E9%97%B4%E4%BB%B6/#_1","text":"\u7528\u5728 \u5ba2\u6237\u7aef \u4e0e \u670d\u52a1\u7aef \u4e4b\u95f4\u7684\u63d2\u4ef6\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a \u4e2d\u95f4\u4ef6 \u3002 \u4e2d\u95f4\u4ef6\u662f\u4e00\u4e2a\u6982\u5ff5\uff0c\u5176\u5b9e\u8d28\u5c31\u662f\u4e00\u4e9b\u9075\u5faa\u4e00\u5b9a\u89c4\u8303\u7684\u51fd\u6570\uff0c\u4e5f\u79f0\u505a \u94a9\u5b50\u51fd\u6570(Hook) \u3002 \u4e2d\u95f4\u4ef6\u9002\u5408\u5904\u7406\u4e00\u4e9b\u516c\u5171\u7684\u4e1a\u52a1\u903b\u8f91\uff0c\u6bd4\u5982\u767b\u5f55\u8ba4\u8bc1\u3001\u6743\u9650\u6821\u9a8c\u3001\u6570\u636e\u5206\u9875\u3001\u8bb0\u5f55\u65e5\u5fd7\u3001\u8017\u65f6\u7edf\u8ba1\u7b49\u3002","title":"\u4e2d\u95f4\u4ef6"},{"location":"Go/Framework/gin/Gin-5-%E4%B8%AD%E9%97%B4%E4%BB%B6/#_2","text":"\u5b9a\u4e49\u4e00\u4e2a\u4e2d\u95f4\u4ef6\uff0c\u5176\u5b9e\u5c31\u662f\u5b9a\u4e49\u4e00\u4e2a gin.HandlerFunc \u8fd9\u4e2a HandlerFunc \u5176\u5b9e\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u4f8b\u5982\u524d\u9762\u6211\u4eec\u5df2\u7ecf\u5199\u4e86\u5f88\u591a\u6b21\u7684 GET\u8bf7\u6c42\u3001POST\u8bf7\u6c42\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u8def\u7531\u8def\u5f84\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5199\u7684\u5c31\u662f\u8fd9\u79cd\u683c\u5f0f\u7684\u5904\u7406\u51fd\u6570\u3002 func ( group * RouterGroup ) GET ( relativePath string , handlers ... HandlerFunc ) IRoutes \u5bf9\u4e8e\u8fd9\u4e2a HandlerFunc \uff0c\u6e90\u7801\u4e2d\u662f\u8fd9\u6837\u5b9a\u4e49\u7684\uff1a //gin.go // HandlerFunc defines the handler used by gin middleware as return value. type HandlerFunc func ( * Context ) \u5f62\u53c2\u5217\u8868\u53ea\u6709\u4e00\u4e2a *gin.Context \u7c7b\u578b\u7684\u53c2\u6570\uff0c\u6ca1\u6709\u8fd4\u56de\u503c\u3002 \u8fd9\u6837\u7684\u51fd\u6570\u5c31\u662f\u4e00\u4e2a HandlerFunc \uff0c\u5c31\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u4e2d\u95f4\u4ef6\u3002 eg\uff1a\u5b9a\u4e49\u4e00\u4e2a\u8ba1\u65f6\u4e2d\u95f4\u4ef6 func timer ( c * gin . Context ) { start := time . Now () c . Next () end := time . Since ( start ) fmt . Println ( end ) } \u7b80\u7b80\u5355\u5355\uff0c\u4e0a\u9762\u7684\u6817\u5b50\u5c31\u5df2\u7ecf\u5b9a\u4e49\u4e86\u4e00\u4e2a\u540d\u4e3a timer \u7684\u4e2d\u95f4\u4ef6\uff0c\u7528\u4e8e\u8ba1\u65f6\u3002 \u8fd9\u91cc\u7684 c.Next() \u662f\u4e3b\u52a8\u8c03\u7528\u540e\u9762\u7684 HandlerFunc \uff0c\u5b83\u8fd8\u6709\u4e00\u4e2a\u5144\u5f1f\uff1a c.Abort() \uff0c\u8fd9\u4e2a\u6211\u4eec\u653e\u5728\u540e\u9762\u8bb2\u3002","title":"\u5b9a\u4e49\u4e2d\u95f4\u4ef6"},{"location":"Go/Framework/gin/Gin-5-%E4%B8%AD%E9%97%B4%E4%BB%B6/#_3","text":"\u4f7f\u7528\u4e2d\u95f4\u4ef6\u4e5f\u5f88\u7b80\u5355\uff0c\u6211\u4eec\u5728\u63a5\u6536\u8bf7\u6c42\u7684\u65f6\u5019\uff0c\u5373\u7f16\u5199 Handler() \u3001\u6216\u8005 GET() \u8fd9\u4e9b\u65b9\u6cd5\u65f6\uff0c\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u5c31\u53ef\u4ee5\u4f20\u5165\u4e00\u4e2a\u6216\u591a\u4e2a HandlerFunc \u3002 eg: func sleep ( c * gin . Context ) { start := time . Now () time . Sleep ( time . Second ) // \u7761\u7720\u4e00\u79d2 end := time . Since ( start ) fmt . Println ( \"sleep middleware: \" , end ) } func indexHandler ( c * gin . Context ) { fmt . Println ( \"Index handler\" ) c . JSON ( http . StatusOK , gin . H { \"msg\" : \"Here is index.\" }) } func main () { r := gin . Default () r . GET ( \"/\" , sleep , indexHandler ) // \u5c40\u90e8\u6ce8\u518c\u4e2d\u95f4\u4ef6\u5230\u6b64\u8def\u7531 r . Run ( \":9090\" ) } \u8f93\u51fa\uff1a \u4e0a\u9762\u7684\u6817\u5b50\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u5c40\u90e8\u6ce8\u518c\u5c31\u662f\u628a\u4e2d\u95f4\u4ef6\u5199\u5728\u9700\u8981\u4f7f\u7528\u8be5\u4e2d\u95f4\u4ef6\u7684\u8def\u7531\u4e2d\u3002 \u8fd9\u91cc timer \u548c indexHandler \u672c\u8d28\u4e0a\u90fd\u662f\u4e00\u6837\u7684\uff0c\u4f46\u662f\u88ab\u8c03\u7528\u987a\u5e8f\u4e0d\u540c\u3002 \u5ba2\u6237\u7aef\u8bf7\u6c42 / \u8fd9\u4e2a\u8def\u5f84\u65f6\uff0c\u4f1a\u5148\u8c03\u7528 timer \u8fd9\u4e2a\u4e2d\u95f4\u4ef6\uff0c\u7b49\u5b83\u6267\u884c\u5b8c\u540e\u518d\u53bb\u6267\u884c indexHandler \u3002","title":"\u5c40\u90e8\u6ce8\u518c\u4e2d\u95f4\u4ef6"},{"location":"Go/Framework/gin/Gin-5-%E4%B8%AD%E9%97%B4%E4%BB%B6/#_4","text":"\u5168\u5c40\u6ce8\u518c\u4e2d\u95f4\u4ef6\uff0c\u4f1a\u4f7f\u5f97\u8be5\u4f5c\u7528\u57df\u4e0b\u6240\u6709\u8def\u7531\u90fd\u4f1a\u6267\u884c\u5bf9\u5e94\u7684\u4e2d\u95f4\u4ef6\u3002\u6ce8\u518c\u65f6\u4f7f\u7528 Use() \u65b9\u6cd5\u3002 \u5565\u610f\u601d\u5462\uff1f \u5c31\u662f\u8bf4\uff0c\u5047\u8bbe\u4f60\u5b9a\u4e49\u4e86 r := gin.Default() \uff0c \u7136\u540e\u4f60\u5199 r.Use(timer) \uff0c\u8fd9\u6837\u4f60\u7684\u7f51\u7ad9\u6240\u6709\u7684\u8def\u7531\u90fd\u4f1a\u6267\u884c timer \u8fd9\u4e2a\u4e2d\u95f4\u4ef6\u3002 \u5982\u679c\u4f60\u662f\u7528 userG := r.Group(\"/user\") \uff0c\u7136\u540e\u5199 userG.Use(timer) \uff0c\u8fd9\u6837 userG \u8fd9\u4e2a\u8def\u7531\u7ec4\u4e0b\u6240\u6709\u8def\u7531\u90fd\u4f1a\u6267\u884c timer \u8fd9\u4e2a\u4e2d\u95f4\u4ef6 \u800c\u7ec4\u5916\u7684\u5176\u4ed6\u8def\u7531\u5e76\u4e0d\u4e00\u5b9a\u4f1a\u6267\u884c timer\u3002 eg\uff1a // \u5b9a\u4e49\u4e00\u4e2a\u4e2d\u95f4\u4ef6 func timer ( c * gin . Context ) { start := time . Now () c . Next () end := time . Since ( start ) fmt . Println ( end ) } func main () { r := gin . Default () userG := r . Group ( \"/user\" ) // \u5b9a\u4e49\u4e00\u4e2a\u8def\u7531\u7ec4 userG userG . Use ( timer ) // \u7ed1\u5b9a timer \u4e2d\u95f4\u4ef6 { // \u4ee5\u4e0b\u4e24\u4e2a\u8def\u7531\u4f1a\u6267\u884c timer \u4e2d\u95f4\u4ef6 userG . POST ( \"/register\" , Register ) userG . POST ( \"/login\" , Login ) } // \u5b9a\u4e49\u4e00\u4e2a\u8def\u7531\u7ec4 boogG bookG := r . Group ( \"/book\" ) { // \u4ee5\u4e0b\u4e24\u4e2a\u8def\u7531\u4e0d\u4f1a\u6267\u884c timer \u4e2d\u95f4\u4ef6 bookG . GET ( \"/search/:id\" , SearchBook ) bookG . DELETE ( \"/remove/:id\" , RemoveBook ) } r . Run ( \":9090\" ) } ... \u53ef\u4ee5\u6e05\u695a\u770b\u5230\uff0c\u8bf7\u6c42 /user \u7ec4\u4e0b\u7684\u8def\u5f84\u65f6\uff0c\u8c03\u7528\u4e86 timer \u6253\u5370\u4e86\u65f6\u95f4\uff0c\u800c\u8bf7\u6c42 /book \u7ec4\u65f6\u6ca1\u6709\u3002","title":"\u5168\u5c40\u6ce8\u518c\u4e2d\u95f4\u4ef6"},{"location":"Go/Framework/gin/Gin-5-%E4%B8%AD%E9%97%B4%E4%BB%B6/#_5","text":"","title":"\u4e2d\u95f4\u94fe\uff08\u804c\u8d23\u94fe\u6a21\u5f0f\uff09"},{"location":"Go/Framework/gin/Gin-5-%E4%B8%AD%E9%97%B4%E4%BB%B6/#cnext","text":"\u4e0a\u9762\u7684\u6817\u5b50\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u5230\u4e86 c.Next() \u51fd\u6570\uff0c\u8fd9\u4f1a\u6539\u53d8\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u3002 \u4e2d\u95f4\u4ef6\u91cc\u6ca1\u6709\u4f7f\u7528\u5230 c.Next() \u7684\u65f6\u5019\uff0c\u5176\u6267\u884c\u6d41\u5982\u4e0b \u6ca1\u6709 c.Next() \u7684\u65f6\u5019\u4f1a\u6267\u884c\u5b8c\u524d\u4e00\u4e2a\u4e2d\u95f4\u4ef6\uff0c\u5c31\u6267\u884c\u4e0b\u4e00\u4e2a\u4e2d\u95f4\u4ef6\u3002 \u800c\u5728\u4e2d\u95f4\u4ef6\u4e2d\u4f7f\u7528 c.Next() \u65f6\u5219\u4f1a\u6539\u53d8\u5176\u6267\u884c\u6d41\u3002 \u5176\u5b9e\u5c31\u662f\u5c06\u4e0b\u4e00\u4e2a\u4e2d\u95f4\u4ef6\u7684\u6267\u884c\u65f6\u673a\u63d0\u524d\u4e86\uff0c\u4f46\u662f\u4e0b\u4e00\u4e2a\u4e2d\u95f4\u4ef6\u6267\u884c\u5b8c\u4ee5\u540e\u8fd8\u4f1a\u56de\u5230\u5f53\u524d\u7684\u4e2d\u95f4\u4ef6\u3002 \u5176\u6267\u884c\u6d41\u5982\u4e0b\u56fe\uff1a eg\uff1a // \u4e2d\u95f4\u4ef61 func m1 ( c * gin . Context ) { fmt . Println ( \"m1 in...\" ) c . Next () fmt . Println ( \"m1 out...\" ) } // \u4e2d\u95f4\u4ef62 func m2 ( c * gin . Context ) { fmt . Println ( \"m2 in...\" ) c . Next () fmt . Println ( \"m2 out...\" ) } // \u9996\u9875\u5904\u7406\u51fd\u6570 func indexHandler ( c * gin . Context ) { fmt . Println ( \"Index handler in...\" ) c . JSON ( http . StatusOK , gin . H { \"msg\" : \"Here is index.\" , }) c . Next () fmt . Println ( \"Index handler out...\" ) } func main () { r := gin . Default () r . GET ( \"/\" , m1 , m2 , indexHandler ) // \u4f9d\u6b21\u5c40\u90e8\u6ce8\u518c\u4e09\u4e2a\u4e2d\u95f4\u4ef6 r . Run ( \":9090\" ) } \u4e09\u4e2a HandlerFunc \u7684\u6ce8\u518c\u987a\u5e8f\u4f9d\u6b21\u662f m1\u3001m2\u3001indexHandler \u6bcf\u4e2a\u90fd\u8c03\u7528\u4e86 c.Next() \uff0c \u6240\u4ee5\u4ed6\u4eec\u7684\u6267\u884c\u6d41\u5e94\u8be5\u662f\uff1a","title":"c.Next()"},{"location":"Go/Framework/gin/Gin-5-%E4%B8%AD%E9%97%B4%E4%BB%B6/#cabort","text":"c.Abort() \u662f c.Next() \u7684\u5144\u5f1f\u3002 c.Next() \u8c03\u7528\u4e0b\u4e00\u4e2a HandlerFunc; c.Abort() \u963b\u6b62\u8c03\u7528\u4e0b\u4e00\u4e2a HandlerFunc\u3002\u4e00\u65e6\u963b\u6b62\u4e86\uff0c\u5219\u540e\u9762\u4e0d\u7ba1\u6709\u591a\u5c11\u4e2a HandlerFunc\uff0c\u5b83\u4eec\u90fd\u6ca1\u6709\u673a\u4f1a\u6267\u884c\u4e86\u3002 eg\uff1a // \u4e2d\u95f4\u4ef61 func m1 ( c * gin . Context ) { fmt . Println ( \"m1 in...\" ) c . Next () fmt . Println ( \"m1 out...\" ) } // \u4e2d\u95f4\u4ef62 func m2 ( c * gin . Context ) { fmt . Println ( \"m2 in...\" ) c . Abort () // \u963b\u6b62\u8c03\u7528\u540e\u9762\u7684 HandlerFunc fmt . Println ( \"m2 out...\" ) } // \u4e2d\u95f4\u4ef63 func m3 ( c * gin . Context ) { fmt . Println ( \"m3 in...\" ) c . Next () fmt . Println ( \"m3 out...\" ) } // \u9996\u9875\u5904\u7406\u51fd\u6570 func indexHandler ( c * gin . Context ) { fmt . Println ( \"Index handler in...\" ) c . JSON ( http . StatusOK , gin . H { \"msg\" : \"Here is index.\" , }) c . Next () fmt . Println ( \"Index handler out...\" ) } func main () { r := gin . Default () r . GET ( \"/\" , m1 , m2 , m3 , indexHandler ) // \u4f9d\u6b21\u5c40\u90e8\u6ce8\u518c\u56db\u4e2a\u4e2d\u95f4\u4ef6 r . Run ( \":9090\" ) } \u5728 m2 \u7684\u65f6\u5019\u8c03\u7528\u4e86 c.Abort() \uff0c\u6240\u4ee5\u540e\u9762\u7684 m3\u3001indexHandler \u90fd\u6ca1\u6709\u673a\u4f1a\u6267\u884c\u4e86\u3002","title":"c.Abort()"},{"location":"Go/Framework/gin/Gin-5-%E4%B8%AD%E9%97%B4%E4%BB%B6/#_6","text":"\u4e2d\u95f4\u4ef6\u4e4b\u95f4\u8981\u4f20\u9012\u6570\u636e\uff0c\u53ef\u4ee5\u901a\u8fc7 c.Set(key, value) \u7684\u65b9\u5f0f\u53d1\u9001\uff0c\u5728\u83b7\u53d6\u7684\u5730\u65b9\u7528 c.Get(key) \u7684\u65b9\u5f0f\u83b7\u53d6\u3002 \u83b7\u53d6\u7684\u65b9\u6cd5\u6709\u975e\u5e38\u591a\uff0c\u5982\u4e0b\u56fe\uff1a \u5728\u8fd9\u91cc\u7684\u83b7\u53d6\u8981\u6ce8\u610f\u6267\u884c\u6d41\u7684\u95ee\u9898\uff0c\u5982\u679c\u7b2c2\u4e2a\u4e2d\u95f4\u4ef6\u6267\u884c c.Set() \uff0c\u4f46\u662f\u5728\u7b2c1\u4e2a\u4e2d\u95f4\u4ef6\u5c31\u6267\u884c\u4e86 c.Get() \uff0c\u90a3\u4f1a\u4ec0\u4e48\u90fd\u62ff\u4e0d\u5230\u3002 eg\uff1a // \u4e2d\u95f4\u4ef61 func m1 ( c * gin . Context ) { fmt . Println ( \"m1 in...\" ) c . Set ( \"k\" , 123 ) // \u8bbe\u7f6e\u6570\u636e c . Next () fmt . Println ( \"m1 out...\" ) } // \u9996\u9875\u5904\u7406\u51fd\u6570 func indexHandler ( c * gin . Context ) { fmt . Println ( \"Index handler in...\" ) fmt . Println ( c . MustGet ( \"k\" )) // \u83b7\u53d6\u6570\u636e c . JSON ( http . StatusOK , gin . H { \"msg\" : \"Here is index.\" , }) fmt . Println ( \"Index handler out...\" ) } func main () { r := gin . Default () r . GET ( \"/\" , m1 , indexHandler ) r . Run ( \":9090\" ) }","title":"\u4e2d\u95f4\u4ef6\u4e4b\u95f4\u6570\u636e\u4f20\u9012"},{"location":"Go/Framework/gin/Gin-5-%E4%B8%AD%E9%97%B4%E4%BB%B6/#_7","text":"gin.Default() \u9ed8\u8ba4\u4f7f\u7528\u4e86 Logger \u548c Recovery \u4e2d\u95f4\u4ef6\uff0c\u5176\u4e2d\uff1a Logger\u4e2d\u95f4\u4ef6 \u5c06\u65e5\u5fd7\u5199\u5165 gin.DefaultWriter \uff0c\u5373\u4f7f\u914d\u7f6e\u4e86 GIN_MODE=release \u3002 Recovery\u4e2d\u95f4\u4ef6 \u4f1a recover \u4efb\u4f55 panic\u3002\u5982\u679c\u6709panic\u7684\u8bdd\uff0c\u4f1a\u5199\u5165500\u54cd\u5e94\u7801\u3002 \u5982\u679c\u4e0d\u60f3\u4f7f\u7528\u4e0a\u9762\u4e24\u4e2a\u9ed8\u8ba4\u7684\u4e2d\u95f4\u4ef6\uff0c\u53ef\u4ee5\u4f7f\u7528 gin.New() \u65b0\u5efa\u4e00\u4e2a\u6ca1\u6709\u4efb\u4f55\u9ed8\u8ba4\u4e2d\u95f4\u4ef6\u7684\u8def\u7531\u3002","title":"\u9ed8\u8ba4\u4e2d\u95f4\u4ef6"},{"location":"Go/Framework/gin/Gin-5-%E4%B8%AD%E9%97%B4%E4%BB%B6/#_8","text":"gin\u4e2d\u95f4\u4ef6\u4e2d\u4f7f\u7528goroutine \u5f53\u5728\u4e2d\u95f4\u4ef6\u6216 handler \u4e2d\u542f\u52a8\u65b0\u7684 goroutine \u65f6\uff0c\u4e0d\u80fd\u4f7f\u7528\u539f\u59cb\u7684\u4e0a\u4e0b\u6587 \uff08c *gin.Context\uff09 \uff0c\u5fc5\u987b\u4f7f\u7528\u5176\u53ea\u8bfb\u526f\u672c \uff08c.Copy()\uff09 \u3002 func m1 ( c * gin . Context ) { start := time . Now () end := time . Since ( start ) c . Set ( \"timer\" , end ) // go func(c) // \u9519\u8bef\uff01\uff01\uff01 go func ( c * gin . Context ) { // \u53ea\u80fd\u4f7f\u7528\u4e0a\u4e0b\u6587\u7684\u62f7\u8d1d\uff0c\u4e0d\u80fd\u4f7f\u7528\u539f\u672c\u7684\u4e0a\u4e0b\u6587 fmt . Println ( \"Other goroutine: \" , c . MustGet ( \"timer\" )) }( c . Copy ()) } func indexHandler ( c * gin . Context ) { timer := c . MustGet ( \"timer\" ) fmt . Println ( \"indexHandler: \" , timer ) } func main () { r := gin . Default () r . GET ( \"/\" , indexHandler ) r . Run ( \":9090\" ) }","title":"\u5e76\u53d1\u6ce8\u610f\u4e8b\u9879"},{"location":"Go/nil/Golang-nil-%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/","text":"\u7f16\u8bd1\u591a\u5e73\u53f0\u7a0b\u5e8f\u7684\u5fc5\u5907\u6280\u80fd \u4ea4\u53c9\u7f16\u8bd1 \u00b6 Golang \u652f\u6301\u4ea4\u53c9\u7f16\u8bd1\uff0c\u53ef\u4ee5\u5728\u4e00\u4e2a\u5e73\u53f0\u4e0a\u751f\u6210\u53e6\u4e00\u4e2a\u5e73\u53f0\u7684\u53ef\u6267\u884c\u7a0b\u5e8f\u3002 Mac \u4e0b\u7f16\u8bd1 Linux \u548c Windows 64\u4f4d\u53ef\u6267\u884c\u7a0b\u5e8f CGO_ENABLED = 0 GOOS = linux GOARCH = amd64 go build main.go CGO_ENABLED = 0 GOOS = windows GOARCH = amd64 go build main.go12 Linux \u4e0b\u7f16\u8bd1 Mac \u548c Windows 64\u4f4d\u53ef\u6267\u884c\u7a0b\u5e8f CGO_ENABLED = 0 GOOS = darwin GOARCH = amd64 go build main.go CGO_ENABLED = 0 GOOS = windows GOARCH = amd64 go build main.go12 Windows \u4e0b\u7f16\u8bd1 Mac \u548c Linux 64\u4f4d\u53ef\u6267\u884c\u7a0b\u5e8f SET CGO_ENABLED=0 SET GOOS=darwin SET GOARCH=amd64 go build main.go SET CGO_ENABLED=0 SET GOOS=linux SET GOARCH=amd64 go build main.go \u4e0a\u9762\u7684\u547d\u4ee4\u7f16\u8bd1 64 \u4f4d\u53ef\u6267\u884c\u7a0b\u5e8f\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 386 \u7f16\u8bd1 32 \u4f4d\u53ef\u6267\u884c\u7a0b\u5e8f\u3002 \u6761\u4ef6\u7f16\u8bd1 \u00b6 Golang \u867d\u7136\u80fd\u8de8\u5e73\u53f0\u7f16\u8bd1\u4f46\u662f\u4e5f\u65e0\u6cd5\u5b8c\u5168\u89e3\u51b3\u5e73\u53f0\u4e4b\u95f4\u7684\u5dee\u5f02\uff0c\u4e0d\u8fc7 Golang \u80fd\u591f\u9009\u62e9\u6027\u7f16\u8bd1\u3002 \u5f53\u6211\u4eec\u5199\u7684\u7a0b\u5e8f\u5728\u4e0d\u540c\u7684\u5e73\u53f0\u4e0a\u8c03\u7528\u7684\u4e1c\u897f\u4e0d\u540c\u65f6\uff0c\u6bd4\u5982\u7f16\u8bd1 Linux \u5e73\u53f0\u7684\u53ef\u6267\u884c\u6587\u4ef6\u7684\u65f6\u5019\u8981\u7f16\u8bd1\u8fd9\u4e2a\u6587\u4ef6\uff0c\u7f16\u8bd1 Windows \u5e73\u53f0\u7684\u53ef\u6267\u884c\u6587\u4ef6\u7684\u65f6\u5019\u8981\u7f16\u8bd1\u90a3\u4e2a\u6587\u4ef6\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5c31\u53ef\u4ee5\u4f7f\u7528\u9009\u62e9\u6027\u7f16\u8bd1\u3002 \u9009\u62e9\u6027\u7f16\u8bd1\u6709\u4e24\u79cd\u65b9\u5f0f\uff1a \u7f16\u8bd1\u6ce8\u91ca\uff08\u6784\u5efa\u7ea6\u675f\uff09 \u548c \u6587\u4ef6\u540e\u7f00 \u3002 \u7f16\u8bd1\u6ce8\u91ca\uff08\u6784\u5efa\u7ea6\u675f\uff09 \u00b6 \u7f16\u8bd1\u6ce8\u91ca\u957f\u8fd9\u6837\uff1a // +build darwin freebsd // sort package is used to sort. package sort \u7b2c\u4e00\u884c\u5c31\u662f\u7f16\u8bd1\u6ce8\u91ca\uff0c\u6216\u8005\u53eb\u6784\u5efa\u7ea6\u675f\uff08build constraint\uff09\u3001\u6784\u5efa\u6807\u8bb0\uff08build tag\uff09\u3002 \u683c\u5f0f\u4e3a\uff1a // +build [$GOOS] [$GOARCH] \u8fd9\u662f Go \u4e00\u5f00\u59cb\u5c31\u6709\u7684\u7279\u6027\uff0c\u5728 Go \u6e90\u7801\u4e2d\u6709\u5f88\u591a\u8fd9\u6837\u7684\u6ce8\u91ca\u884c\u3002\u4e0a\u9762\u6ce8\u91ca\u884c\u7684\u610f\u601d\uff0c\u8fd9\u4e2a\u6587\u4ef6\u53ea\u5728 darwin \u7cfb\u7edf\u6216 freebsd \u7cfb\u7edf\u4e0b\u4f1a\u5305\u542b\u5728\u5305\u4e2d\uff0c\u5176\u4ed6\u7cfb\u7edf\u4f1a\u5ffd\u7565\u8fd9\u4e2a\u6587\u4ef6\u3002 \u5b83\u9700\u8981\u9075\u5faa\u4ee5\u4e0b\u51e0\u70b9\uff1a \u5fc5\u987b\u5728\u6587\u4ef6\u9876\u90e8\u9644\u8fd1\uff0c\u5b83\u7684\u524d\u9762\u53ea\u80fd\u6709\u7a7a\u884c\u6216\u5176\u4ed6\u6ce8\u91ca\u884c\uff1b\u53ef\u89c1\u5305\u5b50\u53e5\u4e5f\u5728\u7ea6\u675f\u4e4b\u540e \u7ea6\u675f\u53ef\u4ee5\u51fa\u73b0\u5728\u4efb\u4f55\u6e90\u6587\u4ef6\u4e2d\uff0c\u6bd4\u5982 .go \u3001 .s \u7b49 \u7ea6\u675f\u53ef\u4ee5\u6709\u591a\u884c \u4e3a\u4e86\u533a\u522b\u7ea6\u675f\u548c\u5305\u6587\u6863\uff0c\u5728\u7ea6\u675f\u4e4b\u540e\u5fc5\u987b\u6709\u7a7a\u884c // \u540e\u9762\u5fc5\u987b\u7559\u4e00\u4e2a\u7a7a\u683c +build \u662f\u5173\u952e\u5b57\uff0c\u58f0\u660e\u8fd9\u662f\u4e00\u4e2a\u7f16\u8bd1\u6ce8\u91ca \u903b\u8f91\u5173\u7cfb: ! : \u975e\uff08\u611f\u53f9\u53f7\uff09 , : \u4e0e\uff08\u9017\u53f7\uff09 : \u6216\uff08\u7a7a\u683c\uff09 $GOOS \u53d6\u503c\uff1a darwin dragonfly freebsd linux netbsd openbsd plan9 solaris windows $GOARCH \u53d6\u503c\uff1a 386 amd64 arm GOOS \u548c GOARCH \u7684\u53d6\u503c\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4 go tool dist list \u67e5\u770b \u793a\u4f8b \u00b6 // +build A,B !C,D \u4ee3\u8868\u7f16\u8bd1\u6b64\u6587\u4ef6\u9700\u7b26\u5408 ( A\u4e14B ) \u6216 (( \u975eC ) \u4e14D ) \u3002 // +build !windows,arm \u4ee3\u8868\u6b64\u6587\u4ef6\u5728 \u7cfb\u7edf\u4e0d\u662fwindows \uff0c \u5e76\u4e14\u5904\u7406\u5668\u67b6\u6784\u662farm\u65f6\u7f16\u8bd1 \u6587\u4ef6\u540e\u7f00 \u00b6 \u901a\u8fc7\u5728\u6587\u4ef6\u540d\u540e\u52a0\u4e0a _$GOOS.go \u7684\u65b9\u5f0f\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u6761\u4ef6\u7f16\u8bd1\u3002 \u540e\u7f00\u67093\u79cd\u5f62\u5f0f\uff1a 1. _$GOOS.go 2. _$GOARCH.go 3. _$GOOS_$GOARCH.go \u793a\u4f8b \u00b6 color_windows.go // \u8be5\u6587\u4ef6\u4ec5\u5728\u7f16\u8bd1 windows \u53ef\u6267\u884c\u6587\u4ef6\u65f6\u7f16\u8bd1 color_linux.go // \u8be5\u6587\u4ef6\u4ec5\u5728\u7f16\u8bd1 linux \u53ef\u6267\u884c\u6587\u4ef6\u65f6\u7f16\u8bd1 color_darwin.go // \u8be5\u6587\u4ef6\u4ec5\u5728\u7f16\u8bd1 darwin \u53ef\u6267\u884c\u6587\u4ef6\u65f6\u7f16\u8bd1 color_linux_arm.go // \u8be5\u6587\u4ef6\u4ec5\u5728\u7f16\u8bd1 linux \u53ef\u6267\u884c\u6587\u4ef6\u65f6\uff0c\u4e14\u5904\u7406\u5668\u67b6\u6784\u4e3a arm \u65f6\u7f16\u8bd1 \u5982\u4f55\u9009\u62e9 \u00b6 \u5982\u679c\u662f\u6392\u9664\u67d0\u4e00\u4e24\u4e2a\u5e73\u53f0\u7684\u60c5\u51b5 \u5982\u679c\u662f\u5728\u5f88\u591a\u4e2a\u5e73\u53f0\u90fd\u53ef\u7528\u7684\u60c5\u51b5 \u5219\u4f7f\u7528 \u7f16\u8bd1\u6ce8\u91ca \u5982\u679c\u662f\u6307\u5b9a\u67d0\u4e00\u4e2a\u5e73\u53f0\u7684\u60c5\u51b5 \u5982\u679c\u662f\u6307\u5b9a\u67d0\u4e00\u79cd\u67b6\u6784\u7684\u60c5\u51b5 \u5219\u4f7f\u7528 \u6587\u4ef6\u540e\u7f00 \u5176\u4ed6\u6587\u4ef6\u540d \u00b6 \u4ee5 \u4e0b\u5212\u7ebf \u6216 \u70b9 \u5f00\u5934\u7684\u6587\u4ef6\u4e0d\u4f1a\u88ab\u7f16\u8bd1\u3002 _file.cfg .set.vm \u8fd9\u4e24\u4e2a\u6587\u4ef6\u5728\u7f16\u8bd1\u65f6\u4e0d\u4f1a\u88ab\u7f16\u8bd1\u3002 \u65b0\u7248\u6784\u5efa\u7ea6\u675f \u00b6 \u81ea Go1.17 \u5f00\u59cb\uff0cGolang \u8c03\u6574\u4e86\u6784\u5efa\u7ea6\u675f\uff0c\u4e5f\u5c31\u662f\u7f16\u8bd1\u6ce8\u91ca\u3002 //go:build [$GOOS] [$GOARCH] \u5bf9\u6bd4 \u00b6 \u65e7\u7248\uff1a // +build linux,amd64 \u65b0\u7248\uff1a //go:build linux && amd64 \u4e3b\u8981\u6539\u53d8\uff1a // +build \u6539\u6210 //go:build \uff0c\u53cc\u659c\u6760\u540e**\u6ca1\u6709**\u7a7a\u683c\uff01\uff01 \u4e00\u4e2a\u6587\u4ef6\u53ea\u80fd\u6709\u4e00\u884c\u6784\u5efa\u8bed\u53e5\u3002\uff08\u65e7\u7248\u53ef\u4ee5\u591a\u884c\uff09 gofmt \u5de5\u5177\u4f1a\u81ea\u52a8\u6839\u636e\u65e7\u7248\u8bed\u6cd5\u751f\u6210\u5bf9\u5e94\u7684\u65b0\u7248\u8bed\u6cd5\uff0c\u5e76\u4e14\u4e3a\u4e86\u517c\u5bb9\u4e24\u8005\u90fd\u4fdd\u7559\uff0c\u65b0\u7248\u5728\u652f\u6301\u7684\u73af\u5883\u4e0b\u4f1a\u8986\u76d6\u65e7\u7248\u3002 // +build !freebsd, !plan9 gofmt \u540e\uff1a //go:build !freebsd && !plan9 // +build !freebsd, !plan9","title":"\u4ea4\u53c9\u7f16\u8bd1"},{"location":"Go/nil/Golang-nil-%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/#_1","text":"Golang \u652f\u6301\u4ea4\u53c9\u7f16\u8bd1\uff0c\u53ef\u4ee5\u5728\u4e00\u4e2a\u5e73\u53f0\u4e0a\u751f\u6210\u53e6\u4e00\u4e2a\u5e73\u53f0\u7684\u53ef\u6267\u884c\u7a0b\u5e8f\u3002 Mac \u4e0b\u7f16\u8bd1 Linux \u548c Windows 64\u4f4d\u53ef\u6267\u884c\u7a0b\u5e8f CGO_ENABLED = 0 GOOS = linux GOARCH = amd64 go build main.go CGO_ENABLED = 0 GOOS = windows GOARCH = amd64 go build main.go12 Linux \u4e0b\u7f16\u8bd1 Mac \u548c Windows 64\u4f4d\u53ef\u6267\u884c\u7a0b\u5e8f CGO_ENABLED = 0 GOOS = darwin GOARCH = amd64 go build main.go CGO_ENABLED = 0 GOOS = windows GOARCH = amd64 go build main.go12 Windows \u4e0b\u7f16\u8bd1 Mac \u548c Linux 64\u4f4d\u53ef\u6267\u884c\u7a0b\u5e8f SET CGO_ENABLED=0 SET GOOS=darwin SET GOARCH=amd64 go build main.go SET CGO_ENABLED=0 SET GOOS=linux SET GOARCH=amd64 go build main.go \u4e0a\u9762\u7684\u547d\u4ee4\u7f16\u8bd1 64 \u4f4d\u53ef\u6267\u884c\u7a0b\u5e8f\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 386 \u7f16\u8bd1 32 \u4f4d\u53ef\u6267\u884c\u7a0b\u5e8f\u3002","title":"\u4ea4\u53c9\u7f16\u8bd1"},{"location":"Go/nil/Golang-nil-%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/#_2","text":"Golang \u867d\u7136\u80fd\u8de8\u5e73\u53f0\u7f16\u8bd1\u4f46\u662f\u4e5f\u65e0\u6cd5\u5b8c\u5168\u89e3\u51b3\u5e73\u53f0\u4e4b\u95f4\u7684\u5dee\u5f02\uff0c\u4e0d\u8fc7 Golang \u80fd\u591f\u9009\u62e9\u6027\u7f16\u8bd1\u3002 \u5f53\u6211\u4eec\u5199\u7684\u7a0b\u5e8f\u5728\u4e0d\u540c\u7684\u5e73\u53f0\u4e0a\u8c03\u7528\u7684\u4e1c\u897f\u4e0d\u540c\u65f6\uff0c\u6bd4\u5982\u7f16\u8bd1 Linux \u5e73\u53f0\u7684\u53ef\u6267\u884c\u6587\u4ef6\u7684\u65f6\u5019\u8981\u7f16\u8bd1\u8fd9\u4e2a\u6587\u4ef6\uff0c\u7f16\u8bd1 Windows \u5e73\u53f0\u7684\u53ef\u6267\u884c\u6587\u4ef6\u7684\u65f6\u5019\u8981\u7f16\u8bd1\u90a3\u4e2a\u6587\u4ef6\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5c31\u53ef\u4ee5\u4f7f\u7528\u9009\u62e9\u6027\u7f16\u8bd1\u3002 \u9009\u62e9\u6027\u7f16\u8bd1\u6709\u4e24\u79cd\u65b9\u5f0f\uff1a \u7f16\u8bd1\u6ce8\u91ca\uff08\u6784\u5efa\u7ea6\u675f\uff09 \u548c \u6587\u4ef6\u540e\u7f00 \u3002","title":"\u6761\u4ef6\u7f16\u8bd1"},{"location":"Go/nil/Golang-nil-%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/#_3","text":"\u7f16\u8bd1\u6ce8\u91ca\u957f\u8fd9\u6837\uff1a // +build darwin freebsd // sort package is used to sort. package sort \u7b2c\u4e00\u884c\u5c31\u662f\u7f16\u8bd1\u6ce8\u91ca\uff0c\u6216\u8005\u53eb\u6784\u5efa\u7ea6\u675f\uff08build constraint\uff09\u3001\u6784\u5efa\u6807\u8bb0\uff08build tag\uff09\u3002 \u683c\u5f0f\u4e3a\uff1a // +build [$GOOS] [$GOARCH] \u8fd9\u662f Go \u4e00\u5f00\u59cb\u5c31\u6709\u7684\u7279\u6027\uff0c\u5728 Go \u6e90\u7801\u4e2d\u6709\u5f88\u591a\u8fd9\u6837\u7684\u6ce8\u91ca\u884c\u3002\u4e0a\u9762\u6ce8\u91ca\u884c\u7684\u610f\u601d\uff0c\u8fd9\u4e2a\u6587\u4ef6\u53ea\u5728 darwin \u7cfb\u7edf\u6216 freebsd \u7cfb\u7edf\u4e0b\u4f1a\u5305\u542b\u5728\u5305\u4e2d\uff0c\u5176\u4ed6\u7cfb\u7edf\u4f1a\u5ffd\u7565\u8fd9\u4e2a\u6587\u4ef6\u3002 \u5b83\u9700\u8981\u9075\u5faa\u4ee5\u4e0b\u51e0\u70b9\uff1a \u5fc5\u987b\u5728\u6587\u4ef6\u9876\u90e8\u9644\u8fd1\uff0c\u5b83\u7684\u524d\u9762\u53ea\u80fd\u6709\u7a7a\u884c\u6216\u5176\u4ed6\u6ce8\u91ca\u884c\uff1b\u53ef\u89c1\u5305\u5b50\u53e5\u4e5f\u5728\u7ea6\u675f\u4e4b\u540e \u7ea6\u675f\u53ef\u4ee5\u51fa\u73b0\u5728\u4efb\u4f55\u6e90\u6587\u4ef6\u4e2d\uff0c\u6bd4\u5982 .go \u3001 .s \u7b49 \u7ea6\u675f\u53ef\u4ee5\u6709\u591a\u884c \u4e3a\u4e86\u533a\u522b\u7ea6\u675f\u548c\u5305\u6587\u6863\uff0c\u5728\u7ea6\u675f\u4e4b\u540e\u5fc5\u987b\u6709\u7a7a\u884c // \u540e\u9762\u5fc5\u987b\u7559\u4e00\u4e2a\u7a7a\u683c +build \u662f\u5173\u952e\u5b57\uff0c\u58f0\u660e\u8fd9\u662f\u4e00\u4e2a\u7f16\u8bd1\u6ce8\u91ca \u903b\u8f91\u5173\u7cfb: ! : \u975e\uff08\u611f\u53f9\u53f7\uff09 , : \u4e0e\uff08\u9017\u53f7\uff09 : \u6216\uff08\u7a7a\u683c\uff09 $GOOS \u53d6\u503c\uff1a darwin dragonfly freebsd linux netbsd openbsd plan9 solaris windows $GOARCH \u53d6\u503c\uff1a 386 amd64 arm GOOS \u548c GOARCH \u7684\u53d6\u503c\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4 go tool dist list \u67e5\u770b","title":"\u7f16\u8bd1\u6ce8\u91ca\uff08\u6784\u5efa\u7ea6\u675f\uff09"},{"location":"Go/nil/Golang-nil-%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/#_4","text":"// +build A,B !C,D \u4ee3\u8868\u7f16\u8bd1\u6b64\u6587\u4ef6\u9700\u7b26\u5408 ( A\u4e14B ) \u6216 (( \u975eC ) \u4e14D ) \u3002 // +build !windows,arm \u4ee3\u8868\u6b64\u6587\u4ef6\u5728 \u7cfb\u7edf\u4e0d\u662fwindows \uff0c \u5e76\u4e14\u5904\u7406\u5668\u67b6\u6784\u662farm\u65f6\u7f16\u8bd1","title":"\u793a\u4f8b"},{"location":"Go/nil/Golang-nil-%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/#_5","text":"\u901a\u8fc7\u5728\u6587\u4ef6\u540d\u540e\u52a0\u4e0a _$GOOS.go \u7684\u65b9\u5f0f\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u6761\u4ef6\u7f16\u8bd1\u3002 \u540e\u7f00\u67093\u79cd\u5f62\u5f0f\uff1a 1. _$GOOS.go 2. _$GOARCH.go 3. _$GOOS_$GOARCH.go","title":"\u6587\u4ef6\u540e\u7f00"},{"location":"Go/nil/Golang-nil-%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/#_6","text":"color_windows.go // \u8be5\u6587\u4ef6\u4ec5\u5728\u7f16\u8bd1 windows \u53ef\u6267\u884c\u6587\u4ef6\u65f6\u7f16\u8bd1 color_linux.go // \u8be5\u6587\u4ef6\u4ec5\u5728\u7f16\u8bd1 linux \u53ef\u6267\u884c\u6587\u4ef6\u65f6\u7f16\u8bd1 color_darwin.go // \u8be5\u6587\u4ef6\u4ec5\u5728\u7f16\u8bd1 darwin \u53ef\u6267\u884c\u6587\u4ef6\u65f6\u7f16\u8bd1 color_linux_arm.go // \u8be5\u6587\u4ef6\u4ec5\u5728\u7f16\u8bd1 linux \u53ef\u6267\u884c\u6587\u4ef6\u65f6\uff0c\u4e14\u5904\u7406\u5668\u67b6\u6784\u4e3a arm \u65f6\u7f16\u8bd1","title":"\u793a\u4f8b"},{"location":"Go/nil/Golang-nil-%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/#_7","text":"\u5982\u679c\u662f\u6392\u9664\u67d0\u4e00\u4e24\u4e2a\u5e73\u53f0\u7684\u60c5\u51b5 \u5982\u679c\u662f\u5728\u5f88\u591a\u4e2a\u5e73\u53f0\u90fd\u53ef\u7528\u7684\u60c5\u51b5 \u5219\u4f7f\u7528 \u7f16\u8bd1\u6ce8\u91ca \u5982\u679c\u662f\u6307\u5b9a\u67d0\u4e00\u4e2a\u5e73\u53f0\u7684\u60c5\u51b5 \u5982\u679c\u662f\u6307\u5b9a\u67d0\u4e00\u79cd\u67b6\u6784\u7684\u60c5\u51b5 \u5219\u4f7f\u7528 \u6587\u4ef6\u540e\u7f00","title":"\u5982\u4f55\u9009\u62e9"},{"location":"Go/nil/Golang-nil-%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/#_8","text":"\u4ee5 \u4e0b\u5212\u7ebf \u6216 \u70b9 \u5f00\u5934\u7684\u6587\u4ef6\u4e0d\u4f1a\u88ab\u7f16\u8bd1\u3002 _file.cfg .set.vm \u8fd9\u4e24\u4e2a\u6587\u4ef6\u5728\u7f16\u8bd1\u65f6\u4e0d\u4f1a\u88ab\u7f16\u8bd1\u3002","title":"\u5176\u4ed6\u6587\u4ef6\u540d"},{"location":"Go/nil/Golang-nil-%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/#_9","text":"\u81ea Go1.17 \u5f00\u59cb\uff0cGolang \u8c03\u6574\u4e86\u6784\u5efa\u7ea6\u675f\uff0c\u4e5f\u5c31\u662f\u7f16\u8bd1\u6ce8\u91ca\u3002 //go:build [$GOOS] [$GOARCH]","title":"\u65b0\u7248\u6784\u5efa\u7ea6\u675f"},{"location":"Go/nil/Golang-nil-%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/#_10","text":"\u65e7\u7248\uff1a // +build linux,amd64 \u65b0\u7248\uff1a //go:build linux && amd64 \u4e3b\u8981\u6539\u53d8\uff1a // +build \u6539\u6210 //go:build \uff0c\u53cc\u659c\u6760\u540e**\u6ca1\u6709**\u7a7a\u683c\uff01\uff01 \u4e00\u4e2a\u6587\u4ef6\u53ea\u80fd\u6709\u4e00\u884c\u6784\u5efa\u8bed\u53e5\u3002\uff08\u65e7\u7248\u53ef\u4ee5\u591a\u884c\uff09 gofmt \u5de5\u5177\u4f1a\u81ea\u52a8\u6839\u636e\u65e7\u7248\u8bed\u6cd5\u751f\u6210\u5bf9\u5e94\u7684\u65b0\u7248\u8bed\u6cd5\uff0c\u5e76\u4e14\u4e3a\u4e86\u517c\u5bb9\u4e24\u8005\u90fd\u4fdd\u7559\uff0c\u65b0\u7248\u5728\u652f\u6301\u7684\u73af\u5883\u4e0b\u4f1a\u8986\u76d6\u65e7\u7248\u3002 // +build !freebsd, !plan9 gofmt \u540e\uff1a //go:build !freebsd && !plan9 // +build !freebsd, !plan9","title":"\u5bf9\u6bd4"},{"location":"Go/nil/Golang-nil-%E9%80%89%E9%A1%B9%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/","text":"\u7528\u51fd\u6570\u5f0f\u7f16\u7a0b\u7684\u65b9\u6cd5\u89e3\u51b3\u591a\u6210\u5458\u7ed3\u6784\u4f53\u7684\u521d\u59cb\u5316\u95ee\u9898 \u9009\u9879\u8bbe\u8ba1\u6a21\u5f0f \u00b6 \u5728\u7f16\u5199\u7a0b\u5e8f\u65f6\uff0c\u7ecf\u5e38\u4f1a\u9047\u5230\u8fd9\u6837\u4e00\u7c7b\u573a\u666f\uff1a \u5b9a\u4e49\u4e00\u4e2a\u5305\u5185\u53ef\u89c1\u7684\u7ed3\u6784\u4f53\uff0c\u5bf9\u5916\u63d0\u4f9b\u4e00\u4e2a NewSTRUCT() \u65b9\u6cd5\u6765\u521b\u5efa\u3002 \u800c\u521b\u5efa\u65f6\u8981\u6c42\u4f7f\u7528\u8005\u7ed9\u51fa\u7ed3\u6784\u4f53\u53d8\u91cf\u7684\u503c\u4f5c\u4e3a\u53c2\u6570\u3002\u5f53\u7ed3\u6784\u4f53\u53d8\u91cf\u5f88\u591a\u7684\u65f6\u5019\uff0c\u4f1a\u5199\u51fa\u4e00\u5806\u5f88\u4e11\u5f88\u53ef\u6015\u7684\u4ee3\u7801\u3002\u4f8b\u5982\uff1a type student struct { name string // *\u5fc5\u586b age int // *\u5fc5\u586b height int // \u9009\u586b weight int // \u9009\u586b score float32 // \u9009\u586b } func NewStudent ( name string , age int ) * student { return & student { name : name , age : age } } func NewStudentWithHight ( name string , age , height int ) * student { return & student { name : name , age : age , height : height } } func NewStudentWithWeight ( name string , age , weight int ) * student { return & student { name : name , age : age , weight : weight } } func NewStudentWithScore ( name string , age int , score float32 ) * student { return & student { name : name , age : age , score : score } } func NewStudentWithHightAndWeight ( name string , age , height , weight int ) * student { return & student { name : name , age : age , height : height , weight : weight } } ... \u8fd9\u6837\u7684\u4ee3\u7801\u771f\u7684\u2026 \u53c8\u81ed\u53c8\u957f\u3002 \u56e0\u4e3a Golang \u4e0d\u652f\u6301\u51fd\u6570\u91cd\u8f7d\uff0c\u6240\u4ee5\u4f60\u4e0d\u5f97\u4e0d\u4f7f\u7528\u4e0d\u540c\u7684\u51fd\u6570\u540d\u6765\u5bf9\u5e94\u4e0d\u540c\u7684\u914d\u7f6e\u9009\u9879\u3002 \u89e3\u51b3\u65b9\u6cd5\u6709\u4e24\u79cd\uff1a Builder \u6a21\u5f0f \u548c Function Option \u6a21\u5f0f Builder \u6a21\u5f0f \u00b6 Builder \u6a21\u5f0f\u53c8\u79f0\u751f\u6210\u5668\u6a21\u5f0f\uff0c\u901a\u8fc7\u4e3a\u76ee\u6807\u7ed3\u6784\u4f53\u591a\u521b\u5efa\u4e00\u4e2a Builder \u7ed3\u6784\u4f53 \u6765\u8d1f\u8d23\u521b\u5efa student \u8fd9\u4ef6\u4e8b\uff0c\u4e00\u822c\u4ee5 \u76ee\u6807\u7ed3\u6784\u4f53\u7684\u540d\u79f0 + Builder \u547d\u540d\u3002 \u4f7f\u7528 Builder \u6a21\u5f0f\u7684\u6b65\u9aa4\u5982\u4e0b\uff1a \u5b9a\u4e49\u4e00\u4e2a Builder \u7ed3\u6784\u4f53\uff0c\u5e76\u5728\u7ed3\u6784\u4f53\u4e2d\u643a\u5e26\u4e00\u4e2a\u76ee\u6807\u7ed3\u6784\u4f53\u7684\u6307\u9488 \u5e76\u5728\u6784\u9020 Builder \u7684\u51fd\u6570\u91cc\u8981\u6c42\u4e00\u4e9b \u5fc5\u586b \u7684\u53c2\u6570\uff0c\u7136\u540e\u8fd4\u56de\u4e00\u4e2a Builder \u5bf9\u8c61 \u9010\u4e00\u4e3a\u76ee\u6807\u7ed3\u6784\u4f53\u7684 \u9009\u586b \u53c2\u6570\u5b9a\u4e49\u5c5e\u4e8e Builder \u7ed3\u6784\u4f53\u7684\u65b9\u6cd5\uff0c\u6ce8\u610f\u8fd9\u4e9b\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u53ea\u80fd\u662f Builder\u7ed3\u6784\u4f53\uff0c\u8fd9\u6837\u624d\u53ef\u4ee5\u94fe\u5f0f\u8c03\u7528 \u6700\u540e\u7f16\u5199 Builder \u7ed3\u6784\u4f53\u7684 Build() \u65b9\u6cd5\uff0c\u8fd4\u56de\u76ee\u6807\u7ed3\u6784\u4f53 // \u76ee\u6807\u7ed3\u6784\u4f53\uff1astudent type student struct { name string // *\u5fc5\u586b age int // *\u5fc5\u586b height int // \u9009\u586b weight int // \u9009\u586b score float32 // \u9009\u586b } // \u76ee\u6807\u7ed3\u6784\u4f53\u7684 builder\uff1astudentBuilder type studentBuilder struct { stu * student // \u643a\u5e26\u4e00\u4e2a\u76ee\u6807\u7ed3\u6784\u4f53 student \u7684\u6307\u9488 } // \u5b66\u751f builder \u7684\u521b\u5efa\u65b9\u6cd5\uff0c\u8981\u6c42\u8f93\u5165\u5fc5\u586b\u9879 func NewStudentBuilder ( name string , age int ) * studentBuilder { s := student { name : name , age : age } return & studentBuilder { stu : & s } } // \u5176\u4ed6\u9009\u586b\u9879\uff0c\u91cd\u70b9\u5728\u4e8e\u8fd9\u662f builder \u7684\u65b9\u6cd5\uff0c\u8fd4\u56de\u503c\u662f builder \u81ea\u5df1\uff0c\u8fd9\u6837\u624d\u53ef\u4ee5\u94fe\u5f0f\u8c03\u7528 func ( b * studentBuilder ) Height ( h int ) * studentBuilder { b . stu . height = h return b } func ( b * studentBuilder ) Weight ( w int ) * studentBuilder { b . stu . weight = w return b } func ( b * studentBuilder ) Score ( s float32 ) * studentBuilder { b . stu . score = s return b } // \u6700\u91cd\u8981\u7684\u4e00\u6b65\uff1a\u901a\u8fc7 Build \u65b9\u6cd5\u628a student \u7ed3\u6784\u4f53\u8fd4\u56de\u51fa\u53bb func ( b * studentBuilder ) Build () * student { return b . stu } // \u628a student \u7684\u6784\u5efa\u51fd\u6570\u4e5f\u4ee3\u7406\u8fc7\u6765\uff0c\u8fd9\u4e00\u6b65\u53ef\u9009\u53ef\u4e0d\u9009 func NewStudent ( name string , age int ) * studentBuilder { s := student { name : name , age : age } return & studentBuilder { stu : & s } } \u8fd9\u6837\u5728\u521b\u5efa student \u7684\u65f6\u5019\u53ef\u4ee5\u8fd9\u6837\u8c03\u7528\uff1a func main () { s1 := NewStudentBuilder ( \"Boii\" , 18 ). Height ( 180 ). Weight ( 150 ). Score ( 100.0 ). Build () // \u6216\u8005 s2 := NewStudent ( \"Boii\" , 18 ). Height ( 180 ). Weight ( 150 ). Score ( 100.0 ). Build () } \u7b80\u6d01\u6e05\u6670\uff01 Function Option \u6a21\u5f0f \u00b6 \u4e0a\u9762\u7684 Builder \u6a21\u5f0f\u5176\u5b9e\u662f\u8bbe\u8ba1\u6a21\u5f0f\u4e2d\u7684\u4e00\u79cd\u521b\u5efa\u578b\u6a21\u5f0f\uff0c\u5728 Java \u4e2d\u53ef\u4ee5\u4f7f\u7528\u5185\u90e8\u7c7b\u628a Builder \u5d4c\u5728\u76ee\u6807\u7c7b\u4e2d\uff0c\u4f46\u662f\u5728 Golang \u5c31\u5f97\u591a\u641e\u51fa\u4e00\u4e2a\u7ed3\u6784\u4f53\u3002\u4f46\u662f\u4f7f\u7528 Function Option \u6a21\u5f0f\u5219\u4e0d\u9700\u8981\u591a\u4f59\u7684\u7ed3\u6784\u4f53\uff0c\u8fd8\u53ef\u4ee5\u53d1\u6325\u51fd\u6570\u5f0f\u7f16\u7a0b\u7684\u4f18\u70b9\u3002 \u4f7f\u7528 Function Option \u6a21\u5f0f\u7684\u6b65\u9aa4\u5982\u4e0b\uff1a \u81ea\u5b9a\u4e49\u4e00\u4e2a Option \u7c7b\u578b\uff0c\u4ee5\u4e00\u4e2a\u51fd\u6570\u4e3a\u57fa\u7840\uff0c\u8be5\u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u76ee\u6807\u7ed3\u6784\u4f53\u6307\u9488\u4e3a\u53c2\u6570 \u9010\u4e00\u4e3a\u76ee\u6807\u7ed3\u6784\u4f53\u7684\u6bcf\u4e00\u4e2a\u53d8\u91cf\u5b9a\u4e49\u4e00\u4e2a\u9009\u9879\u51fd\u6570\uff0c\u63a5\u6536\u53d8\u91cf\u7684\u503c\uff0c\u8fd4\u56de Option \u7c7b\u578b\uff1b\u5728\u8fd4\u56de\u7684 Option \u4e2d\u5c06\u53d8\u91cf\u7684\u503c\u8d4b\u7ed9\u76ee\u6807\u7ed3\u6784\u4f53 \u5b9a\u4e49\u76ee\u6807\u7ed3\u6784\u4f53\u7684\u6784\u9020\u51fd\u6570\uff0c\u5728\u6784\u9020\u51fd\u6570\u4e2d\uff1a \u53c2\u6570\uff1a\u5c06 \u5fc5\u586b \u9009\u9879\u4f5c\u4e3a\u666e\u901a\u53c2\u6570\uff0c\u5916\u52a0 Option \u7c7b\u578b\u7684\u53ef\u53d8\u53c2\u6570 \u8fd4\u56de\u503c\uff1a\u76ee\u6807\u7ed3\u6784\u4f53 \u51fd\u6570\u4f53\uff1a\u6784\u9020\u76ee\u6807\u7ed3\u6784\u4f53\u5bf9\u8c61\uff0c\u904d\u5386\u53ef\u53d8\u53c2\u6570\u5e76\u6267\u884c\uff0c\u6700\u540e\u8fd4\u56de\u76ee\u6807\u7ed3\u6784\u4f53\u5bf9\u8c61 // \u76ee\u6807\u7ed3\u6784\u4f53\uff1astudent type student struct { name string // *\u5fc5\u586b age int // *\u5fc5\u586b height int // \u9009\u586b weight int // \u9009\u586b score float32 // \u9009\u586b } // \u81ea\u5b9a\u4e49\u4e00\u4e2a Option \u7c7b\u578b\uff0c\u4ee5\u4e00\u4e2a\u51fd\u6570\u4e3a\u57fa\u7840\uff0c\u51fd\u6570\u7ed3\u6784\u4e00\u4e2a\u76ee\u6807\u7ed3\u6784\u4f53 student \u6307\u9488\u4f5c\u4e3a\u53c2\u6570 type Option func ( s * student ) // \u9010\u4e00\u4e3a\u76ee\u6807\u7ed3\u6784\u4f53\u7684\u6bcf\u4e00\u4e2a\u53d8\u91cf\u5b9a\u4e49\u4e00\u4e2a\u9009\u9879\u51fd\u6570\uff0c\u7ed3\u6784\u53d8\u91cf\u7684\u503c n \uff0c\u8fd4\u56de Option \u7c7b\u578b func Name ( n string ) Option { return func ( s * student ) { // \u5728\u8fd4\u56de\u7684 Option \u4e2d\u5c06\u53d8\u91cf\u8d4b\u503c s . name = n } } func Age ( a int ) Option { return func ( s * student ) { s . age = a } } func Height ( h int ) Option { return func ( s * student ) { s . height = h } } func Weight ( w int ) Option { return func ( s * student ) { s . weight = w } } func Score ( sc float32 ) Option { return func ( s * student ) { s . score = sc } } // \u5b9a\u4e49\u76ee\u6807\u7ed3\u6784\u4f53\u7684\u6784\u9020\u51fd\u6570 // \u5fc5\u586b\u9009\u9879\u4f5c\u4e3a\u666e\u901a\u53c2\u6570\uff0cOption \u4f5c\u4e3a\u53ef\u53d8\u53c2\u6570 // \u8fd4\u56de\u76ee\u6807\u7ed3\u6784\u4f53\u5bf9\u8c61 func NewStudent ( name string , age int , options ... Option ) * student { s := student { // \u6784\u9020\u4e00\u4e2a\u76ee\u6807\u7ed3\u6784\u4f53\u5bf9\u8c61 name : name , age : age , height : 180 , } for _ , option := range options { // \u904d\u5386 options \u5f97\u5230\u4f20\u8fdb\u6765\u7684\u4e00\u5806\u9009\u9879\u51fd\u6570 option ( & s ) // \u6267\u884c\u8fd9\u4e9b\u9009\u9879\u51fd\u6570 } return & s // \u8fd4\u56de\u76ee\u6807\u7ed3\u6784\u4f53\u5bf9\u8c61 } \u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u50cf\u8fd9\u6837\u521b\u5efa\u76ee\u6807\u7ed3\u6784\u4f53\uff1a func main () { s1 := NewStudent ( \"Boii\" , 18 , Height ( 177 ), Weight ( 150 ), Score ( 100.00 )) s2 := NewStudent ( \"Boii\" , 18 , Height ( 177 ), Weight ( 150 )) s3 := NewStudent ( \"Boii\" , 18 , Score ( 100.00 )) } \u7ed3\u8bed \u00b6 \u6700\u63a8\u8350\u7684\u8fd8\u662f Function Option \u6a21\u5f0f\uff0c\u76f4\u63a5\u4f7f\u7528\u51fd\u6570\u5f0f\u7f16\u7a0b\uff0c\u4ee3\u7801\u8bfb\u8d77\u6765\u4e5f\u4f18\u96c5\u3002 \u5b83\u80fd\u5e26\u6765\u4e00\u4e0b\u597d\u5904\uff08\u6458\u81ea \u5de6\u8033\u6735\u8017\u5b50\u53d4 \uff09\uff1a \u76f4\u89c9\u5f0f\u7684\u7f16\u7a0b \u9ad8\u5ea6\u7684\u53ef\u914d\u7f6e\u5316 \u5f88\u5bb9\u6613\u7ef4\u62a4\u548c\u6269\u5c55 \u81ea\u6587\u6863 \u5bf9\u4e8e\u65b0\u6765\u7684\u4eba\u5f88\u5bb9\u6613\u4e0a\u624b \u6ca1\u6709\u4ec0\u4e48\u4ee4\u4eba\u56f0\u60d1\u7684\u4e8b\uff08\u662fnil \u8fd8\u662f\u7a7a\uff09","title":"\u9009\u9879\u8bbe\u8ba1\u6a21\u5f0f"},{"location":"Go/nil/Golang-nil-%E9%80%89%E9%A1%B9%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#_1","text":"\u5728\u7f16\u5199\u7a0b\u5e8f\u65f6\uff0c\u7ecf\u5e38\u4f1a\u9047\u5230\u8fd9\u6837\u4e00\u7c7b\u573a\u666f\uff1a \u5b9a\u4e49\u4e00\u4e2a\u5305\u5185\u53ef\u89c1\u7684\u7ed3\u6784\u4f53\uff0c\u5bf9\u5916\u63d0\u4f9b\u4e00\u4e2a NewSTRUCT() \u65b9\u6cd5\u6765\u521b\u5efa\u3002 \u800c\u521b\u5efa\u65f6\u8981\u6c42\u4f7f\u7528\u8005\u7ed9\u51fa\u7ed3\u6784\u4f53\u53d8\u91cf\u7684\u503c\u4f5c\u4e3a\u53c2\u6570\u3002\u5f53\u7ed3\u6784\u4f53\u53d8\u91cf\u5f88\u591a\u7684\u65f6\u5019\uff0c\u4f1a\u5199\u51fa\u4e00\u5806\u5f88\u4e11\u5f88\u53ef\u6015\u7684\u4ee3\u7801\u3002\u4f8b\u5982\uff1a type student struct { name string // *\u5fc5\u586b age int // *\u5fc5\u586b height int // \u9009\u586b weight int // \u9009\u586b score float32 // \u9009\u586b } func NewStudent ( name string , age int ) * student { return & student { name : name , age : age } } func NewStudentWithHight ( name string , age , height int ) * student { return & student { name : name , age : age , height : height } } func NewStudentWithWeight ( name string , age , weight int ) * student { return & student { name : name , age : age , weight : weight } } func NewStudentWithScore ( name string , age int , score float32 ) * student { return & student { name : name , age : age , score : score } } func NewStudentWithHightAndWeight ( name string , age , height , weight int ) * student { return & student { name : name , age : age , height : height , weight : weight } } ... \u8fd9\u6837\u7684\u4ee3\u7801\u771f\u7684\u2026 \u53c8\u81ed\u53c8\u957f\u3002 \u56e0\u4e3a Golang \u4e0d\u652f\u6301\u51fd\u6570\u91cd\u8f7d\uff0c\u6240\u4ee5\u4f60\u4e0d\u5f97\u4e0d\u4f7f\u7528\u4e0d\u540c\u7684\u51fd\u6570\u540d\u6765\u5bf9\u5e94\u4e0d\u540c\u7684\u914d\u7f6e\u9009\u9879\u3002 \u89e3\u51b3\u65b9\u6cd5\u6709\u4e24\u79cd\uff1a Builder \u6a21\u5f0f \u548c Function Option \u6a21\u5f0f","title":"\u9009\u9879\u8bbe\u8ba1\u6a21\u5f0f"},{"location":"Go/nil/Golang-nil-%E9%80%89%E9%A1%B9%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#builder","text":"Builder \u6a21\u5f0f\u53c8\u79f0\u751f\u6210\u5668\u6a21\u5f0f\uff0c\u901a\u8fc7\u4e3a\u76ee\u6807\u7ed3\u6784\u4f53\u591a\u521b\u5efa\u4e00\u4e2a Builder \u7ed3\u6784\u4f53 \u6765\u8d1f\u8d23\u521b\u5efa student \u8fd9\u4ef6\u4e8b\uff0c\u4e00\u822c\u4ee5 \u76ee\u6807\u7ed3\u6784\u4f53\u7684\u540d\u79f0 + Builder \u547d\u540d\u3002 \u4f7f\u7528 Builder \u6a21\u5f0f\u7684\u6b65\u9aa4\u5982\u4e0b\uff1a \u5b9a\u4e49\u4e00\u4e2a Builder \u7ed3\u6784\u4f53\uff0c\u5e76\u5728\u7ed3\u6784\u4f53\u4e2d\u643a\u5e26\u4e00\u4e2a\u76ee\u6807\u7ed3\u6784\u4f53\u7684\u6307\u9488 \u5e76\u5728\u6784\u9020 Builder \u7684\u51fd\u6570\u91cc\u8981\u6c42\u4e00\u4e9b \u5fc5\u586b \u7684\u53c2\u6570\uff0c\u7136\u540e\u8fd4\u56de\u4e00\u4e2a Builder \u5bf9\u8c61 \u9010\u4e00\u4e3a\u76ee\u6807\u7ed3\u6784\u4f53\u7684 \u9009\u586b \u53c2\u6570\u5b9a\u4e49\u5c5e\u4e8e Builder \u7ed3\u6784\u4f53\u7684\u65b9\u6cd5\uff0c\u6ce8\u610f\u8fd9\u4e9b\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u53ea\u80fd\u662f Builder\u7ed3\u6784\u4f53\uff0c\u8fd9\u6837\u624d\u53ef\u4ee5\u94fe\u5f0f\u8c03\u7528 \u6700\u540e\u7f16\u5199 Builder \u7ed3\u6784\u4f53\u7684 Build() \u65b9\u6cd5\uff0c\u8fd4\u56de\u76ee\u6807\u7ed3\u6784\u4f53 // \u76ee\u6807\u7ed3\u6784\u4f53\uff1astudent type student struct { name string // *\u5fc5\u586b age int // *\u5fc5\u586b height int // \u9009\u586b weight int // \u9009\u586b score float32 // \u9009\u586b } // \u76ee\u6807\u7ed3\u6784\u4f53\u7684 builder\uff1astudentBuilder type studentBuilder struct { stu * student // \u643a\u5e26\u4e00\u4e2a\u76ee\u6807\u7ed3\u6784\u4f53 student \u7684\u6307\u9488 } // \u5b66\u751f builder \u7684\u521b\u5efa\u65b9\u6cd5\uff0c\u8981\u6c42\u8f93\u5165\u5fc5\u586b\u9879 func NewStudentBuilder ( name string , age int ) * studentBuilder { s := student { name : name , age : age } return & studentBuilder { stu : & s } } // \u5176\u4ed6\u9009\u586b\u9879\uff0c\u91cd\u70b9\u5728\u4e8e\u8fd9\u662f builder \u7684\u65b9\u6cd5\uff0c\u8fd4\u56de\u503c\u662f builder \u81ea\u5df1\uff0c\u8fd9\u6837\u624d\u53ef\u4ee5\u94fe\u5f0f\u8c03\u7528 func ( b * studentBuilder ) Height ( h int ) * studentBuilder { b . stu . height = h return b } func ( b * studentBuilder ) Weight ( w int ) * studentBuilder { b . stu . weight = w return b } func ( b * studentBuilder ) Score ( s float32 ) * studentBuilder { b . stu . score = s return b } // \u6700\u91cd\u8981\u7684\u4e00\u6b65\uff1a\u901a\u8fc7 Build \u65b9\u6cd5\u628a student \u7ed3\u6784\u4f53\u8fd4\u56de\u51fa\u53bb func ( b * studentBuilder ) Build () * student { return b . stu } // \u628a student \u7684\u6784\u5efa\u51fd\u6570\u4e5f\u4ee3\u7406\u8fc7\u6765\uff0c\u8fd9\u4e00\u6b65\u53ef\u9009\u53ef\u4e0d\u9009 func NewStudent ( name string , age int ) * studentBuilder { s := student { name : name , age : age } return & studentBuilder { stu : & s } } \u8fd9\u6837\u5728\u521b\u5efa student \u7684\u65f6\u5019\u53ef\u4ee5\u8fd9\u6837\u8c03\u7528\uff1a func main () { s1 := NewStudentBuilder ( \"Boii\" , 18 ). Height ( 180 ). Weight ( 150 ). Score ( 100.0 ). Build () // \u6216\u8005 s2 := NewStudent ( \"Boii\" , 18 ). Height ( 180 ). Weight ( 150 ). Score ( 100.0 ). Build () } \u7b80\u6d01\u6e05\u6670\uff01","title":"Builder \u6a21\u5f0f"},{"location":"Go/nil/Golang-nil-%E9%80%89%E9%A1%B9%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#function-option","text":"\u4e0a\u9762\u7684 Builder \u6a21\u5f0f\u5176\u5b9e\u662f\u8bbe\u8ba1\u6a21\u5f0f\u4e2d\u7684\u4e00\u79cd\u521b\u5efa\u578b\u6a21\u5f0f\uff0c\u5728 Java \u4e2d\u53ef\u4ee5\u4f7f\u7528\u5185\u90e8\u7c7b\u628a Builder \u5d4c\u5728\u76ee\u6807\u7c7b\u4e2d\uff0c\u4f46\u662f\u5728 Golang \u5c31\u5f97\u591a\u641e\u51fa\u4e00\u4e2a\u7ed3\u6784\u4f53\u3002\u4f46\u662f\u4f7f\u7528 Function Option \u6a21\u5f0f\u5219\u4e0d\u9700\u8981\u591a\u4f59\u7684\u7ed3\u6784\u4f53\uff0c\u8fd8\u53ef\u4ee5\u53d1\u6325\u51fd\u6570\u5f0f\u7f16\u7a0b\u7684\u4f18\u70b9\u3002 \u4f7f\u7528 Function Option \u6a21\u5f0f\u7684\u6b65\u9aa4\u5982\u4e0b\uff1a \u81ea\u5b9a\u4e49\u4e00\u4e2a Option \u7c7b\u578b\uff0c\u4ee5\u4e00\u4e2a\u51fd\u6570\u4e3a\u57fa\u7840\uff0c\u8be5\u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u76ee\u6807\u7ed3\u6784\u4f53\u6307\u9488\u4e3a\u53c2\u6570 \u9010\u4e00\u4e3a\u76ee\u6807\u7ed3\u6784\u4f53\u7684\u6bcf\u4e00\u4e2a\u53d8\u91cf\u5b9a\u4e49\u4e00\u4e2a\u9009\u9879\u51fd\u6570\uff0c\u63a5\u6536\u53d8\u91cf\u7684\u503c\uff0c\u8fd4\u56de Option \u7c7b\u578b\uff1b\u5728\u8fd4\u56de\u7684 Option \u4e2d\u5c06\u53d8\u91cf\u7684\u503c\u8d4b\u7ed9\u76ee\u6807\u7ed3\u6784\u4f53 \u5b9a\u4e49\u76ee\u6807\u7ed3\u6784\u4f53\u7684\u6784\u9020\u51fd\u6570\uff0c\u5728\u6784\u9020\u51fd\u6570\u4e2d\uff1a \u53c2\u6570\uff1a\u5c06 \u5fc5\u586b \u9009\u9879\u4f5c\u4e3a\u666e\u901a\u53c2\u6570\uff0c\u5916\u52a0 Option \u7c7b\u578b\u7684\u53ef\u53d8\u53c2\u6570 \u8fd4\u56de\u503c\uff1a\u76ee\u6807\u7ed3\u6784\u4f53 \u51fd\u6570\u4f53\uff1a\u6784\u9020\u76ee\u6807\u7ed3\u6784\u4f53\u5bf9\u8c61\uff0c\u904d\u5386\u53ef\u53d8\u53c2\u6570\u5e76\u6267\u884c\uff0c\u6700\u540e\u8fd4\u56de\u76ee\u6807\u7ed3\u6784\u4f53\u5bf9\u8c61 // \u76ee\u6807\u7ed3\u6784\u4f53\uff1astudent type student struct { name string // *\u5fc5\u586b age int // *\u5fc5\u586b height int // \u9009\u586b weight int // \u9009\u586b score float32 // \u9009\u586b } // \u81ea\u5b9a\u4e49\u4e00\u4e2a Option \u7c7b\u578b\uff0c\u4ee5\u4e00\u4e2a\u51fd\u6570\u4e3a\u57fa\u7840\uff0c\u51fd\u6570\u7ed3\u6784\u4e00\u4e2a\u76ee\u6807\u7ed3\u6784\u4f53 student \u6307\u9488\u4f5c\u4e3a\u53c2\u6570 type Option func ( s * student ) // \u9010\u4e00\u4e3a\u76ee\u6807\u7ed3\u6784\u4f53\u7684\u6bcf\u4e00\u4e2a\u53d8\u91cf\u5b9a\u4e49\u4e00\u4e2a\u9009\u9879\u51fd\u6570\uff0c\u7ed3\u6784\u53d8\u91cf\u7684\u503c n \uff0c\u8fd4\u56de Option \u7c7b\u578b func Name ( n string ) Option { return func ( s * student ) { // \u5728\u8fd4\u56de\u7684 Option \u4e2d\u5c06\u53d8\u91cf\u8d4b\u503c s . name = n } } func Age ( a int ) Option { return func ( s * student ) { s . age = a } } func Height ( h int ) Option { return func ( s * student ) { s . height = h } } func Weight ( w int ) Option { return func ( s * student ) { s . weight = w } } func Score ( sc float32 ) Option { return func ( s * student ) { s . score = sc } } // \u5b9a\u4e49\u76ee\u6807\u7ed3\u6784\u4f53\u7684\u6784\u9020\u51fd\u6570 // \u5fc5\u586b\u9009\u9879\u4f5c\u4e3a\u666e\u901a\u53c2\u6570\uff0cOption \u4f5c\u4e3a\u53ef\u53d8\u53c2\u6570 // \u8fd4\u56de\u76ee\u6807\u7ed3\u6784\u4f53\u5bf9\u8c61 func NewStudent ( name string , age int , options ... Option ) * student { s := student { // \u6784\u9020\u4e00\u4e2a\u76ee\u6807\u7ed3\u6784\u4f53\u5bf9\u8c61 name : name , age : age , height : 180 , } for _ , option := range options { // \u904d\u5386 options \u5f97\u5230\u4f20\u8fdb\u6765\u7684\u4e00\u5806\u9009\u9879\u51fd\u6570 option ( & s ) // \u6267\u884c\u8fd9\u4e9b\u9009\u9879\u51fd\u6570 } return & s // \u8fd4\u56de\u76ee\u6807\u7ed3\u6784\u4f53\u5bf9\u8c61 } \u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u50cf\u8fd9\u6837\u521b\u5efa\u76ee\u6807\u7ed3\u6784\u4f53\uff1a func main () { s1 := NewStudent ( \"Boii\" , 18 , Height ( 177 ), Weight ( 150 ), Score ( 100.00 )) s2 := NewStudent ( \"Boii\" , 18 , Height ( 177 ), Weight ( 150 )) s3 := NewStudent ( \"Boii\" , 18 , Score ( 100.00 )) }","title":"Function Option \u6a21\u5f0f"},{"location":"Go/nil/Golang-nil-%E9%80%89%E9%A1%B9%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#_2","text":"\u6700\u63a8\u8350\u7684\u8fd8\u662f Function Option \u6a21\u5f0f\uff0c\u76f4\u63a5\u4f7f\u7528\u51fd\u6570\u5f0f\u7f16\u7a0b\uff0c\u4ee3\u7801\u8bfb\u8d77\u6765\u4e5f\u4f18\u96c5\u3002 \u5b83\u80fd\u5e26\u6765\u4e00\u4e0b\u597d\u5904\uff08\u6458\u81ea \u5de6\u8033\u6735\u8017\u5b50\u53d4 \uff09\uff1a \u76f4\u89c9\u5f0f\u7684\u7f16\u7a0b \u9ad8\u5ea6\u7684\u53ef\u914d\u7f6e\u5316 \u5f88\u5bb9\u6613\u7ef4\u62a4\u548c\u6269\u5c55 \u81ea\u6587\u6863 \u5bf9\u4e8e\u65b0\u6765\u7684\u4eba\u5f88\u5bb9\u6613\u4e0a\u624b \u6ca1\u6709\u4ec0\u4e48\u4ee4\u4eba\u56f0\u60d1\u7684\u4e8b\uff08\u662fnil \u8fd8\u662f\u7a7a\uff09","title":"\u7ed3\u8bed"},{"location":"Python/Adavanced/Python-No-Feature-Functional/","text":"Python\u7684\u9ad8\u7ea7\u7279\u60272 \u51fd\u6570\u5f0f\u7f16\u7a0b\u7684\u4e00\u4e2a\u7279\u70b9\u5c31\u662f\uff0c\u5141\u8bb8\u628a\u51fd\u6570\u672c\u8eab\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\u53e6\u4e00\u4e2a\u51fd\u6570\uff0c\u8fd8\u5141\u8bb8\u8fd4\u56de\u4e00\u4e2a\u51fd\u6570\uff01 \u51fd\u6570\u7684\u672c\u8d28 \u00b6 \u5728\u5b66C\u8bed\u8a00\u6307\u9488\u7684\u65f6\u5019\uff0c\u4f1a\u63a5\u89e6\u5230\u4e00\u4e2a\u6982\u5ff5\uff1a\u51fd\u6570\u540d\u662f\u51fd\u6570\u6240\u5728\u5185\u5b58\u7684\u5730\u5740\uff0c\u7c7b\u4f3c-\u6570\u7ec4\u540d\u662f\u6570\u7ec4\u7684\u9996\u5143\u7d20\u7684\u5730\u5740\u3002 \u5373\u4f7fPython\u4e2d\u6ca1\u6709\u6307\u9488\u4e00\u8bf4\uff0c\u4f46\u662f\u672c\u8d28\u8fd8\u662f\u4e00\u6837\u7684\u3002 \u53d8\u91cf\u540d\u662f\u4e00\u4e2a\u53d8\u91cf\u7684\u5730\u5740 \u51fd\u6570\u540d\u662f\u4e00\u4e2a\u51fd\u6570\u7684\u5730\u5740 \u8c03\u7528\u51fd\u6570\u7684\u65f6\u5019\u5176\u5b9e\u662f\u628a\u53c2\u6570\u4f20\u5230\u51fd\u6570\u672c\u8eab\u6240\u5728\u7684\u90a3\u5757\u5185\u5b58\u4e2d\u53bb\uff0c\u51fd\u6570\u540d\u4e0d\u8fc7\u662f\u4e00\u4e2a\u5a92\u4ecb\u800c\u5df2\u3002 \u5728C\u4e2d\u53ef\u4ee5\u8bf4\uff0c\u51fd\u6570\u540d\u5c31\u662f\u4e2a\u6307\u9488\uff0c\u6307\u5411\u4e00\u4e2a\u51fd\u6570 \u5728Python\u4e2d\u53ef\u4ee5\u8bf4\uff0c\u51fd\u6570\u540d\u5c31\u662f\u4e2a\u53d8\u91cf\uff0c\u6307\u5411\u4e00\u4e2a\u51fd\u6570 \u65e2\u7136\u51fd\u6570\u540d\u53ea\u662f\u6307\u5411\u51fd\u6570\u672c\u8eab\u6240\u5728\u5730\u5740\uff0c\u90a3\u6211\u6362\u4e2a\u540d\u6765\u6307\u4e0d\u4e5f\u53ef\u4ee5\u3002 def sum ( a , b ): return a + b f = sum f ( 1 , 2 ) --------------------------------- # Output: 3 \u5982\u679c\u653e\u5230\u4ea4\u4e92\u6a21\u5f0f\u4e2d\uff0c\u53ef\u4ee5\u66f4\u660e\u663e\u7684\u770b\u51fa\u6765 # \u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570 >>> def sum ( a , b ): ... return a + b ... >>> sum < function sum at 0x000001F25AF6B280 > >>> f = sum >>> f < function sum at 0x000001F25AF6B280 > >>> f ( 3 , 4 ) 7 \u5927\u6982\u5c31\u8fd9\u4e48\u56de\u4e8b\u513f \u9ad8\u9636\u51fd\u6570 \u00b6 \u9ad8\u9636\u51fd\u6570\uff1a\u63a5\u53d7\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u7684\u51fd\u6570 def heigh_fn(a, b, fn) \u65e2\u7136\u53d8\u91cf\u53ef\u4ee5\u6307\u5411\u51fd\u6570\uff0c\u51fd\u6570\u7684\u53c2\u6570\u80fd\u63a5\u6536\u53d8\u91cf\uff0c\u90a3\u4e48\u4e00\u4e2a\u51fd\u6570\u5c31\u53ef\u4ee5\u63a5\u6536\u53e6\u4e00\u4e2a\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\uff0c\u8fd9\u79cd\u51fd\u6570\u5c31\u79f0\u4e4b\u4e3a\u9ad8\u9636\u51fd\u6570\u3002 \u4e00\u4e2a\u6700\u7b80\u5355\u7684\u9ad8\u9636\u51fd\u6570\uff1a def abs ( num ): return ( num ) if num >= 0 else ( - num ) def abs_add ( a , b , fn ): return fn ( a ) + fn ( b ) print ( abs_add ( 8 , - 4 , abs )) --------------------------------- # Output: 12 \u8fd9\u4e2a\u9ad8\u9636\u51fd\u6570\u7684\u8fc7\u7a0b\u5927\u6982\u662f\u8fd9\u6837\u7684 a = 8 b = -4 fn = abs fn(a) + fn(b) ==> abs(8) + abs(-4) ==> 12 \u8fd4\u56de\u51fd\u6570 \u00b6 \u8fd4\u56de\u51fd\u6570\uff1a\u8fd4\u56de\u503c\u4e3a\u51fd\u6570\u7684\u51fd\u6570 \u901a\u5e38\u51fd\u6570\u90fd\u662f\u8fd4\u56deint\u3001str\u3001list \u8fd9\u4e9b\u53d8\u91cf\uff0c\u4f46\u662f\u53d8\u91cf\u53ef\u4ee5\u6307\u5411\u51fd\u6570\uff0c \u90a3\u51fd\u6570\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\u53d8\u91cf\uff0c\u4e0d\u5c31\u4e5f\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\u51fd\u6570\u3002 \u4e3e\u4e2a\u6817\u5b50 \u5b9e\u73b0\u4e00\u4e2a\u6c42\u548c\u51fd\u6570\u3002\u53c2\u6570\u53ef\u53d8\uff0c\u53ef\u4ee5\u662f1\u4e2a\u4e5f\u53ef\u4ee5\u662f\u591a\u4e2a\u3002 def cal_sum ( * args ): sum = 0 for n in args : sum += n return sum result = cal_sum ( 1 , 2 , 3 , 4 , 5 ) print ( result ) --------------------------------- # Output: 15 \u597d\uff0c\u73b0\u5728\u518d\u5199\u4e00\u4e2a\u51fd\u6570 lazy_sum() \uff0c\u628a\u8fd9\u4e2a\u51fd\u6570 cal_sum() \u4f5c\u4e3a\u8fd4\u56de\u503c\u8fd4\u56de def lazy_sum ( * args ): def cal_sum (): sum = 0 for n in args : sum += n return sum return cal_sum \u53ef\u4ee5\u770b\u5230\u6700\u540e\u4e00\u53e5 return cal_sum \u5c31\u628a\u51fd\u6570\u8fd4\u56de\u51fa\u6765\u4e86\u3002 \u90a3\u4e48\u51fd\u6570 lazy_sum() \u5c31\u662f\u4e00\u4e2a\u8fd4\u56de\u51fd\u6570 \u73b0\u5728\u8c03\u7528\u4e00\u4e0b\u8fd9\u4e2a\u8fd4\u56de\u51fd\u6570 def lazy_sum ( * args ): print ( 'I am the return function.' ) def cal_sum (): sum = 0 for n in args : sum += n return sum return cal_sum result = lazy_sum ( 1 , 2 , 3 , 4 , 5 ) print ( result ) --------------------------------- # Output: I am the return function . < function lazy_sum .< locals >. cal_sum at 0x000001C8765CB310 > \u54e6\u56af\uff0c lazy_sum() \u6ca1\u6709\u8fdb\u884c\u8ba1\u7b97\uff0c\u4f46\u4e5f\u770b\u51fa\u6765\uff0c lazy_sum() \u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u51fd\u6570 result \u6b64\u65f6\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u8981\u53bb\u8c03\u7528\u4e00\u6b21\u8fd4\u56de\u503c result \uff0c\u624d\u4f1a\u8fdb\u884c\u8ba1\u7b97 def lazy_sum ( * args ): print ( 'I am the return function.' ) def cal_sum (): sum = 0 for n in args : sum += n return sum return cal_sum result = lazy_sum ( 1 , 2 , 3 , 4 , 5 ) print ( result ) res = result () print ( res ) --------------------------------- # Output: I am the return function . < function lazy_sum .< locals >. cal_sum at 0x000001E02D07B310 > 15 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u8bf4 \u8fd4\u56de\u51fd\u6570\u662f \u60f0\u6027 \u7684\u3002\u5c31\u662f\u8fd9\u4e48\u6765\u7684 \u4e3a\u4ec0\u4e48\u8981\u8fd4\u56de\u4e00\u4e2a\u51fd\u6570 \u00b6 \u5728 lazy_sum() \u4e2d\uff0c\u6709\u4e00\u53e5 print \u8bed\u53e5\u3002 \u4ece\u8f93\u51fa\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u8fd4\u56de\u51fd\u6570\u672c\u8eab\u662f\u7acb\u5373\u6267\u884c\u7684\uff0c\u4f46\u662f\u5b83\u8fd4\u56de\u51fa\u6765\u7684\u51fd\u6570\u8981\u518d\u8fdb\u884c\u4e00\u6b21\u8c03\u7528\u624d\u4f1a\u6267\u884c\u3002 \u5355\u72ec\u4e00\u4e2a\u8fd4\u56de\u51fd\u6570\u5e76\u6ca1\u6709\u592a\u5927\u4f5c\u7528\uff0c\u4f46\u662f\u8fd4\u56de\u51fd\u6570\u548c\u9ad8\u9636\u51fd\u6570\u7ed3\u5408\u8d77\u6765\uff0c\u662f\u4e0d\u662f\u5c31\u6709\u610f\u601d\u4e86\u3002 \u63a5\u6536\u4e00\u4e2a\u51fd\u6570\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u51fd\u6570\u8fd4\u56de\u51fa\u53bb\u3002\u5728\u8fd4\u56de\u4e4b\u524d\u662f\u4e0d\u662f\u53ef\u4ee5\u8fdb\u884c\u4e00\u4e9b\u64cd\u4f5c\uff1f \u5047\u5982\u73b0\u5728\u6709\u4e00\u4e2a\u9700\u6c42\uff1a\u6c42\u548c\uff1b\u5b9e\u73b0\u5b8c\u4e86\u4e4b\u540e\uff0c\u4ea7\u54c1\u7ecf\u7406\u53c8\u52a0\u9700\u6c42\uff1a\u9664\u4e86 \u6c42\u548c \u8fd8\u8981\u6253\u5370\u4e00\u4e0b\u6c42\u548c\u7528\u4e86\u591a\u957f\u65f6\u95f4\uff0c\u4e5f\u5c31\u662f \u8ba1\u65f6\u529f\u80fd \u3002 \u90a3\u4e48\u73b0\u5728\u4f60\u6709\u4e24\u4e2a\u529e\u6cd5 - \u4e00\u662f\u5728 \u6c42\u548c\u51fd\u6570 \u91cc\u5b9e\u73b0\u8fd9\u4e2a \u8ba1\u65f6\u529f\u80fd \uff0c\u4f46\u662f\u8fd9\u6837\u5c31\u5728\u4e00\u4e2a\u51fd\u6570\u91cc\u505a\u4e86\u4e24\u4ef6\u4e8b\u60c5\u3002\u5373\u4e0d\u4f18\u96c5\uff0c\u4e5f\u4e0d\u597d\u7ef4\u62a4\u3002\u8fd9\u91cc\u4e3e\u4f8b\u662f\u7b80\u5355\u7684\u6c42\u548c\uff0c\u5b9e\u9645\u5f00\u53d1\u4e2d\u53ef\u80fd\u662f\u8ddf\u590d\u6742\u7684\u529f\u80fd\u3002 - \u4e8c\u662f\u628a \u8ba1\u65f6\u51fd\u6570 \u5199\u51fa\u6765\uff0c\u7136\u540e\u628a \u6c42\u548c\u51fd\u6570 \u4f20\u7ed9 \u8ba1\u65f6\u51fd\u6570 \uff0c\u5728 \u8ba1\u65f6\u51fd\u6570 \u4e2d\u7ed9 \u6c42\u548c\u51fd\u6570 \u52a0\u4e0a \u8ba1\u65f6\u529f\u80fd \uff0c\u4e4b\u540e\u518d\u628a\u8fd9\u4e2a \u6709\u8ba1\u65f6\u529f\u80fd\u7684\u6c42\u548c\u51fd\u6570 \u8fd4\u56de\u51fa\u53bb\u3002 \u8ba1\u65f6\u51fd\u6570 \u8fd9\u79cd \u63a5\u6536\u51fd\u6570 -> \u589e\u5f3a\u51fd\u6570 -> \u8fd4\u56de\u51fd\u6570 \u7684\u51fd\u6570\u5c31\u53eb \u95ed\u5305 \u4e0d\u4ec5\u53ef\u4ee5\u7528\u5728 \u8ba1\u65f6\u529f\u80fd \uff0c\u8fd8\u80fd\u7528\u5728 \u65e5\u5fd7\u529f\u80fd \uff0c\u6211\u53ea\u8981\u628a \u6c42\u548c\u51fd\u6570 \u5199\u597d\uff0c\u4f20\u7ed9 \u65e5\u5fd7\u51fd\u6570 \u5c31\u53ef\u4ee5\u83b7\u5f97 \u65e5\u5fd7\u529f\u80fd \u3002 \u51fd\u6570\u53ea\u505a\u4e00\u4ef6\u4e8b\u60c5\uff0c\u5176\u4ed6\u4e8b\u60c5\u7531\u522b\u7684\u51fd\u6570\u505a\uff0c\u9700\u8981\u4ec0\u4e48\u529f\u80fd\u628a\u51fd\u6570\u5f80\u91cc\u9762\u4e00\u4e22\uff0c\u8fd8\u4f60\u4e00\u4e2a\u589e\u5f3a\u7248\u7684\u3002Amazing\uff01\u8fd9\u5c31\u53eb \u9762\u5411\u5207\u9762\u7f16\u7a0b \u95ed\u5305\u3001\u88c5\u9970\u5668\u3001\u9762\u5411\u5207\u9762\u7f16\u7a0b \u00b6 \u95ed\u5305 \u00b6 \u95ed\u5305 = \u9ad8\u9636\u51fd\u6570 + \u8fd4\u56de\u51fd\u6570 \u5373\uff0c\u4e00\u4e2a \u63a5\u6536\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\uff0c\u53c8\u8fd4\u56de\u4e00\u4e2a\u51fd\u6570 \u7684\u51fd\u6570\uff0c\u5c31\u53eb\u505a\u95ed\u5305 \u4f5c\u7528\uff1a\u589e\u5f3a\u51fd\u6570\u529f\u80fd\u3001\u9762\u5411\u5207\u9762\u7f16\u7a0b\uff08AOP\uff09 \u65e0\u53c2\u95ed\u5305 \u00b6 import time def print_hello (): print ( 'hello!' ) def cal_time ( fn ): def improve_fn (): start_time = time . time () fn () end_time = time . time () print ( '\u8017\u65f6\uff1a {} ' . format ( end_time - start_time )) return improve_fn improve_print_hello = cal_time ( print_hello ) improve_print_hello () # \u4e5f\u53ef\u4ee5\u5199\u505a cal_time(print_hello)() --------------------------------- # Output: hello ! \u8017\u65f6 \uff1a 0.0009620189666748047 \u6817\u5b50\u4e2d\uff0c print_hello() \u53ea\u8d1f\u8d23\u6253\u5370hello\uff0c cal_time() \u8d1f\u8d23\u628a\u4f20\u8fdb\u6765\u7684\u51fd\u6570\u589e\u5f3a\u7136\u540e\u8fd4\u56de\u51fa\u53bb \u6240\u4ee5 cal_time \u5c31\u662f\u4e00\u4e2a\u95ed\u5305 \u5e26\u53c2\u95ed\u5305 \u00b6 \u4e0a\u9762\u7684\u6817\u5b50\uff0c print_hello() \u4e0d\u9700\u8981\u53c2\u6570\uff0c\u6240\u4ee5\u5728\u65e0\u53c2\u95ed\u5305\u4e2d\u53ef\u4ee5\u987a\u5229\u901a\u8fc7 \u4f46\u662f\u5982\u679c\u4e00\u4e2a\u51fd\u6570\u6709\u53c2\uff0c\u90a3\u65e0\u53c2\u95ed\u5305\u5c31\u4f1a\u629b\u51fa TypeError \u9519\u8bef\u3002 \u60f3\u8981\u5e26\u53c2\u5f88\u7b80\u5355\u3002 {% codeblock lang:python line_number:true mark:9,11 %} import time def add(a, b): print(a + b) def cal_time(fn): def improve_fn(*args, **kwargs): # \u5728\u8fd9\u91cc\u5199\u4e0b\u5f62\u53c2 start_time = time.time() fn(*args, **kwargs) # \u8c03\u7528\u7684\u65f6\u5019\u4f20\u8fdb\u53bb end_time = time.time() print('\u8017\u65f6\uff1a{}'.format(end_time - start_time)) 1 return improve_fn cal_time(add)(1, 2) Output: \u00b6 3 \u8017\u65f6\uff1a0.00800633430480957 {% endcodeblock %} \u63a5\u6536\u7684\u51fd\u6570\u6709\u8fd4\u56de\u503c \u00b6 \u63a5\u6536\u7684\u51fd\u6570\u6709\u8fd4\u56de\u503c\u7684\u8bdd\uff0c\u5e94\u8be5\u5728\u95ed\u5305\u91cc\u5bf9\u51fd\u6570\u8c03\u7528\u7684\u65f6\u5019\u628a\u53c2\u6570\u63a5\u6536\u4e0b\u6765\uff0c\u7136\u540e\u8fdb\u884c\u8fd4\u56de\u3002 import time def add ( a , b ): return a + b def cal_time ( fn ): def improve_fn ( * args , ** kwargs ): start_time = time . time () count = fn ( * args , ** kwargs ) # \u8c03\u7528\u51fd\u6570\u4e4b\u540e\u7528\u4e00\u4e2a\u53d8\u91cf\u63a5\u6536\u8fd4\u56de\u503c end_time = time . time () print ( '\u8017\u65f6\uff1a {} ' . format ( end_time - start_time )) return count # \u7136\u540e\u628a\u8fd4\u56de\u503c\u8fd4\u56de\u51fa\u53bb return improve_fn result = cal_time ( add )( 5 , 12 ) print ( result ) --------------------------------- # Output: \u8017\u65f6 \uff1a 0.0009620189666748047 17 \u88c5\u9970\u5668 \u00b6 \u88c5\u9970\u5668\u662f\u95ed\u5305\u7684\u8bed\u6cd5\u7cd6\u2014\u2014 @\u95ed\u5305\u540d \u6216 @\u95ed\u5305\u540d(\u53c2\u6570) \u8bed\u6cd5\u7cd6\u53ea\u662f\u4e00\u4e2a\u66f4\u65b9\u4fbf\u7684\u5199\u6cd5\uff0c\u5b8c\u5168\u53ef\u4ee5\u7b49\u4ef7\u8f6c\u6362\u4e3a\u975e\u8bed\u6cd5\u7cd6\u7684\u4ee3\u7801 \u88c5\u9970\u5668\u3001\u95ed\u5305\uff0c\u672c\u8d28\u4e0a\u4e5f\u662f\u51fd\u6570\uff0c\u8bf4\u88c5\u9970\u5668\u7684\u540c\u65f6\u4e5f\u662f\u5728\u8bf4\u95ed\u5305 \u4fdd\u7559\u539f\u51fd\u6570\u7684\u5143\u4fe1\u606f \u00b6 \u88c5\u9970\u5668\uff08\u95ed\u5305\uff09\u7684\u539f\u7406\u5c31\u662f\u628a\u539f\u51fd\u6570\u5f53\u4f5c\u53c2\u6570\u4f20\u8fdb\u88c5\u9970\u5668\u4e2d\uff0c\u7ecf\u8fc7\u589e\u5f3a\u540e\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 \u589e\u5f3a\u7248\u539f\u51fd\u6570 \u8fd9\u8bf4\u660e\u8fd4\u56de\u51fa\u6765\u7684 \u589e\u5f3a\u7248\u51fd\u6570 \u548c\u539f\u6765\u7684\u51fd\u6570\u4e0d\u662f\u540c\u4e00\u4e2a\u4e86\uff08\u5728\u5185\u5b58\u4e2d\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\uff09 \u65e2\u7136\u4e0d\u662f\u5728\u539f\u51fd\u6570\u4e0a\u8fdb\u884c\u6539\u9020\uff0c\u8fd9\u5c31\u5bfc\u81f4\u51fd\u6570\u7684\u5143\u4fe1\u606f\uff08\u6587\u6863\u5b57\u7b26\u4e32\u3001\u6ce8\u89e3\u3001\u53c2\u6570\u7b7e\u540d\u7b49\uff09\u90fd\u4e22\u5931\u4e86 \u89e3\u51b3\u65b9\u6cd5\u5c31\u662f\u4f7f\u7528 functools \u5e93\u4e2d\u7684 @wraps \u88c5\u9970\u5668\u6765\u628a\u539f\u51fd\u6570\u7684\u5143\u4fe1\u606f\u590d\u5236\u8fc7\u6765\u3002 \u5148\u770b\u770b \u4e0d \u4fdd\u7559\u5143\u4fe1\u606f\u7684\u6837\u5b50 import time # \u88c5\u9970\u5668\u51fd\u6570 def cal_time ( fn ): ''' Decorator that report the execution time. ''' def improve_fn ( * args , ** kwargs ): start = time . time () result = fn ( * args , ** kwargs ) end = time . time () print ( fn . __name__ , end - start ) return result return improve_fn # \u539f\u51fd\u6570 @cal_time def countdown ( n ): ''' Count down ''' while n > 0 : n -= 1 if __name__ == '__main__' : countdown ( 10_000 ) print ( countdown . __doc__ ) # \u6ca1\u6709\u4f7f\u7528wrap\uff0c\u6240\u4ee5\u5143\u4fe1\u606f\u90fd\u4e22\u5931\u4e86 --------------------------------- # Output: countdown 0.0010008811950683594 None \u518d\u770b\u770b\u4f7f\u7528\u4e86 @wraps \u7684\u6837\u5b50 import time from functools import wraps # \u88c5\u9970\u5668\u51fd\u6570 def cal_time ( fn ): ''' Decorator that report the execution time. ''' @wraps ( fn ) def improve_fn ( * args , ** kwargs ): start = time . time () result = fn ( * args , ** kwargs ) end = time . time () print ( fn . __name__ , end - start ) return result return improve_fn # \u539f\u51fd\u6570 @cal_time def countdown ( n ): ''' Count down ''' while n > 0 : n -= 1 if __name__ == '__main__' : countdown ( 10000 ) print ( countdown . __doc__ ) # \u4f7f\u7528\u4e86wrap\uff0c\u6240\u4ee5\u5143\u4fe1\u606f\u6ca1\u6709\u4e22\u5931 --------------------------------- # Output: countdown 0.0010025501251220703 Count down \u65e0\u53c2\u88c5\u9970\u5668 \u00b6 import time from functools import wraps def cal_time ( fn ): ''' Decorator that report the execution time. ''' @wraps ( fn ) def improve_fn ( * args , ** kwargs ): start = time . time () result = fn ( * args , ** kwargs ) end = time . time () print ( fn . __name__ , 'used time:' , end - start ) return result return improve_fn # \u88c5\u9970\u5668\u91cc\u4e0d\u9700\u8981\u643a\u5e26\u53c2\u6570 @cal_time def add ( a , b ): return a + b res = add ( 5 , 6 ) print ( res ) # \u7b49\u4ef7\u4e8e # # def add(a, b): # return a + b # # improve_add = cal_time(add) # res = improve_add(5, 6) # print(res) --------------------------------- # Output: add used time : 0.0 11 \u5e26\u53c2\u88c5\u9970\u5668 \u00b6 import time from functools import wraps def cal_time ( msg ): # \u7b2c\u4e00\u5c42\uff0c\u63a5\u6536\u88c5\u9970\u5668\u53c2\u6570 print ( 'First floor:' , msg ) def decorator ( fn ): # \u7b2c\u4e8c\u5c42\uff0c\u63a5\u6536\u51fd\u6570 print ( 'Second floor:' , msg ) @wraps ( fn ) def improve_fn ( * args , ** kwargs ): # \u7b2c\u4e09\u5c42\uff0c\u589e\u5f3a\u51fd\u6570 print ( 'Third floor:' , msg ) start = time . time () result = fn ( * args , ** kwargs ) end = time . time () print ( 'Used time:' , end - start ) return result return improve_fn return decorator @cal_time ( 'I am the message.' ) def countdown ( time = 10000 ): while time > 0 : time -= 1 if __name__ == '__main__' : countdown () --------------------------------- # Output: First floor : I am the message . Second floor : I am the message . Third floor : I am the message . Used time : 0.000997781753540039 \u6709\u53c2\u88c5\u9970\u5668\u548c\u65e0\u53c2\u88c5\u9970\u5668\u7684\u533a\u522b\u4ec5\u4ec5\u53ea\u662f\u591a\u4e86\u4e00\u5c42\u51fd\u6570\u800c\u5df2 \u4e5f\u5c31\u662f\u5728\u65e0\u53c2\u88c5\u9970\u5668\u7684\u57fa\u7840\u4e0a\u591a\u4e00\u5c42\u51fd\u6570\u6765\u63a5\u6536\u88c5\u9970\u5668\u53c2\u6570\u800c\u5df2\u3002 \u6ce8\u610f\u5e26\u53c2\u88c5\u9970\u5668\u5373\u4f7f\u4e0d\u586b\u53c2\u6570\u4e5f\u8981\u5199\u4e0a\u62ec\u53f7 \u88c5\u9970\u5668\u53ea\u5728\u7b2c\u4e00\u6b21\u88ab\u8c03\u7528\u53bb\u88c5\u9970\u51fd\u6570\u65f6\u5bf9\u539f\u51fd\u6570\u8fdb\u884c\u589e\u5f3a - \u589e\u5f3a\u65f6\u673a\uff1a\u7b2c\u4e00\u8c03\u7528\u4e4b\u524d - \u589e\u5f3a\u6b21\u6570\uff1a\u53ea\u589e\u5f3a\u4e00\u6b21 \u9762\u5411\u5207\u9762\u7f16\u7a0b \u00b6 \u5982\u679c\u8bf4\u7c7b\u91cc\u9762\u7684\u7ee7\u627f\u662f\u7eb5\u5411\u7ee7\u627f\uff0c\u90a3\u9762\u5411\u5207\u9762\u7f16\u7a0b\u53ef\u4ee5\u7406\u89e3\u4e3a\u6a2a\u5411\u7ee7\u627f \u7eb5\u5411\u7ee7\u627f\u4e2d\uff0c\u5b50\u7c7b\u7ee7\u627f\u4e86\u7236\u7c7b\u975e\u79c1\u6709\u5c5e\u6027\u548c\u65b9\u6cd5\uff1b\u540c\u5c5e\u4e00\u4e2a\u7236\u7c7b\u7684\u5b50\u7c7b\u90fd\u6709\u76f8\u540c\u7684\u7236\u7c7b\u5c5e\u6027\u548c\u65b9\u6cd5 \u6a2a\u5411\u7ee7\u627f\u4e2d\uff0c\u662f\u7ed9\u5b50\u7c7b\u589e\u52a0\u4e86\u4e00\u4e9b\u529f\u80fd\uff1b\u540c\u5c5e\u4e00\u4e2a\u7236\u7c7b\u7684\u5b50\u7c7b\u4e0d\u89c1\u5f97\u6709\u76f8\u540c\u7684\u529f\u80fd\u3002 \u5c31\u597d\u6bd4\uff0c\u4e00\u4e2a\u7239\u751f\u4e86\u4e24\u4e2a\u5a03\uff0c\u4e24\u4e2a\u5a03\u90fd\u6709\u624b\u6709\u811a\u7684\uff0c\u8fd9\u662f\u7ee7\u627f\u81ea\u7239\u90a3\u91cc\u7684\uff08\u7eb5\u5411\u7ee7\u627f\uff09 \u4f46\u662f\u4e00\u4e2a\u5a03\u70b9\u4eae\u4e86\u6e38\u6cf3\u7684\u6280\u80fd\uff0c\u53e6\u4e00\u4e2a\u5a03\u70b9\u4eae\u4e86\u8df3\u821e\u7684\u6280\u80fd\uff08\u6a2a\u5411\u7ee7\u627f\uff09 \u8fd9\u4fe9\u5a03\u751f\u4e86\u4fe9\u5b59\u5b50\uff0c\u80af\u5b9a\u4e5f\u662f\u6709\u624b\u6709\u811a\u7684\uff0c\u4f46\u4e0d\u4e00\u5b9a\u4f1a\u6e38\u6cf3\u8df3\u821e\u3002 \u6240\u4ee5\u9762\u5411\u5207\u9762\u7f16\u7a0b\u4e2d\uff0c\u8fd9\u79cd\u95ed\u5305\u3001\u88c5\u9970\u5668\u4e4b\u7c7b\u7684\u901a\u5e38\u662f\u7528\u5728\u7f16\u5199\u901a\u7528\u5de5\u5177\u7c7b\u4e0a\u3002 \u533f\u540d\u51fd\u6570 \u00b6 lambda [parameters]: expression \u5192\u53f7\u524d\u9762\u7684 parameters \u8868\u793a\u533f\u540d\u51fd\u6570\u7684\u5f62\u53c2\u5217\u8868\uff0c\u5192\u53f7\u540e\u9762\u7684 expression \u8868\u793a\u8981return\u7684\u8bed\u53e5 parameters \u53ef\u4ee5\u6709\u4e5f\u53ef\u4ee5\u6ca1\u6709\u3002 \u533f\u540d\u51fd\u6570\u6709\u4e2a\u9650\u5236\u2014\u2014 \u53ea\u80fd\u6709\u4e00\u4e2a\u8868\u8fbe\u5f0f \uff0c\u4e0d\u7528\u5199 return \uff0c\u8fd4\u56de\u503c\u5c31\u662f\u8be5\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u3002 \u533f\u540d\u51fd\u6570\u7c7b\u4f3c\u4e8e es6 \u4e2d\u7684\u7b80\u5934\u51fd\u6570 \u4e3e\u4e2a\u6817\u5b50\uff1a def add ( a , b ): return a + b \u5199\u6210\u533f\u540d\u51fd\u6570\u5c31\u662f lambda a , b : a + b \u5199\u6210\u7b80\u5934\u51fd\u6570\u5c31\u662f ( a , b ) => a + b \u533f\u540d\u51fd\u6570\u53ef\u4ee5\u4f5c\u4e3a\u5b9e\u53c2\u3001\u8fd4\u56de\u503c\uff0c\u5728\u8fd9\u4e9b\u573a\u666f\u4e2d\u5e94\u7528\u7684\u6bd4\u8f83\u591a\u3002 \u533f\u540d\u51fd\u6570\u4f5c\u4e3a\u5b9e\u53c2 # \u666e\u901a\u5199\u6cd5 def abs ( num ): return ( num ) if num >= 0 else ( - num ) def abs_add ( a , b , fn ): return fn ( a ) + fn ( b ) print ( abs_add ( 8 , - 4 , abs )) --------------------------------- # \u533f\u540d\u51fd\u6570\u5199\u6cd5 def abs_add ( a , b , fn ): return fn ( a ) + fn ( b ) result = abs_add ( 8 , - 4 , lambda x : x if x >= 0 else - x ) # \u533f\u540d\u51fd\u6570\u4f5c\u4e3a\u5b9e\u53c2 print ( result ) --------------------------------- # Output: 12 \u533f\u540d\u51fd\u6570\u4f5c\u4e3a\u8fd4\u56de\u503c def build ( x , y ): return lambda : x * x + y * y # \u533f\u540d\u51fd\u6570\u4f5c\u4e3a\u8fd4\u56de\u503c build ( 2 , 3 ) --------------------------------- # Output: 13 \u603b\u7ed3 \u00b6 \u51fd\u6570\u540d\u7684\u672c\u8d28\uff1a\u51fd\u6570\u8d77\u59cb\u5730\u5740 \u9ad8\u9636\u51fd\u6570\uff1a\u63a5\u6536\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u7684\u51fd\u6570 \u8fd4\u56de\u51fd\u6570\uff1a\u8fd4\u56de\u4e00\u4e2a\u51fd\u6570\uff08\u5373\u8fd4\u56de\u4e00\u4e2a\u51fd\u6570\u5730\u5740\uff09\u7684\u51fd\u6570\uff0c\u662f\u60f0\u6027\u7684 \u95ed\u5305\uff1a\u63a5\u6536\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u51fd\u6570\u7684\u51fd\u6570\uff08\u95ed\u5305=\u9ad8\u9636\u51fd\u6570+\u8fd4\u56de\u51fd\u6570\uff09 \u88c5\u9970\u5668\uff1a\u95ed\u5305\u7684\u8bed\u6cd5\u7cd6\uff0c@\u95ed\u5305\u540d\u5b57 \u533f\u540d\u51fd\u6570\uff1a lambda \u53c2\u6570: \u8fd4\u56de\u503c","title":"\u51fd\u6570\u5f0f\u7f16\u7a0b"},{"location":"Python/Adavanced/Python-No-Feature-Functional/#_1","text":"\u5728\u5b66C\u8bed\u8a00\u6307\u9488\u7684\u65f6\u5019\uff0c\u4f1a\u63a5\u89e6\u5230\u4e00\u4e2a\u6982\u5ff5\uff1a\u51fd\u6570\u540d\u662f\u51fd\u6570\u6240\u5728\u5185\u5b58\u7684\u5730\u5740\uff0c\u7c7b\u4f3c-\u6570\u7ec4\u540d\u662f\u6570\u7ec4\u7684\u9996\u5143\u7d20\u7684\u5730\u5740\u3002 \u5373\u4f7fPython\u4e2d\u6ca1\u6709\u6307\u9488\u4e00\u8bf4\uff0c\u4f46\u662f\u672c\u8d28\u8fd8\u662f\u4e00\u6837\u7684\u3002 \u53d8\u91cf\u540d\u662f\u4e00\u4e2a\u53d8\u91cf\u7684\u5730\u5740 \u51fd\u6570\u540d\u662f\u4e00\u4e2a\u51fd\u6570\u7684\u5730\u5740 \u8c03\u7528\u51fd\u6570\u7684\u65f6\u5019\u5176\u5b9e\u662f\u628a\u53c2\u6570\u4f20\u5230\u51fd\u6570\u672c\u8eab\u6240\u5728\u7684\u90a3\u5757\u5185\u5b58\u4e2d\u53bb\uff0c\u51fd\u6570\u540d\u4e0d\u8fc7\u662f\u4e00\u4e2a\u5a92\u4ecb\u800c\u5df2\u3002 \u5728C\u4e2d\u53ef\u4ee5\u8bf4\uff0c\u51fd\u6570\u540d\u5c31\u662f\u4e2a\u6307\u9488\uff0c\u6307\u5411\u4e00\u4e2a\u51fd\u6570 \u5728Python\u4e2d\u53ef\u4ee5\u8bf4\uff0c\u51fd\u6570\u540d\u5c31\u662f\u4e2a\u53d8\u91cf\uff0c\u6307\u5411\u4e00\u4e2a\u51fd\u6570 \u65e2\u7136\u51fd\u6570\u540d\u53ea\u662f\u6307\u5411\u51fd\u6570\u672c\u8eab\u6240\u5728\u5730\u5740\uff0c\u90a3\u6211\u6362\u4e2a\u540d\u6765\u6307\u4e0d\u4e5f\u53ef\u4ee5\u3002 def sum ( a , b ): return a + b f = sum f ( 1 , 2 ) --------------------------------- # Output: 3 \u5982\u679c\u653e\u5230\u4ea4\u4e92\u6a21\u5f0f\u4e2d\uff0c\u53ef\u4ee5\u66f4\u660e\u663e\u7684\u770b\u51fa\u6765 # \u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570 >>> def sum ( a , b ): ... return a + b ... >>> sum < function sum at 0x000001F25AF6B280 > >>> f = sum >>> f < function sum at 0x000001F25AF6B280 > >>> f ( 3 , 4 ) 7 \u5927\u6982\u5c31\u8fd9\u4e48\u56de\u4e8b\u513f","title":"\u51fd\u6570\u7684\u672c\u8d28"},{"location":"Python/Adavanced/Python-No-Feature-Functional/#_2","text":"\u9ad8\u9636\u51fd\u6570\uff1a\u63a5\u53d7\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u7684\u51fd\u6570 def heigh_fn(a, b, fn) \u65e2\u7136\u53d8\u91cf\u53ef\u4ee5\u6307\u5411\u51fd\u6570\uff0c\u51fd\u6570\u7684\u53c2\u6570\u80fd\u63a5\u6536\u53d8\u91cf\uff0c\u90a3\u4e48\u4e00\u4e2a\u51fd\u6570\u5c31\u53ef\u4ee5\u63a5\u6536\u53e6\u4e00\u4e2a\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\uff0c\u8fd9\u79cd\u51fd\u6570\u5c31\u79f0\u4e4b\u4e3a\u9ad8\u9636\u51fd\u6570\u3002 \u4e00\u4e2a\u6700\u7b80\u5355\u7684\u9ad8\u9636\u51fd\u6570\uff1a def abs ( num ): return ( num ) if num >= 0 else ( - num ) def abs_add ( a , b , fn ): return fn ( a ) + fn ( b ) print ( abs_add ( 8 , - 4 , abs )) --------------------------------- # Output: 12 \u8fd9\u4e2a\u9ad8\u9636\u51fd\u6570\u7684\u8fc7\u7a0b\u5927\u6982\u662f\u8fd9\u6837\u7684 a = 8 b = -4 fn = abs fn(a) + fn(b) ==> abs(8) + abs(-4) ==> 12","title":"\u9ad8\u9636\u51fd\u6570"},{"location":"Python/Adavanced/Python-No-Feature-Functional/#_3","text":"\u8fd4\u56de\u51fd\u6570\uff1a\u8fd4\u56de\u503c\u4e3a\u51fd\u6570\u7684\u51fd\u6570 \u901a\u5e38\u51fd\u6570\u90fd\u662f\u8fd4\u56deint\u3001str\u3001list \u8fd9\u4e9b\u53d8\u91cf\uff0c\u4f46\u662f\u53d8\u91cf\u53ef\u4ee5\u6307\u5411\u51fd\u6570\uff0c \u90a3\u51fd\u6570\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\u53d8\u91cf\uff0c\u4e0d\u5c31\u4e5f\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\u51fd\u6570\u3002 \u4e3e\u4e2a\u6817\u5b50 \u5b9e\u73b0\u4e00\u4e2a\u6c42\u548c\u51fd\u6570\u3002\u53c2\u6570\u53ef\u53d8\uff0c\u53ef\u4ee5\u662f1\u4e2a\u4e5f\u53ef\u4ee5\u662f\u591a\u4e2a\u3002 def cal_sum ( * args ): sum = 0 for n in args : sum += n return sum result = cal_sum ( 1 , 2 , 3 , 4 , 5 ) print ( result ) --------------------------------- # Output: 15 \u597d\uff0c\u73b0\u5728\u518d\u5199\u4e00\u4e2a\u51fd\u6570 lazy_sum() \uff0c\u628a\u8fd9\u4e2a\u51fd\u6570 cal_sum() \u4f5c\u4e3a\u8fd4\u56de\u503c\u8fd4\u56de def lazy_sum ( * args ): def cal_sum (): sum = 0 for n in args : sum += n return sum return cal_sum \u53ef\u4ee5\u770b\u5230\u6700\u540e\u4e00\u53e5 return cal_sum \u5c31\u628a\u51fd\u6570\u8fd4\u56de\u51fa\u6765\u4e86\u3002 \u90a3\u4e48\u51fd\u6570 lazy_sum() \u5c31\u662f\u4e00\u4e2a\u8fd4\u56de\u51fd\u6570 \u73b0\u5728\u8c03\u7528\u4e00\u4e0b\u8fd9\u4e2a\u8fd4\u56de\u51fd\u6570 def lazy_sum ( * args ): print ( 'I am the return function.' ) def cal_sum (): sum = 0 for n in args : sum += n return sum return cal_sum result = lazy_sum ( 1 , 2 , 3 , 4 , 5 ) print ( result ) --------------------------------- # Output: I am the return function . < function lazy_sum .< locals >. cal_sum at 0x000001C8765CB310 > \u54e6\u56af\uff0c lazy_sum() \u6ca1\u6709\u8fdb\u884c\u8ba1\u7b97\uff0c\u4f46\u4e5f\u770b\u51fa\u6765\uff0c lazy_sum() \u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u51fd\u6570 result \u6b64\u65f6\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u8981\u53bb\u8c03\u7528\u4e00\u6b21\u8fd4\u56de\u503c result \uff0c\u624d\u4f1a\u8fdb\u884c\u8ba1\u7b97 def lazy_sum ( * args ): print ( 'I am the return function.' ) def cal_sum (): sum = 0 for n in args : sum += n return sum return cal_sum result = lazy_sum ( 1 , 2 , 3 , 4 , 5 ) print ( result ) res = result () print ( res ) --------------------------------- # Output: I am the return function . < function lazy_sum .< locals >. cal_sum at 0x000001E02D07B310 > 15 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u8bf4 \u8fd4\u56de\u51fd\u6570\u662f \u60f0\u6027 \u7684\u3002\u5c31\u662f\u8fd9\u4e48\u6765\u7684","title":"\u8fd4\u56de\u51fd\u6570"},{"location":"Python/Adavanced/Python-No-Feature-Functional/#_4","text":"\u5728 lazy_sum() \u4e2d\uff0c\u6709\u4e00\u53e5 print \u8bed\u53e5\u3002 \u4ece\u8f93\u51fa\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u8fd4\u56de\u51fd\u6570\u672c\u8eab\u662f\u7acb\u5373\u6267\u884c\u7684\uff0c\u4f46\u662f\u5b83\u8fd4\u56de\u51fa\u6765\u7684\u51fd\u6570\u8981\u518d\u8fdb\u884c\u4e00\u6b21\u8c03\u7528\u624d\u4f1a\u6267\u884c\u3002 \u5355\u72ec\u4e00\u4e2a\u8fd4\u56de\u51fd\u6570\u5e76\u6ca1\u6709\u592a\u5927\u4f5c\u7528\uff0c\u4f46\u662f\u8fd4\u56de\u51fd\u6570\u548c\u9ad8\u9636\u51fd\u6570\u7ed3\u5408\u8d77\u6765\uff0c\u662f\u4e0d\u662f\u5c31\u6709\u610f\u601d\u4e86\u3002 \u63a5\u6536\u4e00\u4e2a\u51fd\u6570\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u51fd\u6570\u8fd4\u56de\u51fa\u53bb\u3002\u5728\u8fd4\u56de\u4e4b\u524d\u662f\u4e0d\u662f\u53ef\u4ee5\u8fdb\u884c\u4e00\u4e9b\u64cd\u4f5c\uff1f \u5047\u5982\u73b0\u5728\u6709\u4e00\u4e2a\u9700\u6c42\uff1a\u6c42\u548c\uff1b\u5b9e\u73b0\u5b8c\u4e86\u4e4b\u540e\uff0c\u4ea7\u54c1\u7ecf\u7406\u53c8\u52a0\u9700\u6c42\uff1a\u9664\u4e86 \u6c42\u548c \u8fd8\u8981\u6253\u5370\u4e00\u4e0b\u6c42\u548c\u7528\u4e86\u591a\u957f\u65f6\u95f4\uff0c\u4e5f\u5c31\u662f \u8ba1\u65f6\u529f\u80fd \u3002 \u90a3\u4e48\u73b0\u5728\u4f60\u6709\u4e24\u4e2a\u529e\u6cd5 - \u4e00\u662f\u5728 \u6c42\u548c\u51fd\u6570 \u91cc\u5b9e\u73b0\u8fd9\u4e2a \u8ba1\u65f6\u529f\u80fd \uff0c\u4f46\u662f\u8fd9\u6837\u5c31\u5728\u4e00\u4e2a\u51fd\u6570\u91cc\u505a\u4e86\u4e24\u4ef6\u4e8b\u60c5\u3002\u5373\u4e0d\u4f18\u96c5\uff0c\u4e5f\u4e0d\u597d\u7ef4\u62a4\u3002\u8fd9\u91cc\u4e3e\u4f8b\u662f\u7b80\u5355\u7684\u6c42\u548c\uff0c\u5b9e\u9645\u5f00\u53d1\u4e2d\u53ef\u80fd\u662f\u8ddf\u590d\u6742\u7684\u529f\u80fd\u3002 - \u4e8c\u662f\u628a \u8ba1\u65f6\u51fd\u6570 \u5199\u51fa\u6765\uff0c\u7136\u540e\u628a \u6c42\u548c\u51fd\u6570 \u4f20\u7ed9 \u8ba1\u65f6\u51fd\u6570 \uff0c\u5728 \u8ba1\u65f6\u51fd\u6570 \u4e2d\u7ed9 \u6c42\u548c\u51fd\u6570 \u52a0\u4e0a \u8ba1\u65f6\u529f\u80fd \uff0c\u4e4b\u540e\u518d\u628a\u8fd9\u4e2a \u6709\u8ba1\u65f6\u529f\u80fd\u7684\u6c42\u548c\u51fd\u6570 \u8fd4\u56de\u51fa\u53bb\u3002 \u8ba1\u65f6\u51fd\u6570 \u8fd9\u79cd \u63a5\u6536\u51fd\u6570 -> \u589e\u5f3a\u51fd\u6570 -> \u8fd4\u56de\u51fd\u6570 \u7684\u51fd\u6570\u5c31\u53eb \u95ed\u5305 \u4e0d\u4ec5\u53ef\u4ee5\u7528\u5728 \u8ba1\u65f6\u529f\u80fd \uff0c\u8fd8\u80fd\u7528\u5728 \u65e5\u5fd7\u529f\u80fd \uff0c\u6211\u53ea\u8981\u628a \u6c42\u548c\u51fd\u6570 \u5199\u597d\uff0c\u4f20\u7ed9 \u65e5\u5fd7\u51fd\u6570 \u5c31\u53ef\u4ee5\u83b7\u5f97 \u65e5\u5fd7\u529f\u80fd \u3002 \u51fd\u6570\u53ea\u505a\u4e00\u4ef6\u4e8b\u60c5\uff0c\u5176\u4ed6\u4e8b\u60c5\u7531\u522b\u7684\u51fd\u6570\u505a\uff0c\u9700\u8981\u4ec0\u4e48\u529f\u80fd\u628a\u51fd\u6570\u5f80\u91cc\u9762\u4e00\u4e22\uff0c\u8fd8\u4f60\u4e00\u4e2a\u589e\u5f3a\u7248\u7684\u3002Amazing\uff01\u8fd9\u5c31\u53eb \u9762\u5411\u5207\u9762\u7f16\u7a0b","title":"\u4e3a\u4ec0\u4e48\u8981\u8fd4\u56de\u4e00\u4e2a\u51fd\u6570"},{"location":"Python/Adavanced/Python-No-Feature-Functional/#_5","text":"","title":"\u95ed\u5305\u3001\u88c5\u9970\u5668\u3001\u9762\u5411\u5207\u9762\u7f16\u7a0b"},{"location":"Python/Adavanced/Python-No-Feature-Functional/#_6","text":"\u95ed\u5305 = \u9ad8\u9636\u51fd\u6570 + \u8fd4\u56de\u51fd\u6570 \u5373\uff0c\u4e00\u4e2a \u63a5\u6536\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\uff0c\u53c8\u8fd4\u56de\u4e00\u4e2a\u51fd\u6570 \u7684\u51fd\u6570\uff0c\u5c31\u53eb\u505a\u95ed\u5305 \u4f5c\u7528\uff1a\u589e\u5f3a\u51fd\u6570\u529f\u80fd\u3001\u9762\u5411\u5207\u9762\u7f16\u7a0b\uff08AOP\uff09","title":"\u95ed\u5305"},{"location":"Python/Adavanced/Python-No-Feature-Functional/#_7","text":"import time def print_hello (): print ( 'hello!' ) def cal_time ( fn ): def improve_fn (): start_time = time . time () fn () end_time = time . time () print ( '\u8017\u65f6\uff1a {} ' . format ( end_time - start_time )) return improve_fn improve_print_hello = cal_time ( print_hello ) improve_print_hello () # \u4e5f\u53ef\u4ee5\u5199\u505a cal_time(print_hello)() --------------------------------- # Output: hello ! \u8017\u65f6 \uff1a 0.0009620189666748047 \u6817\u5b50\u4e2d\uff0c print_hello() \u53ea\u8d1f\u8d23\u6253\u5370hello\uff0c cal_time() \u8d1f\u8d23\u628a\u4f20\u8fdb\u6765\u7684\u51fd\u6570\u589e\u5f3a\u7136\u540e\u8fd4\u56de\u51fa\u53bb \u6240\u4ee5 cal_time \u5c31\u662f\u4e00\u4e2a\u95ed\u5305","title":"\u65e0\u53c2\u95ed\u5305"},{"location":"Python/Adavanced/Python-No-Feature-Functional/#_8","text":"\u4e0a\u9762\u7684\u6817\u5b50\uff0c print_hello() \u4e0d\u9700\u8981\u53c2\u6570\uff0c\u6240\u4ee5\u5728\u65e0\u53c2\u95ed\u5305\u4e2d\u53ef\u4ee5\u987a\u5229\u901a\u8fc7 \u4f46\u662f\u5982\u679c\u4e00\u4e2a\u51fd\u6570\u6709\u53c2\uff0c\u90a3\u65e0\u53c2\u95ed\u5305\u5c31\u4f1a\u629b\u51fa TypeError \u9519\u8bef\u3002 \u60f3\u8981\u5e26\u53c2\u5f88\u7b80\u5355\u3002 {% codeblock lang:python line_number:true mark:9,11 %} import time def add(a, b): print(a + b) def cal_time(fn): def improve_fn(*args, **kwargs): # \u5728\u8fd9\u91cc\u5199\u4e0b\u5f62\u53c2 start_time = time.time() fn(*args, **kwargs) # \u8c03\u7528\u7684\u65f6\u5019\u4f20\u8fdb\u53bb end_time = time.time() print('\u8017\u65f6\uff1a{}'.format(end_time - start_time)) 1 return improve_fn cal_time(add)(1, 2)","title":"\u5e26\u53c2\u95ed\u5305"},{"location":"Python/Adavanced/Python-No-Feature-Functional/#output","text":"3 \u8017\u65f6\uff1a0.00800633430480957 {% endcodeblock %}","title":"Output:"},{"location":"Python/Adavanced/Python-No-Feature-Functional/#_9","text":"\u63a5\u6536\u7684\u51fd\u6570\u6709\u8fd4\u56de\u503c\u7684\u8bdd\uff0c\u5e94\u8be5\u5728\u95ed\u5305\u91cc\u5bf9\u51fd\u6570\u8c03\u7528\u7684\u65f6\u5019\u628a\u53c2\u6570\u63a5\u6536\u4e0b\u6765\uff0c\u7136\u540e\u8fdb\u884c\u8fd4\u56de\u3002 import time def add ( a , b ): return a + b def cal_time ( fn ): def improve_fn ( * args , ** kwargs ): start_time = time . time () count = fn ( * args , ** kwargs ) # \u8c03\u7528\u51fd\u6570\u4e4b\u540e\u7528\u4e00\u4e2a\u53d8\u91cf\u63a5\u6536\u8fd4\u56de\u503c end_time = time . time () print ( '\u8017\u65f6\uff1a {} ' . format ( end_time - start_time )) return count # \u7136\u540e\u628a\u8fd4\u56de\u503c\u8fd4\u56de\u51fa\u53bb return improve_fn result = cal_time ( add )( 5 , 12 ) print ( result ) --------------------------------- # Output: \u8017\u65f6 \uff1a 0.0009620189666748047 17","title":"\u63a5\u6536\u7684\u51fd\u6570\u6709\u8fd4\u56de\u503c"},{"location":"Python/Adavanced/Python-No-Feature-Functional/#_10","text":"\u88c5\u9970\u5668\u662f\u95ed\u5305\u7684\u8bed\u6cd5\u7cd6\u2014\u2014 @\u95ed\u5305\u540d \u6216 @\u95ed\u5305\u540d(\u53c2\u6570) \u8bed\u6cd5\u7cd6\u53ea\u662f\u4e00\u4e2a\u66f4\u65b9\u4fbf\u7684\u5199\u6cd5\uff0c\u5b8c\u5168\u53ef\u4ee5\u7b49\u4ef7\u8f6c\u6362\u4e3a\u975e\u8bed\u6cd5\u7cd6\u7684\u4ee3\u7801 \u88c5\u9970\u5668\u3001\u95ed\u5305\uff0c\u672c\u8d28\u4e0a\u4e5f\u662f\u51fd\u6570\uff0c\u8bf4\u88c5\u9970\u5668\u7684\u540c\u65f6\u4e5f\u662f\u5728\u8bf4\u95ed\u5305","title":"\u88c5\u9970\u5668"},{"location":"Python/Adavanced/Python-No-Feature-Functional/#_11","text":"\u88c5\u9970\u5668\uff08\u95ed\u5305\uff09\u7684\u539f\u7406\u5c31\u662f\u628a\u539f\u51fd\u6570\u5f53\u4f5c\u53c2\u6570\u4f20\u8fdb\u88c5\u9970\u5668\u4e2d\uff0c\u7ecf\u8fc7\u589e\u5f3a\u540e\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 \u589e\u5f3a\u7248\u539f\u51fd\u6570 \u8fd9\u8bf4\u660e\u8fd4\u56de\u51fa\u6765\u7684 \u589e\u5f3a\u7248\u51fd\u6570 \u548c\u539f\u6765\u7684\u51fd\u6570\u4e0d\u662f\u540c\u4e00\u4e2a\u4e86\uff08\u5728\u5185\u5b58\u4e2d\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\uff09 \u65e2\u7136\u4e0d\u662f\u5728\u539f\u51fd\u6570\u4e0a\u8fdb\u884c\u6539\u9020\uff0c\u8fd9\u5c31\u5bfc\u81f4\u51fd\u6570\u7684\u5143\u4fe1\u606f\uff08\u6587\u6863\u5b57\u7b26\u4e32\u3001\u6ce8\u89e3\u3001\u53c2\u6570\u7b7e\u540d\u7b49\uff09\u90fd\u4e22\u5931\u4e86 \u89e3\u51b3\u65b9\u6cd5\u5c31\u662f\u4f7f\u7528 functools \u5e93\u4e2d\u7684 @wraps \u88c5\u9970\u5668\u6765\u628a\u539f\u51fd\u6570\u7684\u5143\u4fe1\u606f\u590d\u5236\u8fc7\u6765\u3002 \u5148\u770b\u770b \u4e0d \u4fdd\u7559\u5143\u4fe1\u606f\u7684\u6837\u5b50 import time # \u88c5\u9970\u5668\u51fd\u6570 def cal_time ( fn ): ''' Decorator that report the execution time. ''' def improve_fn ( * args , ** kwargs ): start = time . time () result = fn ( * args , ** kwargs ) end = time . time () print ( fn . __name__ , end - start ) return result return improve_fn # \u539f\u51fd\u6570 @cal_time def countdown ( n ): ''' Count down ''' while n > 0 : n -= 1 if __name__ == '__main__' : countdown ( 10_000 ) print ( countdown . __doc__ ) # \u6ca1\u6709\u4f7f\u7528wrap\uff0c\u6240\u4ee5\u5143\u4fe1\u606f\u90fd\u4e22\u5931\u4e86 --------------------------------- # Output: countdown 0.0010008811950683594 None \u518d\u770b\u770b\u4f7f\u7528\u4e86 @wraps \u7684\u6837\u5b50 import time from functools import wraps # \u88c5\u9970\u5668\u51fd\u6570 def cal_time ( fn ): ''' Decorator that report the execution time. ''' @wraps ( fn ) def improve_fn ( * args , ** kwargs ): start = time . time () result = fn ( * args , ** kwargs ) end = time . time () print ( fn . __name__ , end - start ) return result return improve_fn # \u539f\u51fd\u6570 @cal_time def countdown ( n ): ''' Count down ''' while n > 0 : n -= 1 if __name__ == '__main__' : countdown ( 10000 ) print ( countdown . __doc__ ) # \u4f7f\u7528\u4e86wrap\uff0c\u6240\u4ee5\u5143\u4fe1\u606f\u6ca1\u6709\u4e22\u5931 --------------------------------- # Output: countdown 0.0010025501251220703 Count down","title":"\u4fdd\u7559\u539f\u51fd\u6570\u7684\u5143\u4fe1\u606f"},{"location":"Python/Adavanced/Python-No-Feature-Functional/#_12","text":"import time from functools import wraps def cal_time ( fn ): ''' Decorator that report the execution time. ''' @wraps ( fn ) def improve_fn ( * args , ** kwargs ): start = time . time () result = fn ( * args , ** kwargs ) end = time . time () print ( fn . __name__ , 'used time:' , end - start ) return result return improve_fn # \u88c5\u9970\u5668\u91cc\u4e0d\u9700\u8981\u643a\u5e26\u53c2\u6570 @cal_time def add ( a , b ): return a + b res = add ( 5 , 6 ) print ( res ) # \u7b49\u4ef7\u4e8e # # def add(a, b): # return a + b # # improve_add = cal_time(add) # res = improve_add(5, 6) # print(res) --------------------------------- # Output: add used time : 0.0 11","title":"\u65e0\u53c2\u88c5\u9970\u5668"},{"location":"Python/Adavanced/Python-No-Feature-Functional/#_13","text":"import time from functools import wraps def cal_time ( msg ): # \u7b2c\u4e00\u5c42\uff0c\u63a5\u6536\u88c5\u9970\u5668\u53c2\u6570 print ( 'First floor:' , msg ) def decorator ( fn ): # \u7b2c\u4e8c\u5c42\uff0c\u63a5\u6536\u51fd\u6570 print ( 'Second floor:' , msg ) @wraps ( fn ) def improve_fn ( * args , ** kwargs ): # \u7b2c\u4e09\u5c42\uff0c\u589e\u5f3a\u51fd\u6570 print ( 'Third floor:' , msg ) start = time . time () result = fn ( * args , ** kwargs ) end = time . time () print ( 'Used time:' , end - start ) return result return improve_fn return decorator @cal_time ( 'I am the message.' ) def countdown ( time = 10000 ): while time > 0 : time -= 1 if __name__ == '__main__' : countdown () --------------------------------- # Output: First floor : I am the message . Second floor : I am the message . Third floor : I am the message . Used time : 0.000997781753540039 \u6709\u53c2\u88c5\u9970\u5668\u548c\u65e0\u53c2\u88c5\u9970\u5668\u7684\u533a\u522b\u4ec5\u4ec5\u53ea\u662f\u591a\u4e86\u4e00\u5c42\u51fd\u6570\u800c\u5df2 \u4e5f\u5c31\u662f\u5728\u65e0\u53c2\u88c5\u9970\u5668\u7684\u57fa\u7840\u4e0a\u591a\u4e00\u5c42\u51fd\u6570\u6765\u63a5\u6536\u88c5\u9970\u5668\u53c2\u6570\u800c\u5df2\u3002 \u6ce8\u610f\u5e26\u53c2\u88c5\u9970\u5668\u5373\u4f7f\u4e0d\u586b\u53c2\u6570\u4e5f\u8981\u5199\u4e0a\u62ec\u53f7 \u88c5\u9970\u5668\u53ea\u5728\u7b2c\u4e00\u6b21\u88ab\u8c03\u7528\u53bb\u88c5\u9970\u51fd\u6570\u65f6\u5bf9\u539f\u51fd\u6570\u8fdb\u884c\u589e\u5f3a - \u589e\u5f3a\u65f6\u673a\uff1a\u7b2c\u4e00\u8c03\u7528\u4e4b\u524d - \u589e\u5f3a\u6b21\u6570\uff1a\u53ea\u589e\u5f3a\u4e00\u6b21","title":"\u5e26\u53c2\u88c5\u9970\u5668"},{"location":"Python/Adavanced/Python-No-Feature-Functional/#_14","text":"\u5982\u679c\u8bf4\u7c7b\u91cc\u9762\u7684\u7ee7\u627f\u662f\u7eb5\u5411\u7ee7\u627f\uff0c\u90a3\u9762\u5411\u5207\u9762\u7f16\u7a0b\u53ef\u4ee5\u7406\u89e3\u4e3a\u6a2a\u5411\u7ee7\u627f \u7eb5\u5411\u7ee7\u627f\u4e2d\uff0c\u5b50\u7c7b\u7ee7\u627f\u4e86\u7236\u7c7b\u975e\u79c1\u6709\u5c5e\u6027\u548c\u65b9\u6cd5\uff1b\u540c\u5c5e\u4e00\u4e2a\u7236\u7c7b\u7684\u5b50\u7c7b\u90fd\u6709\u76f8\u540c\u7684\u7236\u7c7b\u5c5e\u6027\u548c\u65b9\u6cd5 \u6a2a\u5411\u7ee7\u627f\u4e2d\uff0c\u662f\u7ed9\u5b50\u7c7b\u589e\u52a0\u4e86\u4e00\u4e9b\u529f\u80fd\uff1b\u540c\u5c5e\u4e00\u4e2a\u7236\u7c7b\u7684\u5b50\u7c7b\u4e0d\u89c1\u5f97\u6709\u76f8\u540c\u7684\u529f\u80fd\u3002 \u5c31\u597d\u6bd4\uff0c\u4e00\u4e2a\u7239\u751f\u4e86\u4e24\u4e2a\u5a03\uff0c\u4e24\u4e2a\u5a03\u90fd\u6709\u624b\u6709\u811a\u7684\uff0c\u8fd9\u662f\u7ee7\u627f\u81ea\u7239\u90a3\u91cc\u7684\uff08\u7eb5\u5411\u7ee7\u627f\uff09 \u4f46\u662f\u4e00\u4e2a\u5a03\u70b9\u4eae\u4e86\u6e38\u6cf3\u7684\u6280\u80fd\uff0c\u53e6\u4e00\u4e2a\u5a03\u70b9\u4eae\u4e86\u8df3\u821e\u7684\u6280\u80fd\uff08\u6a2a\u5411\u7ee7\u627f\uff09 \u8fd9\u4fe9\u5a03\u751f\u4e86\u4fe9\u5b59\u5b50\uff0c\u80af\u5b9a\u4e5f\u662f\u6709\u624b\u6709\u811a\u7684\uff0c\u4f46\u4e0d\u4e00\u5b9a\u4f1a\u6e38\u6cf3\u8df3\u821e\u3002 \u6240\u4ee5\u9762\u5411\u5207\u9762\u7f16\u7a0b\u4e2d\uff0c\u8fd9\u79cd\u95ed\u5305\u3001\u88c5\u9970\u5668\u4e4b\u7c7b\u7684\u901a\u5e38\u662f\u7528\u5728\u7f16\u5199\u901a\u7528\u5de5\u5177\u7c7b\u4e0a\u3002","title":"\u9762\u5411\u5207\u9762\u7f16\u7a0b"},{"location":"Python/Adavanced/Python-No-Feature-Functional/#_15","text":"lambda [parameters]: expression \u5192\u53f7\u524d\u9762\u7684 parameters \u8868\u793a\u533f\u540d\u51fd\u6570\u7684\u5f62\u53c2\u5217\u8868\uff0c\u5192\u53f7\u540e\u9762\u7684 expression \u8868\u793a\u8981return\u7684\u8bed\u53e5 parameters \u53ef\u4ee5\u6709\u4e5f\u53ef\u4ee5\u6ca1\u6709\u3002 \u533f\u540d\u51fd\u6570\u6709\u4e2a\u9650\u5236\u2014\u2014 \u53ea\u80fd\u6709\u4e00\u4e2a\u8868\u8fbe\u5f0f \uff0c\u4e0d\u7528\u5199 return \uff0c\u8fd4\u56de\u503c\u5c31\u662f\u8be5\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u3002 \u533f\u540d\u51fd\u6570\u7c7b\u4f3c\u4e8e es6 \u4e2d\u7684\u7b80\u5934\u51fd\u6570 \u4e3e\u4e2a\u6817\u5b50\uff1a def add ( a , b ): return a + b \u5199\u6210\u533f\u540d\u51fd\u6570\u5c31\u662f lambda a , b : a + b \u5199\u6210\u7b80\u5934\u51fd\u6570\u5c31\u662f ( a , b ) => a + b \u533f\u540d\u51fd\u6570\u53ef\u4ee5\u4f5c\u4e3a\u5b9e\u53c2\u3001\u8fd4\u56de\u503c\uff0c\u5728\u8fd9\u4e9b\u573a\u666f\u4e2d\u5e94\u7528\u7684\u6bd4\u8f83\u591a\u3002 \u533f\u540d\u51fd\u6570\u4f5c\u4e3a\u5b9e\u53c2 # \u666e\u901a\u5199\u6cd5 def abs ( num ): return ( num ) if num >= 0 else ( - num ) def abs_add ( a , b , fn ): return fn ( a ) + fn ( b ) print ( abs_add ( 8 , - 4 , abs )) --------------------------------- # \u533f\u540d\u51fd\u6570\u5199\u6cd5 def abs_add ( a , b , fn ): return fn ( a ) + fn ( b ) result = abs_add ( 8 , - 4 , lambda x : x if x >= 0 else - x ) # \u533f\u540d\u51fd\u6570\u4f5c\u4e3a\u5b9e\u53c2 print ( result ) --------------------------------- # Output: 12 \u533f\u540d\u51fd\u6570\u4f5c\u4e3a\u8fd4\u56de\u503c def build ( x , y ): return lambda : x * x + y * y # \u533f\u540d\u51fd\u6570\u4f5c\u4e3a\u8fd4\u56de\u503c build ( 2 , 3 ) --------------------------------- # Output: 13","title":"\u533f\u540d\u51fd\u6570"},{"location":"Python/Adavanced/Python-No-Feature-Functional/#_16","text":"\u51fd\u6570\u540d\u7684\u672c\u8d28\uff1a\u51fd\u6570\u8d77\u59cb\u5730\u5740 \u9ad8\u9636\u51fd\u6570\uff1a\u63a5\u6536\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u7684\u51fd\u6570 \u8fd4\u56de\u51fd\u6570\uff1a\u8fd4\u56de\u4e00\u4e2a\u51fd\u6570\uff08\u5373\u8fd4\u56de\u4e00\u4e2a\u51fd\u6570\u5730\u5740\uff09\u7684\u51fd\u6570\uff0c\u662f\u60f0\u6027\u7684 \u95ed\u5305\uff1a\u63a5\u6536\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u51fd\u6570\u7684\u51fd\u6570\uff08\u95ed\u5305=\u9ad8\u9636\u51fd\u6570+\u8fd4\u56de\u51fd\u6570\uff09 \u88c5\u9970\u5668\uff1a\u95ed\u5305\u7684\u8bed\u6cd5\u7cd6\uff0c@\u95ed\u5305\u540d\u5b57 \u533f\u540d\u51fd\u6570\uff1a lambda \u53c2\u6570: \u8fd4\u56de\u503c","title":"\u603b\u7ed3"},{"location":"Python/Adavanced/Python-No-Feature-High-Level-Feature/","text":"Python\u7684\u9ad8\u7ea7\u7279\u60271 \u5207\u7247 Slice \u00b6 [startWith : end : step] \u5207\u7247\u9002\u7528\u4e8e list\u3001tuple\u3001string startWith\u662f\u5305\u542b\uff0cend\u5219\u4e0d\u5305\u542b \u6ce8\u610f\uff1a \u5207\u7247\u662f\u4ece\u5de6\u5f80\u53f3\u5207\u7684 \u5982\u679c\u7528\u6b63\u7d22\u5f15\u5f00\u59cb\uff0c\u5c31\u8981\u7528 \u6b63\u7d22\u5f15 \u6216 \u9006\u7d22\u5f15 \u7ed3\u675f\uff0c\u4f8b\u5982 s[1:5] \u6216 s[1:-3] \uff01\u5982\u679c\u7528\u9006\u7d22\u5f15\u5f00\u59cb\uff0c\u5c31\u8981\u7528 \u9006\u7d22\u5f15 \u7ed3\u675f\uff08 s[-1:1] \u8fd9\u6837\u53ea\u4f1a\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff0c**\u6b63\u786e**\u5e94\u8be5\u662f s[-5:-1] \uff09 \uff01\u9006\u7d22\u5f15\u8bb0\u5f97\u4e0d\u8981\u5f04\u98a0\u5012\u4e86\u3002\uff08 s[-1:-3] \u8fd9\u6837\u53ea\u4f1a\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff0c**\u6b63\u786e**\u5e94\u8be5\u662f s[-3:-1] \uff09 \u7d22\u5f15 \u00b6 | P | y | t | h | o | n | 0 1 2 3 4 5 # \u4ece\u5de6\u5f80\u53f3\uff0c\u4e0b\u6807\u4ece0\u5f00\u59cb - 6 - 5 - 4 - 3 - 2 - 1 # \u4ece\u53f3\u5f80\u5de6\uff0c\u4e0b\u6807\u4ece-1\u5f00\u59cb >>> s = 'Python' >>> s [ 0 ] 'P' >>> s [ 0 : - 1 ] # \u7ed3\u675f\u7d22\u5f15\u4e0d\u88ab\u622a\u53d6 'Pytho' >>> s [: 5 ] # \u8d77\u59cb\u7d22\u5f15\u53ef\u4ee5\u7701\u7565\u4e0d\u5199\uff0c\u4ee3\u8868\u4ece\u7b2c\u4e00\u4f4d\u5f00\u59cb\u622a\u53d6 'Pytho' >>> s [ 0 :] # \u7ed3\u675f\u7d22\u5f15\u53ef\u4ee5\u7701\u7565\u4e0d\u5199\uff0c\u4ee3\u8868\u622a\u53d6\u81f3\u6700\u540e\u4e00\u4f4d 'Python' >>> s [:] # \u7b49\u4e8e\u590d\u5236\u4e86\u4e00\u6574\u4e2a 'Python' >>> s [ 1 : 4 ] 'yth' >>> s [ 1 : - 2 ] 'yth' >>> s [ - 2 : 1 ] # \u9006\u7d22\u5f15\u5f00\u59cb\uff0c\u4e0d\u80fd\u4ee5\u6b63\u7d22\u5f15\u7ed3\u675f '' >>> s [ - 5 : - 2 ] 'yth' >>> s [ - 2 : - 5 ] # \u53ea\u80fd\u4ece\u5de6\u5f80\u53f3\u5207 '' >>> l = list ( range ( 100 )) >>> l [ 10 : 20 ] [ 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 ] >>> l [ 10 : 20 : 3 ] [ 10 , 13 , 16 , 19 ] >>> l [ 80 :: 3 ] [ 80 , 83 , 86 , 89 , 92 , 95 , 98 ] >>> l [: 10 : 3 ] [ 0 , 3 , 6 , 9 ] >>> l [:: 10 ] [ 0 , 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 ] >>> l [:: - 10 ] [ 99 , 89 , 79 , 69 , 59 , 49 , 39 , 29 , 19 , 9 ] \u8fed\u4ee3 Iteration \u00b6 \u5224\u65ad\u662f\u5426\u8fed\u4ee3\u5bf9\u8c61 \u00b6 \u53ef\u4ee5\u7528\u8fc7 collections \u7684 Iterable \u7c7b\u578b\uff0c\u7528 isinstance() \u5224\u65ad \u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f\u53ef\u8fed\u4ee3\u5bf9\u8c61 from collections import Iterable str = 'abc' l = [ 1 , 2 , 3 ] t = ( 1 , 2 , 3 ) d = { 1 : 1 , 2 : 2 , 3 : 3 } s = ({ 1 , 2 , 3 }) print ( isinstance ( str , Iterable )) # True print ( isinstance ( l , Iterable )) # True print ( isinstance ( t , Iterable )) # True print ( isinstance ( d , Iterable )) # True print ( isinstance ( s , Iterable )) # True print ( isinstance ( 123 , Iterable )) # False \u6574\u6570\u5b57\u9762\u91cf\u4e0d\u662f\u53ef\u8fed\u4ee3\u5bf9\u8c61 \u8fed\u4ee3 List \u5217\u8868\u7c7b\u578b\u6570\u636e \u00b6 s = 'abcdefg' for value in s : print ( value , end = ' ' ) # Output\uff1a a b c d e f g # \u53ef\u4ee5\u901a\u8fc7 enumerate() \u7ed9string\uff0clist\uff0ctuple \u7b49\u751f\u6210\u4e0b\u6807 s = 'abcdefg' for i , value in enumerate ( s ): print ( i , value ) # Output\uff1a 0 a 1 b 2 c 3 d 4 e 5 f 6 g l = [ 'a' , True , ( 1 , 2 ), 43 ] for i , value in enumerate ( l ): print ( i , value ) # Output: 0 a 1 True 2 ( 1 , 2 ) 3 43 # \u540c\u65f6\u5f15\u7528\u4e24\u4e2a\u53d8\u91cf for x , y in [( 11 , 12 ), ( 21 , 22 ), ( 31 , 32 )]: print ( x , y ) # Output: 11 12 21 22 31 32 ###################################################### for x , y , z in [( 11 , 12 , 13 ), ( 21 , 22 , 23 ), ( 31 , 32 , 33 )]: print ( x , y , z ) # Output: 11 12 13 21 22 23 31 32 33 \u8fed\u4ee3 Dict \u952e-\u503c\u5bf9\u7c7b\u578b\u6570\u636e \u00b6 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cDict\u8fed\u4ee3\u7684\u662fkey\uff0c\u5982\u679c\u8981\u8fed\u4ee3value\uff0c\u53ef\u4ee5\u7528 for value in d.values() \u5982\u679c\u8981\u540c\u65f6\u8fed\u4ee3key \u548c value\uff0c \u53ef\u4ee5\u7528 for k, v in d.items() d = { 'a' : 'Alice' , 'b' : 'Boii' , 'c' : 'Cai' } for i in d : print ( i ) # Output: a b c ############################################# d = { 'a' : 'Alice' , 'b' : 'Boii' , 'c' : 'Cai' } for i in d . values (): print ( i ) # Output: Alice Boii Cai ############################################# d = { 'a' : 'Alice' , 'b' : 'Boii' , 'c' : 'Cai' } for k , v in d . items (): print ( k , '-' , v ) # Output: a - Alice b - Boii c - Cai \u5217\u8868\u751f\u6210\u5f0f List Comprehensions \u00b6 \u5217\u8868\u751f\u6210\u5f0f \u00b6 [ i-expression for i in Iterations ] [ i-expression for i in Iterations if expression ] [ i-expression if expression else expression for i in Iterations ] [ \u00b7\u00b7\u00b7 for \u00b7\u00b7\u00b7 in \u00b7\u00b7\u00b7 ] [ \u00b7\u00b7\u00b7 for \u00b7\u00b7\u00b7 in \u00b7\u00b7\u00b7 if \u00b7\u00b7\u00b7 ] [ \u00b7\u00b7\u00b7 if \u00b7\u00b7\u00b7 else \u00b7\u00b7\u00b7 for \u00b7\u00b7\u00b7 in \u00b7\u00b7\u00b7 ] \u5217\u8868\u751f\u6210\u5f0f\u662f\u4e00\u79cd\u975e\u5e38\u7b80\u6d01\u7684\u8bed\u6cd5\uff0c\u53ef\u4ee5\u5927\u5e45\u5ea6\u7684\u538b\u7f29\u4ee3\u7801 \u9605\u8bfb\u65b9\u5f0f\uff1a - [i-expression for i in Iterations] \u904d\u5386\u8fed\u4ee3\u5bf9\u8c61 Iterations\uff0c\u5c06\u6bcf\u4e2a\u5143\u7d20 e \u653e\u5230 i-expression\u4e2d\u8fd0\u7b97\u540e\uff0c\u4f5c\u4e3a\u8fd9\u4e2a\u5217\u8868 list \u7684\u5143\u7d20 - [i-expression for i in Iterations if expression] \u904d\u5386\u8fed\u4ee3\u5bf9\u8c61 Iterations\uff0c\u5c06\u6bcf\u4e2a\u5143\u7d20 e \u653e\u5230 if \u4e2d\u7684 expression\u4e2d\u8fd0\u7b97\u540e\uff0c\u653e\u5230 i-expression \u4e2d\u8fd0\u7b97\uff0c\u7136\u540e\u4f5c\u4e3a\u8fd9\u4e2a\u5217\u8868 list \u7684\u5143\u7d20 - [i-expression if expression else expression for i in Iterations] \u904d\u5386\u8fed\u4ee3\u5bf9\u8c61 Iterations\uff0c\u5c06\u6bcf\u4e2a\u5143\u7d20 e \u653e\u5230 if else \u4e2d\u7684 expression\u4e2d\u8fd0\u7b97\u540e\uff0c\u653e\u5230 i-expression \u4e2d\u8fd0\u7b97\uff0c\u7136\u540e\u4f5c\u4e3a\u8fd9\u4e2a\u5217\u8868 list \u7684\u5143\u7d20 for \u524d\u7684 if else \u53ef\u4ee5\u770b\u6210\u4e09\u76ee\u8fd0\u7b97\u7b26\uff0c\u8fd9\u6837\u6bd4\u8f83\u597d\u7406\u89e3 1. \u4e09\u76ee\u8fd0\u7b97\u7b26\uff1aTrue\u65f6\u6267\u884c if expression else Flase\u65f6\u6267\u884c 2. \u5bf9\u6bd4\u4e00\u4e0b\uff1a[ i-expression if expression else expression for i in Iterations ] 3. \u4ee3\u5165\u4e00\u4e0b\uff1a[ True\u65f6\u6267\u884c if expression else Flase\u65f6\u6267\u884c for i in Iterations ] \u4e00\u53e5\u8bdd\uff1a\u539f\u672c\u670910\u4e2a\uff0cfor...if \u540e\u4e0d\u4e00\u5b9a\u6709 10 \u4e2a\uff0c if...else...for \u4ee5\u540e\u670910\u4e2a\uff0c\u4e0d\u8fc7\u53ef\u80fd\u4e0d\u5c3d\u76f8\u540c\u3002 \u4e24\u53e5\u8bdd\uff1afor \u524d\u5fc5 else\uff0cfor \u540e\u4e0delse\u3002 \u6ce8\u610f\uff1ai-expression \u7684 \u8ba1\u7b97\u53d8\u91cf \u548c for \u91cc\u7684 \u4e34\u65f6\u53d8\u91cf \u8981\u76f8\u540c \u666e\u901a\u5217\u8868\u751f\u6210\u5f0f # range(1, 11) \u751f\u62101~10 [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] # for in \u904d\u5386\u8fd910\u4e2a\u6570 # \u6bcf\u6b21\u904d\u5386\u90fd\u628a\u5f53\u524d\u5143\u7d20\u62ff\u5230 i-expression \u5373 x * x \u505a\u76f8\u4e58\u8ba1\u7b97 # \u7136\u540e\u4f5c\u4e3a\u5217\u8868\u7684\u5143\u7d20 # \u6ce8\u610f for \u7684\u4e34\u65f6\u53d8\u91cf\u662f x\uff0ci-expression \u7684\u53d8\u91cf\u4e5f\u662f x\uff0c\u8fd9\u4e24\u4e2a\u8981\u76f8\u540c # \u8fd9\u91cc\u662f\u8ba1\u7b97\u51fa1~10\u6bcf\u4e2a\u6570\u7684\u5e73\u65b9 >>> [ x * x for x in range ( 1 , 11 )] [ 1 , 4 , 9 , 16 , 25 , 36 , 49 , 64 , 81 , 100 ] # \u628a\u4e00\u4e2a List \u4e2d\u6240\u6709\u5b57\u7b26\u4e32\u53d8\u5c0f\u5199 >>> L = [ 'Hello' , 'World' , 'IBM' , 'Apple' ] >>> [ s . lower () for s in L ] [ 'hello' , 'world' , 'ibm' , 'apple' ] for \u91cc\u5e26 if \u7b5b\u9009\u7684\u5217\u8868\u751f\u6210\u5f0f # range(1, 11) \u751f\u62101~10 [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] # for in \u904d\u5386\u8fd910\u4e2a\u6570 # \u6bcf\u6b21\u904d\u5386\u90fd\u628a\u5f53\u524d\u5143\u7d20\u62ff\u5230 if \u91cc\u8ba1\u7b97, \u5f97\u5230 [2, 4, 6, 8, 10] # \u7136\u540e\u653e\u5230 i-expression \u5373 x * x \u505a\u76f8\u4e58\u8ba1\u7b97\u5f97\u5230 [4, 16, 36, 64, 100] # \u6700\u540e\u4f5c\u4e3a\u5217\u8868\u7684\u5143\u7d20 # \u8fd9\u91cc\u662f\u7b5b\u9009\u51fa\u5076\u6570\uff0c\u7136\u540e\u8ba1\u7b97\u5e73\u65b9 >>> [ x * x for x in range ( 1 , 11 ) if x % 2 == 0 ] [ 4 , 16 , 36 , 64 , 100 ] \u53cc\u5faa\u73af\u7684\u5217\u8868\u751f\u6210\u5f0f # \u8fd8\u53ef\u4ee5\u4f7f\u7528\u53cc\u5faa\u73af\uff0c\u751f\u6210\u5168\u6392\u5217 >>> [ m + n for m in 'ABC' for n in 'XYZ' ] [ 'AX' , 'AY' , 'AZ' , 'BX' , 'BY' , 'BZ' , 'CX' , 'CY' , 'CZ' ] \u591a\u53d8\u91cf\u7684\u5217\u8868\u751f\u6210\u5f0f # \u4e00\u4e2a\u5faa\u73af\u591a\u4e2a\u53d8\u91cf\u4e5f\u662f\u53ef\u4ee5\u7684 >>> d = { 'x' : 'A' , 'y' : 'B' , 'z' : 'C' } >>> [ k + '-' + v for k , v in d . items ()] [ 'y-B' , 'x-A' , 'z-C' ] for \u524d\u5e26 if \u7684\u5217\u8868\u751f\u6210\u5f0f # # range(1, 11) \u751f\u62101~10 [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] # for in \u904d\u5386\u8fd910\u4e2a\u6570 # \u6bcf\u6b21\u904d\u5386\u90fd\u628a\u5f53\u524d\u5143\u7d20\u62ff\u5230 for \u524d\u7684 if else\u4e09\u76ee\u8fd0\u7b97\u7b26\u91cc\u8ba1\u7b97 # x if x % 2 == 0 else -x ,\u5076\u6570\u6b63\u5e38\u8f93\u51fa, \u5947\u6570\u53d8\u8d1f\u6570\uff0c\u5f97\u5230 [-1, 2, -3, 4, -5, 6, -7, 8, -9, 10] # \u6700\u540e\u4f5c\u4e3a\u5217\u8868\u7684\u5143\u7d20 >>> [ x if x % 2 == 0 else - x for x in range ( 1 , 11 )] [ - 1 , 2 , - 3 , 4 , - 5 , 6 , - 7 , 8 , - 9 , 10 ] # \u518d\u7a0d\u5fae\u6539\u52a8\u4e0b # \u628a x if x % 2 == 0 else x + 10 \u770b\u4f5c\u4e09\u76ee\u8fd0\u7b97\u7b26\u5c31\u5f88\u597d\u7406\u89e3 >>> [ x if x % 2 == 0 else x + 10 for x in range ( 1 , 11 )] [ 11 , 2 , 13 , 4 , 15 , 6 , 17 , 8 , 19 , 10 ] \u5176\u4ed6\u751f\u6210\u5f0f \u00b6 \u9664\u4e86\u5217\u8868\u751f\u6210\u5f0f\uff0c\u8fd8\u6709 \u5b57\u5178\u751f\u6210\u5f0f \u3001 \u5143\u7ec4\u751f\u6210\u5f0f \uff0c\u5176\u5b9e\u73b0\u90fd\u662f\u4e00\u6837\u7684 { k : v for k , v in d . items ()} { k : v for k , v in d . items () if condition } { k : v if condition else k : - v for k , v in d . items () } \u5143\u7ec4\u751f\u6210\u5f0f \u751f\u6210\u4e00\u4e2a\u751f\u6210\u5668\u5bf9\u8c61\uff0c\u4e0b\u9762\u5c06\u4f1a\u8bb2\u5230\u3002 \u9519\u8bef\u793a\u8303 \u00b6 # for \u540e if \u52a0 else >>> [ x for x in range ( 1 , 11 ) if x % 2 == 0 else 0 ] File \"<stdin>\" , line 1 [ x for x in range ( 1 , 11 ) if x % 2 == 0 else 0 ] ^ SyntaxError : invalid syntax # for \u524d if \u4e0d\u52a0 else >>> [ x if x % 2 == 0 for x in range ( 1 , 11 )] File \"<stdin>\" , line 1 [ x if x % 2 == 0 for x in range ( 1 , 11 )] ^ SyntaxError : invalid syntax \u603b\u7ed3 \u00b6 for...in... \u6700\u5148\uff0c if \u6216 if else \u968f\u540e\uff0c i-expression \u6700\u540e for \u524d if \u5fc5\u52a0 else\uff0c for \u540e if \u4e0d\u52a0 else for \u524d if \u662f\u5bf9 for\u7684\u8f93\u51fa\u8fdb\u884c\u5904\u7406\uff0c for \u540e if \u662f\u5bf9for\u7684\u8f93\u51fa\u8fdb\u884c\u63a7\u5236\u8fc7\u6ee4 \u751f\u6210\u5668 Generator \u00b6 \u666e\u901a\u5f62\u5f0f \u00b6 \u5143\u7ec4\u751f\u6210\u5f0f \u751f\u6210\u4e00\u4e2a\u751f\u6210\u5668\u5bf9\u8c61\uff0c\u901a\u8fc7for\u6216\u8005next\u904d\u5386,\u904d\u5386\u540e\uff0c\u539f\u751f\u6210\u5668\u5bf9\u8c61\u5c31\u4e0d\u5b58\u5728\u4e86 ( i-expression for i in Iterations ) ( i-expression for i in Iterations if expression ) ( i-expression if expression else expression for i in Iterations ) ( \u00b7\u00b7\u00b7 for \u00b7\u00b7\u00b7 in \u00b7\u00b7\u00b7 ) ( \u00b7\u00b7\u00b7 for \u00b7\u00b7\u00b7 in \u00b7\u00b7\u00b7 if \u00b7\u00b7\u00b7 ) ( \u00b7\u00b7\u00b7 if \u00b7\u00b7\u00b7 else \u00b7\u00b7\u00b7 for \u00b7\u00b7\u00b7 in \u00b7\u00b7\u00b7 ) \u751f\u6210\u5668\uff0c\u662f\u4e00\u79cd\u4e00\u8fb9\u5faa\u73af\u4e00\u8fb9\u8ba1\u7b97\u7684\u673a\u5236 \u6bd4\u5982\u73b0\u5728\u9700\u8981\u4e00\u4e2a 1\u5230100W\u7684\u5e73\u65b9 \u7684\u5217\u8868\uff0c\u7528\u5217\u8868\u751f\u6210\u5f0f\u8868\u793a\u4e3a [ x * x for x in range(1000000)] \u4f46\u5982\u679c\u53ea\u9700\u8981\u7ecf\u5e38\u8bbf\u95ee\u524d\u9762\u51e0\u4e2a\u5143\u7d20\uff0c\u5219\u6d6a\u8d39\u4e86\u5f88\u5927\u7684\u7a7a\u95f4 \u800c**\u751f\u6210\u5668\u662f\u4fdd\u5b58\u4e86\u4e00\u79cd\u7b97\u6cd5\uff0c\u5b83\u4e0d\u4f1a\u76f4\u63a5\u521b\u5efa100W\u4e2a\u6570\uff0c\u800c\u662f\u7b49\u5230\u8c03\u7528\u7684\u65f6\u5019\u901a\u8fc7\u8ba1\u7b97\u83b7\u5f97** \u4e5f\u5c31\u662f\u8bf4\uff1a\u5217\u8868\u751f\u6210\u5f0f\u662f\u4e00\u79cd\u7f29\u5199\uff0c\u751f\u6210\u5668\u662f\u4e00\u79cd\u7b97\u6cd5 \u751f\u6210\u5668 vs \u5217\u8868\u751f\u6210\u5f0f\uff1a \u5217\u8868\u751f\u6210\u5f0f \u662f\u4f7f\u7528 [] \uff0c\u751f\u6210\u5668 \u662f\u4f7f\u7528 () \u5217\u8868\u751f\u6210\u5f0f\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u53ef\u4ee5\u76f4\u63a5\u5217\u51fa\u6240\u6709\u5143\u7d20\uff1b\u751f\u6210\u5668\u8981\u7528 next() \u6216 \u904d\u5386 \u6765\u5217\u51fa\u6240\u6709\u5143\u7d20 >>> L = [ x * x for x in range ( 10 )] >>> L [ 0 , 1 , 4 , 9 , 16 , 25 , 36 , 49 , 64 , 81 ] >>> G = ( x * x for x in range ( 10 ) ) >>> G < generator object < genexpr > at 0x00000204807D8D60 > >>> next ( G ) 0 >>> next ( G ) 1 >>> next ( G ) 4 >>> next ( G ) 9 >>> next ( G ) 16 >>> next ( G ) 25 >>> next ( G ) 36 >>> next ( G ) 49 >>> next ( G ) 64 >>> next ( G ) 81 >>> next ( G ) Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > StopIteration \u751f\u6210\u5668\u662f\u7b97\u6cd5\uff0c\u662f\u89c4\u5f8b\uff0c\u662f\u8ba1\u7b97\u65b9\u5f0f \uff0c\u901a\u8fc7 next(G) \u8ba1\u7b97\u51faG\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u76f4\u5230\u6700\u540e\u4e00\u4e2a\u5143\u7d20 \u6ca1\u6709\u66f4\u591a\u5143\u7d20\u7684\u65f6\u5019\uff0c\u629b\u51fa StopIteration \u9519\u8bef \u4f46\u662f\u8fd9\u79cd\u4e0d\u65ad\u8c03\u7528 next() \u7684\u65b9\u6cd5\u663e\u7136\u4e0d\u79d1\u5b66\uff0c \u6240\u4ee5\u4e00\u822c\u90fd\u662f\u7528 for\u5faa\u73af G = ( x * x for x in range ( 10 ) ) for i in G : print ( i , end = ' ' ) # Output: 0 1 4 9 16 25 36 49 64 81 \u51fd\u6570\u5f62\u5f0f \u00b6 \u751f\u6210\u5668\u7684\u53e6\u4e00\u79cd\u5b9e\u73b0\u65b9\u5f0f\u662f \u51fd\u6570\u5f62\u5f0f def funcName (): sth while True : yield sth sth \u666e\u901a\u51fd\u6570\u901a\u8fc7 return\u8bed\u53e5 \u8fd4\u56de \u751f\u6210\u5668\u901a\u8fc7 yield\u8bed\u53e5 \u8fd4\u56de\uff0c\u5e76\u5728\u4e0b\u6b21\u8c03\u7528\u65f6\u4ece yield\u8bed\u53e5 \u5904\u7ee7\u7eed yield \u53ef\u4ee5\u770b\u6210 return \uff0c\u90fd\u662f\u8fd4\u56de\u4e00\u4e2a\u503c\u51fa\u53bb \u53ea\u4e0d\u8fc7\u4f7f\u7528 yield \u5728\u4e0b\u6b21\u8c03\u7528\u65f6\u4f1a\u4ece yield \u5904\u7ee7\u7eed\u3002 \u5b9e\u4f8b \u00b6 \u4f8b\u5982\u6253\u5370\u6768\u8f89\u4e09\u89d2 1 / \\ 1 1 / \\ / \\ 1 2 1 / \\ / \\ / \\ 1 3 3 1 / \\ / \\ / \\ / \\ 1 4 6 4 1 / \\ / \\ / \\ / \\ / \\ 1 5 10 10 5 1 \u671f\u5f85\u8f93\u51fa\u662f\u8fd9\u6837\u7684 # [1] # [1, 1] # [1, 2, 1] # [1, 3, 3, 1] # [1, 4, 6, 4, 1] # [1, 5, 10, 10, 5, 1] # [1, 6, 15, 20, 15, 6, 1] # [1, 7, 21, 35, 35, 21, 7, 1] # [1, 8, 28, 56, 70, 56, 28, 8, 1] # [1, 9, 36, 84, 126, 126, 84, 36, 9, 1] \u5b9e\u73b0\u601d\u8def\uff1a \u5148\u770b\u6768\u8f89\u4e09\u89d2\u7684\u89c4\u5f8b\uff1a\u5934\u5c3e\u90fd\u662f1\uff0c\u4e2d\u95f4\u662f\u4e0a\u4e00\u5c42 \u7b2cn\u4e2a + \u7b2cn+1\u4e2a \uff0c\u6bcf\u4e00\u5c42\u90fd\u662flist \u800c\u4e14\u7b2c\u4e00\u5c42\u6bd4\u8f83\u7279\u6b8a\uff0c\u662f [1] \u53ef\u4ee5\u5148\u628a\u6768\u8f89\u4e09\u89d2\u6838\u5fc3\u7684\u7b97\u6cd5\u641e\u5b9a\u3002 \u6838\u5fc3\u7b97\u6cd5 \u00b6 L = [ 1 ] L = [ 1 ] + [ L [ n ] + L [ n + 1 ] for n in range ( len ( L ) - 1 )] + [ 1 ] [1] + [L[n] + L[n+1] for n in range(len(L)-1)] +[1] \u5c31\u662f\u6838\u5fc3\u7b97\u6cd5\u4e86 \u628a\u4ed6\u62c6\u5f00\u6765\u770b\uff0c\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u662f\u7531\u4e2d\u95f4\u6bb5\u52a0\u4e0a\u5934\u5c3e\u7684 [1] \u7ec4\u6210\u7684 \u518d\u770b\u4e2d\u95f4\u6bb5 [L[n] + L[n+1] for n in range(len(L)-1)] \u8fd9\u662f\u4e00\u4e2a\u5217\u8868\u751f\u6210\u5f0f range(len(L)-1) \u4f1a\u751f\u6210 0 1 2 ... \u5047\u8bbe\u5f53\u524d\u4e3a\u7b2c5\u5c42\uff0c\u51c6\u5907\u751f\u6210 [1, 4, 6, 4, 1] \u5f53\u524d\u7684 L \u662f [1, 3, 3, 1]\uff0c\u90a3\u4e48 len(L) \u5219\u662f4\uff0c range(len(L) - 1) \u5219\u7b49\u4ef7\u4e8e range(3) ,\u4f1a\u751f\u6210 0 1 2 [L[n] + L[n+1] for n in range(len(L)-1)] \u5219\u7b49\u4ef7\u4e8e [L[0]+L[1], L[1]+L[2], L[2]+L[3]] \u5219\u7b49\u4ef7\u4e8e [ 1 + 3, 3 + 3, 3 + 1 ] \u5219\u7b49\u4ef7\u4e8e [4, 6, 4] \u6b63\u597d\u5c31\u662f\u4e2d\u95f4\u6bb5 \u518d\u52a0\u4e0a\u5934\u5c3e\u4e24\u4e2a [1]\uff1a [1, 4, 6, 4, 1] \u505a\u6210\u751f\u6210\u5668 \u00b6 \u56e0\u4e3a\u7b2c\u4e00\u5c42 \u7279\u6b8a\uff0c\u6240\u4ee5\u7528\u5c0f\u62ec\u53f7\u5217\u8868\u751f\u6210\u5f0f () \u505a\u4e0d\u51fa\u6765\uff0c\u6539\u7528\u51fd\u6570\u5f62\u5f0f def triangles (): L = [ 1 ] while True : yield L L = [ 1 ] + [ L [ x ] + L [ x + 1 ] for x in range ( len ( L ) - 1 )] + [ 1 ] \u7b2c\u4e00\u6b21\u8fed\u4ee3\u751f\u6210\u5668triangles\u65f6\uff0c\u4f1a\u6267\u884c L = [1] \uff0c\u7136\u540e\u8fdb\u5165\u5faa\u73af\uff0c\u9047\u5230 yield L \u628aL\u8fd4\u56de\u51fa\u53bb \u7b2c\u4e8c\u6b21\u8fed\u4ee3\u751f\u6210\u5668triangles\u65f6\uff0c\u4f1a\u4ece yield L \u5904\u7ee7\u7eed\uff0c \u7136\u540e\u6267\u884c\u6838\u5fc3\u7b97\u6cd5 L = [1] + [L[x]+L[x+1] for x in range(len(L)-1)] + [1] \u4e4b\u540e\u7ee7\u7eed\u5faa\u73af\uff0c\u53c8\u9047\u5230 yield L \uff0c\u628a\u66f4\u65b0\u8fc7\u7684 L \u8fd4\u56de\u51fa\u53bb \u63a5\u7740\u7b2c\u4e09\u6b21\uff0c\u7b2c\u56db\u6b21... \u5176\u5b9e\u6709\u70b9\u7c7b\u4f3c C \u8bed\u8a00\u4e2d\u88ab static \u4fee\u9970\u7684\u5c40\u90e8\u53d8\u91cf\uff0c\u51fd\u6570\u8c03\u7528\u5b8c\u4e0d\u4f1a\u88ab\u9500\u6bc1\uff0c\u7a0b\u5e8f\u7ed3\u675f\u624d\u9500\u6bc1 \u904d\u5386\u8f93\u51fa \u00b6 for n , t in enumerate ( triangles ()): results . append ( t ) n += 1 if n == 10 : break \u751f\u6210\u5668\u4e5f\u662f\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528 for...in... \u6765\u8fed\u4ee3\u8f93\u51fa enumerate() \u8d4b\u4e88\u4e86\u5bf9\u5e94\u7684\u4e0b\u6807 \u8fd9\u4e2a\u751f\u6210\u5668\u53ef\u4ee5\u65e0\u9650\u5faa\u73af\u4e0b\u53bb\uff0c\u53ef\u4ee5\u83b7\u5f97\u65e0\u7a77\u5c42\uff0c\u8fd9\u91cc\u6253\u537010\u5c42\u4f5c\u4e3a\u793a\u8303\u5373\u53ef \u6700\u540e\u53ef\u4ee5\u5f97\u5230\u671f\u5f85\u8f93\u51fa\uff1a [ 1 ] [ 1 , 1 ] [ 1 , 2 , 1 ] [ 1 , 3 , 3 , 1 ] [ 1 , 4 , 6 , 4 , 1 ] [ 1 , 5 , 10 , 10 , 5 , 1 ] [ 1 , 6 , 15 , 20 , 15 , 6 , 1 ] [ 1 , 7 , 21 , 35 , 35 , 21 , 7 , 1 ] [ 1 , 8 , 28 , 56 , 70 , 56 , 28 , 8 , 1 ] [ 1 , 9 , 36 , 84 , 126 , 126 , 84 , 36 , 9 , 1 ] \u5b8c\u6574\u4ee3\u7801 \u00b6 def triangles (): L = [ 1 ] while True : yield L L = [ 1 ] + [ L [ x ] + L [ x + 1 ] for x in range ( len ( L ) - 1 )] + [ 1 ] results = [] for n , t in enumerate ( triangles ()): results . append ( t ) n += 1 if n == 10 : break for t in results : print ( t ) if results == [ [ 1 ], [ 1 , 1 ], [ 1 , 2 , 1 ], [ 1 , 3 , 3 , 1 ], [ 1 , 4 , 6 , 4 , 1 ], [ 1 , 5 , 10 , 10 , 5 , 1 ], [ 1 , 6 , 15 , 20 , 15 , 6 , 1 ], [ 1 , 7 , 21 , 35 , 35 , 21 , 7 , 1 ], [ 1 , 8 , 28 , 56 , 70 , 56 , 28 , 8 , 1 ], [ 1 , 9 , 36 , 84 , 126 , 126 , 84 , 36 , 9 , 1 ] ]: print ( '\u6d4b\u8bd5\u901a\u8fc7!' ) else : print ( '\u6d4b\u8bd5\u5931\u8d25!' ) \u603b\u7ed3 \u00b6 \u666e\u901a\u5f62\u5f0f-\u751f\u6210\u5668\uff1a\u628a\u5217\u8868\u751f\u6210\u5f0f\u7684 [] \u6362\u6210 () \u51fd\u6570\u5f62\u5f0f-\u751f\u6210\u5668\uff1a\u51fd\u6570\u4e2d\u5e26 yield \uff0c\u4e0b\u4e00\u6b21\u8c03\u7528\u65f6\u4f1a\u4ece yield \u5904\u7ee7\u7eed \u8fed\u4ee3\u5668 Iterator \u00b6 \u53ef\u4ee5\u88ab next() \u51fd\u6570\u8c03\u7528\u5e76\u4e0d\u65ad\u8fd4\u56de\u4e0b\u4e00\u4e2a\u503c\u7684\u5bf9\u8c61\u79f0\u4e3a\u8fed\u4ee3**\u5668**\uff1a Iterator \u3002 \u53ef\u8fed\u4ee3**\u5bf9\u8c61**\uff1a \u53ef\u4ee5\u76f4\u63a5\u4f5c\u7528\u4e8e for \u5faa\u73af\u7684\u5bf9\u8c61\u7edf\u79f0\u4e3a\u53ef\u8fed\u4ee3**\u5bf9\u8c61** Iterable \u53ef\u8fed\u4ee3**\u5bf9\u8c61** Iterable \uff1a 1. List\u3001Tuple\u3001Dict\u3001Set\u3001String\uff1b 2. \u751f\u6210\u5668Generator\u3001\u5e26 yield \u7684Generator Function \u53ef\u4ee5\u7528 isinstance(obj, Iterable) \u5224\u65ad\u662f\u5426\u662f\u53ef\u8fed\u4ee3**\u5bf9\u8c61** \u8fed\u4ee3**\u5668**\uff1a \u4e0d\u4f46\u53ef\u4ee5\u4f5c\u7528\u4e8e for \u5faa\u73af\uff0c\u8fd8\u53ef\u4ee5\u88ab next() \u51fd\u6570\u8c03\u7528\u5e76\u4e0d\u65ad\u8fd4\u56de\u4e0b\u4e00\u4e2a\u503c\u5219\u79f0\u4e3a\u8fed\u4ee3**\u5668**\uff1a Iterator \u3002 \u751f\u6210\u5668Generator\u3001\u5e26 yield \u7684Generator Function\u5c31\u662f\u8fed\u4ee3**\u5668** \u53ef\u4ee5\u7528 isinstance(obj, Iterator) \u5224\u65ad\u662f\u5426\u662f\u8fed\u4ee3**\u5668** \u6240\u4ee5\uff1aGenerator\u3001Generator Function \u65e2\u662f Iterator \uff0c\u4e5f\u662f Iterable \u800c List\u3001Tuple\u3001Dict\u3001Set\u3001String \u4ec5\u4ec5\u53ea\u662f Iterable \uff0c \u4f46\u662f \uff0c\u4f7f\u7528 iter() \u51fd\u6570\u53ef\u4ee5\u4f7f\u4ed6\u4eec\u53d8\u6210\u8fed\u4ee3**\u5668** Iterator >>> isinstance ( iter ([]), Iterator ) True >>> isinstance ( iter ( 'Boii' ), Iterator ) True \u8fed\u4ee3\u5668\u7684\u672c\u8d28 \u00b6 Python\u7684 Iterator\u5bf9\u8c61 \u8868\u793a\u7684\u662f\u4e00\u4e2a\u6570\u636e\u6d41\uff0c Iterator\u5bf9\u8c61 \u53ef\u4ee5\u88ab next()\u51fd\u6570 \u8c03\u7528\u5e76\u4e0d\u65ad\u8fd4\u56de\u4e0b\u4e00\u4e2a\u6570\u636e\uff0c\u76f4\u5230\u6ca1\u6709\u6570\u636e\u65f6\u629b\u51fa StopIteration \u9519\u8bef\u3002 \u53ef\u4ee5\u628a\u8fd9\u4e2a\u6570\u636e\u6d41\u770b\u505a\u662f\u4e00\u4e2a\u6709\u5e8f\u5e8f\u5217\uff0c\u4f46\u6211\u4eec\u5374\u4e0d\u80fd\u63d0\u524d\u77e5\u9053\u5e8f\u5217\u7684\u957f\u5ea6 \u53ea\u80fd\u4e0d\u65ad\u901a\u8fc7 next()\u51fd\u6570 \u5b9e\u73b0\u6309\u9700\u8ba1\u7b97\u4e0b\u4e00\u4e2a\u6570\u636e\uff0c\u6240\u4ee5 Iterator \u7684\u8ba1\u7b97\u662f**\u60f0\u6027**\u7684\uff0c\u53ea\u6709\u5728\u9700\u8981\u8fd4\u56de\u4e0b\u4e00\u4e2a\u6570\u636e\u65f6\u5b83\u624d\u4f1a\u8ba1\u7b97 \u81ea\u5b9a\u4e49\u53ef\u8fed\u4ee3\u7c7b \u00b6 \u53ea\u8981\u7c7b\u4e2d\u5b9e\u73b0\u4e86 __iter__() \u65b9\u6cd5\uff0c\u8fd9\u4e2a\u7c7b\u7684\u5bf9\u8c61\u5c31\u662f\u53ef\u8fed\u4ee3**\u5bf9\u8c61** Iterable \u3002 \u53ea\u8981\u7c7b\u4e2d\u5b9e\u73b0\u4e86 __iter__() \u548c __next__() \u65b9\u6cd5\uff0c\u8fd9\u4e2a\u7c7b\u5c31\u662f\u4e2a\u8fed\u4ee3**\u5668** Iteratorn \u3002 __iter__() \u65b9\u6cd5\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3**\u5668**\u3002 \u90a3\u4e48\u4ee3\u7801\u5c31\u662f\u8fd9\u6837\u5b50\uff1a # 1. \u521b\u5efa\u4e00\u4e2a\u7c7b class Classmate : def __init__ ( self ): self . names = list () def add ( self , value ): self . names . append ( value ) # 2. \u5b9e\u73b0__iter__\u65b9\u6cd5\uff0c\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668 def __iter__ ( self ): \"\"\"\u53ea\u6709\u5b9e\u73b0\u4e86__iter__\u65b9\u6cd5\uff0c\u624d\u80fd\u53ef\u8fed\u4ee3\"\"\" return ClassmateIterator ( self ) # __iter__ \u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\u5bf9\u8c61 # 3. \u521b\u5efa\u4e00\u4e2a\u8fed\u4ee3\u5668 class ClassmateIterator : \"\"\"\u5b9e\u73b0\u4e86__iter__\u548c__next__\u65b9\u6cd5\uff0c\u624d\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668\"\"\" def __init__ ( self , obj ): self . obj = obj self . current_num = 0 # 4. \u8fed\u4ee3\u5668\u9700\u8981\u5b9e\u73b0 __iter__, __next__\u65b9\u6cd5 def __iter__ ( self ): pass def __next__ ( self ): \"\"\"\u5b9e\u73b0\u4e86__iter__\u548c__next__\u65b9\u6cd5\uff0c\u624d\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668\"\"\" if self . current_num < len ( self . obj . names ): res = self . obj . names [ self . current_num ] self . current_num += 1 return res else : raise StopIteration if __name__ == '__main__' : clsm = Classmate () clsm . add ( 123 ) clsm . add ( 456 ) clsm . add ( 789 ) # \u901a\u8fc7\u5faa\u73af\u68c0\u67e5classmate\u5bf9\u8c61\u662f\u5426\u53ef\u8fed\u4ee3 for i in clsm : print ( i ) -------------------------------------------------- # Output: 123 456 789 \u603b\u7ed3\u8d77\u6765\u5c31\u662f\uff1a \u521b\u5efa\u4e00\u4e2a\u7c7b\u5e76\u5b9e\u73b0 __iter__() \u65b9\u6cd5\u53bb\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668 \u521b\u5efa\u4e00\u4e2a\u7c7b\u5e76\u5b9e\u73b0 __iter__() \u548c __next__() \u65b9\u6cd5\uff0c\u4f7f\u5176\u6210\u4e3a\u8fed\u4ee3\u5668\u3002 \u8fd9\u6837\u770b\u8d77\u6765\u597d\u50cf\u4e3a\u4e86\u5b9e\u73b0\u4e00\u4e2a\u8fed\u4ee3\u5668\u53c8\u751f\u6210\u4e86\u4e00\u4e2a\u8fed\u4ee3\u5668 \u65e2\u7136\u6211\u662f\u60f3\u9020\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c __iter__() \u65b9\u6cd5\u6709\u9700\u8981\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\u5bf9\u8c61\uff0c\u90a3\u6211\u8fd4\u56de\u81ea\u5df1\u4e0d\u884c\u5417\uff1f \u53ef\u4ee5\uff01 # 1. \u521b\u5efa\u4e00\u4e2a\u7c7b class Classmate : def __init__ ( self ): self . names = list () self . current_num = 0 def add ( self , value ): self . names . append ( value ) # 2. \u5b9e\u73b0__iter__\u65b9\u6cd5\uff0c\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668 def __iter__ ( self ): \"\"\"\u53ea\u6709\u5b9e\u73b0\u4e86__iter__\u65b9\u6cd5\uff0c\u624d\u80fd\u53ef\u8fed\u4ee3\"\"\" return self # __iter__ \u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\u5bf9\u8c61\uff0c\u8fd9\u91cc\u5c31\u8fd4\u56de\u81ea\u5df1\u5c31\u884c # 3. \u5b9e\u73b0__next__\u65b9\u6cd5\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u4f1a\u5728\u5916\u90e8\u4f7f\u7528next(Iterator)\u65f6\u8c03\u7528\u3002 def __next__ ( self ): \"\"\"\u5b9e\u73b0\u4e86__iter__\u548c__next__\u65b9\u6cd5\uff0c\u624d\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668\"\"\" if self . current_num < len ( self . names ): res = self . names [ self . current_num ] self . current_num += 1 return res else : raise StopIteration if __name__ == '__main__' : clsm = Classmate () clsm . add ( 123 ) clsm . add ( 456 ) clsm . add ( 789 ) # \u901a\u8fc7\u5faa\u73af\u68c0\u67e5classmate\u5bf9\u8c61\u662f\u5426\u53ef\u8fed\u4ee3 for i in clsm : print ( i ) -------------------------------------------------- # Output: 123 456 789 \u603b\u7ed3 \u00b6 \u53ef\u8fed\u4ee3\u5bf9\u8c61\u548c\u8fed\u4ee3\u5668\uff0c\u901a\u8fc7\u51fd\u6570 iter() \u8f6c\u6362 \u8fed\u4ee3\u5668\uff1a\u6570\u636e\u6d41\uff0c\u53d8\u957f\uff0c\u60f0\u6027\u7684 \u7ee7\u627f\u5173\u7cfb\uff1aIterable>Iterator>Generator(\u53c2\u8003python doc) Iterable\uff1alist\u3001tuple\u3001dict\u3001set\u3001str\u3001Iterator\u3001Generator\u7b49 Iterator\u8f6c\u5316\u6210Iterator\uff1aIterator=iter(Iterable) \u81ea\u5b9a\u4e49\u8fed\u4ee3\u7c7b\u65f6\u5fc5\u987b\u5b9e\u73b0 __iter__() \u548c __next__() \u65b9\u6cd5 __iter__() \u65b9\u6cd5\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668","title":"\u9ad8\u7ea7\u7279\u6027"},{"location":"Python/Adavanced/Python-No-Feature-High-Level-Feature/#slice","text":"[startWith : end : step] \u5207\u7247\u9002\u7528\u4e8e list\u3001tuple\u3001string startWith\u662f\u5305\u542b\uff0cend\u5219\u4e0d\u5305\u542b \u6ce8\u610f\uff1a \u5207\u7247\u662f\u4ece\u5de6\u5f80\u53f3\u5207\u7684 \u5982\u679c\u7528\u6b63\u7d22\u5f15\u5f00\u59cb\uff0c\u5c31\u8981\u7528 \u6b63\u7d22\u5f15 \u6216 \u9006\u7d22\u5f15 \u7ed3\u675f\uff0c\u4f8b\u5982 s[1:5] \u6216 s[1:-3] \uff01\u5982\u679c\u7528\u9006\u7d22\u5f15\u5f00\u59cb\uff0c\u5c31\u8981\u7528 \u9006\u7d22\u5f15 \u7ed3\u675f\uff08 s[-1:1] \u8fd9\u6837\u53ea\u4f1a\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff0c**\u6b63\u786e**\u5e94\u8be5\u662f s[-5:-1] \uff09 \uff01\u9006\u7d22\u5f15\u8bb0\u5f97\u4e0d\u8981\u5f04\u98a0\u5012\u4e86\u3002\uff08 s[-1:-3] \u8fd9\u6837\u53ea\u4f1a\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff0c**\u6b63\u786e**\u5e94\u8be5\u662f s[-3:-1] \uff09","title":"\u5207\u7247 Slice"},{"location":"Python/Adavanced/Python-No-Feature-High-Level-Feature/#_1","text":"| P | y | t | h | o | n | 0 1 2 3 4 5 # \u4ece\u5de6\u5f80\u53f3\uff0c\u4e0b\u6807\u4ece0\u5f00\u59cb - 6 - 5 - 4 - 3 - 2 - 1 # \u4ece\u53f3\u5f80\u5de6\uff0c\u4e0b\u6807\u4ece-1\u5f00\u59cb >>> s = 'Python' >>> s [ 0 ] 'P' >>> s [ 0 : - 1 ] # \u7ed3\u675f\u7d22\u5f15\u4e0d\u88ab\u622a\u53d6 'Pytho' >>> s [: 5 ] # \u8d77\u59cb\u7d22\u5f15\u53ef\u4ee5\u7701\u7565\u4e0d\u5199\uff0c\u4ee3\u8868\u4ece\u7b2c\u4e00\u4f4d\u5f00\u59cb\u622a\u53d6 'Pytho' >>> s [ 0 :] # \u7ed3\u675f\u7d22\u5f15\u53ef\u4ee5\u7701\u7565\u4e0d\u5199\uff0c\u4ee3\u8868\u622a\u53d6\u81f3\u6700\u540e\u4e00\u4f4d 'Python' >>> s [:] # \u7b49\u4e8e\u590d\u5236\u4e86\u4e00\u6574\u4e2a 'Python' >>> s [ 1 : 4 ] 'yth' >>> s [ 1 : - 2 ] 'yth' >>> s [ - 2 : 1 ] # \u9006\u7d22\u5f15\u5f00\u59cb\uff0c\u4e0d\u80fd\u4ee5\u6b63\u7d22\u5f15\u7ed3\u675f '' >>> s [ - 5 : - 2 ] 'yth' >>> s [ - 2 : - 5 ] # \u53ea\u80fd\u4ece\u5de6\u5f80\u53f3\u5207 '' >>> l = list ( range ( 100 )) >>> l [ 10 : 20 ] [ 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 ] >>> l [ 10 : 20 : 3 ] [ 10 , 13 , 16 , 19 ] >>> l [ 80 :: 3 ] [ 80 , 83 , 86 , 89 , 92 , 95 , 98 ] >>> l [: 10 : 3 ] [ 0 , 3 , 6 , 9 ] >>> l [:: 10 ] [ 0 , 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 ] >>> l [:: - 10 ] [ 99 , 89 , 79 , 69 , 59 , 49 , 39 , 29 , 19 , 9 ]","title":"\u7d22\u5f15"},{"location":"Python/Adavanced/Python-No-Feature-High-Level-Feature/#iteration","text":"","title":"\u8fed\u4ee3 Iteration"},{"location":"Python/Adavanced/Python-No-Feature-High-Level-Feature/#_2","text":"\u53ef\u4ee5\u7528\u8fc7 collections \u7684 Iterable \u7c7b\u578b\uff0c\u7528 isinstance() \u5224\u65ad \u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f\u53ef\u8fed\u4ee3\u5bf9\u8c61 from collections import Iterable str = 'abc' l = [ 1 , 2 , 3 ] t = ( 1 , 2 , 3 ) d = { 1 : 1 , 2 : 2 , 3 : 3 } s = ({ 1 , 2 , 3 }) print ( isinstance ( str , Iterable )) # True print ( isinstance ( l , Iterable )) # True print ( isinstance ( t , Iterable )) # True print ( isinstance ( d , Iterable )) # True print ( isinstance ( s , Iterable )) # True print ( isinstance ( 123 , Iterable )) # False \u6574\u6570\u5b57\u9762\u91cf\u4e0d\u662f\u53ef\u8fed\u4ee3\u5bf9\u8c61","title":"\u5224\u65ad\u662f\u5426\u8fed\u4ee3\u5bf9\u8c61"},{"location":"Python/Adavanced/Python-No-Feature-High-Level-Feature/#list","text":"s = 'abcdefg' for value in s : print ( value , end = ' ' ) # Output\uff1a a b c d e f g # \u53ef\u4ee5\u901a\u8fc7 enumerate() \u7ed9string\uff0clist\uff0ctuple \u7b49\u751f\u6210\u4e0b\u6807 s = 'abcdefg' for i , value in enumerate ( s ): print ( i , value ) # Output\uff1a 0 a 1 b 2 c 3 d 4 e 5 f 6 g l = [ 'a' , True , ( 1 , 2 ), 43 ] for i , value in enumerate ( l ): print ( i , value ) # Output: 0 a 1 True 2 ( 1 , 2 ) 3 43 # \u540c\u65f6\u5f15\u7528\u4e24\u4e2a\u53d8\u91cf for x , y in [( 11 , 12 ), ( 21 , 22 ), ( 31 , 32 )]: print ( x , y ) # Output: 11 12 21 22 31 32 ###################################################### for x , y , z in [( 11 , 12 , 13 ), ( 21 , 22 , 23 ), ( 31 , 32 , 33 )]: print ( x , y , z ) # Output: 11 12 13 21 22 23 31 32 33","title":"\u8fed\u4ee3 List \u5217\u8868\u7c7b\u578b\u6570\u636e"},{"location":"Python/Adavanced/Python-No-Feature-High-Level-Feature/#dict-","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cDict\u8fed\u4ee3\u7684\u662fkey\uff0c\u5982\u679c\u8981\u8fed\u4ee3value\uff0c\u53ef\u4ee5\u7528 for value in d.values() \u5982\u679c\u8981\u540c\u65f6\u8fed\u4ee3key \u548c value\uff0c \u53ef\u4ee5\u7528 for k, v in d.items() d = { 'a' : 'Alice' , 'b' : 'Boii' , 'c' : 'Cai' } for i in d : print ( i ) # Output: a b c ############################################# d = { 'a' : 'Alice' , 'b' : 'Boii' , 'c' : 'Cai' } for i in d . values (): print ( i ) # Output: Alice Boii Cai ############################################# d = { 'a' : 'Alice' , 'b' : 'Boii' , 'c' : 'Cai' } for k , v in d . items (): print ( k , '-' , v ) # Output: a - Alice b - Boii c - Cai","title":"\u8fed\u4ee3 Dict \u952e-\u503c\u5bf9\u7c7b\u578b\u6570\u636e"},{"location":"Python/Adavanced/Python-No-Feature-High-Level-Feature/#list-comprehensions","text":"","title":"\u5217\u8868\u751f\u6210\u5f0f List Comprehensions"},{"location":"Python/Adavanced/Python-No-Feature-High-Level-Feature/#_3","text":"[ i-expression for i in Iterations ] [ i-expression for i in Iterations if expression ] [ i-expression if expression else expression for i in Iterations ] [ \u00b7\u00b7\u00b7 for \u00b7\u00b7\u00b7 in \u00b7\u00b7\u00b7 ] [ \u00b7\u00b7\u00b7 for \u00b7\u00b7\u00b7 in \u00b7\u00b7\u00b7 if \u00b7\u00b7\u00b7 ] [ \u00b7\u00b7\u00b7 if \u00b7\u00b7\u00b7 else \u00b7\u00b7\u00b7 for \u00b7\u00b7\u00b7 in \u00b7\u00b7\u00b7 ] \u5217\u8868\u751f\u6210\u5f0f\u662f\u4e00\u79cd\u975e\u5e38\u7b80\u6d01\u7684\u8bed\u6cd5\uff0c\u53ef\u4ee5\u5927\u5e45\u5ea6\u7684\u538b\u7f29\u4ee3\u7801 \u9605\u8bfb\u65b9\u5f0f\uff1a - [i-expression for i in Iterations] \u904d\u5386\u8fed\u4ee3\u5bf9\u8c61 Iterations\uff0c\u5c06\u6bcf\u4e2a\u5143\u7d20 e \u653e\u5230 i-expression\u4e2d\u8fd0\u7b97\u540e\uff0c\u4f5c\u4e3a\u8fd9\u4e2a\u5217\u8868 list \u7684\u5143\u7d20 - [i-expression for i in Iterations if expression] \u904d\u5386\u8fed\u4ee3\u5bf9\u8c61 Iterations\uff0c\u5c06\u6bcf\u4e2a\u5143\u7d20 e \u653e\u5230 if \u4e2d\u7684 expression\u4e2d\u8fd0\u7b97\u540e\uff0c\u653e\u5230 i-expression \u4e2d\u8fd0\u7b97\uff0c\u7136\u540e\u4f5c\u4e3a\u8fd9\u4e2a\u5217\u8868 list \u7684\u5143\u7d20 - [i-expression if expression else expression for i in Iterations] \u904d\u5386\u8fed\u4ee3\u5bf9\u8c61 Iterations\uff0c\u5c06\u6bcf\u4e2a\u5143\u7d20 e \u653e\u5230 if else \u4e2d\u7684 expression\u4e2d\u8fd0\u7b97\u540e\uff0c\u653e\u5230 i-expression \u4e2d\u8fd0\u7b97\uff0c\u7136\u540e\u4f5c\u4e3a\u8fd9\u4e2a\u5217\u8868 list \u7684\u5143\u7d20 for \u524d\u7684 if else \u53ef\u4ee5\u770b\u6210\u4e09\u76ee\u8fd0\u7b97\u7b26\uff0c\u8fd9\u6837\u6bd4\u8f83\u597d\u7406\u89e3 1. \u4e09\u76ee\u8fd0\u7b97\u7b26\uff1aTrue\u65f6\u6267\u884c if expression else Flase\u65f6\u6267\u884c 2. \u5bf9\u6bd4\u4e00\u4e0b\uff1a[ i-expression if expression else expression for i in Iterations ] 3. \u4ee3\u5165\u4e00\u4e0b\uff1a[ True\u65f6\u6267\u884c if expression else Flase\u65f6\u6267\u884c for i in Iterations ] \u4e00\u53e5\u8bdd\uff1a\u539f\u672c\u670910\u4e2a\uff0cfor...if \u540e\u4e0d\u4e00\u5b9a\u6709 10 \u4e2a\uff0c if...else...for \u4ee5\u540e\u670910\u4e2a\uff0c\u4e0d\u8fc7\u53ef\u80fd\u4e0d\u5c3d\u76f8\u540c\u3002 \u4e24\u53e5\u8bdd\uff1afor \u524d\u5fc5 else\uff0cfor \u540e\u4e0delse\u3002 \u6ce8\u610f\uff1ai-expression \u7684 \u8ba1\u7b97\u53d8\u91cf \u548c for \u91cc\u7684 \u4e34\u65f6\u53d8\u91cf \u8981\u76f8\u540c \u666e\u901a\u5217\u8868\u751f\u6210\u5f0f # range(1, 11) \u751f\u62101~10 [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] # for in \u904d\u5386\u8fd910\u4e2a\u6570 # \u6bcf\u6b21\u904d\u5386\u90fd\u628a\u5f53\u524d\u5143\u7d20\u62ff\u5230 i-expression \u5373 x * x \u505a\u76f8\u4e58\u8ba1\u7b97 # \u7136\u540e\u4f5c\u4e3a\u5217\u8868\u7684\u5143\u7d20 # \u6ce8\u610f for \u7684\u4e34\u65f6\u53d8\u91cf\u662f x\uff0ci-expression \u7684\u53d8\u91cf\u4e5f\u662f x\uff0c\u8fd9\u4e24\u4e2a\u8981\u76f8\u540c # \u8fd9\u91cc\u662f\u8ba1\u7b97\u51fa1~10\u6bcf\u4e2a\u6570\u7684\u5e73\u65b9 >>> [ x * x for x in range ( 1 , 11 )] [ 1 , 4 , 9 , 16 , 25 , 36 , 49 , 64 , 81 , 100 ] # \u628a\u4e00\u4e2a List \u4e2d\u6240\u6709\u5b57\u7b26\u4e32\u53d8\u5c0f\u5199 >>> L = [ 'Hello' , 'World' , 'IBM' , 'Apple' ] >>> [ s . lower () for s in L ] [ 'hello' , 'world' , 'ibm' , 'apple' ] for \u91cc\u5e26 if \u7b5b\u9009\u7684\u5217\u8868\u751f\u6210\u5f0f # range(1, 11) \u751f\u62101~10 [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] # for in \u904d\u5386\u8fd910\u4e2a\u6570 # \u6bcf\u6b21\u904d\u5386\u90fd\u628a\u5f53\u524d\u5143\u7d20\u62ff\u5230 if \u91cc\u8ba1\u7b97, \u5f97\u5230 [2, 4, 6, 8, 10] # \u7136\u540e\u653e\u5230 i-expression \u5373 x * x \u505a\u76f8\u4e58\u8ba1\u7b97\u5f97\u5230 [4, 16, 36, 64, 100] # \u6700\u540e\u4f5c\u4e3a\u5217\u8868\u7684\u5143\u7d20 # \u8fd9\u91cc\u662f\u7b5b\u9009\u51fa\u5076\u6570\uff0c\u7136\u540e\u8ba1\u7b97\u5e73\u65b9 >>> [ x * x for x in range ( 1 , 11 ) if x % 2 == 0 ] [ 4 , 16 , 36 , 64 , 100 ] \u53cc\u5faa\u73af\u7684\u5217\u8868\u751f\u6210\u5f0f # \u8fd8\u53ef\u4ee5\u4f7f\u7528\u53cc\u5faa\u73af\uff0c\u751f\u6210\u5168\u6392\u5217 >>> [ m + n for m in 'ABC' for n in 'XYZ' ] [ 'AX' , 'AY' , 'AZ' , 'BX' , 'BY' , 'BZ' , 'CX' , 'CY' , 'CZ' ] \u591a\u53d8\u91cf\u7684\u5217\u8868\u751f\u6210\u5f0f # \u4e00\u4e2a\u5faa\u73af\u591a\u4e2a\u53d8\u91cf\u4e5f\u662f\u53ef\u4ee5\u7684 >>> d = { 'x' : 'A' , 'y' : 'B' , 'z' : 'C' } >>> [ k + '-' + v for k , v in d . items ()] [ 'y-B' , 'x-A' , 'z-C' ] for \u524d\u5e26 if \u7684\u5217\u8868\u751f\u6210\u5f0f # # range(1, 11) \u751f\u62101~10 [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] # for in \u904d\u5386\u8fd910\u4e2a\u6570 # \u6bcf\u6b21\u904d\u5386\u90fd\u628a\u5f53\u524d\u5143\u7d20\u62ff\u5230 for \u524d\u7684 if else\u4e09\u76ee\u8fd0\u7b97\u7b26\u91cc\u8ba1\u7b97 # x if x % 2 == 0 else -x ,\u5076\u6570\u6b63\u5e38\u8f93\u51fa, \u5947\u6570\u53d8\u8d1f\u6570\uff0c\u5f97\u5230 [-1, 2, -3, 4, -5, 6, -7, 8, -9, 10] # \u6700\u540e\u4f5c\u4e3a\u5217\u8868\u7684\u5143\u7d20 >>> [ x if x % 2 == 0 else - x for x in range ( 1 , 11 )] [ - 1 , 2 , - 3 , 4 , - 5 , 6 , - 7 , 8 , - 9 , 10 ] # \u518d\u7a0d\u5fae\u6539\u52a8\u4e0b # \u628a x if x % 2 == 0 else x + 10 \u770b\u4f5c\u4e09\u76ee\u8fd0\u7b97\u7b26\u5c31\u5f88\u597d\u7406\u89e3 >>> [ x if x % 2 == 0 else x + 10 for x in range ( 1 , 11 )] [ 11 , 2 , 13 , 4 , 15 , 6 , 17 , 8 , 19 , 10 ]","title":"\u5217\u8868\u751f\u6210\u5f0f"},{"location":"Python/Adavanced/Python-No-Feature-High-Level-Feature/#_4","text":"\u9664\u4e86\u5217\u8868\u751f\u6210\u5f0f\uff0c\u8fd8\u6709 \u5b57\u5178\u751f\u6210\u5f0f \u3001 \u5143\u7ec4\u751f\u6210\u5f0f \uff0c\u5176\u5b9e\u73b0\u90fd\u662f\u4e00\u6837\u7684 { k : v for k , v in d . items ()} { k : v for k , v in d . items () if condition } { k : v if condition else k : - v for k , v in d . items () } \u5143\u7ec4\u751f\u6210\u5f0f \u751f\u6210\u4e00\u4e2a\u751f\u6210\u5668\u5bf9\u8c61\uff0c\u4e0b\u9762\u5c06\u4f1a\u8bb2\u5230\u3002","title":"\u5176\u4ed6\u751f\u6210\u5f0f"},{"location":"Python/Adavanced/Python-No-Feature-High-Level-Feature/#_5","text":"# for \u540e if \u52a0 else >>> [ x for x in range ( 1 , 11 ) if x % 2 == 0 else 0 ] File \"<stdin>\" , line 1 [ x for x in range ( 1 , 11 ) if x % 2 == 0 else 0 ] ^ SyntaxError : invalid syntax # for \u524d if \u4e0d\u52a0 else >>> [ x if x % 2 == 0 for x in range ( 1 , 11 )] File \"<stdin>\" , line 1 [ x if x % 2 == 0 for x in range ( 1 , 11 )] ^ SyntaxError : invalid syntax","title":"\u9519\u8bef\u793a\u8303"},{"location":"Python/Adavanced/Python-No-Feature-High-Level-Feature/#_6","text":"for...in... \u6700\u5148\uff0c if \u6216 if else \u968f\u540e\uff0c i-expression \u6700\u540e for \u524d if \u5fc5\u52a0 else\uff0c for \u540e if \u4e0d\u52a0 else for \u524d if \u662f\u5bf9 for\u7684\u8f93\u51fa\u8fdb\u884c\u5904\u7406\uff0c for \u540e if \u662f\u5bf9for\u7684\u8f93\u51fa\u8fdb\u884c\u63a7\u5236\u8fc7\u6ee4","title":"\u603b\u7ed3"},{"location":"Python/Adavanced/Python-No-Feature-High-Level-Feature/#generator","text":"","title":"\u751f\u6210\u5668 Generator"},{"location":"Python/Adavanced/Python-No-Feature-High-Level-Feature/#_7","text":"\u5143\u7ec4\u751f\u6210\u5f0f \u751f\u6210\u4e00\u4e2a\u751f\u6210\u5668\u5bf9\u8c61\uff0c\u901a\u8fc7for\u6216\u8005next\u904d\u5386,\u904d\u5386\u540e\uff0c\u539f\u751f\u6210\u5668\u5bf9\u8c61\u5c31\u4e0d\u5b58\u5728\u4e86 ( i-expression for i in Iterations ) ( i-expression for i in Iterations if expression ) ( i-expression if expression else expression for i in Iterations ) ( \u00b7\u00b7\u00b7 for \u00b7\u00b7\u00b7 in \u00b7\u00b7\u00b7 ) ( \u00b7\u00b7\u00b7 for \u00b7\u00b7\u00b7 in \u00b7\u00b7\u00b7 if \u00b7\u00b7\u00b7 ) ( \u00b7\u00b7\u00b7 if \u00b7\u00b7\u00b7 else \u00b7\u00b7\u00b7 for \u00b7\u00b7\u00b7 in \u00b7\u00b7\u00b7 ) \u751f\u6210\u5668\uff0c\u662f\u4e00\u79cd\u4e00\u8fb9\u5faa\u73af\u4e00\u8fb9\u8ba1\u7b97\u7684\u673a\u5236 \u6bd4\u5982\u73b0\u5728\u9700\u8981\u4e00\u4e2a 1\u5230100W\u7684\u5e73\u65b9 \u7684\u5217\u8868\uff0c\u7528\u5217\u8868\u751f\u6210\u5f0f\u8868\u793a\u4e3a [ x * x for x in range(1000000)] \u4f46\u5982\u679c\u53ea\u9700\u8981\u7ecf\u5e38\u8bbf\u95ee\u524d\u9762\u51e0\u4e2a\u5143\u7d20\uff0c\u5219\u6d6a\u8d39\u4e86\u5f88\u5927\u7684\u7a7a\u95f4 \u800c**\u751f\u6210\u5668\u662f\u4fdd\u5b58\u4e86\u4e00\u79cd\u7b97\u6cd5\uff0c\u5b83\u4e0d\u4f1a\u76f4\u63a5\u521b\u5efa100W\u4e2a\u6570\uff0c\u800c\u662f\u7b49\u5230\u8c03\u7528\u7684\u65f6\u5019\u901a\u8fc7\u8ba1\u7b97\u83b7\u5f97** \u4e5f\u5c31\u662f\u8bf4\uff1a\u5217\u8868\u751f\u6210\u5f0f\u662f\u4e00\u79cd\u7f29\u5199\uff0c\u751f\u6210\u5668\u662f\u4e00\u79cd\u7b97\u6cd5 \u751f\u6210\u5668 vs \u5217\u8868\u751f\u6210\u5f0f\uff1a \u5217\u8868\u751f\u6210\u5f0f \u662f\u4f7f\u7528 [] \uff0c\u751f\u6210\u5668 \u662f\u4f7f\u7528 () \u5217\u8868\u751f\u6210\u5f0f\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u53ef\u4ee5\u76f4\u63a5\u5217\u51fa\u6240\u6709\u5143\u7d20\uff1b\u751f\u6210\u5668\u8981\u7528 next() \u6216 \u904d\u5386 \u6765\u5217\u51fa\u6240\u6709\u5143\u7d20 >>> L = [ x * x for x in range ( 10 )] >>> L [ 0 , 1 , 4 , 9 , 16 , 25 , 36 , 49 , 64 , 81 ] >>> G = ( x * x for x in range ( 10 ) ) >>> G < generator object < genexpr > at 0x00000204807D8D60 > >>> next ( G ) 0 >>> next ( G ) 1 >>> next ( G ) 4 >>> next ( G ) 9 >>> next ( G ) 16 >>> next ( G ) 25 >>> next ( G ) 36 >>> next ( G ) 49 >>> next ( G ) 64 >>> next ( G ) 81 >>> next ( G ) Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > StopIteration \u751f\u6210\u5668\u662f\u7b97\u6cd5\uff0c\u662f\u89c4\u5f8b\uff0c\u662f\u8ba1\u7b97\u65b9\u5f0f \uff0c\u901a\u8fc7 next(G) \u8ba1\u7b97\u51faG\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u76f4\u5230\u6700\u540e\u4e00\u4e2a\u5143\u7d20 \u6ca1\u6709\u66f4\u591a\u5143\u7d20\u7684\u65f6\u5019\uff0c\u629b\u51fa StopIteration \u9519\u8bef \u4f46\u662f\u8fd9\u79cd\u4e0d\u65ad\u8c03\u7528 next() \u7684\u65b9\u6cd5\u663e\u7136\u4e0d\u79d1\u5b66\uff0c \u6240\u4ee5\u4e00\u822c\u90fd\u662f\u7528 for\u5faa\u73af G = ( x * x for x in range ( 10 ) ) for i in G : print ( i , end = ' ' ) # Output: 0 1 4 9 16 25 36 49 64 81","title":"\u666e\u901a\u5f62\u5f0f"},{"location":"Python/Adavanced/Python-No-Feature-High-Level-Feature/#_8","text":"\u751f\u6210\u5668\u7684\u53e6\u4e00\u79cd\u5b9e\u73b0\u65b9\u5f0f\u662f \u51fd\u6570\u5f62\u5f0f def funcName (): sth while True : yield sth sth \u666e\u901a\u51fd\u6570\u901a\u8fc7 return\u8bed\u53e5 \u8fd4\u56de \u751f\u6210\u5668\u901a\u8fc7 yield\u8bed\u53e5 \u8fd4\u56de\uff0c\u5e76\u5728\u4e0b\u6b21\u8c03\u7528\u65f6\u4ece yield\u8bed\u53e5 \u5904\u7ee7\u7eed yield \u53ef\u4ee5\u770b\u6210 return \uff0c\u90fd\u662f\u8fd4\u56de\u4e00\u4e2a\u503c\u51fa\u53bb \u53ea\u4e0d\u8fc7\u4f7f\u7528 yield \u5728\u4e0b\u6b21\u8c03\u7528\u65f6\u4f1a\u4ece yield \u5904\u7ee7\u7eed\u3002","title":"\u51fd\u6570\u5f62\u5f0f"},{"location":"Python/Adavanced/Python-No-Feature-High-Level-Feature/#_9","text":"\u4f8b\u5982\u6253\u5370\u6768\u8f89\u4e09\u89d2 1 / \\ 1 1 / \\ / \\ 1 2 1 / \\ / \\ / \\ 1 3 3 1 / \\ / \\ / \\ / \\ 1 4 6 4 1 / \\ / \\ / \\ / \\ / \\ 1 5 10 10 5 1 \u671f\u5f85\u8f93\u51fa\u662f\u8fd9\u6837\u7684 # [1] # [1, 1] # [1, 2, 1] # [1, 3, 3, 1] # [1, 4, 6, 4, 1] # [1, 5, 10, 10, 5, 1] # [1, 6, 15, 20, 15, 6, 1] # [1, 7, 21, 35, 35, 21, 7, 1] # [1, 8, 28, 56, 70, 56, 28, 8, 1] # [1, 9, 36, 84, 126, 126, 84, 36, 9, 1] \u5b9e\u73b0\u601d\u8def\uff1a \u5148\u770b\u6768\u8f89\u4e09\u89d2\u7684\u89c4\u5f8b\uff1a\u5934\u5c3e\u90fd\u662f1\uff0c\u4e2d\u95f4\u662f\u4e0a\u4e00\u5c42 \u7b2cn\u4e2a + \u7b2cn+1\u4e2a \uff0c\u6bcf\u4e00\u5c42\u90fd\u662flist \u800c\u4e14\u7b2c\u4e00\u5c42\u6bd4\u8f83\u7279\u6b8a\uff0c\u662f [1] \u53ef\u4ee5\u5148\u628a\u6768\u8f89\u4e09\u89d2\u6838\u5fc3\u7684\u7b97\u6cd5\u641e\u5b9a\u3002","title":"\u5b9e\u4f8b"},{"location":"Python/Adavanced/Python-No-Feature-High-Level-Feature/#_10","text":"L = [ 1 ] L = [ 1 ] + [ L [ n ] + L [ n + 1 ] for n in range ( len ( L ) - 1 )] + [ 1 ] [1] + [L[n] + L[n+1] for n in range(len(L)-1)] +[1] \u5c31\u662f\u6838\u5fc3\u7b97\u6cd5\u4e86 \u628a\u4ed6\u62c6\u5f00\u6765\u770b\uff0c\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u662f\u7531\u4e2d\u95f4\u6bb5\u52a0\u4e0a\u5934\u5c3e\u7684 [1] \u7ec4\u6210\u7684 \u518d\u770b\u4e2d\u95f4\u6bb5 [L[n] + L[n+1] for n in range(len(L)-1)] \u8fd9\u662f\u4e00\u4e2a\u5217\u8868\u751f\u6210\u5f0f range(len(L)-1) \u4f1a\u751f\u6210 0 1 2 ... \u5047\u8bbe\u5f53\u524d\u4e3a\u7b2c5\u5c42\uff0c\u51c6\u5907\u751f\u6210 [1, 4, 6, 4, 1] \u5f53\u524d\u7684 L \u662f [1, 3, 3, 1]\uff0c\u90a3\u4e48 len(L) \u5219\u662f4\uff0c range(len(L) - 1) \u5219\u7b49\u4ef7\u4e8e range(3) ,\u4f1a\u751f\u6210 0 1 2 [L[n] + L[n+1] for n in range(len(L)-1)] \u5219\u7b49\u4ef7\u4e8e [L[0]+L[1], L[1]+L[2], L[2]+L[3]] \u5219\u7b49\u4ef7\u4e8e [ 1 + 3, 3 + 3, 3 + 1 ] \u5219\u7b49\u4ef7\u4e8e [4, 6, 4] \u6b63\u597d\u5c31\u662f\u4e2d\u95f4\u6bb5 \u518d\u52a0\u4e0a\u5934\u5c3e\u4e24\u4e2a [1]\uff1a [1, 4, 6, 4, 1]","title":"\u6838\u5fc3\u7b97\u6cd5"},{"location":"Python/Adavanced/Python-No-Feature-High-Level-Feature/#_11","text":"\u56e0\u4e3a\u7b2c\u4e00\u5c42 \u7279\u6b8a\uff0c\u6240\u4ee5\u7528\u5c0f\u62ec\u53f7\u5217\u8868\u751f\u6210\u5f0f () \u505a\u4e0d\u51fa\u6765\uff0c\u6539\u7528\u51fd\u6570\u5f62\u5f0f def triangles (): L = [ 1 ] while True : yield L L = [ 1 ] + [ L [ x ] + L [ x + 1 ] for x in range ( len ( L ) - 1 )] + [ 1 ] \u7b2c\u4e00\u6b21\u8fed\u4ee3\u751f\u6210\u5668triangles\u65f6\uff0c\u4f1a\u6267\u884c L = [1] \uff0c\u7136\u540e\u8fdb\u5165\u5faa\u73af\uff0c\u9047\u5230 yield L \u628aL\u8fd4\u56de\u51fa\u53bb \u7b2c\u4e8c\u6b21\u8fed\u4ee3\u751f\u6210\u5668triangles\u65f6\uff0c\u4f1a\u4ece yield L \u5904\u7ee7\u7eed\uff0c \u7136\u540e\u6267\u884c\u6838\u5fc3\u7b97\u6cd5 L = [1] + [L[x]+L[x+1] for x in range(len(L)-1)] + [1] \u4e4b\u540e\u7ee7\u7eed\u5faa\u73af\uff0c\u53c8\u9047\u5230 yield L \uff0c\u628a\u66f4\u65b0\u8fc7\u7684 L \u8fd4\u56de\u51fa\u53bb \u63a5\u7740\u7b2c\u4e09\u6b21\uff0c\u7b2c\u56db\u6b21... \u5176\u5b9e\u6709\u70b9\u7c7b\u4f3c C \u8bed\u8a00\u4e2d\u88ab static \u4fee\u9970\u7684\u5c40\u90e8\u53d8\u91cf\uff0c\u51fd\u6570\u8c03\u7528\u5b8c\u4e0d\u4f1a\u88ab\u9500\u6bc1\uff0c\u7a0b\u5e8f\u7ed3\u675f\u624d\u9500\u6bc1","title":"\u505a\u6210\u751f\u6210\u5668"},{"location":"Python/Adavanced/Python-No-Feature-High-Level-Feature/#_12","text":"for n , t in enumerate ( triangles ()): results . append ( t ) n += 1 if n == 10 : break \u751f\u6210\u5668\u4e5f\u662f\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528 for...in... \u6765\u8fed\u4ee3\u8f93\u51fa enumerate() \u8d4b\u4e88\u4e86\u5bf9\u5e94\u7684\u4e0b\u6807 \u8fd9\u4e2a\u751f\u6210\u5668\u53ef\u4ee5\u65e0\u9650\u5faa\u73af\u4e0b\u53bb\uff0c\u53ef\u4ee5\u83b7\u5f97\u65e0\u7a77\u5c42\uff0c\u8fd9\u91cc\u6253\u537010\u5c42\u4f5c\u4e3a\u793a\u8303\u5373\u53ef \u6700\u540e\u53ef\u4ee5\u5f97\u5230\u671f\u5f85\u8f93\u51fa\uff1a [ 1 ] [ 1 , 1 ] [ 1 , 2 , 1 ] [ 1 , 3 , 3 , 1 ] [ 1 , 4 , 6 , 4 , 1 ] [ 1 , 5 , 10 , 10 , 5 , 1 ] [ 1 , 6 , 15 , 20 , 15 , 6 , 1 ] [ 1 , 7 , 21 , 35 , 35 , 21 , 7 , 1 ] [ 1 , 8 , 28 , 56 , 70 , 56 , 28 , 8 , 1 ] [ 1 , 9 , 36 , 84 , 126 , 126 , 84 , 36 , 9 , 1 ]","title":"\u904d\u5386\u8f93\u51fa"},{"location":"Python/Adavanced/Python-No-Feature-High-Level-Feature/#_13","text":"def triangles (): L = [ 1 ] while True : yield L L = [ 1 ] + [ L [ x ] + L [ x + 1 ] for x in range ( len ( L ) - 1 )] + [ 1 ] results = [] for n , t in enumerate ( triangles ()): results . append ( t ) n += 1 if n == 10 : break for t in results : print ( t ) if results == [ [ 1 ], [ 1 , 1 ], [ 1 , 2 , 1 ], [ 1 , 3 , 3 , 1 ], [ 1 , 4 , 6 , 4 , 1 ], [ 1 , 5 , 10 , 10 , 5 , 1 ], [ 1 , 6 , 15 , 20 , 15 , 6 , 1 ], [ 1 , 7 , 21 , 35 , 35 , 21 , 7 , 1 ], [ 1 , 8 , 28 , 56 , 70 , 56 , 28 , 8 , 1 ], [ 1 , 9 , 36 , 84 , 126 , 126 , 84 , 36 , 9 , 1 ] ]: print ( '\u6d4b\u8bd5\u901a\u8fc7!' ) else : print ( '\u6d4b\u8bd5\u5931\u8d25!' )","title":"\u5b8c\u6574\u4ee3\u7801"},{"location":"Python/Adavanced/Python-No-Feature-High-Level-Feature/#_14","text":"\u666e\u901a\u5f62\u5f0f-\u751f\u6210\u5668\uff1a\u628a\u5217\u8868\u751f\u6210\u5f0f\u7684 [] \u6362\u6210 () \u51fd\u6570\u5f62\u5f0f-\u751f\u6210\u5668\uff1a\u51fd\u6570\u4e2d\u5e26 yield \uff0c\u4e0b\u4e00\u6b21\u8c03\u7528\u65f6\u4f1a\u4ece yield \u5904\u7ee7\u7eed","title":"\u603b\u7ed3"},{"location":"Python/Adavanced/Python-No-Feature-High-Level-Feature/#iterator","text":"\u53ef\u4ee5\u88ab next() \u51fd\u6570\u8c03\u7528\u5e76\u4e0d\u65ad\u8fd4\u56de\u4e0b\u4e00\u4e2a\u503c\u7684\u5bf9\u8c61\u79f0\u4e3a\u8fed\u4ee3**\u5668**\uff1a Iterator \u3002 \u53ef\u8fed\u4ee3**\u5bf9\u8c61**\uff1a \u53ef\u4ee5\u76f4\u63a5\u4f5c\u7528\u4e8e for \u5faa\u73af\u7684\u5bf9\u8c61\u7edf\u79f0\u4e3a\u53ef\u8fed\u4ee3**\u5bf9\u8c61** Iterable \u53ef\u8fed\u4ee3**\u5bf9\u8c61** Iterable \uff1a 1. List\u3001Tuple\u3001Dict\u3001Set\u3001String\uff1b 2. \u751f\u6210\u5668Generator\u3001\u5e26 yield \u7684Generator Function \u53ef\u4ee5\u7528 isinstance(obj, Iterable) \u5224\u65ad\u662f\u5426\u662f\u53ef\u8fed\u4ee3**\u5bf9\u8c61** \u8fed\u4ee3**\u5668**\uff1a \u4e0d\u4f46\u53ef\u4ee5\u4f5c\u7528\u4e8e for \u5faa\u73af\uff0c\u8fd8\u53ef\u4ee5\u88ab next() \u51fd\u6570\u8c03\u7528\u5e76\u4e0d\u65ad\u8fd4\u56de\u4e0b\u4e00\u4e2a\u503c\u5219\u79f0\u4e3a\u8fed\u4ee3**\u5668**\uff1a Iterator \u3002 \u751f\u6210\u5668Generator\u3001\u5e26 yield \u7684Generator Function\u5c31\u662f\u8fed\u4ee3**\u5668** \u53ef\u4ee5\u7528 isinstance(obj, Iterator) \u5224\u65ad\u662f\u5426\u662f\u8fed\u4ee3**\u5668** \u6240\u4ee5\uff1aGenerator\u3001Generator Function \u65e2\u662f Iterator \uff0c\u4e5f\u662f Iterable \u800c List\u3001Tuple\u3001Dict\u3001Set\u3001String \u4ec5\u4ec5\u53ea\u662f Iterable \uff0c \u4f46\u662f \uff0c\u4f7f\u7528 iter() \u51fd\u6570\u53ef\u4ee5\u4f7f\u4ed6\u4eec\u53d8\u6210\u8fed\u4ee3**\u5668** Iterator >>> isinstance ( iter ([]), Iterator ) True >>> isinstance ( iter ( 'Boii' ), Iterator ) True","title":"\u8fed\u4ee3\u5668 Iterator"},{"location":"Python/Adavanced/Python-No-Feature-High-Level-Feature/#_15","text":"Python\u7684 Iterator\u5bf9\u8c61 \u8868\u793a\u7684\u662f\u4e00\u4e2a\u6570\u636e\u6d41\uff0c Iterator\u5bf9\u8c61 \u53ef\u4ee5\u88ab next()\u51fd\u6570 \u8c03\u7528\u5e76\u4e0d\u65ad\u8fd4\u56de\u4e0b\u4e00\u4e2a\u6570\u636e\uff0c\u76f4\u5230\u6ca1\u6709\u6570\u636e\u65f6\u629b\u51fa StopIteration \u9519\u8bef\u3002 \u53ef\u4ee5\u628a\u8fd9\u4e2a\u6570\u636e\u6d41\u770b\u505a\u662f\u4e00\u4e2a\u6709\u5e8f\u5e8f\u5217\uff0c\u4f46\u6211\u4eec\u5374\u4e0d\u80fd\u63d0\u524d\u77e5\u9053\u5e8f\u5217\u7684\u957f\u5ea6 \u53ea\u80fd\u4e0d\u65ad\u901a\u8fc7 next()\u51fd\u6570 \u5b9e\u73b0\u6309\u9700\u8ba1\u7b97\u4e0b\u4e00\u4e2a\u6570\u636e\uff0c\u6240\u4ee5 Iterator \u7684\u8ba1\u7b97\u662f**\u60f0\u6027**\u7684\uff0c\u53ea\u6709\u5728\u9700\u8981\u8fd4\u56de\u4e0b\u4e00\u4e2a\u6570\u636e\u65f6\u5b83\u624d\u4f1a\u8ba1\u7b97","title":"\u8fed\u4ee3\u5668\u7684\u672c\u8d28"},{"location":"Python/Adavanced/Python-No-Feature-High-Level-Feature/#_16","text":"\u53ea\u8981\u7c7b\u4e2d\u5b9e\u73b0\u4e86 __iter__() \u65b9\u6cd5\uff0c\u8fd9\u4e2a\u7c7b\u7684\u5bf9\u8c61\u5c31\u662f\u53ef\u8fed\u4ee3**\u5bf9\u8c61** Iterable \u3002 \u53ea\u8981\u7c7b\u4e2d\u5b9e\u73b0\u4e86 __iter__() \u548c __next__() \u65b9\u6cd5\uff0c\u8fd9\u4e2a\u7c7b\u5c31\u662f\u4e2a\u8fed\u4ee3**\u5668** Iteratorn \u3002 __iter__() \u65b9\u6cd5\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3**\u5668**\u3002 \u90a3\u4e48\u4ee3\u7801\u5c31\u662f\u8fd9\u6837\u5b50\uff1a # 1. \u521b\u5efa\u4e00\u4e2a\u7c7b class Classmate : def __init__ ( self ): self . names = list () def add ( self , value ): self . names . append ( value ) # 2. \u5b9e\u73b0__iter__\u65b9\u6cd5\uff0c\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668 def __iter__ ( self ): \"\"\"\u53ea\u6709\u5b9e\u73b0\u4e86__iter__\u65b9\u6cd5\uff0c\u624d\u80fd\u53ef\u8fed\u4ee3\"\"\" return ClassmateIterator ( self ) # __iter__ \u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\u5bf9\u8c61 # 3. \u521b\u5efa\u4e00\u4e2a\u8fed\u4ee3\u5668 class ClassmateIterator : \"\"\"\u5b9e\u73b0\u4e86__iter__\u548c__next__\u65b9\u6cd5\uff0c\u624d\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668\"\"\" def __init__ ( self , obj ): self . obj = obj self . current_num = 0 # 4. \u8fed\u4ee3\u5668\u9700\u8981\u5b9e\u73b0 __iter__, __next__\u65b9\u6cd5 def __iter__ ( self ): pass def __next__ ( self ): \"\"\"\u5b9e\u73b0\u4e86__iter__\u548c__next__\u65b9\u6cd5\uff0c\u624d\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668\"\"\" if self . current_num < len ( self . obj . names ): res = self . obj . names [ self . current_num ] self . current_num += 1 return res else : raise StopIteration if __name__ == '__main__' : clsm = Classmate () clsm . add ( 123 ) clsm . add ( 456 ) clsm . add ( 789 ) # \u901a\u8fc7\u5faa\u73af\u68c0\u67e5classmate\u5bf9\u8c61\u662f\u5426\u53ef\u8fed\u4ee3 for i in clsm : print ( i ) -------------------------------------------------- # Output: 123 456 789 \u603b\u7ed3\u8d77\u6765\u5c31\u662f\uff1a \u521b\u5efa\u4e00\u4e2a\u7c7b\u5e76\u5b9e\u73b0 __iter__() \u65b9\u6cd5\u53bb\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668 \u521b\u5efa\u4e00\u4e2a\u7c7b\u5e76\u5b9e\u73b0 __iter__() \u548c __next__() \u65b9\u6cd5\uff0c\u4f7f\u5176\u6210\u4e3a\u8fed\u4ee3\u5668\u3002 \u8fd9\u6837\u770b\u8d77\u6765\u597d\u50cf\u4e3a\u4e86\u5b9e\u73b0\u4e00\u4e2a\u8fed\u4ee3\u5668\u53c8\u751f\u6210\u4e86\u4e00\u4e2a\u8fed\u4ee3\u5668 \u65e2\u7136\u6211\u662f\u60f3\u9020\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c __iter__() \u65b9\u6cd5\u6709\u9700\u8981\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\u5bf9\u8c61\uff0c\u90a3\u6211\u8fd4\u56de\u81ea\u5df1\u4e0d\u884c\u5417\uff1f \u53ef\u4ee5\uff01 # 1. \u521b\u5efa\u4e00\u4e2a\u7c7b class Classmate : def __init__ ( self ): self . names = list () self . current_num = 0 def add ( self , value ): self . names . append ( value ) # 2. \u5b9e\u73b0__iter__\u65b9\u6cd5\uff0c\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668 def __iter__ ( self ): \"\"\"\u53ea\u6709\u5b9e\u73b0\u4e86__iter__\u65b9\u6cd5\uff0c\u624d\u80fd\u53ef\u8fed\u4ee3\"\"\" return self # __iter__ \u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\u5bf9\u8c61\uff0c\u8fd9\u91cc\u5c31\u8fd4\u56de\u81ea\u5df1\u5c31\u884c # 3. \u5b9e\u73b0__next__\u65b9\u6cd5\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u4f1a\u5728\u5916\u90e8\u4f7f\u7528next(Iterator)\u65f6\u8c03\u7528\u3002 def __next__ ( self ): \"\"\"\u5b9e\u73b0\u4e86__iter__\u548c__next__\u65b9\u6cd5\uff0c\u624d\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668\"\"\" if self . current_num < len ( self . names ): res = self . names [ self . current_num ] self . current_num += 1 return res else : raise StopIteration if __name__ == '__main__' : clsm = Classmate () clsm . add ( 123 ) clsm . add ( 456 ) clsm . add ( 789 ) # \u901a\u8fc7\u5faa\u73af\u68c0\u67e5classmate\u5bf9\u8c61\u662f\u5426\u53ef\u8fed\u4ee3 for i in clsm : print ( i ) -------------------------------------------------- # Output: 123 456 789","title":"\u81ea\u5b9a\u4e49\u53ef\u8fed\u4ee3\u7c7b"},{"location":"Python/Adavanced/Python-No-Feature-High-Level-Feature/#_17","text":"\u53ef\u8fed\u4ee3\u5bf9\u8c61\u548c\u8fed\u4ee3\u5668\uff0c\u901a\u8fc7\u51fd\u6570 iter() \u8f6c\u6362 \u8fed\u4ee3\u5668\uff1a\u6570\u636e\u6d41\uff0c\u53d8\u957f\uff0c\u60f0\u6027\u7684 \u7ee7\u627f\u5173\u7cfb\uff1aIterable>Iterator>Generator(\u53c2\u8003python doc) Iterable\uff1alist\u3001tuple\u3001dict\u3001set\u3001str\u3001Iterator\u3001Generator\u7b49 Iterator\u8f6c\u5316\u6210Iterator\uff1aIterator=iter(Iterable) \u81ea\u5b9a\u4e49\u8fed\u4ee3\u7c7b\u65f6\u5fc5\u987b\u5b9e\u73b0 __iter__() \u548c __next__() \u65b9\u6cd5 __iter__() \u65b9\u6cd5\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668","title":"\u603b\u7ed3"},{"location":"Python/Adavanced/Python-No-Feature-Utility-Class/","text":"Python\u7684\u9ad8\u7ea7\u7279\u60273 map \u00b6 \u5c06\u4f20\u5165\u7684\u51fd\u6570\u4f5c\u7528\u4e8e\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u4e0a map(function, iterable) \u53c2\u6570\uff1amap \u53ef\u4ee5\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2a\u662f\u51fd\u6570\uff0c\u7b2c\u4e8c\u4e2a\u662f\u53ef\u8fed\u4ee3\u5bf9\u8c61 \u4f5c\u7528\uff1a\u5c06\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u653e\u5728 function \u4e2d\u8fdb\u884c\u5904\u7406 \u8fd4\u56de\uff1amap \u8fd4\u56de\u7684\u662f\u4e00\u4e2a map \u5bf9\u8c61\uff0c\u8fd9\u662f\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61 \u4e3e\u4e2a\u6817\u5b50\uff1a # \u4f7f\u7528map\u793a\u4f8b alpha = [ 'a' , 'b' , 'c' , 'x' , 'y' , 'z' ] m = map ( lambda x : x + 'i' , alpha ) print ( m ) print ( list ( m )) # \u8fd4\u56de\u7684map\u5bf9\u8c61\u7528m\u63a5\u6536\uff0c\u7136\u540e\u8f6c\u6362\u6210\u5217\u8868\uff0c\u6253\u5370\u51fa\u6765 -------------------------------------------------- # Output: < map object at 0x000001D50CEBAD00 > [ 'ai' , 'bi' , 'ci' , 'xi' , 'yi' , 'zi' ] \u5982\u679c\u4e0d\u4f7f\u7528 map \u51fd\u6570\uff0c\u5e94\u8be5\u8fd9\u6837\u5199 # \u4e0d\u9002\u7528map\u7684\u793a\u4f8b alpha = [ 'a' , 'b' , 'c' , 'x' , 'y' , 'z' ] def add_alpha ( list1 ): \"\"\" \u904d\u5386list1\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u52a0\u4e0a i \u7136\u540e\u653e\u8fdb list2 \u4e2d \"\"\" list2 = list () for alpha in list1 : list2 . append ( alpha + 'i' ) return list2 m = add_alpha ( alpha ) print ( m ) print ( type ( m )) -------------------------------------------------- # Output: [ 'ai' , 'bi' , 'ci' , 'xi' , 'yi' , 'zi' ] < class ' list '> \u6548\u679c\u662f\u4e00\u6837\u7684\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u50cf map \u90a3\u4e48\u7b80\u6d01 \u540c\u6837\uff0c\u4e0a\u9762\u7684\u793a\u4f8b\u8fd8\u53ef\u4ee5\u4f7f\u7528\u66f4\u7b80\u6d01\u7684\u529e\u6cd5\uff0c\u7528\u5217\u8868\u751f\u6210\u5f0f \u524d\u63d0\u662f\u5176\u903b\u8f91\u6bd4\u8f83\u7b80\u5355\uff0c\u5982\u679c\u590d\u6742\u8fd8\u662f\u8981\u53e6\u5916\u7f16\u5199 \u64cd\u4f5c\u51fd\u6570\uff0c\u7136\u540e\u4f20\u7ed9 map() alpha = [ 'a' , 'b' , 'c' , 'x' , 'y' , 'z' ] print ([ x + 'i' for x in alpha ]) -------------------------------------------------- # Output: [ 'ai' , 'bi' , 'ci' , 'xi' , 'yi' , 'zi' ] \u6b64\u5916\uff0c\u56e0\u4e3a\u8fd4\u56de\u51fa\u6765\u7684\u5df2\u7ecf\u4e0d\u662f\u539f\u672c\u653e\u8fdb\u53bb\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e86\uff0c\u6240\u4ee5\u5373\u4f7f\u5143\u7ec4\u4e0d\u80fd\u4fee\u6539\uff0cmap \u4e5f\u80fd\u8fdb\u884c\u64cd\u4f5c # \u5bf9\u5143\u7ec4\u8fdb\u884c\u64cd\u4f5c m = ( 12 , 23 , 28 , 19 , 16 , 30 ) print ( 'm source: ' , id ( m )) # \u6253\u5370\u539f\u5143\u7ec4\u7684\u5730\u5740 m = map ( lambda x : x * x , m ) # \u5bf9\u5143\u7ec4\u8fdb\u884c\u64cd\u4f5c print ( 'm operated:' , id ( m )) # \u6253\u5370\u4fee\u6539\u540e\u5143\u7ec4\u7684\u5730\u5740 print ( 'm is a' , m ) # \u6253\u5370\u7ed3\u679c\u663e\u793a m \u662f\u4e2a map\u5bf9\u8c61 print ( list ( m )) # \u628a m \u8f6c\u6210\u5217\u8868\u6253\u5370\u51fa\u6765 -------------------------------------------------- # Output: m source : 2599500087840 m operated : 2599500555024 m is a < map object at 0x0000025D3E4EA310 > [ 144 , 529 , 784 , 361 , 256 , 900 ] filter \u00b6 \u5bf9\u53ef\u8fed\u4ee3\u5bf9\u8c61\u8fdb\u884c\u8fc7\u6ee4 Python2 \u4e2d filter \u662f\u4e2a\u5185\u7f6e\u51fd\u6570, Python3 \u4e2d filter \u662f\u4e2a\u5185\u7f6e\u7c7b filter(condition_function, iterable) \u53c2\u6570\uff1afilter \u53ef\u4ee5\u63a5\u6536\u4e24\u4e2a\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2a\u662f\u51fd\u6570\uff0c\u7b2c\u4e8c\u4e2a\u662f\u53ef\u8fed\u4ee3\u5bf9\u8c61 \u4f5c\u7528\uff1a\u5c06 \u53ef\u8fed\u4ee3\u5bf9\u8c61 \u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u653e\u5728 function \u4e2d\u8fdb\u884c\u8fc7\u6ee4\uff0c\u6ee1\u8db3 function \u4e2d\u7684\u8fc7\u6ee4\u89c4\u5219\u4fbf\u8fd4\u56de \u8fd4\u56de\uff1afilter \u8fd4\u56de\u7684\u662f\u4e00\u4e2a filter\u5bf9\u8c61\uff0c\u8fd9\u662f\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u3002 # filter \u793a\u4f8b f = [ 12 , 23 , 28 , 19 , 16 , 30 ] print ( 'f source: ' , id ( f )) # \u6253\u5370\u539f\u5143\u7ec4\u7684\u5730\u5740 f = filter ( lambda x : x >= 18 , f ) # \u5bf9 \u5217\u8868\u8fdb\u884c\u8fc7\u6ee4\uff0c\u8fc7\u6ee4\u51fa\u5927\u4e8e\u7b49\u4e8e18\u7684\u5143\u7d20 print ( 'f operated:' , id ( f )) # \u6253\u5370\u4fee\u6539\u540e\u5143\u7ec4\u7684\u5730\u5740 print ( 'f is a' , f ) # \u6253\u5370\u7ed3\u679c\u663e\u793a f \u662f\u4e2a filter\u5bf9\u8c61 print ( list ( f )) # \u628a f \u8f6c\u6210\u5217\u8868\u6253\u5370\u51fa\u6765 -------------------------------------------------- # Output: f source : 2379695132608 f operated : 2379696090368 f is a < filter object at 0x0000022A10F0AD00 > [ 23 , 28 , 19 , 30 ] \u540c\u6837\uff0cfilter \u4e5f\u53ef\u4ee5\u5bf9\u5143\u7ec4\u64cd\u4f5c\uff0c\u7b80\u5355\u7684\u8fc7\u6ee4\u89c4\u5219\u4e5f\u53ef\u4ee5\u7528\u5217\u8868\u751f\u6210\u5f0f\u4ee3\u66ff # \u7528\u5217\u8868\u751f\u6210\u5f0f\u5b9e\u73b0\u7b80\u5355\u8fc7\u6ee4 f = [ 12 , 23 , 28 , 19 , 16 , 30 ] print ([ x for x in f if x >= 18 ]) -------------------------------------------------- # Output: [ 23 , 28 , 19 , 30 ] reduce \u00b6 reduce \u4e0d\u662f\u5185\u7f6e\u51fd\u6570\uff0c\u5fc5\u987b\u5bfc\u5165 from functools import reduce reduce(function, sequence, initial=_initial_missing) \u53c2\u6570\uff1areduce \u7b2c\u4e00\u4e2a\u53c2\u6570\u63a5\u6536\u4e00\u4e2a\u5e26\u4e24\u4e2a\u5f62\u53c2\u7684\u51fd\u6570\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u63a5\u6536\u4e00\u4e2a\u5e8f\u5217 \u4f5c\u7528\uff1a\u628a\u51fd\u6570\u4f5c\u7528\u5728\u4e00\u4e2a\u5e8f\u5217\u4e0a\uff0c\u51fd\u6570\u5fc5\u987b\u63a5\u6536\u4e24\u4e2a\u53c2\u6570\uff0creduce \u628a\u7ed3\u679c\u7ee7\u7eed\u548c\u5e8f\u5217\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20\u505a\u7d2f\u8ba1\u8fd0\u7b97 \u8fd4\u56de\uff1a\u4e00\u4e2a\u8ba1\u7b97\u7ed3\u679c \u542c\u8d77\u6765\u6709\u70b9\u7ed5\uff0c\u7528\u793a\u4f8b\u89e3\u91ca from functools import reduce def foo ( x , y ): return x + y scores = [ 100 , 89 , 76 , 87 ] r = reduce ( foo , scores ) print ( r ) -------------------------------------------------- # Output: 352 \u5728 reduce \u4e2d\u4f1a\u4e00\u6b21\u6b21\u8c03\u7528scores\u4e2d\u7684\u5143\u7d20\u653e\u5230foo\u51fd\u6570\u4e2d\u8fdb\u884c\u8ba1\u7b97 \u7b2c\u4e00\u8f6e\uff1ax = 100, y = 89, result = 189 \u7b2c\u4e8c\u8f6e\uff1ax = result, y = 76, result = 265 (\u5373 189 + 76) \u7b2c\u4e09\u8f6e\uff1ax = result, y = 87, result = 352 (\u5373 265 + 87) \u6700\u540e\u628a result \u4e5f\u5c31\u662f 352 \u8fd4\u56de\u51fa\u53bb \u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u7684\u5e8f\u5217\u8fd8\u662f\u6bd4\u8f83\u7b80\u5355\u7684\uff0c\u5982\u679c\u9047\u5230\u590d\u6742\u7684\u6570\u636e\u5bf9\u8c61\uff0c\u5219\u4e0d\u80fd\u8fd9\u4e48\u7b80\u5355\u5904\u7406 from functools import reduce dic = [ { 'name' : 'Alice' , 'age' : 18 , 'score' : 78 }, { 'name' : 'Boii' , 'age' : 17 , 'score' : 89 }, { 'name' : 'Candy' , 'age' : 19 , 'score' : 65 }, { 'name' : 'Dannis' , 'age' : 22 , 'score' : 99 } ] def foo ( x , y ): return x [ 'score' ] + y [ 'score' ] # \u7b2c\u4e8c\u8f6e\u5c31\u4f1a\u51fa\u9519 r = reduce ( foo , dic ) print ( r ) -------------------------------------------------- # Output: Traceback ( most recent call last ): File \"d:/---Programming---/Python/Project/\u7ec3\u4e60/mo2.py\" , line 58 , in < module > r = reduce ( foo , dic ) File \"d:/---Programming---/Python/Project/\u7ec3\u4e60/mo2.py\" , line 55 , in foo return x + y [ 'score' ] TypeError : unsupported operand type ( s ) for + : 'dict' and 'int' \u54e6\u56af\uff0c\u62a5\u9519\u3002 \u62a5\u9519\u4fe1\u606f\u4e3a\uff1aunsupported operand type(s) for +: 'dict' and 'int' \u4e0d\u652f\u6301 \u5b57\u5178\u5bf9\u8c61\u548c\u6574\u578b\u505a \u76f8\u52a0\u64cd\u4f5c \u65e2\u7136\u8bf4\u76f8\u52a0\uff0c\u770b\u6765\u95ee\u9898\u51fa\u5728foo\u51fd\u6570\u8eab\u4e0a \u4ee5\u4e0a\u9762\u7684\u65b9\u5f0f\u518d\u8fdb\u884c\u4e00\u6b21\u63a8\u5bfc \u7b2c\u4e00\u8f6e\uff1a x = {'name': 'Alice', 'age': 18, 'score': 78}, y = {'name': 'Boii', 'age': 17, 'score': 89}, \u5219 x['score'] = 78, y['score'] = 89, result = 167 \u7b2c\u4e8c\u8f6e\uff1a x = result, y = {'name': 'Candy', 'age': 19, 'score': 65}, \u5219 x['score'] =... \u95ee\u9898\u5c31\u51fa\u5728\u8fd9 \u7b2c\u4e00\u6b21\u8ba1\u7b97\u4e4b\u540eresult \u7ed9\u4e86x\uff0cx\u5c31\u6210\u4e86\u6574\u578b\uff0c\u5f53\u7136\u53d6\u4e0d\u51fa score \u89e3\u51b3\u65b9\u6cd5\uff0c\u6539\u4e3a return x + y['score'] from functools import reduce dic = [ { 'name' : 'Alice' , 'age' : 18 , 'score' : 78 }, { 'name' : 'Boii' , 'age' : 17 , 'score' : 89 }, { 'name' : 'Candy' , 'age' : 19 , 'score' : 65 }, { 'name' : 'Dannis' , 'age' : 22 , 'score' : 99 } ] def foo ( x , y ): return x + y [ 'score' ] # \u4e00\u4e2a\u5b57\u5178 + \u4e00\u4e2a\u6574\u578b\uff0c\u4f9d\u7136\u62a5\u9519 r = reduce ( foo , dic ) print ( r ) -------------------------------------------------- # Output: Traceback ( most recent call last ): File \"d:/---Programming---/Python/Project/\u7ec3\u4e60/mo2.py\" , line 58 , in < module > r = reduce ( foo , dic ) File \"d:/---Programming---/Python/Project/\u7ec3\u4e60/mo2.py\" , line 55 , in foo return x + y [ 'score' ] TypeError : unsupported operand type ( s ) for + : 'dict' and 'int' \u4f9d\u7136\u62a5\u9519\uff0c\u8fd9\u56de\u95ee\u9898\u51fa\u5728\u7b2c\u4e00\u8f6e x = {'name': 'Alice', 'age': 18, 'score': 78}\uff0cy['score'] = 89 \u4e00\u4e2a\u662f\u5b57\u5178\u4e00\u4e2a\u662f\u6574\u578b \u89e3\u51b3\u65b9\u6cd5\uff0c\u8bbe\u7f6e\u521d\u59cb\u503c from functools import reduce dic = [ { 'name' : 'Alice' , 'age' : 18 , 'score' : 78 }, { 'name' : 'Boii' , 'age' : 17 , 'score' : 89 }, { 'name' : 'Candy' , 'age' : 19 , 'score' : 65 }, { 'name' : 'Dannis' , 'age' : 22 , 'score' : 99 } ] def foo ( x , y ): return x + y [ 'score' ] r = reduce ( foo , dic , 0 ) print ( r ) -------------------------------------------------- # Output: 331 \u7b2c\u4e00\u8f6e\uff1a x = 0, y = {'name': 'Alice', 'age': 18, 'score': 78}, \u5219 y['score'] = 78, result = 78 \u7b2c\u4e8c\u8f6e\uff1a x = result, y ={'name': 'Boii', 'age': 17, 'score': 89}, \u5219 y['score'] = 89, result = 167 \u7b2c\u4e09\u8f6e\uff1a x = result, y ={'name': 'Candy', 'age': 19, 'score': 65}, \u5219 y['score'] = 65, result = 232 \u7b2c\u56db\u8f6e\uff1a x = result, y ={'name': 'Dannis', 'age': 22, 'score': 99}, \u5219 y['score'] = 99, result = 331 \u6700\u540e\u628a 331 \u8fd4\u56de\u51fa\u53bb","title":"\u5de5\u5177\u7c7b"},{"location":"Python/Adavanced/Python-No-Feature-Utility-Class/#map","text":"\u5c06\u4f20\u5165\u7684\u51fd\u6570\u4f5c\u7528\u4e8e\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u4e0a map(function, iterable) \u53c2\u6570\uff1amap \u53ef\u4ee5\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2a\u662f\u51fd\u6570\uff0c\u7b2c\u4e8c\u4e2a\u662f\u53ef\u8fed\u4ee3\u5bf9\u8c61 \u4f5c\u7528\uff1a\u5c06\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u653e\u5728 function \u4e2d\u8fdb\u884c\u5904\u7406 \u8fd4\u56de\uff1amap \u8fd4\u56de\u7684\u662f\u4e00\u4e2a map \u5bf9\u8c61\uff0c\u8fd9\u662f\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61 \u4e3e\u4e2a\u6817\u5b50\uff1a # \u4f7f\u7528map\u793a\u4f8b alpha = [ 'a' , 'b' , 'c' , 'x' , 'y' , 'z' ] m = map ( lambda x : x + 'i' , alpha ) print ( m ) print ( list ( m )) # \u8fd4\u56de\u7684map\u5bf9\u8c61\u7528m\u63a5\u6536\uff0c\u7136\u540e\u8f6c\u6362\u6210\u5217\u8868\uff0c\u6253\u5370\u51fa\u6765 -------------------------------------------------- # Output: < map object at 0x000001D50CEBAD00 > [ 'ai' , 'bi' , 'ci' , 'xi' , 'yi' , 'zi' ] \u5982\u679c\u4e0d\u4f7f\u7528 map \u51fd\u6570\uff0c\u5e94\u8be5\u8fd9\u6837\u5199 # \u4e0d\u9002\u7528map\u7684\u793a\u4f8b alpha = [ 'a' , 'b' , 'c' , 'x' , 'y' , 'z' ] def add_alpha ( list1 ): \"\"\" \u904d\u5386list1\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u52a0\u4e0a i \u7136\u540e\u653e\u8fdb list2 \u4e2d \"\"\" list2 = list () for alpha in list1 : list2 . append ( alpha + 'i' ) return list2 m = add_alpha ( alpha ) print ( m ) print ( type ( m )) -------------------------------------------------- # Output: [ 'ai' , 'bi' , 'ci' , 'xi' , 'yi' , 'zi' ] < class ' list '> \u6548\u679c\u662f\u4e00\u6837\u7684\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u50cf map \u90a3\u4e48\u7b80\u6d01 \u540c\u6837\uff0c\u4e0a\u9762\u7684\u793a\u4f8b\u8fd8\u53ef\u4ee5\u4f7f\u7528\u66f4\u7b80\u6d01\u7684\u529e\u6cd5\uff0c\u7528\u5217\u8868\u751f\u6210\u5f0f \u524d\u63d0\u662f\u5176\u903b\u8f91\u6bd4\u8f83\u7b80\u5355\uff0c\u5982\u679c\u590d\u6742\u8fd8\u662f\u8981\u53e6\u5916\u7f16\u5199 \u64cd\u4f5c\u51fd\u6570\uff0c\u7136\u540e\u4f20\u7ed9 map() alpha = [ 'a' , 'b' , 'c' , 'x' , 'y' , 'z' ] print ([ x + 'i' for x in alpha ]) -------------------------------------------------- # Output: [ 'ai' , 'bi' , 'ci' , 'xi' , 'yi' , 'zi' ] \u6b64\u5916\uff0c\u56e0\u4e3a\u8fd4\u56de\u51fa\u6765\u7684\u5df2\u7ecf\u4e0d\u662f\u539f\u672c\u653e\u8fdb\u53bb\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e86\uff0c\u6240\u4ee5\u5373\u4f7f\u5143\u7ec4\u4e0d\u80fd\u4fee\u6539\uff0cmap \u4e5f\u80fd\u8fdb\u884c\u64cd\u4f5c # \u5bf9\u5143\u7ec4\u8fdb\u884c\u64cd\u4f5c m = ( 12 , 23 , 28 , 19 , 16 , 30 ) print ( 'm source: ' , id ( m )) # \u6253\u5370\u539f\u5143\u7ec4\u7684\u5730\u5740 m = map ( lambda x : x * x , m ) # \u5bf9\u5143\u7ec4\u8fdb\u884c\u64cd\u4f5c print ( 'm operated:' , id ( m )) # \u6253\u5370\u4fee\u6539\u540e\u5143\u7ec4\u7684\u5730\u5740 print ( 'm is a' , m ) # \u6253\u5370\u7ed3\u679c\u663e\u793a m \u662f\u4e2a map\u5bf9\u8c61 print ( list ( m )) # \u628a m \u8f6c\u6210\u5217\u8868\u6253\u5370\u51fa\u6765 -------------------------------------------------- # Output: m source : 2599500087840 m operated : 2599500555024 m is a < map object at 0x0000025D3E4EA310 > [ 144 , 529 , 784 , 361 , 256 , 900 ]","title":"map"},{"location":"Python/Adavanced/Python-No-Feature-Utility-Class/#filter","text":"\u5bf9\u53ef\u8fed\u4ee3\u5bf9\u8c61\u8fdb\u884c\u8fc7\u6ee4 Python2 \u4e2d filter \u662f\u4e2a\u5185\u7f6e\u51fd\u6570, Python3 \u4e2d filter \u662f\u4e2a\u5185\u7f6e\u7c7b filter(condition_function, iterable) \u53c2\u6570\uff1afilter \u53ef\u4ee5\u63a5\u6536\u4e24\u4e2a\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2a\u662f\u51fd\u6570\uff0c\u7b2c\u4e8c\u4e2a\u662f\u53ef\u8fed\u4ee3\u5bf9\u8c61 \u4f5c\u7528\uff1a\u5c06 \u53ef\u8fed\u4ee3\u5bf9\u8c61 \u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u653e\u5728 function \u4e2d\u8fdb\u884c\u8fc7\u6ee4\uff0c\u6ee1\u8db3 function \u4e2d\u7684\u8fc7\u6ee4\u89c4\u5219\u4fbf\u8fd4\u56de \u8fd4\u56de\uff1afilter \u8fd4\u56de\u7684\u662f\u4e00\u4e2a filter\u5bf9\u8c61\uff0c\u8fd9\u662f\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u3002 # filter \u793a\u4f8b f = [ 12 , 23 , 28 , 19 , 16 , 30 ] print ( 'f source: ' , id ( f )) # \u6253\u5370\u539f\u5143\u7ec4\u7684\u5730\u5740 f = filter ( lambda x : x >= 18 , f ) # \u5bf9 \u5217\u8868\u8fdb\u884c\u8fc7\u6ee4\uff0c\u8fc7\u6ee4\u51fa\u5927\u4e8e\u7b49\u4e8e18\u7684\u5143\u7d20 print ( 'f operated:' , id ( f )) # \u6253\u5370\u4fee\u6539\u540e\u5143\u7ec4\u7684\u5730\u5740 print ( 'f is a' , f ) # \u6253\u5370\u7ed3\u679c\u663e\u793a f \u662f\u4e2a filter\u5bf9\u8c61 print ( list ( f )) # \u628a f \u8f6c\u6210\u5217\u8868\u6253\u5370\u51fa\u6765 -------------------------------------------------- # Output: f source : 2379695132608 f operated : 2379696090368 f is a < filter object at 0x0000022A10F0AD00 > [ 23 , 28 , 19 , 30 ] \u540c\u6837\uff0cfilter \u4e5f\u53ef\u4ee5\u5bf9\u5143\u7ec4\u64cd\u4f5c\uff0c\u7b80\u5355\u7684\u8fc7\u6ee4\u89c4\u5219\u4e5f\u53ef\u4ee5\u7528\u5217\u8868\u751f\u6210\u5f0f\u4ee3\u66ff # \u7528\u5217\u8868\u751f\u6210\u5f0f\u5b9e\u73b0\u7b80\u5355\u8fc7\u6ee4 f = [ 12 , 23 , 28 , 19 , 16 , 30 ] print ([ x for x in f if x >= 18 ]) -------------------------------------------------- # Output: [ 23 , 28 , 19 , 30 ]","title":"filter"},{"location":"Python/Adavanced/Python-No-Feature-Utility-Class/#reduce","text":"reduce \u4e0d\u662f\u5185\u7f6e\u51fd\u6570\uff0c\u5fc5\u987b\u5bfc\u5165 from functools import reduce reduce(function, sequence, initial=_initial_missing) \u53c2\u6570\uff1areduce \u7b2c\u4e00\u4e2a\u53c2\u6570\u63a5\u6536\u4e00\u4e2a\u5e26\u4e24\u4e2a\u5f62\u53c2\u7684\u51fd\u6570\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u63a5\u6536\u4e00\u4e2a\u5e8f\u5217 \u4f5c\u7528\uff1a\u628a\u51fd\u6570\u4f5c\u7528\u5728\u4e00\u4e2a\u5e8f\u5217\u4e0a\uff0c\u51fd\u6570\u5fc5\u987b\u63a5\u6536\u4e24\u4e2a\u53c2\u6570\uff0creduce \u628a\u7ed3\u679c\u7ee7\u7eed\u548c\u5e8f\u5217\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20\u505a\u7d2f\u8ba1\u8fd0\u7b97 \u8fd4\u56de\uff1a\u4e00\u4e2a\u8ba1\u7b97\u7ed3\u679c \u542c\u8d77\u6765\u6709\u70b9\u7ed5\uff0c\u7528\u793a\u4f8b\u89e3\u91ca from functools import reduce def foo ( x , y ): return x + y scores = [ 100 , 89 , 76 , 87 ] r = reduce ( foo , scores ) print ( r ) -------------------------------------------------- # Output: 352 \u5728 reduce \u4e2d\u4f1a\u4e00\u6b21\u6b21\u8c03\u7528scores\u4e2d\u7684\u5143\u7d20\u653e\u5230foo\u51fd\u6570\u4e2d\u8fdb\u884c\u8ba1\u7b97 \u7b2c\u4e00\u8f6e\uff1ax = 100, y = 89, result = 189 \u7b2c\u4e8c\u8f6e\uff1ax = result, y = 76, result = 265 (\u5373 189 + 76) \u7b2c\u4e09\u8f6e\uff1ax = result, y = 87, result = 352 (\u5373 265 + 87) \u6700\u540e\u628a result \u4e5f\u5c31\u662f 352 \u8fd4\u56de\u51fa\u53bb \u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u7684\u5e8f\u5217\u8fd8\u662f\u6bd4\u8f83\u7b80\u5355\u7684\uff0c\u5982\u679c\u9047\u5230\u590d\u6742\u7684\u6570\u636e\u5bf9\u8c61\uff0c\u5219\u4e0d\u80fd\u8fd9\u4e48\u7b80\u5355\u5904\u7406 from functools import reduce dic = [ { 'name' : 'Alice' , 'age' : 18 , 'score' : 78 }, { 'name' : 'Boii' , 'age' : 17 , 'score' : 89 }, { 'name' : 'Candy' , 'age' : 19 , 'score' : 65 }, { 'name' : 'Dannis' , 'age' : 22 , 'score' : 99 } ] def foo ( x , y ): return x [ 'score' ] + y [ 'score' ] # \u7b2c\u4e8c\u8f6e\u5c31\u4f1a\u51fa\u9519 r = reduce ( foo , dic ) print ( r ) -------------------------------------------------- # Output: Traceback ( most recent call last ): File \"d:/---Programming---/Python/Project/\u7ec3\u4e60/mo2.py\" , line 58 , in < module > r = reduce ( foo , dic ) File \"d:/---Programming---/Python/Project/\u7ec3\u4e60/mo2.py\" , line 55 , in foo return x + y [ 'score' ] TypeError : unsupported operand type ( s ) for + : 'dict' and 'int' \u54e6\u56af\uff0c\u62a5\u9519\u3002 \u62a5\u9519\u4fe1\u606f\u4e3a\uff1aunsupported operand type(s) for +: 'dict' and 'int' \u4e0d\u652f\u6301 \u5b57\u5178\u5bf9\u8c61\u548c\u6574\u578b\u505a \u76f8\u52a0\u64cd\u4f5c \u65e2\u7136\u8bf4\u76f8\u52a0\uff0c\u770b\u6765\u95ee\u9898\u51fa\u5728foo\u51fd\u6570\u8eab\u4e0a \u4ee5\u4e0a\u9762\u7684\u65b9\u5f0f\u518d\u8fdb\u884c\u4e00\u6b21\u63a8\u5bfc \u7b2c\u4e00\u8f6e\uff1a x = {'name': 'Alice', 'age': 18, 'score': 78}, y = {'name': 'Boii', 'age': 17, 'score': 89}, \u5219 x['score'] = 78, y['score'] = 89, result = 167 \u7b2c\u4e8c\u8f6e\uff1a x = result, y = {'name': 'Candy', 'age': 19, 'score': 65}, \u5219 x['score'] =... \u95ee\u9898\u5c31\u51fa\u5728\u8fd9 \u7b2c\u4e00\u6b21\u8ba1\u7b97\u4e4b\u540eresult \u7ed9\u4e86x\uff0cx\u5c31\u6210\u4e86\u6574\u578b\uff0c\u5f53\u7136\u53d6\u4e0d\u51fa score \u89e3\u51b3\u65b9\u6cd5\uff0c\u6539\u4e3a return x + y['score'] from functools import reduce dic = [ { 'name' : 'Alice' , 'age' : 18 , 'score' : 78 }, { 'name' : 'Boii' , 'age' : 17 , 'score' : 89 }, { 'name' : 'Candy' , 'age' : 19 , 'score' : 65 }, { 'name' : 'Dannis' , 'age' : 22 , 'score' : 99 } ] def foo ( x , y ): return x + y [ 'score' ] # \u4e00\u4e2a\u5b57\u5178 + \u4e00\u4e2a\u6574\u578b\uff0c\u4f9d\u7136\u62a5\u9519 r = reduce ( foo , dic ) print ( r ) -------------------------------------------------- # Output: Traceback ( most recent call last ): File \"d:/---Programming---/Python/Project/\u7ec3\u4e60/mo2.py\" , line 58 , in < module > r = reduce ( foo , dic ) File \"d:/---Programming---/Python/Project/\u7ec3\u4e60/mo2.py\" , line 55 , in foo return x + y [ 'score' ] TypeError : unsupported operand type ( s ) for + : 'dict' and 'int' \u4f9d\u7136\u62a5\u9519\uff0c\u8fd9\u56de\u95ee\u9898\u51fa\u5728\u7b2c\u4e00\u8f6e x = {'name': 'Alice', 'age': 18, 'score': 78}\uff0cy['score'] = 89 \u4e00\u4e2a\u662f\u5b57\u5178\u4e00\u4e2a\u662f\u6574\u578b \u89e3\u51b3\u65b9\u6cd5\uff0c\u8bbe\u7f6e\u521d\u59cb\u503c from functools import reduce dic = [ { 'name' : 'Alice' , 'age' : 18 , 'score' : 78 }, { 'name' : 'Boii' , 'age' : 17 , 'score' : 89 }, { 'name' : 'Candy' , 'age' : 19 , 'score' : 65 }, { 'name' : 'Dannis' , 'age' : 22 , 'score' : 99 } ] def foo ( x , y ): return x + y [ 'score' ] r = reduce ( foo , dic , 0 ) print ( r ) -------------------------------------------------- # Output: 331 \u7b2c\u4e00\u8f6e\uff1a x = 0, y = {'name': 'Alice', 'age': 18, 'score': 78}, \u5219 y['score'] = 78, result = 78 \u7b2c\u4e8c\u8f6e\uff1a x = result, y ={'name': 'Boii', 'age': 17, 'score': 89}, \u5219 y['score'] = 89, result = 167 \u7b2c\u4e09\u8f6e\uff1a x = result, y ={'name': 'Candy', 'age': 19, 'score': 65}, \u5219 y['score'] = 65, result = 232 \u7b2c\u56db\u8f6e\uff1a x = result, y ={'name': 'Dannis', 'age': 22, 'score': 99}, \u5219 y['score'] = 99, result = 331 \u6700\u540e\u628a 331 \u8fd4\u56de\u51fa\u53bb","title":"reduce"},{"location":"Python/Adavanced/OOP/Python-No-11-Class%26Object/","text":"\u6a21\u5177\u548c\u4ea7\u54c1\uff1a\u7c7b\u548c\u5bf9\u8c61 \u5c01\u88c5\u3001\u7ee7\u627f\u3001\u591a\u6001 Class \u00b6 \u7c7b\u5c31\u50cf\u6a21\u5177\uff0c\u7528\u6a21\u5177\u5236\u4f5c\u51fa\u6765\u7684\u4ea7\u54c1\u53eb\u505a\u5bf9\u8c61 # \u4e0d\u5e26\u7ee7\u627f\u7684\u7c7b class ClsName : # \u7c7b\u540d # \u9759\u6001\u5b57\u6bb5\uff0c\u901a\u8fc7\u7c7b\u8bbf\u95ee print(ClsName.name), \u5728\u5185\u5b58\u4e2d\u53ea\u4fdd\u5b58\u4e00\u4efd name = '' age = 0 # public\u7c7b\u53d8\u91cf\uff0c\u4efb\u4f55\u533a\u57df\u90fd\u80fd\u8bbf\u95ee _weight = 0 # protected\u7c7b\u53d8\u91cf\uff0c\u5f53\u524d\u7c7b\u548c\u5b50\u7c7b\u548c\u540c\u4e00\u6a21\u5757\u4e2d\u624d\u80fd\u8bbf\u95ee __height = 0 # private\u7c7b\u53d8\u91cf\uff0c\u53ea\u6709\u5f53\u524d\u7c7b\u624d\u80fd\u8bbf\u95ee # \u6784\u9020\u65b9\u6cd5 def __init__ ( self ,[ para1 [, para2 [, paraN ]): \"\"\" \u8fd9\u91cc\u662f\u7c7b\u6587\u6863 \"\"\" # \u666e\u901a\u5b57\u6bb5\uff0c\u901a\u8fc7\u5b9e\u4f8b\u6765\u8bbf\u95ee print(clsInstance.para1), \u6bcf\u4e2a\u5b9e\u4f8b\u4e2d\u90fd\u4fdd\u5b58 self . para1 = para1 self . para2 = para2 # \u7c7b\u65b9\u6cd5 def method ( self ): \"\"\" \u8fd9\u91cc\u662f\u65b9\u6cd5\u6ce8\u91ca \"\"\" < statement > # \u7c7b\u7684\u79c1\u6709\u65b9\u6cd5 def __private_method ( self ): < statement > # \u7ee7\u627f\u4e86\u522b\u7684\u7c7b\u7684\u7c7b class ClsName ( BaseClsName1 [, Base2 [, Base3 [, BaseN ]): # \u62ec\u53f7\u5185\u662f\u8fd9\u4e2a\u7c7b\u6240\u7ee7\u627f\u7684\u7236\u7c7b < statement > self \u00b6 \u8fd9\u662f \u65b9\u6cd5 \u548c \u51fd\u6570 \u7684\u533a\u522b\u4e4b\u5904\uff1a\u4e0d\u7ba1\u662f\u4ec0\u4e48\u65b9\u6cd5\u90fd\u8981\u6709 self \u8fd9\u4e2a\u53c2\u6570\uff0c\u518d\u5199\u5176\u4ed6\u53c2\u6570 \u8fd9\u4e2a self \u662f\u552f\u4e00\u7684\u4e0d\u53ef\u7f3a\u5c11\u7684\uff0c\u5b83\u7b49\u4ef7\u4e8ejava \u548c C++\u4e2d\u7684 this \u4f46\u662f\u8c03\u7528\u65b9\u6cd5\u7684\u65f6\u5019\u4e0d\u9700\u8981\u7ed9\u5b83\u8d4b\u503c \u5f53\u8fd9\u6837\u8c03\u7528\u5bf9\u8c61\u7684\u65b9\u6cd5\u65f6\uff1a myobject.method(arg1,arg2) \uff0c\u89e3\u91ca\u5668\u4f1a\u89e3\u91ca\u4e3a MyClass.method(myobject, arg1, arg2) \uff0c \u8fd9\u5c31\u662f\u65b9\u6cd5\u7684\u81ea\u52a8\u4f20\u503c \u7c7b\u53d8\u91cf VS \u5bf9\u8c61\u53d8\u91cf \u00b6 \u7c7b\u53d8\u91cf\u6216\u8005\u8bf4\u9759\u6001\u5b57\u6bb5\u90fd\u662f\u4e00\u4e2a\u4e1c\u897f\u3002\uff08\u7c7b\u53d8\u91cf == \u9759\u6001\u5b57\u6bb5\u3001\u7c7b\u5c5e\u6027\uff09 \u5bf9\u8c61\u53d8\u91cf\u6216\u8005\u8bf4\u666e\u901a\u5b57\u6bb5\u4e5f\u90fd\u662f\u4e00\u4e2a\u4e1c\u897f\u3002\uff08\u5bf9\u8c61\u53d8\u91cf == \u666e\u901a\u5b57\u6bb5\u3001\u5b9e\u4f8b\u5c5e\u6027\uff09 \u987e\u540d\u601d\u4e49\uff0c \u7c7b\u53d8\u91cf \u5c31\u662f\u5c5e\u4e8e \u7c7b \u7684\u53d8\u91cf \u5bf9\u8c61\u53d8\u91cf \u5c31\u662f\u5c5e\u4e8e \u5bf9\u8c61\uff08\u5b9e\u4f8b\uff09 \u7684\u53d8\u91cf \u5dee\u522b \u00b6 \u5b9a\u4e49 \uff1a class Person : # \u7c7b\u53d8\u91cf\u3001\u9759\u6001\u5b57\u6bb5\u3001\u7c7b\u5c5e\u6027 eyes = 2 nose = 1 def __init__ ( self , name , age ): # \u5bf9\u8c61\u53d8\u91cf\u3001\u666e\u901a\u5b57\u6bb5\u3001\u5b9e\u4f8b\u5c5e\u6027 self . name = name self . age = age \u5b9e\u4f8b\u5316 \uff1a # \u521b\u5efa\u4e24\u4e2a\u5bf9\u8c61\uff08\u5b9e\u4f8b\u5316\uff09 p1 = Person ( 'Boii' , 20 ) p2 = Person ( 'Cai' , 18 ) # \u8bbf\u95ee\u9759\u6001\u53d8\u91cf print ( Person . eyes ) # 2 \u901a\u8fc7\u7c7b\u540d\u8bbf\u95ee print ( p1 . eyes ) # 2 \u901a\u8fc7\u5bf9\u8c61\u8bbf\u95ee print ( p2 . nose ) # 1 \u901a\u8fc7\u5bf9\u8c61\u8bbf\u95ee # \u8bbf\u95ee\u5bf9\u8c61\u53d8\u91cf print ( p1 . name ) # Boii print ( p2 . name ) # Cai \u4fee\u6539\u7c7b\u53d8\u91cf\u4ee5\u540e \uff1a # \u4fee\u6539\u9759\u6001\u53d8\u91cf Person . eyes = 1 print ( p1 . eyes ) # 1 print ( p2 . eyes ) # 1 # \u4fee\u6539\u5bf9\u8c61\u53d8\u91cf p1 . age = 50 print ( p1 . age ) # 50 print ( p2 . age ) # 18, \u6539\u4e86\u5bf9\u8c61A\u7684\uff0c\u5bf9\u8c61B\u662f\u4e0d\u53d7\u5f71\u54cd\u7684 \u7c7b\u53d8\u91cf\uff0c\u662f\u5c5e\u4e8e\u7c7b\u7684\uff0c\u5b58\u5728\u7c7b\u90a3\u5757\u5185\u5b58\u4e2d\uff0c\u7c7b\u53d8\u91cf\u88ab\u8be5\u7c7b\u521b\u5efa\u51fa\u6765\u7684\u5bf9\u8c61\u5171\u4eab\u3002 \u4f8b\u5982\u4e0a\u56fe\u4e2d\uff0c\u6700\u4e0a\u9762\u7684\u8868\u683c\u4e2d\u5c31\u662f\u7c7b\u672c\u8eab\u5360\u7684\u5185\u5b58\uff0c\u5176\u4e2d\u5c31\u6709\u7c7b\u53d8\u91cf eyes \u548c nose \u4e0b\u9762\u4e24\u4e2a\u5c0f\u8868\u683c\u5c31\u662f\u5bf9\u8c61 p1 \u548c p2 \u5404\u81ea\u5360\u7684\u7a7a\u95f4\uff0c\u5176\u4e2d\u5c31\u4fdd\u5b58\u7740\u5bf9\u8c61\u53d8\u91cf name\uff0cage \u4fee\u6539\u7c7b\u53d8\u91cf eyes \u548c nose \u540e\uff0c\u5bf9\u8c61 p1 \u548c p2 \u53bb\u8bbf\u95ee eyes \u548c nose \u5c31\u4f1a\u8bbf\u95ee\u5230\u4fee\u6539\u540e\u7684\u503c \u4fee\u6539\u5bf9\u8c61\u53d8\u91cf name \u6216 age \u540e\uff0c\u5bf9\u8c61\u4e4b\u95f4\u4e92\u4e0d\u5f71\u54cd\u3002 \u5047\u8bbe\u4e00\u4e2a\u7c7b\u521b\u5efa\u4e86\u4e24\u4e2a\u5bf9\u8c61A \u548c B \u8fd9\u65f6\u5185\u5b58\u4e2d\u5176\u5b9e\u662f\u6709\u4e09\u5757\u7a7a\u95f4\u7684\uff0c\u4e00\u5757\u662f\u7c7b\u7684\uff0c\u4e00\u5757\u662f\u5bf9\u8c61A\u7684\uff0c\u4e00\u5757\u662f\u5bf9\u8c61B\u7684\u3002 \u5f53\u901a\u8fc7 \u7c7b\u540d.\u7c7b\u53d8\u91cf \u8bbf\u95ee\u7684\u65f6\u5019\uff0c\u662f\u8bbf\u95ee \u7c7b\u90a3\u5757\u5185\u5b58 \u91cc\u7684\u7c7b\u53d8\u91cf\u7684 \u5f53\u901a\u8fc7 \u7c7b\u540d.\u7c7b\u53d8\u91cf \u4fee\u6539\u7684\u65f6\u5019\uff0c\u662f\u4fee\u6539 \u7c7b\u90a3\u5757\u5185\u5b58 \u91cc\u7684\u7c7b\u53d8\u91cf\u7684 \u5f53\u901a\u8fc7 \u5bf9\u8c61.\u7c7b\u53d8\u91cf \u8bbf\u95ee\u7684\u65f6\u5019\uff0c\u662f\u7cfb\u7edf\u8dd1\u53bb \u7c7b\u90a3\u5757\u5185\u5b58 \u91cc\u8bbf\u95ee\u7c7b\u53d8\u91cf\u7684 \u5f53\u901a\u8fc7 \u5bf9\u8c61.\u7c7b\u53d8\u91cf \u4fee\u6539\u7684\u65f6\u5019\uff0c\u662f\u7cfb\u7edf\u8dd1\u53bb \u7c7b\u90a3\u5757\u5185\u5b58 \u91cc**\u590d\u5236**\u7c7b\u53d8\u91cf\u5230 \u5bf9\u8c61\u90a3\u5757\u5185\u5b58 \u91cc\u7684 \u6b64\u65f6\u901a\u8fc7 \u7c7b\u540d.\u7c7b\u53d8\u91cf \u4fee\u6539\uff0c\u518d\u901a\u8fc7 \u5bf9\u8c61.\u7c7b\u53d8\u91cf \u8bbf\u95ee\uff0c\u5176\u5b9e\u8bbf\u95ee\u7684\u662f \u5bf9\u8c61\u81ea\u5df1\u5185\u5b58 \u91cc\u7684\u90a3\u4e2a\u7c7b\u53d8\u91cf class Person : # \u7c7b\u53d8\u91cf\u3001\u9759\u6001\u5b57\u6bb5 eyes = 2 def __init__ ( self , name , age ): self . name = name self . age = age # \u521b\u5efa\u4e24\u4e2a\u5bf9\u8c61 p1 = Person ( 'Boii' , 20 ) p2 = Person ( 'Cai' , 18 ) # \u901a\u8fc7\u7c7b \u8bbf\u95ee\u9759\u6001\u53d8\u91cf print ( Person . eyes ) # 2 # \u901a\u8fc7\u5bf9\u8c61 \u8bbf\u95ee\u9759\u6001\u53d8\u91cf print ( p1 . eyes ) # 2 print ( p2 . eyes ) # 2 ### \u901a\u8fc7\u7c7b \u4fee\u6539\u9759\u6001\u53d8\u91cf Person . eyes = 1 # \u518d\u901a\u8fc7\u7c7b \u8bbf\u95ee\u9759\u6001\u53d8\u91cf print ( Person . eyes ) # 1 # \u518d\u901a\u8fc7\u5bf9\u8c61 \u8bbf\u95ee\u9759\u6001\u53d8\u91cf print ( p1 . eyes ) # 1 print ( p2 . eyes ) # 1 ### \u901a\u8fc7\u5bf9\u8c61 \u4fee\u6539\u5bf9\u8c61\u53d8\u91cf p1 . eyes = 50 # \u518d\u901a\u8fc7\u7c7b \u8bbf\u95ee\u9759\u6001\u53d8\u91cf print ( Person . eyes ) # 1 # \u518d\u901a\u8fc7\u5bf9\u8c61 \u8bbf\u95ee\u9759\u6001\u53d8\u91cf print ( p1 . eyes ) # 50 \u6b64\u65f6personA\u7684\u5185\u5b58\u91cc\u5df2\u7ecf\u6709eyes\u8fd9\u4e2a\u53d8\u91cf\u4e86 print ( p2 . eyes ) # 1 \u6ce8\u610f p1 \u4e2d \u5df2\u7ecf\u591a\u4e86\u4e00\u4e2a eyes \u7684\u53d8\u91cf\u4e86 \u53e6\u5916 \u00b6 \u4f46\u662f\u6ce8\u610f\uff0c\u5982\u679c\u9759\u6001\u53d8\u91cf\u662f\u5b57\u5178 dict\uff0c\u5219\u4e0d\u7ba1\u600e\u4e48\u8bbf\u95ee\u600e\u4e48\u4fee\u6539\uff0c\u5f97\u5230\u7684\u90fd\u662f\u4e00\u81f4\u7684 \u770b\u4e0b\u9762\u7684\u4f8b\u5b50 \u7c7b\u53d8\u91cf\u4e2d\u6709\u4e00\u4e2a\u5b57\u5178\u7c7b\u578b d class Person : # \u7c7b\u53d8\u91cf\u3001\u9759\u6001\u5b57\u6bb5 eyes = 2 d = { 1 : 'A' , 2 : 'B' } def __init__ ( self , name , age ): # \u5bf9\u8c61\u53d8\u91cf\u3001\u666e\u901a\u5b57\u6bb5 self . name = name self . age = age \u521b\u5efa\u4e24\u4e2a\u5bf9\u8c61\uff0c\u7136\u540e\u901a\u8fc7\u5bf9\u8c61\u4fee\u6539\u7c7b\u53d8\u91cf\uff0c\u548c\u901a\u8fc7\u5bf9\u8c61\u4fee\u6539\u5b57\u5178\u7c7b\u578b\u7c7b\u53d8\u91cf # \u521b\u5efa\u4e24\u4e2a\u5bf9\u8c61 p1 = Person ( 'Boii' , 20 ) p2 = Person ( 'Cai' , 18 ) # \u901a\u8fc7\u7c7b \u4fee\u6539\u9759\u6001\u53d8\u91cf, \u6539\u52a8\u7684\u662f\u7c7b\u7a7a\u95f4\u91cc\u7684eyes Person . eyes = 1 # \u901a\u8fc7\u5bf9\u8c61 \u4fee\u6539\u9759\u6001\u53d8\u91cf, \u662f\u590d\u5236\u4e00\u4efdeyes\u5230\u5bf9\u8c61\u7a7a\u95f4\u91cc\u5e76\u4fee\u6539 p1 . eyes = 3 # \u901a\u8fc7\u5bf9\u8c61 \u4fee\u6539\u9759\u6001\u5b57\u5178\u53d8\u91cf, \u5e76\u4e0d\u4f1a\u590d\u5236\u4e00\u4efdd\u5230\u5bf9\u8c61\u7a7a\u95f4\u91cc p1 . d [ 1 ] = 50 \u53ef\u4ee5\u770b\u5230\u901a\u8fc7\u7c7b\u540d\u4fee\u6539\u540e\uff0c\u7c7b\u7a7a\u95f4\u91cc\u7684eyes\u88ab\u4fee\u6539\u4e86 \u901a\u8fc7\u5bf9\u8c61\u4fee\u6539\u7c7b\u53d8\u91cf\u4e4b\u540e\uff0c\u5bf9\u8c61\u7a7a\u95f4\u91cc\u591a\u4e86\u4e00\u4e2a eyes \u53d8\u91cf\u5e76\u4e14\u5df2\u7ecf\u4fee\u6539\u4e86 \u901a\u8fc7\u5bf9\u8c61\u4fee\u6539\u5b57\u5178\u7c7b\u578b\u7c7b\u53d8\u91cf\u4e4b\u540e\uff0c\u6ca1\u6709\u590d\u5236\u4e00\u4efd\uff0c\u800c\u662f\u4fee\u6539\u4e86\u7c7b\u7a7a\u95f4\u91cc\u5b57\u5178\u7684\u503c \u5c0f\u7ed3 \u00b6 \u7c7b\u53d8\u91cf\uff0c\u53c8\u79f0\u9759\u6001\u5b57\u6bb5\u3001\u7c7b\u5c5e\u6027 \u5bf9\u8c61\u53d8\u91cf\uff0c\u53c8\u79f0\u666e\u901a\u5b57\u6bb5\u3001\u5b9e\u4f8b\u5c5e\u6027 \u7c7b\u53d8\u91cf\u662f\u6240\u6709\u5bf9\u8c61\u5171\u6709\u7684\uff0c\u5bf9\u8c61\u53d8\u91cf\u662f\u5bf9\u8c61\u81ea\u5df1\u72ec\u6709\u7684 \u7c7b\u53d8\u91cf\u53ef\u4ee5\u901a\u8fc7 \u7c7b\u540d.\u7c7b\u53d8\u91cf \u3001 \u5bf9\u8c61.\u7c7b\u53d8\u91cf \u8bbf\u95ee \u7c7b\u53d8\u91cf\u53ef\u4ee5\u901a\u8fc7 \u7c7b\u540d.\u7c7b\u53d8\u91cf \u3001 \u5bf9\u8c61.\u7c7b\u53d8\u91cf \u4fee\u6539 \u901a\u8fc7 \u5bf9\u8c61.\u7c7b\u53d8\u91cf \u4fee\u6539\u65f6\uff0c\u9664\u975e\u8be5\u7c7b\u53d8\u91cf\u662f\u5b57\u5178\u7c7b\u578b\uff0c\u5426\u5219\u90fd\u4f1a\u628a\u7c7b\u53d8\u91cf\u590d\u5236\u4e00\u4efd\u5230\u5bf9\u8c61\u4e2d\u53bb \u5b9e\u4f8b\u65b9\u6cd5\u3001\u7c7b\u65b9\u6cd5\u3001\u9759\u6001\u65b9\u6cd5 \u00b6 \u5b9e\u4f8b\u65b9\u6cd5 \u00b6 \u6700\u666e\u901a\u6700\u5e38\u7528\u7684\u65b9\u6cd5\u3002\u7c7b\u4e2d\u5b9a\u4e49\u7684\u975e\u79c1\u6709\u7684\u65b9\u6cd5\uff0c\u6bcf\u4e2a\u5bf9\u8c61\u5728\u88ab\u521b\u5efa\u4ee5\u540e\u90fd\u6709\u81ea\u5df1\u7684\u5b9e\u4f8b\u65b9\u6cd5\u3002 \u5b9a\u4e49\uff1a\u7b2c\u4e00\u4e2a\u53c2\u6570\u5fc5\u987b\u662f\u5b9e\u4f8b\u5bf9\u8c61\uff0c\u8be5\u53c2\u6570\u540d\u4e00\u822c\u7ea6\u5b9a\u4e3a\u201cself\u201d\uff0c\u901a\u8fc7\u5b83\u6765\u4f20\u9012\u5b9e\u4f8b\u7684\u5c5e\u6027\u548c\u65b9\u6cd5\uff08\u4e5f\u53ef\u4ee5\u4f20\u7c7b\u7684\u5c5e\u6027\u548c\u65b9\u6cd5\uff09\uff1b \u5982 p1.instanceMethod() \uff0cPython \u89e3\u91ca\u5668\u4f1a\u628a\u5bf9\u8c61 p1 \u4f20\u7ed9self\u53c2\u6570 \u8c03\u7528\uff1a\u53ea\u80fd\u7531\u5b9e\u4f8b\u5bf9\u8c61\u8c03\u7528\u3002 class Person : ... ... # \u5b9a\u4e49\u5b9e\u4f8b\u65b9\u6cd5 def walk ( self , step ): return f \"I walked { step } steps.\" p1 = Person () print ( p1 . walk ( 5 )) # \u8c03\u7528\u5b9e\u4f8b\u65b9\u6cd5 ------------------------------- Output : I walked 5 steps . \u7c7b\u65b9\u6cd5 @classmethod \u00b6 \u5c5e\u4e8e\u7c7b\u7684\u65b9\u6cd5\uff0c\u548c\u7c7b\u53d8\u91cf\u4e00\u6837\uff0c\u6240\u6709\u5bf9\u8c61\u5171\u4eab\u7c7b\u65b9\u6cd5 \u5b9a\u4e49\uff1a\u4f7f\u7528\u88c5\u9970\u5668 @classmethod \u3002\u7b2c\u4e00\u4e2a\u53c2\u6570\u5fc5\u987b\u662f\u5f53\u524d\u7c7b\u5bf9\u8c61\uff0c\u8be5\u53c2\u6570\u540d\u4e00\u822c\u7ea6\u5b9a\u4e3a\u201ccls\u201d\uff0c\u901a\u8fc7\u5b83\u6765\u4f20\u9012\u7c7b\u7684\u5c5e\u6027\u548c\u65b9\u6cd5\uff08\u4e0d\u80fd\u4f20\u5b9e\u4f8b\u7684\u5c5e\u6027\u548c\u65b9\u6cd5\uff09\uff1b \u5982 p1.clsMethod \u6216 Person.clsMethod \uff0cPython\u89e3\u91ca\u5668\u4f1a\u628a\u7c7b Person \u4f20\u7ed9 cls \u53c2\u6570 \u8c03\u7528\uff1a\u7c7b\u5bf9\u8c61\u6216\u5b9e\u4f8b\u5bf9\u8c61\u90fd\u53ef\u4ee5\u8c03\u7528\u3002 class Person : __count = 0 def __init__ ( self ): Person . __count += 1 ... ... @classmethod def get_count ( cls ): return cls . __count \u9759\u6001\u65b9\u6cd5 @staticmethod \u00b6 \u7528\u6765\u5b58\u653e\u903b\u8f91\u6027\u7684\u4ee3\u7801\uff0c\u903b\u8f91\u4e0a\u5c5e\u4e8e\u7c7b\uff0c\u4f46\u662f\u548c\u7c7b\u672c\u8eab\u6ca1\u6709\u5173\u7cfb\uff0c\u5373\uff0c\u5728\u9759\u6001\u65b9\u6cd5\u4e2d\uff0c\u4e0d\u4f1a\u6d89\u53ca\u5230\u7c7b\u4e2d\u7684\u5c5e\u6027\u548c\u65b9\u6cd5\u7684\u64cd\u4f5c\u3002 \u53ef\u4ee5\u7406\u89e3\u4e3a\u9759\u6001\u65b9\u6cd5\u662f\u4e2a**\u72ec\u7acb\u7684\u3001\u5355\u7eaf\u7684**\u51fd\u6570\uff0c\u4ec5\u4ec5\u6258\u5173\u4e8e\u67d0\u4e2a\u7c7b\u7684\u540d\u79f0\u7a7a\u95f4\u4e2d\uff0c\u4fbf\u4e8e\u4f7f\u7528\u548c\u7ef4\u62a4\u3002 \u5b9a\u4e49\uff1a\u4f7f\u7528\u88c5\u9970\u5668 @staticmethod \u3002\u53c2\u6570\u968f\u610f\uff0c\u6ca1\u6709\u201cself\u201d\u548c\u201ccls\u201d\u53c2\u6570\uff0c\u4f46\u662f\u65b9\u6cd5\u4f53\u4e2d\u4e0d\u80fd\u4f7f\u7528\u7c7b\u6216\u5b9e\u4f8b\u7684\u4efb\u4f55\u5c5e\u6027\u548c\u65b9\u6cd5\uff1b \u8c03\u7528\uff1a\u7c7b\u5bf9\u8c61\u6216\u5b9e\u4f8b\u5bf9\u8c61\u90fd\u53ef\u4ee5\u8c03\u7528\u3002 \u6784\u9020\u65b9\u6cd5 \u00b6 def __init__(self) \u5c31\u662f\u7c7b\u7684\u6784\u9020\u65b9\u6cd5 \u6784\u9020\u65b9\u6cd5\u7684\u5f62\u53c2\u53ef\u4ee5\u67091~N\u4e2a\u3002\u800c \u53c2\u6570self \u662f\u5fc5\u9009\u7684\u9996\u4e2a\u7684\uff0c\u8fd9\u4e2a self \u76f8\u5f53\u4e8e this \u3002 self \u53ef\u4ee5\u6362\u6210\u5176\u4ed6\uff0c\u4f46\u662f\u4e3a\u907f\u514d\u4e89\u8bae\u548c\u6b67\u4e49\uff0c\u6700\u597d\u7528 self \u5bf9\u4e8e\u4e00\u4e2a\u5bf9\u8c61\uff0c\u53ef\u4ee5\u81ea\u7531\u7684\u589e\u52a0\u5c5e\u6027\u6216\u8005\u8bf4\u5bf9\u8c61\u53d8\u91cf\u3001\u666e\u901a\u5b57\u6bb5\uff0c\u4f46\u662f\u901a\u8fc7\u6784\u9020\u65b9\u6cd5\uff0c\u53ef\u4ee5\u5f3a\u5236\u8981\u6c42 \u5728\u5b9e\u4f8b\u5316\u5bf9\u8c61\u65f6\u4f20\u5165\u5fc5\u987b\u7684\u53c2\u6570 \u3002 class Animal : def __init__ ( self ): pass animalA = Animal () # self \u4e0d\u9700\u8981\u4f20\u5165 animalA . weigth = 180 # \u53ef\u4ee5\u81ea\u7531\u7684\u589e\u52a0\u5bf9\u8c61\u5c5e\u6027 class Person : def __init__ ( self , name , age ): pass personA = Person ( 'Boii' , 20 ) # \u521b\u5efa\u5bf9\u8c61\u65f6\u5fc5\u987b\u7ed9 name \u548c age personB = Person () # \uff01\uff01\u9519\u8bef \u8bbf\u95ee\u9650\u5236 \u00b6 \u4e0d\u52a0\u4e0b\u5212\u7ebf\uff0c\u4ec5\u53d8\u91cf\u540d/\u65b9\u6cd5\u540d = public\uff0c\u4efb\u4f55\u533a\u57df\u90fd\u53ef\u4ee5\u8bbf\u95ee \u4e00\u6761\u4e0b\u5212\u7ebf+\u53d8\u91cf\u540d/\u65b9\u6cd5\u540d = protected\uff0c \u5f53\u524d\u7c7b \u548c \u5b50\u7c7b \u548c \u540c\u4e00\u6a21\u5757 \u624d\u53ef\u4ee5\u8bbf\u95ee \u4e24\u6761\u4e0b\u5212\u7ebf+\u53d8\u91cf\u540d/\u65b9\u6cd5\u540d = private\uff0c \u5f53\u524d\u7c7b \u624d\u53ef\u4ee5\u8bbf\u95ee # public \u793a\u4f8b class Person : def __init__ ( self , name ): self . name = name # public \u5c5e\u6027 def show ( self ): print ( self . name ) # \u7c7b\u5185\u90e8\u53ef\u4ee5\u8bbf\u95ee person = Person ( 'Boii' ) print ( person . name ) # Boii \u7c7b\u5916\u90e8\u4e5f\u53ef\u4ee5\u8bbf\u95ee # protected \u793a\u4f8b ## Person.py begin class Person : def __init__ ( self , name ): self . _name = name # protected \u5c5e\u6027 def show ( self ): print ( self . _name ) # \u5f53\u524d\u7c7b\u4e2d\u53ef\u4ee5\u8bbf\u95ee person = Person ( 'Boii' ) person . show () # Boii ## Person.py end ## Student.py begin from Person import Person class Student ( Person ): def __init__ ( self , name , age ): super () . __init__ ( name ) # \u5728\u5b50\u7c7b\u4e2d\u901a\u8fc7 super().__init__() \u8bbf\u95ee self . age = age def show ( self ): print ( f '\u59d3\u540d\uff1a { self . _name } , \u5e74\u9f84\uff1a { self . age } ' ) student = Student ( 'Boii' , 20 ) student . show () # \u59d3\u540d\uff1aBoii, \u5e74\u9f84\uff1a20 ## Student.py end # private \u793a\u4f8b class Person : def __init__ ( self , name ): self . __name = name def show ( self ): print ( self . __name ) def get_name ( self ): return self . __name def set_name ( self , name ): self . __name = name person = Person ( 'Boii' ) print ( person . __name ) # \u9519\u8bef\uff01\uff01\u53ea\u80fd\u5728\u7c7b\u4e2d\u8bbf\u95ee\u79c1\u6709\u53d8\u91cf print ( person . get_name ()) # Boii, \u901a\u8fc7get\u65b9\u6cd5\u8bbf\u95ee person . set_name ( 'Alice' ) # \u901a\u8fc7set\u65b9\u6cd5\u6539\u53d8 print ( person . get_name ()) # Alice private\u53d8\u91cf\u5b9e\u9645\u4e0a\u662f\u56e0\u4e3a python\u89e3\u91ca\u5668\u5bf9\u5916\u628a __name \u6539\u6210\u4e86 _Person__name \uff0c\u4f9d\u7136\u53ef\u4ee5\u901a\u8fc7 person._Person__name \u6765\u8bbf\u95ee\uff0c\u4f46\u662f\u5f3a\u70c8\u5efa\u8bae\u4e0d\u8981\u8fd9\u4e48\u505a\u3002 \u70b9\u51fb\u67e5\u770b\u66f4\u591a\u5173\u4e8e \u8bbf\u95ee\u9650\u5236\u3001\u79c1\u6709\u5316 \u7684\u95ee\u9898 \u5c01\u88c5\u3001\u7ee7\u627f\u548c\u591a\u6001 \u00b6 \u9762\u5411\u5bf9\u8c61\u4e09\u5927\u7279\u6027\uff1a\u5c01\u88c5\u3001\u7ee7\u627f\u3001\u591a\u6001 \u5c01\u88c5 \u628a\u4e00\u7c7b\u4e1c\u897f\u5171\u901a\u7684\u5c5e\u6027\u3001\u884c\u4e3a\u5b9a\u4e49\u5728\u4e00\u4e2a\u7c7b\u4e2d\uff0c\u5c31\u662f\u5c01\u88c5\u3002 \u7ee7\u627f \u4e00\u4e2a\u7c7b\uff0c\u7ee7\u627f\u4e86\u522b\u7684\u7c7b\u4ee5\u540e\uff0c\u8fd9\u4e2a\u7c7b\u53eb\u505a \u5b50\u7c7b \u88ab\u7ee7\u627f\u7684\u7c7b\uff0c\u53eb\u505a \u57fa\u7c7b\u3001\u7236\u7c7b\u3001\u8d85\u7c7b \u7ee7\u627f\u4ee5\u540e\uff0c\u5b50\u7c7b\u5c31\u62e5\u6709\u4e86\u7236\u7c7b\u7684\u5168\u90e8 \u975eprivate \u529f\u80fd Python\u4e2d\uff0c\u5b50\u7c7b\u53ef\u4ee5\u540c\u65f6\u7ee7\u627f\u591a\u4e2a\u7236\u7c7b \u591a\u6001 \u5728\u5b50\u7c7b\u4e2d\u7f16\u5199 \u4e0e\u7236\u7c7b\u540c\u540d \u7684\u65b9\u6cd5\uff0c\u53eb\u505a \u65b9\u6cd5\u91cd\u5199 \uff0c \u9002\u7528\u4e8e\u7236\u7c7b\u529f\u80fd\u4e0d\u80fd\u6ee1\u8db3\u5b50\u7c7b\u8981\u6c42\u65f6\u3002\u8fd9\u79f0\u4e4b\u4e3a**\u591a\u6001** \u5f53\u7236\u7c7b\u5b50\u7c7b\u7684\u65b9\u6cd5\u76f8\u540c\u65f6\uff0c\u603b\u662f\u4f1a\u4f18\u5148\u8c03\u7528\u5b50\u7c7b\u7684\u65b9\u6cd5 class Animal : def run ( self ): print ( 'Running---' ) class Dog ( Animal ): # \u7ee7\u627f\u7236\u7c7b Animal pass class Cat ( Animal ): # \u7ee7\u627f\u7236\u7c7b Animal def run ( self ): # \u65b9\u6cd5\u91cd\u5199 print ( 'Cat is Running---' ) dog = Dog () dog . run () # Running--- cat = Cat () cat . run () # Cat is Running--- \u7ee7\u627f \u00b6 class ClsName(BaseClass) \u5728\u7ee7\u627f\u4e2d\uff0c\u7236\u7c7b\u548c\u5b50\u7c7b\u90fd\u6709\u7684\u65b9\u6cd5\uff08\u540c\u540d\u7684\u65b9\u6cd5\uff09\uff0c\u4f1a\u4f18\u5148\u8c03\u7528\u5b50\u7c7b\u7684\uff1b\u5b50\u7c7b\u6ca1\u6709\u7684\uff0c\u624d\u8c03\u7528\u7236\u7c7b\u7684 \u5b50\u7c7b\u4e2d\u4e0d\u5b9a\u4e49\u6784\u9020\u65b9\u6cd5 __init__() \uff0c\u4f1a\u8c03\u7528\u7236\u7c7b\u7684\u6784\u9020\u65b9\u6cd5 __init__() \u5355\u7ee7\u627f \u00b6 \u5728**\u5355\u7ee7\u627f**\u4e2d\uff1a \u5982\u679c\u7236\u7c7b\u6784\u9020\u65b9\u6cd5\u6709\u53c2\u6570\uff0c\u5219\u5b50\u7c7b\u5fc5\u987b\u6709\u6784\u9020\u65b9\u6cd5\uff0c\u5e76\u8c03\u7528\u7236\u7c7b\u7684\u6784\u9020\u65b9\u6cd5\u4e14\u4f20\u53c2 # \u5b50\u7c7b\u6ca1\u6709__init__\uff0c\u9ed8\u8ba4\u8c03\u7528\u7236\u7c7b\u7684__init__ # \u7236\u7c7b\u7684__init__\u6ca1\u6709\u53c2\u6570\uff0c\u6240\u4ee5\u5b50\u7c7b\u53ef\u4ee5\u4e0d\u5199__init__ class Person : def __init__ ( self ): self . name = \"Anonymity\" self . age = 18 class Student ( Person ): pass s = Student () # \u7236\u7c7b\u7684__init__\u6709\u53c2\u6570\uff0c\u5b50\u7c7b\u5fc5\u987b\u6709__init__\uff0c\u5e76\u8c03\u7528\u7236\u7c7b\u7684__init__\u4e14\u4f20\u53c2 class Person : def __init__ ( self , name ): self . name = name class Student ( Person ): def __init__ ( self , name , age ): self . age = age super () . __init__ ( name ) s = Student ( \"Boii\" , 18 ) \u591a\u7ee7\u627f \u00b6 \u5728**\u591a\u7ee7\u627f**\u4e2d\uff1a \u5982\u679c\u5b50\u7c7b\u6ca1\u6709 __init__() \uff0c\u4f1a\u8c03\u7528\u7b2c\u4e00\u4e2a\u7236\u7c7b\u7684 __init__() \u5982\u679c\u7b2c\u4e00\u4e2a\u7236\u7c7b\u6ca1\u6709 __init__() \uff0c\u4f1a\u627e\u7b2c\u4e8c\u4e2a\u7236\u7c7b\uff0c\u4ee5\u6b64\u7c7b\u63a8... \u5176\u4e2d\uff0c\u53ea\u8981\u4efb\u4f55\u4e00\u4e2a\u7236\u7c7b\u7684 __init__() \u6709\u53c2\u6570\uff0c\u5b50\u7c7b\u5c31\u5fc5\u987b\u6709 __init__() \u6765\u8c03\u7528\u7236\u7c7b\u7684 __init__() \u5982\u679c\u6709\u8d85\u8fc7\u4e00\u4e2a\u7236\u7c7b\u7684 __init__() \u6709\u53c2\u6570\uff0c \u5219\u5e94\u8be5\u5199\u4f5c BaseClsName.__init__(self, paras) \u6216 BaseClsName(type, obj).__init__(paras) class BaseA : def __init__ ( self , name , age ): self . name = name self . age = age class BaseB : def __init__ ( self , gender , nationality ): self . gender = gender self . nationality = nationality class Student ( BaseA , BaseB ): def __init__ ( self , name , age , gender , nationality ): BaseA ( Student , self ) . __init__ ( name , age ) BaseB . __init__ ( self , gender , nationality ) s = Student ( \"Boii\" , 18 , \"male\" , \"China\" ) \u94bb\u77f3\u7ee7\u627f \u00b6 \u83f1\u5f62\u7ee7\u627f\u662f\u6307\uff1a \u5b50\u7c7b sub \u7ee7\u627f\u4e86 \u7236\u7c7b A\uff0cB\uff0c\u800c\u7236\u7c7b A\uff0cB\u53c8\u5171\u540c\u7ee7\u627f\u4e86\u7956\u7236\u7c7b Base [Base] \u2197 \u2196 [A] [B] \u2196 \u2197 [sub] \u7531\u4e8ePython\u7684\u673a\u5236\uff0c\u89e3\u91ca\u5668\u5728\u521b\u5efa sub\u7c7b\u5bf9\u8c61\u65f6\u4f1a\u627e\u5230 A \u7684 \u6784\u9020\u65b9\u6cd5\uff0c\u63a5\u7740\u627e\u5230 Base \u7684\u6784\u9020\u65b9\u6cd5 \u7136\u540e\u518d\u627e B \u7684\u6784\u9020\u65b9\u6cd5\uff0c\u63a5\u7740\u627e\u5230 Base \u7684\u6784\u9020\u65b9\u6cd5\uff0c\u8fd9\u6837\u7b49\u4e8e\u91cd\u590d\u8c03\u7528\u4e86 Base \u7684\u6784\u9020\u65b9\u6cd5 class Base : def __init__ ( self ): print ( \"Base.__init__\" ) class A ( Base ): def __init__ ( self ): Base . __init__ ( self ) print ( \"A.__init__\" ) class B ( Base ): def __init__ ( self ): Base . __init__ ( self ) print ( \"B.__init__\" ) class sub ( A , B ): def __init__ ( self ): A . __init__ ( self ) B . __init__ ( self ) print ( \"sub.__init__\" ) sub () # Output: Base . __init__ A . __init__ Base . __init__ B . __init__ sub . __init__ Base \u7684 __init__() \u88ab\u8c03\u7528\u4e86\u4e24\u6b21 \u8fd9\u65f6\u5019\u53ef\u4ee5\u6539\u5199 sub\uff0cA\uff0cB \u7684 __init__() \u4e3a super().__init__ class Base : def __init__ ( self ): print ( \"Base.__init__\" ) class A ( Base ): def __init__ ( self ): super () . __init__ () print ( \"A.__init__\" ) class B ( Base ): def __init__ ( self ): super () . __init__ () print ( \"B.__init__\" ) class sub ( A , B ): def __init__ ( self ): super () . __init__ () print ( \"sub.__init__\" ) sub () # Output: Base . __init__ B . __init__ A . __init__ sub . __init__ \u591a\u6001\u7684\u597d\u5904 \u00b6 \u5982\u4e0a\u793a\u4f8b\uff0c\u591a\u6001\u4f7f\u5f97\u7ee7\u627f\u4e4b\u540e\u8fd8\u53ef\u4ee5\u8fdb\u884c\u6269\u5c55\uff0c\u4f46\u662f\u591a\u6001\u8fd8\u6709\u53e6\u4e00\u4e2a\u597d\u5904\u3002 \u793a\u4f8b\u4e2d\uff0cAnimal \u662f\u7236\u7c7b\uff0cDog \u548c Cat \u662f\u5b50\u7c7b\u3002 Animal \u662f Animal \u7c7b\u578b\uff1bDog \u662f Dog \u7c7b\u578b\uff0c\u4e5f\u662f Animal \u7c7b\u578b\uff1bCat \u540c\u7406 >>> animal = Animal () >>> dog = Dog () >>> cat = Cat () >>> isinstance ( animal , Animal ) True >>> isinstance ( dog , Dog ) True >>> isinstance ( dog , Animal ) True >>> isinstance ( cat , Cat ) True >>> isinstance ( cat , Animal ) True >>> isinstance ( animal , Dog ) False \u4e00\u53e5\u8bdd\u603b\u7ed3\u5c31\u662f\uff0c\u5bf9\u8c61\u7684\u7c7b\u578b\u662f \u81ea\u8eab\u7c7b+\u7236\u7c7b \uff0c\u800c\u6240\u6709\u7c7b\u90fd\u81ea\u52a8\u7ee7\u627f\u81ea object\u7c7b \u56e0\u4e3a\u8fd9\u4e2a\u7279\u6027\uff0c\u4f7f\u5f97python\u66f4\u52a0\u7075\u6d3b \u5047\u8bbe\u73b0\u5728\u6709\u4e2a\u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u63a5\u53d7\u4e00\u4e2aanimal\u7c7b\u578b\u5bf9\u8c61 def run_twice ( animal ): animal . run () animal . run () \u5728\u8c03\u7528\u7684\u65f6\u5019\uff1a >>> animal = Animal () >>> dog = Dog () >>> cat = Cat () >>> run_twice ( animal ) Running --- Running --- >>> run_twice ( cat ) Cat is Running --- Cat is Running --- >>> run_twice ( dog ) Running --- Running --- \u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u4e2a\u63a5\u53d7Animal\u7c7b\u578b\u7684\u51fd\u6570\uff0c \u4e0d\u4ec5\u53ef\u4ee5\u63a5\u53d7Animal\u7c7b\u53ca\u5176\u5b50\u7c7b\u7684\u5bf9\u8c61\uff0c\u8fd8\u53ef\u4ee5\u6839\u636e\u4f20\u5165\u5bf9\u8c61\u7684\u4e0d\u540c\u5b9e\u73b0\u4e0d\u540c\u7684\u6548\u679c \u5373\u4f7f\u518d\u5b9a\u4e49\u4e00\u4e2a\u7c7b\u7ee7\u627fAnimal\uff0c\u7136\u540e\u521b\u5efa\u5bf9\u8c61\u4f20\u5165 run_twice() \uff0c\u4f9d\u7136\u53ef\u4ee5\u5b9e\u73b0\u76f8\u540c\u7684\u6548\u679c\uff0c\u800c\u4e14\u4e0d\u9700\u8981\u6539\u52a8 run_twice() \u540c\u7406\uff0c\u6240\u6709\u7684\u7c7b\u90fd\u7ee7\u627f\u81ea object \uff0c\u5982\u679c\u662f run_twice(object) \uff0c\u5219\u53ef\u4ee5\u63a5\u53d7\u4efb\u4f55\u7c7b\u578b\u7684\u5bf9\u8c61 \u6240\u4ee5\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u53d8\u91cf\uff0c\u53ea\u9700\u8981\u77e5\u9053\u5176\u7236\u7c7b Animal \uff0c\u5c31\u53ef\u4ee5\u653e\u5fc3\u7684\u4f7f\u7528\uff0c\u5728\u8c03\u7528\u65f6 animal.run() \u662f\u4f5c\u7528\u5728animal\u8fd8\u662fdog\u8fd8\u662fcat\uff0c\u7531\u8fd0\u884c\u65f6\u8be5\u5bf9\u8c61\u7684\u786e\u5207\u7c7b\u578b\u51b3\u5b9a\u3002 \u8c03\u7528\u65b9\u53ea\u7ba1\u8c03\u7528\uff0c\u4e0d\u7ba1\u7ec6\u8282\u3002\u6bcf\u5f53\u65b0\u589e\u4e00\u79cd Animal\u5b50\u7c7b \u65f6\uff0c\u53ea\u8981\u786e\u4fdd run() \u65b9\u6cd5\u7f16\u5199\u6b63\u786e\uff0c\u4e0d\u7528\u7ba1 run_twice() \u600e\u4e48\u5b9e\u73b0\u3002 \u8fd9\u5c31\u662f <\u5f00\u95ed\u539f\u5219> : - \u5bf9\u6269\u5c55\u5f00\u653e\uff1a\u5141\u8bb8\u65b0\u589e Animal \u5b50\u7c7b\uff1b - \u5bf9\u4fee\u6539\u5c01\u95ed\uff1a\u4e0d\u9700\u8981\u4fee\u6539 \u4f9d\u8d56Animal\u7c7b\u578b \u7684 run_twice() \u7b49\u51fd\u6570 \u591a\u6001\u5728\u9759\u6001\u8bed\u8a00\u548c\u52a8\u6001\u8bed\u8a00\u4e2d\u7684\u533a\u522b \u00b6 \u591a\u6001\u7684\u8fd9\u79cd\u7279\u6027\u5728 \u52a8\u6001\u8bed\u8a00 \u548c \u9759\u6001\u8bed\u8a00 \u4e2d\u8fd8\u6709\u4e9b\u533a\u522b. \u50cfjava\u8fd9\u79cd\u9759\u6001\u8bed\u8a00\uff0c run_twice(Animal) \u4f20\u5165\u7684\u5bf9\u8c61\u5fc5\u987b\u662f Animal\u7c7b\u578b\u6216\u5176\u5b50\u7c7b \uff0c\u5426\u5219\u65e0\u6cd5\u8c03\u7528 run() \u65b9\u6cd5\u3002 \u800cpython\u8fd9\u79cd\u52a8\u6001\u8bed\u8a00\uff0c\u5219\u4e0d\u4e00\u5b9a\u8981\u4f20\u5165Animal\u7c7b\u578b\uff0c\u53ea\u9700\u8981\u4fdd\u8bc1\u4f20\u5165\u7684\u5bf9\u8c61\u6709\u4e00\u4e2a run() \u65b9\u6cd5\u5c31\u53ef\u4ee5\u3002 \u8fd9\u5c31\u662f\u52a8\u6001\u8bed\u8a00\u7684 \u201c\u9e2d\u5b50\u7c7b\u578b\u201d \uff0c\u5b83\u5e76\u4e0d\u8981\u6c42\u4e25\u683c\u7684\u7ee7\u627f\u4f53\u7cfb\uff0c\u4e00\u4e2a\u5bf9\u8c61\u53ea\u8981\u201c\u770b\u8d77\u6765\u50cf\u9e2d\u5b50\uff0c\u8d70\u8d77\u8def\u6765\u50cf\u9e2d\u5b50\u201d\uff0c\u90a3\u5b83\u5c31\u53ef\u4ee5\u88ab\u770b\u505a\u662f\u9e2d\u5b50\u3002 class Timer : def run ( self ): print ( 'Start---' ) \u50cf\u8fd9\u4e2a\u7c7b\uff0c\u6ca1\u6709\u7ee7\u627fAnimal\uff0c\u4f46\u4f9d\u7136\u53ef\u4ee5\u4f20\u7ed9 run_twice(Animal) \u3002 \u793a\u4f8b\uff1a class Animal ( object ): # \u7f16\u5199Animal\u7c7b def run ( self ): print ( \"Animal is running...\" ) class Dog ( Animal ): # Dog\u7c7b\u7ee7\u627fAmimal\u7c7b\uff0c\u6ca1\u6709run\u65b9\u6cd5 pass class Cat ( Animal ): # Cat\u7c7b\u7ee7\u627fAnimal\u7c7b\uff0c\u6709\u81ea\u5df1\u7684run\u65b9\u6cd5 def run ( self ): print ( 'Cat is running...' ) pass class Car ( object ): # Car\u7c7b\u4e0d\u7ee7\u627f\uff0c\u6709\u81ea\u5df1\u7684run\u65b9\u6cd5 def run ( self ): print ( 'Car is running...' ) class Stone ( object ): # Stone\u7c7b\u4e0d\u7ee7\u627f\uff0c\u4e5f\u6ca1\u6709run\u65b9\u6cd5 pass def run_twice ( animal ): animal . run () animal . run () run_twice ( Animal ()) run_twice ( Dog ()) run_twice ( Cat ()) run_twice ( Car ()) run_twice ( Stone ()) \u8f93\u51fa\uff1a Animal is running... Animal is running... Animal is running... Animal is running... Cat is running... Cat is running... Car is running... Car is running... AttributeError: 'Stone' object has no attribute 'run'","title":"\u7c7b\u548c\u5bf9\u8c61"},{"location":"Python/Adavanced/OOP/Python-No-11-Class%26Object/#class","text":"\u7c7b\u5c31\u50cf\u6a21\u5177\uff0c\u7528\u6a21\u5177\u5236\u4f5c\u51fa\u6765\u7684\u4ea7\u54c1\u53eb\u505a\u5bf9\u8c61 # \u4e0d\u5e26\u7ee7\u627f\u7684\u7c7b class ClsName : # \u7c7b\u540d # \u9759\u6001\u5b57\u6bb5\uff0c\u901a\u8fc7\u7c7b\u8bbf\u95ee print(ClsName.name), \u5728\u5185\u5b58\u4e2d\u53ea\u4fdd\u5b58\u4e00\u4efd name = '' age = 0 # public\u7c7b\u53d8\u91cf\uff0c\u4efb\u4f55\u533a\u57df\u90fd\u80fd\u8bbf\u95ee _weight = 0 # protected\u7c7b\u53d8\u91cf\uff0c\u5f53\u524d\u7c7b\u548c\u5b50\u7c7b\u548c\u540c\u4e00\u6a21\u5757\u4e2d\u624d\u80fd\u8bbf\u95ee __height = 0 # private\u7c7b\u53d8\u91cf\uff0c\u53ea\u6709\u5f53\u524d\u7c7b\u624d\u80fd\u8bbf\u95ee # \u6784\u9020\u65b9\u6cd5 def __init__ ( self ,[ para1 [, para2 [, paraN ]): \"\"\" \u8fd9\u91cc\u662f\u7c7b\u6587\u6863 \"\"\" # \u666e\u901a\u5b57\u6bb5\uff0c\u901a\u8fc7\u5b9e\u4f8b\u6765\u8bbf\u95ee print(clsInstance.para1), \u6bcf\u4e2a\u5b9e\u4f8b\u4e2d\u90fd\u4fdd\u5b58 self . para1 = para1 self . para2 = para2 # \u7c7b\u65b9\u6cd5 def method ( self ): \"\"\" \u8fd9\u91cc\u662f\u65b9\u6cd5\u6ce8\u91ca \"\"\" < statement > # \u7c7b\u7684\u79c1\u6709\u65b9\u6cd5 def __private_method ( self ): < statement > # \u7ee7\u627f\u4e86\u522b\u7684\u7c7b\u7684\u7c7b class ClsName ( BaseClsName1 [, Base2 [, Base3 [, BaseN ]): # \u62ec\u53f7\u5185\u662f\u8fd9\u4e2a\u7c7b\u6240\u7ee7\u627f\u7684\u7236\u7c7b < statement >","title":"Class"},{"location":"Python/Adavanced/OOP/Python-No-11-Class%26Object/#self","text":"\u8fd9\u662f \u65b9\u6cd5 \u548c \u51fd\u6570 \u7684\u533a\u522b\u4e4b\u5904\uff1a\u4e0d\u7ba1\u662f\u4ec0\u4e48\u65b9\u6cd5\u90fd\u8981\u6709 self \u8fd9\u4e2a\u53c2\u6570\uff0c\u518d\u5199\u5176\u4ed6\u53c2\u6570 \u8fd9\u4e2a self \u662f\u552f\u4e00\u7684\u4e0d\u53ef\u7f3a\u5c11\u7684\uff0c\u5b83\u7b49\u4ef7\u4e8ejava \u548c C++\u4e2d\u7684 this \u4f46\u662f\u8c03\u7528\u65b9\u6cd5\u7684\u65f6\u5019\u4e0d\u9700\u8981\u7ed9\u5b83\u8d4b\u503c \u5f53\u8fd9\u6837\u8c03\u7528\u5bf9\u8c61\u7684\u65b9\u6cd5\u65f6\uff1a myobject.method(arg1,arg2) \uff0c\u89e3\u91ca\u5668\u4f1a\u89e3\u91ca\u4e3a MyClass.method(myobject, arg1, arg2) \uff0c \u8fd9\u5c31\u662f\u65b9\u6cd5\u7684\u81ea\u52a8\u4f20\u503c","title":"self"},{"location":"Python/Adavanced/OOP/Python-No-11-Class%26Object/#vs","text":"\u7c7b\u53d8\u91cf\u6216\u8005\u8bf4\u9759\u6001\u5b57\u6bb5\u90fd\u662f\u4e00\u4e2a\u4e1c\u897f\u3002\uff08\u7c7b\u53d8\u91cf == \u9759\u6001\u5b57\u6bb5\u3001\u7c7b\u5c5e\u6027\uff09 \u5bf9\u8c61\u53d8\u91cf\u6216\u8005\u8bf4\u666e\u901a\u5b57\u6bb5\u4e5f\u90fd\u662f\u4e00\u4e2a\u4e1c\u897f\u3002\uff08\u5bf9\u8c61\u53d8\u91cf == \u666e\u901a\u5b57\u6bb5\u3001\u5b9e\u4f8b\u5c5e\u6027\uff09 \u987e\u540d\u601d\u4e49\uff0c \u7c7b\u53d8\u91cf \u5c31\u662f\u5c5e\u4e8e \u7c7b \u7684\u53d8\u91cf \u5bf9\u8c61\u53d8\u91cf \u5c31\u662f\u5c5e\u4e8e \u5bf9\u8c61\uff08\u5b9e\u4f8b\uff09 \u7684\u53d8\u91cf","title":"\u7c7b\u53d8\u91cf VS \u5bf9\u8c61\u53d8\u91cf"},{"location":"Python/Adavanced/OOP/Python-No-11-Class%26Object/#_1","text":"\u5b9a\u4e49 \uff1a class Person : # \u7c7b\u53d8\u91cf\u3001\u9759\u6001\u5b57\u6bb5\u3001\u7c7b\u5c5e\u6027 eyes = 2 nose = 1 def __init__ ( self , name , age ): # \u5bf9\u8c61\u53d8\u91cf\u3001\u666e\u901a\u5b57\u6bb5\u3001\u5b9e\u4f8b\u5c5e\u6027 self . name = name self . age = age \u5b9e\u4f8b\u5316 \uff1a # \u521b\u5efa\u4e24\u4e2a\u5bf9\u8c61\uff08\u5b9e\u4f8b\u5316\uff09 p1 = Person ( 'Boii' , 20 ) p2 = Person ( 'Cai' , 18 ) # \u8bbf\u95ee\u9759\u6001\u53d8\u91cf print ( Person . eyes ) # 2 \u901a\u8fc7\u7c7b\u540d\u8bbf\u95ee print ( p1 . eyes ) # 2 \u901a\u8fc7\u5bf9\u8c61\u8bbf\u95ee print ( p2 . nose ) # 1 \u901a\u8fc7\u5bf9\u8c61\u8bbf\u95ee # \u8bbf\u95ee\u5bf9\u8c61\u53d8\u91cf print ( p1 . name ) # Boii print ( p2 . name ) # Cai \u4fee\u6539\u7c7b\u53d8\u91cf\u4ee5\u540e \uff1a # \u4fee\u6539\u9759\u6001\u53d8\u91cf Person . eyes = 1 print ( p1 . eyes ) # 1 print ( p2 . eyes ) # 1 # \u4fee\u6539\u5bf9\u8c61\u53d8\u91cf p1 . age = 50 print ( p1 . age ) # 50 print ( p2 . age ) # 18, \u6539\u4e86\u5bf9\u8c61A\u7684\uff0c\u5bf9\u8c61B\u662f\u4e0d\u53d7\u5f71\u54cd\u7684 \u7c7b\u53d8\u91cf\uff0c\u662f\u5c5e\u4e8e\u7c7b\u7684\uff0c\u5b58\u5728\u7c7b\u90a3\u5757\u5185\u5b58\u4e2d\uff0c\u7c7b\u53d8\u91cf\u88ab\u8be5\u7c7b\u521b\u5efa\u51fa\u6765\u7684\u5bf9\u8c61\u5171\u4eab\u3002 \u4f8b\u5982\u4e0a\u56fe\u4e2d\uff0c\u6700\u4e0a\u9762\u7684\u8868\u683c\u4e2d\u5c31\u662f\u7c7b\u672c\u8eab\u5360\u7684\u5185\u5b58\uff0c\u5176\u4e2d\u5c31\u6709\u7c7b\u53d8\u91cf eyes \u548c nose \u4e0b\u9762\u4e24\u4e2a\u5c0f\u8868\u683c\u5c31\u662f\u5bf9\u8c61 p1 \u548c p2 \u5404\u81ea\u5360\u7684\u7a7a\u95f4\uff0c\u5176\u4e2d\u5c31\u4fdd\u5b58\u7740\u5bf9\u8c61\u53d8\u91cf name\uff0cage \u4fee\u6539\u7c7b\u53d8\u91cf eyes \u548c nose \u540e\uff0c\u5bf9\u8c61 p1 \u548c p2 \u53bb\u8bbf\u95ee eyes \u548c nose \u5c31\u4f1a\u8bbf\u95ee\u5230\u4fee\u6539\u540e\u7684\u503c \u4fee\u6539\u5bf9\u8c61\u53d8\u91cf name \u6216 age \u540e\uff0c\u5bf9\u8c61\u4e4b\u95f4\u4e92\u4e0d\u5f71\u54cd\u3002 \u5047\u8bbe\u4e00\u4e2a\u7c7b\u521b\u5efa\u4e86\u4e24\u4e2a\u5bf9\u8c61A \u548c B \u8fd9\u65f6\u5185\u5b58\u4e2d\u5176\u5b9e\u662f\u6709\u4e09\u5757\u7a7a\u95f4\u7684\uff0c\u4e00\u5757\u662f\u7c7b\u7684\uff0c\u4e00\u5757\u662f\u5bf9\u8c61A\u7684\uff0c\u4e00\u5757\u662f\u5bf9\u8c61B\u7684\u3002 \u5f53\u901a\u8fc7 \u7c7b\u540d.\u7c7b\u53d8\u91cf \u8bbf\u95ee\u7684\u65f6\u5019\uff0c\u662f\u8bbf\u95ee \u7c7b\u90a3\u5757\u5185\u5b58 \u91cc\u7684\u7c7b\u53d8\u91cf\u7684 \u5f53\u901a\u8fc7 \u7c7b\u540d.\u7c7b\u53d8\u91cf \u4fee\u6539\u7684\u65f6\u5019\uff0c\u662f\u4fee\u6539 \u7c7b\u90a3\u5757\u5185\u5b58 \u91cc\u7684\u7c7b\u53d8\u91cf\u7684 \u5f53\u901a\u8fc7 \u5bf9\u8c61.\u7c7b\u53d8\u91cf \u8bbf\u95ee\u7684\u65f6\u5019\uff0c\u662f\u7cfb\u7edf\u8dd1\u53bb \u7c7b\u90a3\u5757\u5185\u5b58 \u91cc\u8bbf\u95ee\u7c7b\u53d8\u91cf\u7684 \u5f53\u901a\u8fc7 \u5bf9\u8c61.\u7c7b\u53d8\u91cf \u4fee\u6539\u7684\u65f6\u5019\uff0c\u662f\u7cfb\u7edf\u8dd1\u53bb \u7c7b\u90a3\u5757\u5185\u5b58 \u91cc**\u590d\u5236**\u7c7b\u53d8\u91cf\u5230 \u5bf9\u8c61\u90a3\u5757\u5185\u5b58 \u91cc\u7684 \u6b64\u65f6\u901a\u8fc7 \u7c7b\u540d.\u7c7b\u53d8\u91cf \u4fee\u6539\uff0c\u518d\u901a\u8fc7 \u5bf9\u8c61.\u7c7b\u53d8\u91cf \u8bbf\u95ee\uff0c\u5176\u5b9e\u8bbf\u95ee\u7684\u662f \u5bf9\u8c61\u81ea\u5df1\u5185\u5b58 \u91cc\u7684\u90a3\u4e2a\u7c7b\u53d8\u91cf class Person : # \u7c7b\u53d8\u91cf\u3001\u9759\u6001\u5b57\u6bb5 eyes = 2 def __init__ ( self , name , age ): self . name = name self . age = age # \u521b\u5efa\u4e24\u4e2a\u5bf9\u8c61 p1 = Person ( 'Boii' , 20 ) p2 = Person ( 'Cai' , 18 ) # \u901a\u8fc7\u7c7b \u8bbf\u95ee\u9759\u6001\u53d8\u91cf print ( Person . eyes ) # 2 # \u901a\u8fc7\u5bf9\u8c61 \u8bbf\u95ee\u9759\u6001\u53d8\u91cf print ( p1 . eyes ) # 2 print ( p2 . eyes ) # 2 ### \u901a\u8fc7\u7c7b \u4fee\u6539\u9759\u6001\u53d8\u91cf Person . eyes = 1 # \u518d\u901a\u8fc7\u7c7b \u8bbf\u95ee\u9759\u6001\u53d8\u91cf print ( Person . eyes ) # 1 # \u518d\u901a\u8fc7\u5bf9\u8c61 \u8bbf\u95ee\u9759\u6001\u53d8\u91cf print ( p1 . eyes ) # 1 print ( p2 . eyes ) # 1 ### \u901a\u8fc7\u5bf9\u8c61 \u4fee\u6539\u5bf9\u8c61\u53d8\u91cf p1 . eyes = 50 # \u518d\u901a\u8fc7\u7c7b \u8bbf\u95ee\u9759\u6001\u53d8\u91cf print ( Person . eyes ) # 1 # \u518d\u901a\u8fc7\u5bf9\u8c61 \u8bbf\u95ee\u9759\u6001\u53d8\u91cf print ( p1 . eyes ) # 50 \u6b64\u65f6personA\u7684\u5185\u5b58\u91cc\u5df2\u7ecf\u6709eyes\u8fd9\u4e2a\u53d8\u91cf\u4e86 print ( p2 . eyes ) # 1 \u6ce8\u610f p1 \u4e2d \u5df2\u7ecf\u591a\u4e86\u4e00\u4e2a eyes \u7684\u53d8\u91cf\u4e86","title":"\u5dee\u522b"},{"location":"Python/Adavanced/OOP/Python-No-11-Class%26Object/#_2","text":"\u4f46\u662f\u6ce8\u610f\uff0c\u5982\u679c\u9759\u6001\u53d8\u91cf\u662f\u5b57\u5178 dict\uff0c\u5219\u4e0d\u7ba1\u600e\u4e48\u8bbf\u95ee\u600e\u4e48\u4fee\u6539\uff0c\u5f97\u5230\u7684\u90fd\u662f\u4e00\u81f4\u7684 \u770b\u4e0b\u9762\u7684\u4f8b\u5b50 \u7c7b\u53d8\u91cf\u4e2d\u6709\u4e00\u4e2a\u5b57\u5178\u7c7b\u578b d class Person : # \u7c7b\u53d8\u91cf\u3001\u9759\u6001\u5b57\u6bb5 eyes = 2 d = { 1 : 'A' , 2 : 'B' } def __init__ ( self , name , age ): # \u5bf9\u8c61\u53d8\u91cf\u3001\u666e\u901a\u5b57\u6bb5 self . name = name self . age = age \u521b\u5efa\u4e24\u4e2a\u5bf9\u8c61\uff0c\u7136\u540e\u901a\u8fc7\u5bf9\u8c61\u4fee\u6539\u7c7b\u53d8\u91cf\uff0c\u548c\u901a\u8fc7\u5bf9\u8c61\u4fee\u6539\u5b57\u5178\u7c7b\u578b\u7c7b\u53d8\u91cf # \u521b\u5efa\u4e24\u4e2a\u5bf9\u8c61 p1 = Person ( 'Boii' , 20 ) p2 = Person ( 'Cai' , 18 ) # \u901a\u8fc7\u7c7b \u4fee\u6539\u9759\u6001\u53d8\u91cf, \u6539\u52a8\u7684\u662f\u7c7b\u7a7a\u95f4\u91cc\u7684eyes Person . eyes = 1 # \u901a\u8fc7\u5bf9\u8c61 \u4fee\u6539\u9759\u6001\u53d8\u91cf, \u662f\u590d\u5236\u4e00\u4efdeyes\u5230\u5bf9\u8c61\u7a7a\u95f4\u91cc\u5e76\u4fee\u6539 p1 . eyes = 3 # \u901a\u8fc7\u5bf9\u8c61 \u4fee\u6539\u9759\u6001\u5b57\u5178\u53d8\u91cf, \u5e76\u4e0d\u4f1a\u590d\u5236\u4e00\u4efdd\u5230\u5bf9\u8c61\u7a7a\u95f4\u91cc p1 . d [ 1 ] = 50 \u53ef\u4ee5\u770b\u5230\u901a\u8fc7\u7c7b\u540d\u4fee\u6539\u540e\uff0c\u7c7b\u7a7a\u95f4\u91cc\u7684eyes\u88ab\u4fee\u6539\u4e86 \u901a\u8fc7\u5bf9\u8c61\u4fee\u6539\u7c7b\u53d8\u91cf\u4e4b\u540e\uff0c\u5bf9\u8c61\u7a7a\u95f4\u91cc\u591a\u4e86\u4e00\u4e2a eyes \u53d8\u91cf\u5e76\u4e14\u5df2\u7ecf\u4fee\u6539\u4e86 \u901a\u8fc7\u5bf9\u8c61\u4fee\u6539\u5b57\u5178\u7c7b\u578b\u7c7b\u53d8\u91cf\u4e4b\u540e\uff0c\u6ca1\u6709\u590d\u5236\u4e00\u4efd\uff0c\u800c\u662f\u4fee\u6539\u4e86\u7c7b\u7a7a\u95f4\u91cc\u5b57\u5178\u7684\u503c","title":"\u53e6\u5916"},{"location":"Python/Adavanced/OOP/Python-No-11-Class%26Object/#_3","text":"\u7c7b\u53d8\u91cf\uff0c\u53c8\u79f0\u9759\u6001\u5b57\u6bb5\u3001\u7c7b\u5c5e\u6027 \u5bf9\u8c61\u53d8\u91cf\uff0c\u53c8\u79f0\u666e\u901a\u5b57\u6bb5\u3001\u5b9e\u4f8b\u5c5e\u6027 \u7c7b\u53d8\u91cf\u662f\u6240\u6709\u5bf9\u8c61\u5171\u6709\u7684\uff0c\u5bf9\u8c61\u53d8\u91cf\u662f\u5bf9\u8c61\u81ea\u5df1\u72ec\u6709\u7684 \u7c7b\u53d8\u91cf\u53ef\u4ee5\u901a\u8fc7 \u7c7b\u540d.\u7c7b\u53d8\u91cf \u3001 \u5bf9\u8c61.\u7c7b\u53d8\u91cf \u8bbf\u95ee \u7c7b\u53d8\u91cf\u53ef\u4ee5\u901a\u8fc7 \u7c7b\u540d.\u7c7b\u53d8\u91cf \u3001 \u5bf9\u8c61.\u7c7b\u53d8\u91cf \u4fee\u6539 \u901a\u8fc7 \u5bf9\u8c61.\u7c7b\u53d8\u91cf \u4fee\u6539\u65f6\uff0c\u9664\u975e\u8be5\u7c7b\u53d8\u91cf\u662f\u5b57\u5178\u7c7b\u578b\uff0c\u5426\u5219\u90fd\u4f1a\u628a\u7c7b\u53d8\u91cf\u590d\u5236\u4e00\u4efd\u5230\u5bf9\u8c61\u4e2d\u53bb","title":"\u5c0f\u7ed3"},{"location":"Python/Adavanced/OOP/Python-No-11-Class%26Object/#_4","text":"","title":"\u5b9e\u4f8b\u65b9\u6cd5\u3001\u7c7b\u65b9\u6cd5\u3001\u9759\u6001\u65b9\u6cd5"},{"location":"Python/Adavanced/OOP/Python-No-11-Class%26Object/#_5","text":"\u6700\u666e\u901a\u6700\u5e38\u7528\u7684\u65b9\u6cd5\u3002\u7c7b\u4e2d\u5b9a\u4e49\u7684\u975e\u79c1\u6709\u7684\u65b9\u6cd5\uff0c\u6bcf\u4e2a\u5bf9\u8c61\u5728\u88ab\u521b\u5efa\u4ee5\u540e\u90fd\u6709\u81ea\u5df1\u7684\u5b9e\u4f8b\u65b9\u6cd5\u3002 \u5b9a\u4e49\uff1a\u7b2c\u4e00\u4e2a\u53c2\u6570\u5fc5\u987b\u662f\u5b9e\u4f8b\u5bf9\u8c61\uff0c\u8be5\u53c2\u6570\u540d\u4e00\u822c\u7ea6\u5b9a\u4e3a\u201cself\u201d\uff0c\u901a\u8fc7\u5b83\u6765\u4f20\u9012\u5b9e\u4f8b\u7684\u5c5e\u6027\u548c\u65b9\u6cd5\uff08\u4e5f\u53ef\u4ee5\u4f20\u7c7b\u7684\u5c5e\u6027\u548c\u65b9\u6cd5\uff09\uff1b \u5982 p1.instanceMethod() \uff0cPython \u89e3\u91ca\u5668\u4f1a\u628a\u5bf9\u8c61 p1 \u4f20\u7ed9self\u53c2\u6570 \u8c03\u7528\uff1a\u53ea\u80fd\u7531\u5b9e\u4f8b\u5bf9\u8c61\u8c03\u7528\u3002 class Person : ... ... # \u5b9a\u4e49\u5b9e\u4f8b\u65b9\u6cd5 def walk ( self , step ): return f \"I walked { step } steps.\" p1 = Person () print ( p1 . walk ( 5 )) # \u8c03\u7528\u5b9e\u4f8b\u65b9\u6cd5 ------------------------------- Output : I walked 5 steps .","title":"\u5b9e\u4f8b\u65b9\u6cd5"},{"location":"Python/Adavanced/OOP/Python-No-11-Class%26Object/#classmethod","text":"\u5c5e\u4e8e\u7c7b\u7684\u65b9\u6cd5\uff0c\u548c\u7c7b\u53d8\u91cf\u4e00\u6837\uff0c\u6240\u6709\u5bf9\u8c61\u5171\u4eab\u7c7b\u65b9\u6cd5 \u5b9a\u4e49\uff1a\u4f7f\u7528\u88c5\u9970\u5668 @classmethod \u3002\u7b2c\u4e00\u4e2a\u53c2\u6570\u5fc5\u987b\u662f\u5f53\u524d\u7c7b\u5bf9\u8c61\uff0c\u8be5\u53c2\u6570\u540d\u4e00\u822c\u7ea6\u5b9a\u4e3a\u201ccls\u201d\uff0c\u901a\u8fc7\u5b83\u6765\u4f20\u9012\u7c7b\u7684\u5c5e\u6027\u548c\u65b9\u6cd5\uff08\u4e0d\u80fd\u4f20\u5b9e\u4f8b\u7684\u5c5e\u6027\u548c\u65b9\u6cd5\uff09\uff1b \u5982 p1.clsMethod \u6216 Person.clsMethod \uff0cPython\u89e3\u91ca\u5668\u4f1a\u628a\u7c7b Person \u4f20\u7ed9 cls \u53c2\u6570 \u8c03\u7528\uff1a\u7c7b\u5bf9\u8c61\u6216\u5b9e\u4f8b\u5bf9\u8c61\u90fd\u53ef\u4ee5\u8c03\u7528\u3002 class Person : __count = 0 def __init__ ( self ): Person . __count += 1 ... ... @classmethod def get_count ( cls ): return cls . __count","title":"\u7c7b\u65b9\u6cd5 @classmethod"},{"location":"Python/Adavanced/OOP/Python-No-11-Class%26Object/#staticmethod","text":"\u7528\u6765\u5b58\u653e\u903b\u8f91\u6027\u7684\u4ee3\u7801\uff0c\u903b\u8f91\u4e0a\u5c5e\u4e8e\u7c7b\uff0c\u4f46\u662f\u548c\u7c7b\u672c\u8eab\u6ca1\u6709\u5173\u7cfb\uff0c\u5373\uff0c\u5728\u9759\u6001\u65b9\u6cd5\u4e2d\uff0c\u4e0d\u4f1a\u6d89\u53ca\u5230\u7c7b\u4e2d\u7684\u5c5e\u6027\u548c\u65b9\u6cd5\u7684\u64cd\u4f5c\u3002 \u53ef\u4ee5\u7406\u89e3\u4e3a\u9759\u6001\u65b9\u6cd5\u662f\u4e2a**\u72ec\u7acb\u7684\u3001\u5355\u7eaf\u7684**\u51fd\u6570\uff0c\u4ec5\u4ec5\u6258\u5173\u4e8e\u67d0\u4e2a\u7c7b\u7684\u540d\u79f0\u7a7a\u95f4\u4e2d\uff0c\u4fbf\u4e8e\u4f7f\u7528\u548c\u7ef4\u62a4\u3002 \u5b9a\u4e49\uff1a\u4f7f\u7528\u88c5\u9970\u5668 @staticmethod \u3002\u53c2\u6570\u968f\u610f\uff0c\u6ca1\u6709\u201cself\u201d\u548c\u201ccls\u201d\u53c2\u6570\uff0c\u4f46\u662f\u65b9\u6cd5\u4f53\u4e2d\u4e0d\u80fd\u4f7f\u7528\u7c7b\u6216\u5b9e\u4f8b\u7684\u4efb\u4f55\u5c5e\u6027\u548c\u65b9\u6cd5\uff1b \u8c03\u7528\uff1a\u7c7b\u5bf9\u8c61\u6216\u5b9e\u4f8b\u5bf9\u8c61\u90fd\u53ef\u4ee5\u8c03\u7528\u3002","title":"\u9759\u6001\u65b9\u6cd5 @staticmethod"},{"location":"Python/Adavanced/OOP/Python-No-11-Class%26Object/#_6","text":"def __init__(self) \u5c31\u662f\u7c7b\u7684\u6784\u9020\u65b9\u6cd5 \u6784\u9020\u65b9\u6cd5\u7684\u5f62\u53c2\u53ef\u4ee5\u67091~N\u4e2a\u3002\u800c \u53c2\u6570self \u662f\u5fc5\u9009\u7684\u9996\u4e2a\u7684\uff0c\u8fd9\u4e2a self \u76f8\u5f53\u4e8e this \u3002 self \u53ef\u4ee5\u6362\u6210\u5176\u4ed6\uff0c\u4f46\u662f\u4e3a\u907f\u514d\u4e89\u8bae\u548c\u6b67\u4e49\uff0c\u6700\u597d\u7528 self \u5bf9\u4e8e\u4e00\u4e2a\u5bf9\u8c61\uff0c\u53ef\u4ee5\u81ea\u7531\u7684\u589e\u52a0\u5c5e\u6027\u6216\u8005\u8bf4\u5bf9\u8c61\u53d8\u91cf\u3001\u666e\u901a\u5b57\u6bb5\uff0c\u4f46\u662f\u901a\u8fc7\u6784\u9020\u65b9\u6cd5\uff0c\u53ef\u4ee5\u5f3a\u5236\u8981\u6c42 \u5728\u5b9e\u4f8b\u5316\u5bf9\u8c61\u65f6\u4f20\u5165\u5fc5\u987b\u7684\u53c2\u6570 \u3002 class Animal : def __init__ ( self ): pass animalA = Animal () # self \u4e0d\u9700\u8981\u4f20\u5165 animalA . weigth = 180 # \u53ef\u4ee5\u81ea\u7531\u7684\u589e\u52a0\u5bf9\u8c61\u5c5e\u6027 class Person : def __init__ ( self , name , age ): pass personA = Person ( 'Boii' , 20 ) # \u521b\u5efa\u5bf9\u8c61\u65f6\u5fc5\u987b\u7ed9 name \u548c age personB = Person () # \uff01\uff01\u9519\u8bef","title":"\u6784\u9020\u65b9\u6cd5"},{"location":"Python/Adavanced/OOP/Python-No-11-Class%26Object/#_7","text":"\u4e0d\u52a0\u4e0b\u5212\u7ebf\uff0c\u4ec5\u53d8\u91cf\u540d/\u65b9\u6cd5\u540d = public\uff0c\u4efb\u4f55\u533a\u57df\u90fd\u53ef\u4ee5\u8bbf\u95ee \u4e00\u6761\u4e0b\u5212\u7ebf+\u53d8\u91cf\u540d/\u65b9\u6cd5\u540d = protected\uff0c \u5f53\u524d\u7c7b \u548c \u5b50\u7c7b \u548c \u540c\u4e00\u6a21\u5757 \u624d\u53ef\u4ee5\u8bbf\u95ee \u4e24\u6761\u4e0b\u5212\u7ebf+\u53d8\u91cf\u540d/\u65b9\u6cd5\u540d = private\uff0c \u5f53\u524d\u7c7b \u624d\u53ef\u4ee5\u8bbf\u95ee # public \u793a\u4f8b class Person : def __init__ ( self , name ): self . name = name # public \u5c5e\u6027 def show ( self ): print ( self . name ) # \u7c7b\u5185\u90e8\u53ef\u4ee5\u8bbf\u95ee person = Person ( 'Boii' ) print ( person . name ) # Boii \u7c7b\u5916\u90e8\u4e5f\u53ef\u4ee5\u8bbf\u95ee # protected \u793a\u4f8b ## Person.py begin class Person : def __init__ ( self , name ): self . _name = name # protected \u5c5e\u6027 def show ( self ): print ( self . _name ) # \u5f53\u524d\u7c7b\u4e2d\u53ef\u4ee5\u8bbf\u95ee person = Person ( 'Boii' ) person . show () # Boii ## Person.py end ## Student.py begin from Person import Person class Student ( Person ): def __init__ ( self , name , age ): super () . __init__ ( name ) # \u5728\u5b50\u7c7b\u4e2d\u901a\u8fc7 super().__init__() \u8bbf\u95ee self . age = age def show ( self ): print ( f '\u59d3\u540d\uff1a { self . _name } , \u5e74\u9f84\uff1a { self . age } ' ) student = Student ( 'Boii' , 20 ) student . show () # \u59d3\u540d\uff1aBoii, \u5e74\u9f84\uff1a20 ## Student.py end # private \u793a\u4f8b class Person : def __init__ ( self , name ): self . __name = name def show ( self ): print ( self . __name ) def get_name ( self ): return self . __name def set_name ( self , name ): self . __name = name person = Person ( 'Boii' ) print ( person . __name ) # \u9519\u8bef\uff01\uff01\u53ea\u80fd\u5728\u7c7b\u4e2d\u8bbf\u95ee\u79c1\u6709\u53d8\u91cf print ( person . get_name ()) # Boii, \u901a\u8fc7get\u65b9\u6cd5\u8bbf\u95ee person . set_name ( 'Alice' ) # \u901a\u8fc7set\u65b9\u6cd5\u6539\u53d8 print ( person . get_name ()) # Alice private\u53d8\u91cf\u5b9e\u9645\u4e0a\u662f\u56e0\u4e3a python\u89e3\u91ca\u5668\u5bf9\u5916\u628a __name \u6539\u6210\u4e86 _Person__name \uff0c\u4f9d\u7136\u53ef\u4ee5\u901a\u8fc7 person._Person__name \u6765\u8bbf\u95ee\uff0c\u4f46\u662f\u5f3a\u70c8\u5efa\u8bae\u4e0d\u8981\u8fd9\u4e48\u505a\u3002 \u70b9\u51fb\u67e5\u770b\u66f4\u591a\u5173\u4e8e \u8bbf\u95ee\u9650\u5236\u3001\u79c1\u6709\u5316 \u7684\u95ee\u9898","title":"\u8bbf\u95ee\u9650\u5236"},{"location":"Python/Adavanced/OOP/Python-No-11-Class%26Object/#_8","text":"\u9762\u5411\u5bf9\u8c61\u4e09\u5927\u7279\u6027\uff1a\u5c01\u88c5\u3001\u7ee7\u627f\u3001\u591a\u6001 \u5c01\u88c5 \u628a\u4e00\u7c7b\u4e1c\u897f\u5171\u901a\u7684\u5c5e\u6027\u3001\u884c\u4e3a\u5b9a\u4e49\u5728\u4e00\u4e2a\u7c7b\u4e2d\uff0c\u5c31\u662f\u5c01\u88c5\u3002 \u7ee7\u627f \u4e00\u4e2a\u7c7b\uff0c\u7ee7\u627f\u4e86\u522b\u7684\u7c7b\u4ee5\u540e\uff0c\u8fd9\u4e2a\u7c7b\u53eb\u505a \u5b50\u7c7b \u88ab\u7ee7\u627f\u7684\u7c7b\uff0c\u53eb\u505a \u57fa\u7c7b\u3001\u7236\u7c7b\u3001\u8d85\u7c7b \u7ee7\u627f\u4ee5\u540e\uff0c\u5b50\u7c7b\u5c31\u62e5\u6709\u4e86\u7236\u7c7b\u7684\u5168\u90e8 \u975eprivate \u529f\u80fd Python\u4e2d\uff0c\u5b50\u7c7b\u53ef\u4ee5\u540c\u65f6\u7ee7\u627f\u591a\u4e2a\u7236\u7c7b \u591a\u6001 \u5728\u5b50\u7c7b\u4e2d\u7f16\u5199 \u4e0e\u7236\u7c7b\u540c\u540d \u7684\u65b9\u6cd5\uff0c\u53eb\u505a \u65b9\u6cd5\u91cd\u5199 \uff0c \u9002\u7528\u4e8e\u7236\u7c7b\u529f\u80fd\u4e0d\u80fd\u6ee1\u8db3\u5b50\u7c7b\u8981\u6c42\u65f6\u3002\u8fd9\u79f0\u4e4b\u4e3a**\u591a\u6001** \u5f53\u7236\u7c7b\u5b50\u7c7b\u7684\u65b9\u6cd5\u76f8\u540c\u65f6\uff0c\u603b\u662f\u4f1a\u4f18\u5148\u8c03\u7528\u5b50\u7c7b\u7684\u65b9\u6cd5 class Animal : def run ( self ): print ( 'Running---' ) class Dog ( Animal ): # \u7ee7\u627f\u7236\u7c7b Animal pass class Cat ( Animal ): # \u7ee7\u627f\u7236\u7c7b Animal def run ( self ): # \u65b9\u6cd5\u91cd\u5199 print ( 'Cat is Running---' ) dog = Dog () dog . run () # Running--- cat = Cat () cat . run () # Cat is Running---","title":"\u5c01\u88c5\u3001\u7ee7\u627f\u548c\u591a\u6001"},{"location":"Python/Adavanced/OOP/Python-No-11-Class%26Object/#_9","text":"class ClsName(BaseClass) \u5728\u7ee7\u627f\u4e2d\uff0c\u7236\u7c7b\u548c\u5b50\u7c7b\u90fd\u6709\u7684\u65b9\u6cd5\uff08\u540c\u540d\u7684\u65b9\u6cd5\uff09\uff0c\u4f1a\u4f18\u5148\u8c03\u7528\u5b50\u7c7b\u7684\uff1b\u5b50\u7c7b\u6ca1\u6709\u7684\uff0c\u624d\u8c03\u7528\u7236\u7c7b\u7684 \u5b50\u7c7b\u4e2d\u4e0d\u5b9a\u4e49\u6784\u9020\u65b9\u6cd5 __init__() \uff0c\u4f1a\u8c03\u7528\u7236\u7c7b\u7684\u6784\u9020\u65b9\u6cd5 __init__()","title":"\u7ee7\u627f"},{"location":"Python/Adavanced/OOP/Python-No-11-Class%26Object/#_10","text":"\u5728**\u5355\u7ee7\u627f**\u4e2d\uff1a \u5982\u679c\u7236\u7c7b\u6784\u9020\u65b9\u6cd5\u6709\u53c2\u6570\uff0c\u5219\u5b50\u7c7b\u5fc5\u987b\u6709\u6784\u9020\u65b9\u6cd5\uff0c\u5e76\u8c03\u7528\u7236\u7c7b\u7684\u6784\u9020\u65b9\u6cd5\u4e14\u4f20\u53c2 # \u5b50\u7c7b\u6ca1\u6709__init__\uff0c\u9ed8\u8ba4\u8c03\u7528\u7236\u7c7b\u7684__init__ # \u7236\u7c7b\u7684__init__\u6ca1\u6709\u53c2\u6570\uff0c\u6240\u4ee5\u5b50\u7c7b\u53ef\u4ee5\u4e0d\u5199__init__ class Person : def __init__ ( self ): self . name = \"Anonymity\" self . age = 18 class Student ( Person ): pass s = Student () # \u7236\u7c7b\u7684__init__\u6709\u53c2\u6570\uff0c\u5b50\u7c7b\u5fc5\u987b\u6709__init__\uff0c\u5e76\u8c03\u7528\u7236\u7c7b\u7684__init__\u4e14\u4f20\u53c2 class Person : def __init__ ( self , name ): self . name = name class Student ( Person ): def __init__ ( self , name , age ): self . age = age super () . __init__ ( name ) s = Student ( \"Boii\" , 18 )","title":"\u5355\u7ee7\u627f"},{"location":"Python/Adavanced/OOP/Python-No-11-Class%26Object/#_11","text":"\u5728**\u591a\u7ee7\u627f**\u4e2d\uff1a \u5982\u679c\u5b50\u7c7b\u6ca1\u6709 __init__() \uff0c\u4f1a\u8c03\u7528\u7b2c\u4e00\u4e2a\u7236\u7c7b\u7684 __init__() \u5982\u679c\u7b2c\u4e00\u4e2a\u7236\u7c7b\u6ca1\u6709 __init__() \uff0c\u4f1a\u627e\u7b2c\u4e8c\u4e2a\u7236\u7c7b\uff0c\u4ee5\u6b64\u7c7b\u63a8... \u5176\u4e2d\uff0c\u53ea\u8981\u4efb\u4f55\u4e00\u4e2a\u7236\u7c7b\u7684 __init__() \u6709\u53c2\u6570\uff0c\u5b50\u7c7b\u5c31\u5fc5\u987b\u6709 __init__() \u6765\u8c03\u7528\u7236\u7c7b\u7684 __init__() \u5982\u679c\u6709\u8d85\u8fc7\u4e00\u4e2a\u7236\u7c7b\u7684 __init__() \u6709\u53c2\u6570\uff0c \u5219\u5e94\u8be5\u5199\u4f5c BaseClsName.__init__(self, paras) \u6216 BaseClsName(type, obj).__init__(paras) class BaseA : def __init__ ( self , name , age ): self . name = name self . age = age class BaseB : def __init__ ( self , gender , nationality ): self . gender = gender self . nationality = nationality class Student ( BaseA , BaseB ): def __init__ ( self , name , age , gender , nationality ): BaseA ( Student , self ) . __init__ ( name , age ) BaseB . __init__ ( self , gender , nationality ) s = Student ( \"Boii\" , 18 , \"male\" , \"China\" )","title":"\u591a\u7ee7\u627f"},{"location":"Python/Adavanced/OOP/Python-No-11-Class%26Object/#_12","text":"\u83f1\u5f62\u7ee7\u627f\u662f\u6307\uff1a \u5b50\u7c7b sub \u7ee7\u627f\u4e86 \u7236\u7c7b A\uff0cB\uff0c\u800c\u7236\u7c7b A\uff0cB\u53c8\u5171\u540c\u7ee7\u627f\u4e86\u7956\u7236\u7c7b Base [Base] \u2197 \u2196 [A] [B] \u2196 \u2197 [sub] \u7531\u4e8ePython\u7684\u673a\u5236\uff0c\u89e3\u91ca\u5668\u5728\u521b\u5efa sub\u7c7b\u5bf9\u8c61\u65f6\u4f1a\u627e\u5230 A \u7684 \u6784\u9020\u65b9\u6cd5\uff0c\u63a5\u7740\u627e\u5230 Base \u7684\u6784\u9020\u65b9\u6cd5 \u7136\u540e\u518d\u627e B \u7684\u6784\u9020\u65b9\u6cd5\uff0c\u63a5\u7740\u627e\u5230 Base \u7684\u6784\u9020\u65b9\u6cd5\uff0c\u8fd9\u6837\u7b49\u4e8e\u91cd\u590d\u8c03\u7528\u4e86 Base \u7684\u6784\u9020\u65b9\u6cd5 class Base : def __init__ ( self ): print ( \"Base.__init__\" ) class A ( Base ): def __init__ ( self ): Base . __init__ ( self ) print ( \"A.__init__\" ) class B ( Base ): def __init__ ( self ): Base . __init__ ( self ) print ( \"B.__init__\" ) class sub ( A , B ): def __init__ ( self ): A . __init__ ( self ) B . __init__ ( self ) print ( \"sub.__init__\" ) sub () # Output: Base . __init__ A . __init__ Base . __init__ B . __init__ sub . __init__ Base \u7684 __init__() \u88ab\u8c03\u7528\u4e86\u4e24\u6b21 \u8fd9\u65f6\u5019\u53ef\u4ee5\u6539\u5199 sub\uff0cA\uff0cB \u7684 __init__() \u4e3a super().__init__ class Base : def __init__ ( self ): print ( \"Base.__init__\" ) class A ( Base ): def __init__ ( self ): super () . __init__ () print ( \"A.__init__\" ) class B ( Base ): def __init__ ( self ): super () . __init__ () print ( \"B.__init__\" ) class sub ( A , B ): def __init__ ( self ): super () . __init__ () print ( \"sub.__init__\" ) sub () # Output: Base . __init__ B . __init__ A . __init__ sub . __init__","title":"\u94bb\u77f3\u7ee7\u627f"},{"location":"Python/Adavanced/OOP/Python-No-11-Class%26Object/#_13","text":"\u5982\u4e0a\u793a\u4f8b\uff0c\u591a\u6001\u4f7f\u5f97\u7ee7\u627f\u4e4b\u540e\u8fd8\u53ef\u4ee5\u8fdb\u884c\u6269\u5c55\uff0c\u4f46\u662f\u591a\u6001\u8fd8\u6709\u53e6\u4e00\u4e2a\u597d\u5904\u3002 \u793a\u4f8b\u4e2d\uff0cAnimal \u662f\u7236\u7c7b\uff0cDog \u548c Cat \u662f\u5b50\u7c7b\u3002 Animal \u662f Animal \u7c7b\u578b\uff1bDog \u662f Dog \u7c7b\u578b\uff0c\u4e5f\u662f Animal \u7c7b\u578b\uff1bCat \u540c\u7406 >>> animal = Animal () >>> dog = Dog () >>> cat = Cat () >>> isinstance ( animal , Animal ) True >>> isinstance ( dog , Dog ) True >>> isinstance ( dog , Animal ) True >>> isinstance ( cat , Cat ) True >>> isinstance ( cat , Animal ) True >>> isinstance ( animal , Dog ) False \u4e00\u53e5\u8bdd\u603b\u7ed3\u5c31\u662f\uff0c\u5bf9\u8c61\u7684\u7c7b\u578b\u662f \u81ea\u8eab\u7c7b+\u7236\u7c7b \uff0c\u800c\u6240\u6709\u7c7b\u90fd\u81ea\u52a8\u7ee7\u627f\u81ea object\u7c7b \u56e0\u4e3a\u8fd9\u4e2a\u7279\u6027\uff0c\u4f7f\u5f97python\u66f4\u52a0\u7075\u6d3b \u5047\u8bbe\u73b0\u5728\u6709\u4e2a\u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u63a5\u53d7\u4e00\u4e2aanimal\u7c7b\u578b\u5bf9\u8c61 def run_twice ( animal ): animal . run () animal . run () \u5728\u8c03\u7528\u7684\u65f6\u5019\uff1a >>> animal = Animal () >>> dog = Dog () >>> cat = Cat () >>> run_twice ( animal ) Running --- Running --- >>> run_twice ( cat ) Cat is Running --- Cat is Running --- >>> run_twice ( dog ) Running --- Running --- \u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u4e2a\u63a5\u53d7Animal\u7c7b\u578b\u7684\u51fd\u6570\uff0c \u4e0d\u4ec5\u53ef\u4ee5\u63a5\u53d7Animal\u7c7b\u53ca\u5176\u5b50\u7c7b\u7684\u5bf9\u8c61\uff0c\u8fd8\u53ef\u4ee5\u6839\u636e\u4f20\u5165\u5bf9\u8c61\u7684\u4e0d\u540c\u5b9e\u73b0\u4e0d\u540c\u7684\u6548\u679c \u5373\u4f7f\u518d\u5b9a\u4e49\u4e00\u4e2a\u7c7b\u7ee7\u627fAnimal\uff0c\u7136\u540e\u521b\u5efa\u5bf9\u8c61\u4f20\u5165 run_twice() \uff0c\u4f9d\u7136\u53ef\u4ee5\u5b9e\u73b0\u76f8\u540c\u7684\u6548\u679c\uff0c\u800c\u4e14\u4e0d\u9700\u8981\u6539\u52a8 run_twice() \u540c\u7406\uff0c\u6240\u6709\u7684\u7c7b\u90fd\u7ee7\u627f\u81ea object \uff0c\u5982\u679c\u662f run_twice(object) \uff0c\u5219\u53ef\u4ee5\u63a5\u53d7\u4efb\u4f55\u7c7b\u578b\u7684\u5bf9\u8c61 \u6240\u4ee5\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u53d8\u91cf\uff0c\u53ea\u9700\u8981\u77e5\u9053\u5176\u7236\u7c7b Animal \uff0c\u5c31\u53ef\u4ee5\u653e\u5fc3\u7684\u4f7f\u7528\uff0c\u5728\u8c03\u7528\u65f6 animal.run() \u662f\u4f5c\u7528\u5728animal\u8fd8\u662fdog\u8fd8\u662fcat\uff0c\u7531\u8fd0\u884c\u65f6\u8be5\u5bf9\u8c61\u7684\u786e\u5207\u7c7b\u578b\u51b3\u5b9a\u3002 \u8c03\u7528\u65b9\u53ea\u7ba1\u8c03\u7528\uff0c\u4e0d\u7ba1\u7ec6\u8282\u3002\u6bcf\u5f53\u65b0\u589e\u4e00\u79cd Animal\u5b50\u7c7b \u65f6\uff0c\u53ea\u8981\u786e\u4fdd run() \u65b9\u6cd5\u7f16\u5199\u6b63\u786e\uff0c\u4e0d\u7528\u7ba1 run_twice() \u600e\u4e48\u5b9e\u73b0\u3002 \u8fd9\u5c31\u662f <\u5f00\u95ed\u539f\u5219> : - \u5bf9\u6269\u5c55\u5f00\u653e\uff1a\u5141\u8bb8\u65b0\u589e Animal \u5b50\u7c7b\uff1b - \u5bf9\u4fee\u6539\u5c01\u95ed\uff1a\u4e0d\u9700\u8981\u4fee\u6539 \u4f9d\u8d56Animal\u7c7b\u578b \u7684 run_twice() \u7b49\u51fd\u6570","title":"\u591a\u6001\u7684\u597d\u5904"},{"location":"Python/Adavanced/OOP/Python-No-11-Class%26Object/#_14","text":"\u591a\u6001\u7684\u8fd9\u79cd\u7279\u6027\u5728 \u52a8\u6001\u8bed\u8a00 \u548c \u9759\u6001\u8bed\u8a00 \u4e2d\u8fd8\u6709\u4e9b\u533a\u522b. \u50cfjava\u8fd9\u79cd\u9759\u6001\u8bed\u8a00\uff0c run_twice(Animal) \u4f20\u5165\u7684\u5bf9\u8c61\u5fc5\u987b\u662f Animal\u7c7b\u578b\u6216\u5176\u5b50\u7c7b \uff0c\u5426\u5219\u65e0\u6cd5\u8c03\u7528 run() \u65b9\u6cd5\u3002 \u800cpython\u8fd9\u79cd\u52a8\u6001\u8bed\u8a00\uff0c\u5219\u4e0d\u4e00\u5b9a\u8981\u4f20\u5165Animal\u7c7b\u578b\uff0c\u53ea\u9700\u8981\u4fdd\u8bc1\u4f20\u5165\u7684\u5bf9\u8c61\u6709\u4e00\u4e2a run() \u65b9\u6cd5\u5c31\u53ef\u4ee5\u3002 \u8fd9\u5c31\u662f\u52a8\u6001\u8bed\u8a00\u7684 \u201c\u9e2d\u5b50\u7c7b\u578b\u201d \uff0c\u5b83\u5e76\u4e0d\u8981\u6c42\u4e25\u683c\u7684\u7ee7\u627f\u4f53\u7cfb\uff0c\u4e00\u4e2a\u5bf9\u8c61\u53ea\u8981\u201c\u770b\u8d77\u6765\u50cf\u9e2d\u5b50\uff0c\u8d70\u8d77\u8def\u6765\u50cf\u9e2d\u5b50\u201d\uff0c\u90a3\u5b83\u5c31\u53ef\u4ee5\u88ab\u770b\u505a\u662f\u9e2d\u5b50\u3002 class Timer : def run ( self ): print ( 'Start---' ) \u50cf\u8fd9\u4e2a\u7c7b\uff0c\u6ca1\u6709\u7ee7\u627fAnimal\uff0c\u4f46\u4f9d\u7136\u53ef\u4ee5\u4f20\u7ed9 run_twice(Animal) \u3002 \u793a\u4f8b\uff1a class Animal ( object ): # \u7f16\u5199Animal\u7c7b def run ( self ): print ( \"Animal is running...\" ) class Dog ( Animal ): # Dog\u7c7b\u7ee7\u627fAmimal\u7c7b\uff0c\u6ca1\u6709run\u65b9\u6cd5 pass class Cat ( Animal ): # Cat\u7c7b\u7ee7\u627fAnimal\u7c7b\uff0c\u6709\u81ea\u5df1\u7684run\u65b9\u6cd5 def run ( self ): print ( 'Cat is running...' ) pass class Car ( object ): # Car\u7c7b\u4e0d\u7ee7\u627f\uff0c\u6709\u81ea\u5df1\u7684run\u65b9\u6cd5 def run ( self ): print ( 'Car is running...' ) class Stone ( object ): # Stone\u7c7b\u4e0d\u7ee7\u627f\uff0c\u4e5f\u6ca1\u6709run\u65b9\u6cd5 pass def run_twice ( animal ): animal . run () animal . run () run_twice ( Animal ()) run_twice ( Dog ()) run_twice ( Cat ()) run_twice ( Car ()) run_twice ( Stone ()) \u8f93\u51fa\uff1a Animal is running... Animal is running... Animal is running... Animal is running... Cat is running... Cat is running... Car is running... Car is running... AttributeError: 'Stone' object has no attribute 'run'","title":"\u591a\u6001\u5728\u9759\u6001\u8bed\u8a00\u548c\u52a8\u6001\u8bed\u8a00\u4e2d\u7684\u533a\u522b"},{"location":"Python/Adavanced/OOP/Python-No-12-Privatisation/","text":"\u7c7b\u7684\u79c1\u6709\u5316 Python \u662f\u52a8\u6001\u8bed\u8a00\uff0c\u53ef\u4ee5\u5728\u7a0b\u5e8f\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u52a8\u6001\u5730\u7ed9class\u52a0\u4e0a\u5c5e\u6027\u6216\u65b9\u6cd5\u3002 \u8fd9\u79cd\u4e0d\u52a0\u4ee5\u8282\u5236\u7684\u7279\u6027\u5f88\u5bb9\u6613\u9020\u6210\u70c2\u4ee3\u7801\u4e00\u5806\u3002\u5bf9\u6b64 Python \u63d0\u4f9b\u4e86\u4e00\u4e9b\u89e3\u51b3\u65b9\u6848\u3002 slots \u53d8\u91cf\u7ed1\u5b9a\u767d\u540d\u5355 \u00b6 __slots__ = (attributes_of_tuple) \u5199\u5728\u7c7b\u53d8\u91cf\u5904 attributes_of_tuple\u662f\u4e2a\u5143\u7ec4\uff0c\u5143\u7ec4\u4e2d\u6bcf\u4e00\u4e2a\u5143\u7d20\u8981\u7528string\u578b\u3002 class ClsName : __slots__ = ( 'name' , 'age' ) ... \u793a\u4f8b\uff0c\u5728\u4ea4\u4e92\u6a21\u5f0f\u4e2d\uff1a # \u6ca1\u6709\u767d\u540d\u5355\uff0c\u53ef\u4ee5\u968f\u610f\u7ed1\u5b9a\u5c5e\u6027 >>> class Person : ... pass ... >>> p = Person () >>> p . name = 'Boii' >>> p . age = 18 >>> p . score = 100 >>> print ( p . name , p . age , p . score ) Boii 18 100 # \u4f7f\u7528\u4e86\u767d\u540d\u5355\uff0c\u53ea\u80fd\u7ed1\u5b9a\u767d\u540d\u5355\u4e0a\u7684\u5c5e\u6027 >>> class Person : ... __slots__ = ( 'name' , 'age' ) ... >>> p = Person () >>> p . name = 'Boii' # \u767d\u540d\u5355\u4e2d\u7684\u5c5e\u6027\uff0c\u53ef\u4ee5\u7ed1\u5b9a >>> p . age = 18 # \u767d\u540d\u5355\u4e2d\u7684\u5c5e\u6027\uff0c\u53ef\u4ee5\u7ed1\u5b9a >>> p . score = 100 # \u767d\u540d\u5355\u4e2d\u6ca1\u6709\u7684\u5c5e\u6027\uff0c\u7ed1\u5b9a\u5931\u8d25 # \u767d\u540d\u5355\u4e2d\u6ca1\u6709 score\uff0c\u6240\u4ee5\u7ed1\u5b9a\u5931\u8d25 Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > AttributeError : 'Person' object has no attribute 'score' \u793a\u4f8b\uff0c\u5728\u6a21\u5757\u6587\u4ef6\u4e2d\uff1a class Person : __slots__ = ( 'score' , 'gender' ) def __init__ ( self , name , age ): self . name = name self . age = age # \u767d\u540d\u5355\u4e2d\u6ca1\u6709 name \u548c age\uff0c\u6240\u4ee5\u8fde\u521b\u5efa\u5bf9\u8c61\u90fd\u4f1a\u5931\u8d25 person = Person ( 'Boii' , 20 ) # Output: AttributeError : 'Person' object has no attribute 'name' class Person : __slots__ = ( 'name' , 'age' , 'score' , 'gender' ) def __init__ ( self , name , age ): self . name = name self . age = age p = Person ( 'Boii' , 20 ) print ( p . name , p . age ) p . name = 'Kali' # \u767d\u540d\u5355\u4e2d\u5b58\u5728\uff0c\u53ef\u4ee5\u4fee\u6539 p . age = 30 # \u767d\u540d\u5355\u4e2d\u5b58\u5728\uff0c\u53ef\u4ee5\u4fee\u6539 p . score = 100 # \u767d\u540d\u5355\u4e2d\u5b58\u5728\uff0c\u53ef\u4ee5\u7ed1\u5b9a p . gender = 'male' # \u767d\u540d\u5355\u4e2d\u5b58\u5728\uff0c\u53ef\u4ee5\u7ed1\u5b9a print ( p . name , p . age , p . score , p . gender ) # Output: Boii 20 Kali 30 100 male \u4f7f\u7528__slots__\u8981\u6ce8\u610f\uff0c __slots__ \u5b9a\u4e49\u7684\u5c5e\u6027\u4ec5\u5bf9\u5f53\u524d\u7c7b\u5b9e\u4f8b\u8d77\u4f5c\u7528\uff0c\u5bf9\u7ee7\u627f\u7684\u5b50\u7c7b\u662f\u4e0d\u8d77\u4f5c\u7528\u7684 \u9664\u975e\u5728\u5b50\u7c7b\u4e2d\u4e5f\u5b9a\u4e49 __slots__ \uff0c\u8fd9\u6837\uff0c\u5b50\u7c7b\u5b9e\u4f8b\u5141\u8bb8\u5b9a\u4e49\u7684\u5c5e\u6027\u5c31\u662f\u81ea\u8eab\u7684 __slots__ \u52a0\u4e0a\u7236\u7c7b\u7684 __slots__ \u3002 @property \u00b6 \u5f53\u4e00\u4e2a\u7c7b\u4e2d\u6709\u4e0d\u60f3\u7ed9\u5916\u754c\u968f\u4fbf\u8bbf\u95ee\u6216\u4fee\u6539\u7684\u5c5e\u6027\u65f6\uff0c\u53ef\u4ee5\u5c06\u8be5\u53d8\u91cf\u53d8\u6210 private \u578b\u7684 \u4f8b\u5982 __age = 18 \u8fd9\u6837\u7684\u5c5e\u6027\u53ea\u80fd\u5728\u7c7b\u4e2d\u8bbf\u95ee\u548c\u4fee\u6539\uff0c\u5916\u754c\u8981\u8fdb\u884c\u8bbf\u95ee\u548c\u4fee\u6539\u53ea\u80fd\u901a\u8fc7\u7c7b\u4e2d\u7684 getter\u3001setter \u65b9\u6cd5\u3002\u4f8b\u5982\uff1a class Person : def __init__ ( self , age ): self . __age = age def get_age ( self ): return self . __age def set_age ( self , value ): if value > 0 and value < 200 : self . __age = value p = Person ( 20 ) print ( p . get_age ()) # 20 p . set_age ( 18 ) print ( p . get_age ()) # 18 \u901a\u8fc7 getter\u3001setter \uff0c\u5728\u8bbf\u95ee\u548c\u4fee\u6539\u7684\u65f6\u5019\u6bd4\u8f83\u9ebb\u70e6\uff0c\u8981\u901a\u8fc7\u8c03\u7528\u65b9\u6cd5\u3002 \u4f7f\u7528 \u88c5\u9970\u5668@property \u5219\u53ef\u4ee5\u6bd4\u8f83\u65b9\u4fbf\uff0c\u50cf\u53d8\u91cf\u4e00\u6837\u53bb\u8bbf\u95ee\u548c\u4fee\u6539 \u4f7f\u7528\u65b9\u6cd5 \u00b6 class ClsName : def __init__ ( self , attributeName ): self . __attributeName = attributeName # \u8981\u5148\u5199getter @property def attributeName ( self ): return self . __attributeName # \u518d\u5199setter @attributeName . setter def attributeName ( self , value ): self . __attributeName = value cls = ClsName () print ( cls . attributeName ) # \u8bbf\u95ee cls . attributeName = value # \u4fee\u6539 \u73b0\u5728\u6539\u5199\u4e0a\u9762 Person \u7c7b\u7684\u4f8b\u5b50\uff1a class Person : def __init__ ( self , age ): self . __age = age @property def age ( self ): return self . __age @age . setter def age ( self , value ): if value > 0 and value < 200 : self . __age = value p = Person ( 18 ) print ( p . age ) # 18 p . age = 20 print ( p . age ) # 20","title":"Python\u3010No-12\u3011\u79c1\u6709\u5316"},{"location":"Python/Adavanced/OOP/Python-No-12-Privatisation/#slots","text":"__slots__ = (attributes_of_tuple) \u5199\u5728\u7c7b\u53d8\u91cf\u5904 attributes_of_tuple\u662f\u4e2a\u5143\u7ec4\uff0c\u5143\u7ec4\u4e2d\u6bcf\u4e00\u4e2a\u5143\u7d20\u8981\u7528string\u578b\u3002 class ClsName : __slots__ = ( 'name' , 'age' ) ... \u793a\u4f8b\uff0c\u5728\u4ea4\u4e92\u6a21\u5f0f\u4e2d\uff1a # \u6ca1\u6709\u767d\u540d\u5355\uff0c\u53ef\u4ee5\u968f\u610f\u7ed1\u5b9a\u5c5e\u6027 >>> class Person : ... pass ... >>> p = Person () >>> p . name = 'Boii' >>> p . age = 18 >>> p . score = 100 >>> print ( p . name , p . age , p . score ) Boii 18 100 # \u4f7f\u7528\u4e86\u767d\u540d\u5355\uff0c\u53ea\u80fd\u7ed1\u5b9a\u767d\u540d\u5355\u4e0a\u7684\u5c5e\u6027 >>> class Person : ... __slots__ = ( 'name' , 'age' ) ... >>> p = Person () >>> p . name = 'Boii' # \u767d\u540d\u5355\u4e2d\u7684\u5c5e\u6027\uff0c\u53ef\u4ee5\u7ed1\u5b9a >>> p . age = 18 # \u767d\u540d\u5355\u4e2d\u7684\u5c5e\u6027\uff0c\u53ef\u4ee5\u7ed1\u5b9a >>> p . score = 100 # \u767d\u540d\u5355\u4e2d\u6ca1\u6709\u7684\u5c5e\u6027\uff0c\u7ed1\u5b9a\u5931\u8d25 # \u767d\u540d\u5355\u4e2d\u6ca1\u6709 score\uff0c\u6240\u4ee5\u7ed1\u5b9a\u5931\u8d25 Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > AttributeError : 'Person' object has no attribute 'score' \u793a\u4f8b\uff0c\u5728\u6a21\u5757\u6587\u4ef6\u4e2d\uff1a class Person : __slots__ = ( 'score' , 'gender' ) def __init__ ( self , name , age ): self . name = name self . age = age # \u767d\u540d\u5355\u4e2d\u6ca1\u6709 name \u548c age\uff0c\u6240\u4ee5\u8fde\u521b\u5efa\u5bf9\u8c61\u90fd\u4f1a\u5931\u8d25 person = Person ( 'Boii' , 20 ) # Output: AttributeError : 'Person' object has no attribute 'name' class Person : __slots__ = ( 'name' , 'age' , 'score' , 'gender' ) def __init__ ( self , name , age ): self . name = name self . age = age p = Person ( 'Boii' , 20 ) print ( p . name , p . age ) p . name = 'Kali' # \u767d\u540d\u5355\u4e2d\u5b58\u5728\uff0c\u53ef\u4ee5\u4fee\u6539 p . age = 30 # \u767d\u540d\u5355\u4e2d\u5b58\u5728\uff0c\u53ef\u4ee5\u4fee\u6539 p . score = 100 # \u767d\u540d\u5355\u4e2d\u5b58\u5728\uff0c\u53ef\u4ee5\u7ed1\u5b9a p . gender = 'male' # \u767d\u540d\u5355\u4e2d\u5b58\u5728\uff0c\u53ef\u4ee5\u7ed1\u5b9a print ( p . name , p . age , p . score , p . gender ) # Output: Boii 20 Kali 30 100 male \u4f7f\u7528__slots__\u8981\u6ce8\u610f\uff0c __slots__ \u5b9a\u4e49\u7684\u5c5e\u6027\u4ec5\u5bf9\u5f53\u524d\u7c7b\u5b9e\u4f8b\u8d77\u4f5c\u7528\uff0c\u5bf9\u7ee7\u627f\u7684\u5b50\u7c7b\u662f\u4e0d\u8d77\u4f5c\u7528\u7684 \u9664\u975e\u5728\u5b50\u7c7b\u4e2d\u4e5f\u5b9a\u4e49 __slots__ \uff0c\u8fd9\u6837\uff0c\u5b50\u7c7b\u5b9e\u4f8b\u5141\u8bb8\u5b9a\u4e49\u7684\u5c5e\u6027\u5c31\u662f\u81ea\u8eab\u7684 __slots__ \u52a0\u4e0a\u7236\u7c7b\u7684 __slots__ \u3002","title":"slots \u53d8\u91cf\u7ed1\u5b9a\u767d\u540d\u5355"},{"location":"Python/Adavanced/OOP/Python-No-12-Privatisation/#property","text":"\u5f53\u4e00\u4e2a\u7c7b\u4e2d\u6709\u4e0d\u60f3\u7ed9\u5916\u754c\u968f\u4fbf\u8bbf\u95ee\u6216\u4fee\u6539\u7684\u5c5e\u6027\u65f6\uff0c\u53ef\u4ee5\u5c06\u8be5\u53d8\u91cf\u53d8\u6210 private \u578b\u7684 \u4f8b\u5982 __age = 18 \u8fd9\u6837\u7684\u5c5e\u6027\u53ea\u80fd\u5728\u7c7b\u4e2d\u8bbf\u95ee\u548c\u4fee\u6539\uff0c\u5916\u754c\u8981\u8fdb\u884c\u8bbf\u95ee\u548c\u4fee\u6539\u53ea\u80fd\u901a\u8fc7\u7c7b\u4e2d\u7684 getter\u3001setter \u65b9\u6cd5\u3002\u4f8b\u5982\uff1a class Person : def __init__ ( self , age ): self . __age = age def get_age ( self ): return self . __age def set_age ( self , value ): if value > 0 and value < 200 : self . __age = value p = Person ( 20 ) print ( p . get_age ()) # 20 p . set_age ( 18 ) print ( p . get_age ()) # 18 \u901a\u8fc7 getter\u3001setter \uff0c\u5728\u8bbf\u95ee\u548c\u4fee\u6539\u7684\u65f6\u5019\u6bd4\u8f83\u9ebb\u70e6\uff0c\u8981\u901a\u8fc7\u8c03\u7528\u65b9\u6cd5\u3002 \u4f7f\u7528 \u88c5\u9970\u5668@property \u5219\u53ef\u4ee5\u6bd4\u8f83\u65b9\u4fbf\uff0c\u50cf\u53d8\u91cf\u4e00\u6837\u53bb\u8bbf\u95ee\u548c\u4fee\u6539","title":"@property"},{"location":"Python/Adavanced/OOP/Python-No-12-Privatisation/#_1","text":"class ClsName : def __init__ ( self , attributeName ): self . __attributeName = attributeName # \u8981\u5148\u5199getter @property def attributeName ( self ): return self . __attributeName # \u518d\u5199setter @attributeName . setter def attributeName ( self , value ): self . __attributeName = value cls = ClsName () print ( cls . attributeName ) # \u8bbf\u95ee cls . attributeName = value # \u4fee\u6539 \u73b0\u5728\u6539\u5199\u4e0a\u9762 Person \u7c7b\u7684\u4f8b\u5b50\uff1a class Person : def __init__ ( self , age ): self . __age = age @property def age ( self ): return self . __age @age . setter def age ( self , value ): if value > 0 and value < 200 : self . __age = value p = Person ( 18 ) print ( p . age ) # 18 p . age = 20 print ( p . age ) # 20","title":"\u4f7f\u7528\u65b9\u6cd5"},{"location":"Python/Adavanced/OOP/Python-No-13-Magic-Method/","text":"\u9b54\u672f\u65b9\u6cd5\u5373\u7c7b\u7684\u5185\u7f6e\u65b9\u6cd5 __str__() \u00b6 \u89e6\u53d1\u65f6\u673a:\u4f7f\u7528print(\u5bf9\u8c61)\u6216\u8005str(\u5bf9\u8c61)\u7684\u65f6\u5019\u89e6\u53d1 \u53c2\u6570\uff1a\u4e00\u4e2aself\u63a5\u6536\u5bf9\u8c61 \u8fd4\u56de\u503c\uff1a\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u7c7b\u578b \u4f5c\u7528\uff1aprint\uff08\u5bf9\u8c61\u65f6\uff09\u8fdb\u884c\u64cd\u4f5c\uff0c\u5f97\u5230\u5b57\u7b26\u4e32\uff0c\u901a\u5e38\u7528\u4e8e\u5feb\u6377\u64cd\u4f5c \u8c03\u7528\u65b9\u5f0f\uff1a print(obj) \u53e6\u5916\uff0c\u8fd8\u6709\u4e00\u4e2a\u4e0e __str__() \u76f8\u540c\u7684\u5b50\u65b9\u6cd5\uff1a __repr__() \uff0c\u6548\u679c\u4e00\u6837\uff0c\u9002\u7528\u4e8e\u8c03\u8bd5\u65f6\uff0c\u533a\u522b\u5728\u4e8e >>> print(obj) \u65f6\u8c03\u7528\u7684\u662f __str__() >>> obj \u65f6\u8c03\u7528\u7684\u662f __repr__() // Java public class Person { String name = \"\" ; int age = 0 ; public Person ( String name , int age ){ this . name = name ; this . age = age ; } ... public String toString () { return \"name: \" + this . name + \", age: \" + this . age ; } } Person p = new Person ( \"Boii\" , 18 ); system . out . println ( p ); // Output: // name: Boii, age: 18 # Python class Person : def __init__ ( self , name , age ): self . name = name self . age = age def __str__ ( self ): return \"name: \" + self . name + \", age: \" + self . age __repr__ = __str__ # \u5077\u61d2\u5199\u6cd5 p = Person ( \"Boii\" , 18 ) print ( p ) # Output: # name: Boii, age: 18 __call__() \u00b6 \u8c03\u7528\u5bf9\u8c61\u7684\u9b54\u672f\u65b9\u6cd5 \u89e6\u53d1\u65f6\u673a:\u5c06\u5bf9\u8c61\u5f53\u4f5c\u51fd\u6570\u8c03\u7528\u65f6\u89e6\u53d1 \u5bf9\u8c61() \u53c2\u6570:\u81f3\u5c11\u4e00\u4e2aself\u63a5\u6536\u5bf9\u8c61\uff0c\u5176\u4f59\u6839\u636e\u8c03\u7528\u65f6\u53c2\u6570\u51b3\u5b9a \u8fd4\u56de\u503c\uff1a\u6839\u636e\u60c5\u51b5\u800c\u5b9a \u4f5c\u7528\uff1a\u53ef\u4ee5\u5c06\u590d\u6742\u7684\u6b65\u9aa4\u8fdb\u884c\u5408\u5e76\u64cd\u4f5c\uff0c\u51cf\u5c11\u8c03\u7528\u7684\u6b65\u9aa4\uff0c\u65b9\u4fbf\u4f7f\u7528 \u8c03\u7528\u65b9\u5f0f\uff1a obj() class Athlete : def prepare ( self ): print ( 'The athlete is preparing...' ) def warm_up ( self ): print ( 'The athlete is warming up...' ) def attend ( self ): print ( 'The athlete attended.' ) def run ( self ): print ( 'The athlete ran.' ) def __call__ ( self ): self . prepare () self . warm_up () self . attend () self . run () athlete = Athlete () athlete () # Output: The athlete is preparing ... The athlete is warming up ... The athlete attended . The athlete ran . \u793a\u4f8b\u4e2d\u53ea\u662f\u7b80\u5355\u8c03\u7528\u81ea\u8eab\u51fd\u6570\uff0c\u5b9e\u9645\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u4f1a\u6709\u66f4\u591a\u5982\u5f00\u542f\u7ebf\u7a0b\uff0c\u8c03\u7528\u522b\u7684\u7c7b\u7b49\u590d\u6742\u64cd\u4f5c \u5f88\u591a\u65f6\u5019\uff0c\u9700\u8981\u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u80fd\u5426\u88ab\u8c03\u7528\uff0c\u80fd\u88ab\u8c03\u7528\u7684\u5bf9\u8c61\u5c31\u662f\u4e00\u4e2a Callable \u51fd\u6570\uff0c\u548c\u5e26\u6709 __call__() \u7684\u7c7b\u5bf9\u8c61\u5c31\u662fCallable \u53ef\u4ee5\u901a\u8fc7 callable(obj) \u6765\u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u53ef\u4ee5\u88ab\u8c03\u7528 __iter__() \u00b6 \u8c03\u7528\u5bf9\u8c61\u7684\u9b54\u672f\u65b9\u6cd5 \u89e6\u53d1\u65f6\u673a\uff1a\u5bf9\u8c61\u88ab\u7528\u4e8e for...in \u53c2\u6570\uff1a\u81f3\u5c11\u4e00\u4e2aself\u63a5\u6536\u5bf9\u8c61 \u8fd4\u56de\u503c\uff1a\u6839\u636e\u60c5\u51b5\u800c\u5b9a \u4f5c\u7528\uff1a\u4f7f\u7c7b\u5177\u6709\u53ef\u8fed\u4ee3\u7684\u80fd\u529b \u8c03\u7528\u65b9\u5f0f\uff1a for...in obj \u5982\u679c\u4e00\u4e2a\u7c7b\u60f3\u88ab\u7528\u4e8efor ... in\u5faa\u73af\uff0c\u7c7b\u4f3clist\u6216tuple\u90a3\u6837\uff0c\u5c31\u5fc5\u987b\u5b9e\u73b0\u4e00\u4e2a__iter__()\u65b9\u6cd5\uff0c \u8be5\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5bf9\u8c61\uff0c \u7136\u540e\uff0cPython\u7684for\u5faa\u73af\u5c31\u4f1a\u4e0d\u65ad\u8c03\u7528\u8be5\u8fed\u4ee3\u5bf9\u8c61\u7684__next__()\u65b9\u6cd5\u62ff\u5230\u5faa\u73af\u7684\u4e0b\u4e00\u4e2a\u503c\uff0c \u76f4\u5230\u9047\u5230StopIteration\u9519\u8bef\u65f6\u9000\u51fa\u5faa\u73af\u3002 \u4ee5\u6590\u6ce2\u90a3\u5951\u6570\u5217\u4e3a\u4f8b\uff0c\u5199\u4e00\u4e2aFib\u7c7b\uff0c\u53ef\u4ee5\u4f5c\u7528\u4e8efor\u5faa\u73af\uff1a class Fib ( object ): def __init__ ( self ): self . a , self . b = 0 , 1 # \u521d\u59cb\u5316\u4e24\u4e2a\u8ba1\u6570\u5668a\uff0cb def __iter__ ( self ): return self # \u5b9e\u4f8b\u672c\u8eab\u5c31\u662f\u8fed\u4ee3\u5bf9\u8c61\uff0c\u6545\u8fd4\u56de\u81ea\u5df1 def __next__ ( self ): self . a , self . b = self . b , self . a + self . b # \u8ba1\u7b97\u4e0b\u4e00\u4e2a\u503c if self . a > 100000 : # \u9000\u51fa\u5faa\u73af\u7684\u6761\u4ef6 raise StopIteration () return self . a # \u8fd4\u56de\u4e0b\u4e00\u4e2a\u503c >>> for n in Fib (): ... print ( n ) ... 1 1 2 3 5 ... 46368 75025 __getitem__() \u00b6 __getattr__() \u00b6 \u89e6\u53d1\u65f6\u673a\uff1a\u83b7\u53d6\u4e0d\u5b58\u5728\u7684\u5bf9\u8c61\u6210\u5458\u65f6\u89e6\u53d1 \u53c2\u6570\uff1a1\u63a5\u6536\u5f53\u524d\u5bf9\u8c61\u7684self\uff0c\u4e00\u4e2a\u662f\u83b7\u53d6\u6210\u5458\u540d\u79f0\u7684\u5b57\u7b26\u4e32 \u8fd4\u56de\u503c\uff1a\u5fc5\u987b\u6709\u503c \u4f5c\u7528:\u4e3a\u8bbf\u95ee\u4e0d\u5b58\u5728\u7684\u5c5e\u6027\u8bbe\u7f6e\u503c \u6ce8\u610f\uff1agetattribute\u65e0\u8bba\u4f55\u65f6\u90fd\u4f1a\u5728getattr\u4e4b\u524d\u89e6\u53d1\uff0c\u89e6\u53d1\u4e86getattribute\u5c31\u4e0d\u4f1a\u5728\u89e6\u53d1getattr\u4e86","title":"Python\u3010No-13\u3011\u9b54\u672f\u65b9\u6cd5"},{"location":"Python/Adavanced/OOP/Python-No-13-Magic-Method/#__str__","text":"\u89e6\u53d1\u65f6\u673a:\u4f7f\u7528print(\u5bf9\u8c61)\u6216\u8005str(\u5bf9\u8c61)\u7684\u65f6\u5019\u89e6\u53d1 \u53c2\u6570\uff1a\u4e00\u4e2aself\u63a5\u6536\u5bf9\u8c61 \u8fd4\u56de\u503c\uff1a\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u7c7b\u578b \u4f5c\u7528\uff1aprint\uff08\u5bf9\u8c61\u65f6\uff09\u8fdb\u884c\u64cd\u4f5c\uff0c\u5f97\u5230\u5b57\u7b26\u4e32\uff0c\u901a\u5e38\u7528\u4e8e\u5feb\u6377\u64cd\u4f5c \u8c03\u7528\u65b9\u5f0f\uff1a print(obj) \u53e6\u5916\uff0c\u8fd8\u6709\u4e00\u4e2a\u4e0e __str__() \u76f8\u540c\u7684\u5b50\u65b9\u6cd5\uff1a __repr__() \uff0c\u6548\u679c\u4e00\u6837\uff0c\u9002\u7528\u4e8e\u8c03\u8bd5\u65f6\uff0c\u533a\u522b\u5728\u4e8e >>> print(obj) \u65f6\u8c03\u7528\u7684\u662f __str__() >>> obj \u65f6\u8c03\u7528\u7684\u662f __repr__() // Java public class Person { String name = \"\" ; int age = 0 ; public Person ( String name , int age ){ this . name = name ; this . age = age ; } ... public String toString () { return \"name: \" + this . name + \", age: \" + this . age ; } } Person p = new Person ( \"Boii\" , 18 ); system . out . println ( p ); // Output: // name: Boii, age: 18 # Python class Person : def __init__ ( self , name , age ): self . name = name self . age = age def __str__ ( self ): return \"name: \" + self . name + \", age: \" + self . age __repr__ = __str__ # \u5077\u61d2\u5199\u6cd5 p = Person ( \"Boii\" , 18 ) print ( p ) # Output: # name: Boii, age: 18","title":"__str__()"},{"location":"Python/Adavanced/OOP/Python-No-13-Magic-Method/#__call__","text":"\u8c03\u7528\u5bf9\u8c61\u7684\u9b54\u672f\u65b9\u6cd5 \u89e6\u53d1\u65f6\u673a:\u5c06\u5bf9\u8c61\u5f53\u4f5c\u51fd\u6570\u8c03\u7528\u65f6\u89e6\u53d1 \u5bf9\u8c61() \u53c2\u6570:\u81f3\u5c11\u4e00\u4e2aself\u63a5\u6536\u5bf9\u8c61\uff0c\u5176\u4f59\u6839\u636e\u8c03\u7528\u65f6\u53c2\u6570\u51b3\u5b9a \u8fd4\u56de\u503c\uff1a\u6839\u636e\u60c5\u51b5\u800c\u5b9a \u4f5c\u7528\uff1a\u53ef\u4ee5\u5c06\u590d\u6742\u7684\u6b65\u9aa4\u8fdb\u884c\u5408\u5e76\u64cd\u4f5c\uff0c\u51cf\u5c11\u8c03\u7528\u7684\u6b65\u9aa4\uff0c\u65b9\u4fbf\u4f7f\u7528 \u8c03\u7528\u65b9\u5f0f\uff1a obj() class Athlete : def prepare ( self ): print ( 'The athlete is preparing...' ) def warm_up ( self ): print ( 'The athlete is warming up...' ) def attend ( self ): print ( 'The athlete attended.' ) def run ( self ): print ( 'The athlete ran.' ) def __call__ ( self ): self . prepare () self . warm_up () self . attend () self . run () athlete = Athlete () athlete () # Output: The athlete is preparing ... The athlete is warming up ... The athlete attended . The athlete ran . \u793a\u4f8b\u4e2d\u53ea\u662f\u7b80\u5355\u8c03\u7528\u81ea\u8eab\u51fd\u6570\uff0c\u5b9e\u9645\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u4f1a\u6709\u66f4\u591a\u5982\u5f00\u542f\u7ebf\u7a0b\uff0c\u8c03\u7528\u522b\u7684\u7c7b\u7b49\u590d\u6742\u64cd\u4f5c \u5f88\u591a\u65f6\u5019\uff0c\u9700\u8981\u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u80fd\u5426\u88ab\u8c03\u7528\uff0c\u80fd\u88ab\u8c03\u7528\u7684\u5bf9\u8c61\u5c31\u662f\u4e00\u4e2a Callable \u51fd\u6570\uff0c\u548c\u5e26\u6709 __call__() \u7684\u7c7b\u5bf9\u8c61\u5c31\u662fCallable \u53ef\u4ee5\u901a\u8fc7 callable(obj) \u6765\u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u53ef\u4ee5\u88ab\u8c03\u7528","title":"__call__()"},{"location":"Python/Adavanced/OOP/Python-No-13-Magic-Method/#__iter__","text":"\u8c03\u7528\u5bf9\u8c61\u7684\u9b54\u672f\u65b9\u6cd5 \u89e6\u53d1\u65f6\u673a\uff1a\u5bf9\u8c61\u88ab\u7528\u4e8e for...in \u53c2\u6570\uff1a\u81f3\u5c11\u4e00\u4e2aself\u63a5\u6536\u5bf9\u8c61 \u8fd4\u56de\u503c\uff1a\u6839\u636e\u60c5\u51b5\u800c\u5b9a \u4f5c\u7528\uff1a\u4f7f\u7c7b\u5177\u6709\u53ef\u8fed\u4ee3\u7684\u80fd\u529b \u8c03\u7528\u65b9\u5f0f\uff1a for...in obj \u5982\u679c\u4e00\u4e2a\u7c7b\u60f3\u88ab\u7528\u4e8efor ... in\u5faa\u73af\uff0c\u7c7b\u4f3clist\u6216tuple\u90a3\u6837\uff0c\u5c31\u5fc5\u987b\u5b9e\u73b0\u4e00\u4e2a__iter__()\u65b9\u6cd5\uff0c \u8be5\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5bf9\u8c61\uff0c \u7136\u540e\uff0cPython\u7684for\u5faa\u73af\u5c31\u4f1a\u4e0d\u65ad\u8c03\u7528\u8be5\u8fed\u4ee3\u5bf9\u8c61\u7684__next__()\u65b9\u6cd5\u62ff\u5230\u5faa\u73af\u7684\u4e0b\u4e00\u4e2a\u503c\uff0c \u76f4\u5230\u9047\u5230StopIteration\u9519\u8bef\u65f6\u9000\u51fa\u5faa\u73af\u3002 \u4ee5\u6590\u6ce2\u90a3\u5951\u6570\u5217\u4e3a\u4f8b\uff0c\u5199\u4e00\u4e2aFib\u7c7b\uff0c\u53ef\u4ee5\u4f5c\u7528\u4e8efor\u5faa\u73af\uff1a class Fib ( object ): def __init__ ( self ): self . a , self . b = 0 , 1 # \u521d\u59cb\u5316\u4e24\u4e2a\u8ba1\u6570\u5668a\uff0cb def __iter__ ( self ): return self # \u5b9e\u4f8b\u672c\u8eab\u5c31\u662f\u8fed\u4ee3\u5bf9\u8c61\uff0c\u6545\u8fd4\u56de\u81ea\u5df1 def __next__ ( self ): self . a , self . b = self . b , self . a + self . b # \u8ba1\u7b97\u4e0b\u4e00\u4e2a\u503c if self . a > 100000 : # \u9000\u51fa\u5faa\u73af\u7684\u6761\u4ef6 raise StopIteration () return self . a # \u8fd4\u56de\u4e0b\u4e00\u4e2a\u503c >>> for n in Fib (): ... print ( n ) ... 1 1 2 3 5 ... 46368 75025","title":"__iter__()"},{"location":"Python/Adavanced/OOP/Python-No-13-Magic-Method/#__getitem__","text":"","title":"__getitem__()"},{"location":"Python/Adavanced/OOP/Python-No-13-Magic-Method/#__getattr__","text":"\u89e6\u53d1\u65f6\u673a\uff1a\u83b7\u53d6\u4e0d\u5b58\u5728\u7684\u5bf9\u8c61\u6210\u5458\u65f6\u89e6\u53d1 \u53c2\u6570\uff1a1\u63a5\u6536\u5f53\u524d\u5bf9\u8c61\u7684self\uff0c\u4e00\u4e2a\u662f\u83b7\u53d6\u6210\u5458\u540d\u79f0\u7684\u5b57\u7b26\u4e32 \u8fd4\u56de\u503c\uff1a\u5fc5\u987b\u6709\u503c \u4f5c\u7528:\u4e3a\u8bbf\u95ee\u4e0d\u5b58\u5728\u7684\u5c5e\u6027\u8bbe\u7f6e\u503c \u6ce8\u610f\uff1agetattribute\u65e0\u8bba\u4f55\u65f6\u90fd\u4f1a\u5728getattr\u4e4b\u524d\u89e6\u53d1\uff0c\u89e6\u53d1\u4e86getattribute\u5c31\u4e0d\u4f1a\u5728\u89e6\u53d1getattr\u4e86","title":"__getattr__()"},{"location":"Python/Adavanced/OOP/Python-No-14-Enum/","text":"\u679a\u4e3e\u7c7b\u578b\u5728 Python3.4 \u65b0\u589e\u5230\u6807\u51c6\u5e93 \u521b\u5efa\u679a\u4e3e \u00b6 \u6709\u4e24\u79cd\u65b9\u6cd5\u521b\u5efa\u679a\u4e3e 1. \u57fa\u4e8e class \u8bed\u6cd5\u521b\u5efa 2. \u57fa\u4e8e Function API \u521b\u5efa \u7b2c\u4e00\u6b65\uff0c\u5bfc\u5165Enum\u7c7b from enum import Enum \u57fa\u4e8e class \u8bed\u6cd5\u521b\u5efa \u00b6 from enum import Enum class Weekend ( Enum ) \uff1b Mon = 1 Tue = 2 Wed = 3 Thr = 4 Fri = 5 Sat = 6 Sun = 7 \u4e0a\u9762\u4f8b\u5b50 1. \u5b9a\u4e49\u4e86 Weekend \u679a\u4e3e\u7c7b\u578b 2. \u5b9a\u4e49\u4e86 Weekend \u7684\u679a\u4e3e\u6210\u5458 Weekend.Mon\uff0cWeekend.Tue... 3. \u4e3a\u6bcf\u4e00\u4e2a\u679a\u4e3e\u6210\u5458\u8d4b\u503c\u3002\u5982Weekend.Mon \u7684\u503c\u4e3a1\u3002\u503c\u53ef\u4ee5\u6307\u5b9a\u4e3a\u5176\u4ed6\u7c7b\u578b\uff0c\u4e0d\u662f\u5fc5\u987b\u6574\u578b \u679a\u4e3e\u6210\u5458\u5305\u542b\u4e24\u4e2a\u5c5e\u6027\uff1a name \u548c value >>> Weekend . Mon . name Mon >>> Weekend . Mon . value 1 \u5b9a\u4e49string\u7c7b\u578b\u7684\u503c from enum import Enum class Weekend ( Enum ) \uff1b Monday = 'Mon' Tuesday = 'Tue' Wednesday = 'Wed' Thursday = 'Thu' Friday = 'Fri' Saturday = 'Sat' Sunday = 'Sun' >>> Weekend . Monday . value 'Mon' \u57fa\u4e8e Function API \u521b\u5efa \u00b6 Enum(enum name, enumerators) \u7b2c\u4e00\u4e2a\u53c2\u6570 enum name \u8868\u793a\u679a\u4e3e\u540d\u79f0\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570enumerators \u8868\u793a\u679a\u4e3e\u6210\u5458\u5217\u8868 \u679a\u4e3e\u6210\u5458\u5217\u8868\u6709\u4e09\u79cd\u65b9\u5f0f\uff1a \u4f7f\u7528\u5b57\u7b26\u4e32\u8868\u793a\uff0c\u5404\u6210\u5458\u540d\u4f7f\u7528\u7a7a\u683c\u9694\u5f00\u3002\u6210\u5458\u7684\u503c\u4ece1\u5f00\u59cb\u81ea\u52a8\u9012\u589e Enum('enum_name', 'member1 member2 member3 ... memberN') \u4f7f\u7528\u5143\u7ec4\u8868\u793a\uff0c\u6210\u5458\u7684\u503c\u4ece1\u5f00\u59cb\u81ea\u52a8\u9012\u589e Enum('enum_name', ('member1', 'member2', 'member3', ... , 'memberN')) \u4f7f\u7528\u5b57\u5178\u8868\u793a\uff0c\u5b57\u5178\u53ef\u4ee5\u6307\u5b9a\u679a\u4e3e\u6210\u5458\u7684\u503c\uff0c\u5176\u4e2d\u5b57\u5178\u7684\u952e\u4e3a\u679a\u4e3e\u6210\u5458\u540d\uff0c\u503c\u4e3a\u679a\u4e3e\u6210\u5458\u7684\u503c Enum('enum_name', {'member1_key': memberl_value, 'member_key2': member2_value,...}) from enum import Enum # \u4ee5\u4e0b\u4e09\u53e5\u8868\u8fbe\u5f0f\u4e92\u76f8\u7b49\u4ef7 weekend = Enum ( 'week' , 'Mon Tue Wed Thu Fri Sat Sun' ) weekend = Enum ( 'week' ,( 'Mon' , 'Tue' , 'Wed' , 'Thu' , 'Fri' , 'Sat' , 'Sun' ) weekend = Enum ( 'week' ,{ 'Mon' : 1 , 'Tue' : 2 , 'Wed' : 3 , 'Thu' : 4 , 'Fri' : 5 , 'Sat' : 6 , 'Sun' : 7 }) >>> weekend . Mon . value 1 \u8bbf\u95ee\u679a\u4e3e\u6210\u5458 \u00b6 \u8bbf\u95ee\u679a\u4e3e\u6210\u5458\u6709\u4e09\u79cd\u65b9\u5f0f\uff1a \u4f7f\u7528\u70b9\u53f7(\".\")\u5f15\u7528 \u4f7f\u7528value\u83b7\u53d6\uff0c\u503c\u5bf9\u5e94\u7684\u679a\u4e3e\u6210\u5458 \u4f7f\u7528\u679a\u4e3e\u6210\u5458\u540d from enum import Enum class Weekend ( Enum ): Mon = 1 Tue = 2 Wed = 3 Thr = 4 Fri = 5 Sat = 6 Sun = 7 # \u6309\u503c\u8bbf\u95ee print ( Weekend ( 5 )) # Weekend.Fri # \u6309\u679a\u4e3e\u540d\u8bbf\u95ee print ( Weekend [ 'Sun' ]) # Weekend.Sun # \u8bbf\u95ee\u6210\u5458\u7684\u540d\u79f0 print ( Weekend . Tue . name ) # Tue # \u8bbf\u95ee\u6210\u5458\u7684\u503c print ( Weekend . Thr . value ) # 4 \u679a\u4e3e\u904d\u5386 \u00b6 \u5982\u679c\u628a\u679a\u4e3e\u5f53\u4f5c Dict \u6765\u770b\uff0c \u679a\u4e3e\u7c7b.\u679a\u4e3e\u6210\u5458\u540d \u662fkey\uff0c \u8d4b\u7ed9\u679a\u4e3e\u6210\u5458\u7684\u503c \u662fvalue print ( \"name: member | value\" ) print ( \"-\" * 25 ) for name , member in Weekend . __members__ . items (): print ( name + \" : \" + str ( member ) + \" | \" + str ( member . value )) # Output: name : member | value ------------------------- Mon : Weekend . Mon | 0 Tue : Weekend . Tue | 1 Wed : Weekend . Wed | 2 Thr : Weekend . Thr | 3 Fri : Weekend . Fri | 4 Sat : Weekend . Sat | 5 Sun : Weekend . Sun | 6 >>> print ( Weekend . __members__ ) { 'Mon' : < Weekend . Mon : 0 > , 'Tue' : < Weekend . Tue : 1 > , 'Wed' : < Weekend . Wed : 2 > , 'Thr' : < Weekend . Thr : 3 > , 'Fri' : < Weekend . Fri : 4 > , 'Sat' : < Weekend . Sat : 5 > , 'Sun' : < Weekend . Sun : 6 > } >>> type ( Weekend . __members__ ) < class ' mappingproxy '> \u679a\u4e3e\u6bd4\u8f83 \u00b6 \u679a\u4e3e\u6210\u5458\u5e76\u975e\u6574\u578b\uff0c\u800c\u662f\u4e00\u79cd\u6620\u5c04\u7c7b\u578b\uff0c\u662f\u4e0d\u80fd\u505a\u5927\u5c0f\u6bd4\u8f83\u7684 \u5f53\u65f6\u53ef\u4ee5\u505a\u76f8\u7b49\u6bd4\u8f83 >>> Weekend . Mon == Weekend . Mon True >>> Weekend . Mon == Weekend . Tue False >>> Weekend . Mon != Weekend . Tue True >>> Weekend . Mon == 0 False \u9650\u5b9a\u679a\u4e3e\u552f\u4e00\u6027 \u00b6 \u9650\u5b9a\u679a\u4e3e\u552f\u4e00\u6027\u662f\u6307 \u9650\u5236\u679a\u4e3e\u7c7b\u4e2d\u7684\u679a\u4e3e\u6210\u5458 \u7684 \u540d\u79f0\u548c\u503c\u90fd\u4e0d\u91cd\u590d \u9650\u5b9a\u679a\u4e3e\u552f\u4e00\u6027\u975e\u5e38\u7b80\u5355 \u5bfc\u5165 unique\u7c7b\uff0c\u7136\u540e\u5728\u81ea\u5b9a\u4e49\u7684\u679a\u4e3e\u7c7b\u524d\u52a0\u4e0a\u88c5\u9970\u5668 @unique from enum import Enum , unique @unique class Weekend : Mon = 0 Tue = 1 Wed = 2 Thr = 3 Fri = 4 Sat = 5 Sun = 6","title":"Python\u3010No-14\u3011\u679a\u4e3e\u7c7b"},{"location":"Python/Adavanced/OOP/Python-No-14-Enum/#_1","text":"\u6709\u4e24\u79cd\u65b9\u6cd5\u521b\u5efa\u679a\u4e3e 1. \u57fa\u4e8e class \u8bed\u6cd5\u521b\u5efa 2. \u57fa\u4e8e Function API \u521b\u5efa \u7b2c\u4e00\u6b65\uff0c\u5bfc\u5165Enum\u7c7b from enum import Enum","title":"\u521b\u5efa\u679a\u4e3e"},{"location":"Python/Adavanced/OOP/Python-No-14-Enum/#class","text":"from enum import Enum class Weekend ( Enum ) \uff1b Mon = 1 Tue = 2 Wed = 3 Thr = 4 Fri = 5 Sat = 6 Sun = 7 \u4e0a\u9762\u4f8b\u5b50 1. \u5b9a\u4e49\u4e86 Weekend \u679a\u4e3e\u7c7b\u578b 2. \u5b9a\u4e49\u4e86 Weekend \u7684\u679a\u4e3e\u6210\u5458 Weekend.Mon\uff0cWeekend.Tue... 3. \u4e3a\u6bcf\u4e00\u4e2a\u679a\u4e3e\u6210\u5458\u8d4b\u503c\u3002\u5982Weekend.Mon \u7684\u503c\u4e3a1\u3002\u503c\u53ef\u4ee5\u6307\u5b9a\u4e3a\u5176\u4ed6\u7c7b\u578b\uff0c\u4e0d\u662f\u5fc5\u987b\u6574\u578b \u679a\u4e3e\u6210\u5458\u5305\u542b\u4e24\u4e2a\u5c5e\u6027\uff1a name \u548c value >>> Weekend . Mon . name Mon >>> Weekend . Mon . value 1 \u5b9a\u4e49string\u7c7b\u578b\u7684\u503c from enum import Enum class Weekend ( Enum ) \uff1b Monday = 'Mon' Tuesday = 'Tue' Wednesday = 'Wed' Thursday = 'Thu' Friday = 'Fri' Saturday = 'Sat' Sunday = 'Sun' >>> Weekend . Monday . value 'Mon'","title":"\u57fa\u4e8e class \u8bed\u6cd5\u521b\u5efa"},{"location":"Python/Adavanced/OOP/Python-No-14-Enum/#function-api","text":"Enum(enum name, enumerators) \u7b2c\u4e00\u4e2a\u53c2\u6570 enum name \u8868\u793a\u679a\u4e3e\u540d\u79f0\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570enumerators \u8868\u793a\u679a\u4e3e\u6210\u5458\u5217\u8868 \u679a\u4e3e\u6210\u5458\u5217\u8868\u6709\u4e09\u79cd\u65b9\u5f0f\uff1a \u4f7f\u7528\u5b57\u7b26\u4e32\u8868\u793a\uff0c\u5404\u6210\u5458\u540d\u4f7f\u7528\u7a7a\u683c\u9694\u5f00\u3002\u6210\u5458\u7684\u503c\u4ece1\u5f00\u59cb\u81ea\u52a8\u9012\u589e Enum('enum_name', 'member1 member2 member3 ... memberN') \u4f7f\u7528\u5143\u7ec4\u8868\u793a\uff0c\u6210\u5458\u7684\u503c\u4ece1\u5f00\u59cb\u81ea\u52a8\u9012\u589e Enum('enum_name', ('member1', 'member2', 'member3', ... , 'memberN')) \u4f7f\u7528\u5b57\u5178\u8868\u793a\uff0c\u5b57\u5178\u53ef\u4ee5\u6307\u5b9a\u679a\u4e3e\u6210\u5458\u7684\u503c\uff0c\u5176\u4e2d\u5b57\u5178\u7684\u952e\u4e3a\u679a\u4e3e\u6210\u5458\u540d\uff0c\u503c\u4e3a\u679a\u4e3e\u6210\u5458\u7684\u503c Enum('enum_name', {'member1_key': memberl_value, 'member_key2': member2_value,...}) from enum import Enum # \u4ee5\u4e0b\u4e09\u53e5\u8868\u8fbe\u5f0f\u4e92\u76f8\u7b49\u4ef7 weekend = Enum ( 'week' , 'Mon Tue Wed Thu Fri Sat Sun' ) weekend = Enum ( 'week' ,( 'Mon' , 'Tue' , 'Wed' , 'Thu' , 'Fri' , 'Sat' , 'Sun' ) weekend = Enum ( 'week' ,{ 'Mon' : 1 , 'Tue' : 2 , 'Wed' : 3 , 'Thu' : 4 , 'Fri' : 5 , 'Sat' : 6 , 'Sun' : 7 }) >>> weekend . Mon . value 1","title":"\u57fa\u4e8e Function API \u521b\u5efa"},{"location":"Python/Adavanced/OOP/Python-No-14-Enum/#_2","text":"\u8bbf\u95ee\u679a\u4e3e\u6210\u5458\u6709\u4e09\u79cd\u65b9\u5f0f\uff1a \u4f7f\u7528\u70b9\u53f7(\".\")\u5f15\u7528 \u4f7f\u7528value\u83b7\u53d6\uff0c\u503c\u5bf9\u5e94\u7684\u679a\u4e3e\u6210\u5458 \u4f7f\u7528\u679a\u4e3e\u6210\u5458\u540d from enum import Enum class Weekend ( Enum ): Mon = 1 Tue = 2 Wed = 3 Thr = 4 Fri = 5 Sat = 6 Sun = 7 # \u6309\u503c\u8bbf\u95ee print ( Weekend ( 5 )) # Weekend.Fri # \u6309\u679a\u4e3e\u540d\u8bbf\u95ee print ( Weekend [ 'Sun' ]) # Weekend.Sun # \u8bbf\u95ee\u6210\u5458\u7684\u540d\u79f0 print ( Weekend . Tue . name ) # Tue # \u8bbf\u95ee\u6210\u5458\u7684\u503c print ( Weekend . Thr . value ) # 4","title":"\u8bbf\u95ee\u679a\u4e3e\u6210\u5458"},{"location":"Python/Adavanced/OOP/Python-No-14-Enum/#_3","text":"\u5982\u679c\u628a\u679a\u4e3e\u5f53\u4f5c Dict \u6765\u770b\uff0c \u679a\u4e3e\u7c7b.\u679a\u4e3e\u6210\u5458\u540d \u662fkey\uff0c \u8d4b\u7ed9\u679a\u4e3e\u6210\u5458\u7684\u503c \u662fvalue print ( \"name: member | value\" ) print ( \"-\" * 25 ) for name , member in Weekend . __members__ . items (): print ( name + \" : \" + str ( member ) + \" | \" + str ( member . value )) # Output: name : member | value ------------------------- Mon : Weekend . Mon | 0 Tue : Weekend . Tue | 1 Wed : Weekend . Wed | 2 Thr : Weekend . Thr | 3 Fri : Weekend . Fri | 4 Sat : Weekend . Sat | 5 Sun : Weekend . Sun | 6 >>> print ( Weekend . __members__ ) { 'Mon' : < Weekend . Mon : 0 > , 'Tue' : < Weekend . Tue : 1 > , 'Wed' : < Weekend . Wed : 2 > , 'Thr' : < Weekend . Thr : 3 > , 'Fri' : < Weekend . Fri : 4 > , 'Sat' : < Weekend . Sat : 5 > , 'Sun' : < Weekend . Sun : 6 > } >>> type ( Weekend . __members__ ) < class ' mappingproxy '>","title":"\u679a\u4e3e\u904d\u5386"},{"location":"Python/Adavanced/OOP/Python-No-14-Enum/#_4","text":"\u679a\u4e3e\u6210\u5458\u5e76\u975e\u6574\u578b\uff0c\u800c\u662f\u4e00\u79cd\u6620\u5c04\u7c7b\u578b\uff0c\u662f\u4e0d\u80fd\u505a\u5927\u5c0f\u6bd4\u8f83\u7684 \u5f53\u65f6\u53ef\u4ee5\u505a\u76f8\u7b49\u6bd4\u8f83 >>> Weekend . Mon == Weekend . Mon True >>> Weekend . Mon == Weekend . Tue False >>> Weekend . Mon != Weekend . Tue True >>> Weekend . Mon == 0 False","title":"\u679a\u4e3e\u6bd4\u8f83"},{"location":"Python/Adavanced/OOP/Python-No-14-Enum/#_5","text":"\u9650\u5b9a\u679a\u4e3e\u552f\u4e00\u6027\u662f\u6307 \u9650\u5236\u679a\u4e3e\u7c7b\u4e2d\u7684\u679a\u4e3e\u6210\u5458 \u7684 \u540d\u79f0\u548c\u503c\u90fd\u4e0d\u91cd\u590d \u9650\u5b9a\u679a\u4e3e\u552f\u4e00\u6027\u975e\u5e38\u7b80\u5355 \u5bfc\u5165 unique\u7c7b\uff0c\u7136\u540e\u5728\u81ea\u5b9a\u4e49\u7684\u679a\u4e3e\u7c7b\u524d\u52a0\u4e0a\u88c5\u9970\u5668 @unique from enum import Enum , unique @unique class Weekend : Mon = 0 Tue = 1 Wed = 2 Thr = 3 Fri = 4 Sat = 5 Sun = 6","title":"\u9650\u5b9a\u679a\u4e3e\u552f\u4e00\u6027"},{"location":"Python/Adavanced/Thread/Python-No-15-Abstract/","text":"\u8fdb\u7a0b\u662f**\u5185\u5b58\u8d44\u6e90\u5206\u914d\u7684\u5355\u4f4d** \u7ebf\u7a0b\u662f**\u64cd\u4f5c\u7cfb\u7edf\u8c03\u5ea6\u7684\u5355\u4f4d**\uff0c\u771f\u6b63\u6267\u884c\u4efb\u52a1\u7684\u662f\u7ebf\u7a0b \u534f\u7a0b\u662f\u7ebf\u7a0b\u4e2d**\u4efb\u52a1\u7ec6\u5206\u4e0b\u6765\u7684\u5355\u4f4d** \u4ee3\u7801\u662f\u7531\u7ebf\u7a0b\u6267\u884c\u7684 \u7ebf\u7a0b\u5fc5\u987b\u5728\u8fdb\u7a0b\u4e2d\u8fd0\u884c \u7ebf\u7a0b\u53ef\u4ee5\u62c6\u5206\u6210\u591a\u4e2a\u534f\u7a0b \u4ece\u56fe\u4e2d\u53ef\u4ee5\u770b\u51fa \u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u67091\u6216\u591a\u4e2a\u7ebf\u7a0b\uff0c\u8fdb\u7a0b\u5c31\u50cf\u4e00\u4e2a\u5bb9\u5668\u4e00\u6837\uff0c\u662f\u5185\u5b58\u8d44\u6e90\u5206\u914d\u7684\u5355\u4f4d \u7ebf\u7a0b\u662f\u7531\u64cd\u4f5c\u7cfb\u7edf\u8c03\u5ea6\u7684\uff0c\u628aCPU\u8ba1\u7b97\u8d44\u6e90\u7ed9\u54ea\u4e2a\u7ebf\u7a0b\u4f7f\u7528\u662f\u64cd\u4f5c\u7cfb\u7edf\u7ba1\u7684 \u6bcf\u4e2a\u7ebf\u7a0b\u91cc\u6216\u591a\u6216\u5c11\u6709\u51e0\u4e2a\u534f\u7a0b\uff0c\u8fd9\u4e9b\u662f\u7a0b\u5e8f\u7ba1\u7406\u7684 \u7a0b\u5e8f > \u8fdb\u7a0b > \u7ebf\u7a0b > \u534f\u7a0b \u4ee3\u7801\u5199\u597d\u4e86\uff0c\u8eba\u5728\u786c\u76d8\u4e86\uff0c\u90a3\u53eb**\u7a0b\u5e8f** \u4ee3\u7801\u62ff\u5230\u5185\u5b58\u91cc\u8dd1\uff0c\u90a3\u53eb**\u8fdb\u7a0b** \u7a0b\u5e8f\u89c9\u5f97\u4e00\u4e2a\u4e3b\u8fdb\u7a0b\u4e0d\u591f\uff0c\u53ef\u4ee5\u518d\u5f00N\u4e2a**\u5b50\u8fdb\u7a0b** \u8fdb\u7a0b\u53ea\u662f\u4e00\u4e2a\u5bb9\u5668\uff0c\u9700\u8981\u5e72\u6d3b\u7684\uff0c\u6240\u4ee5\u5f97\u6709**\u7ebf\u7a0b** \u8fdb\u7a0b\u89c9\u5f97\u4e00\u4e2a\u4e3b\u7ebf\u7a0b\u4e0d\u591f\uff0c\u53ef\u4ee5\u518d\u5f00N\u4e2a**\u5b50\u7ebf\u7a0b** \u7ebf\u7a0b\u89c9\u5f97\u6709\u5f88\u591a\u8017\u65f6\u64cd\u4f5c\uff08\u5982\u8bfb\u5199\u6587\u4ef6\u3001\u7f51\u7edc\u8bf7\u6c42\uff09\uff0c\u60f3\u628a\u7b49\u5f85\u7684\u65f6\u95f4\u5229\u7528\u8d77\u6765\u505a\u5176\u4ed6\u8fd8\u6ca1\u5b8c\u6210\u7684\u4efb\u52a1\uff0c\u53ef\u4ee5\u641e\u51fa\u5f88\u591a\u4e2a**\u534f\u7a0b** \u8fd9\u4e48\u591a\u4e2a\u6982\u5ff5\uff0c\u5176\u88ab\u53d1\u660e\u7684\u76ee\u7684\u90fd\u662f\u4e3a\u4e86**\u66f4\u9ad8\u6548\u7684\u5229\u7528\u8ba1\u7b97\u673a** \u5728\u4e0a\u53e4\u65f6\u4ee3\uff0c\u5355CPU-\u5355\u6838\uff0c\u5728\u540c\u4e00\u65f6\u95f4\u5185\u53ea\u80fd\u505a\u4e00\u4ef6\u4e8b\u60c5\uff0c\u4e0d\u53ef\u80fd\u50cf\u73b0\u5728\u8fd9\u6837\u53c8\u542c\u6b4c\u53c8\u4e0a\u7f51\u53c8\u5199\u6587\u6863 \u4eba\u4eec\u53d1\u73b0CPU\u7684\u8ba1\u7b97\u901f\u5ea6\u5947\u9ad8\uff0c\u6240\u4ee5\u5229\u7528\u4e86\u65f6\u95f4\u7247(\u5c31\u662f\u77ed\u5230\u4eba\u7c7b\u65e0\u6cd5\u53d1\u73b0\u7684\u65f6\u957f)\u591a\u6b21\u5207\u6362\u8fd0\u884c\u7a0b\u5e8f\uff0c\u96e8\u9732\u5747\u6cbe \u8fd9\u6837 \u5355CPU-\u5355\u6838 \u4e5f\u80fd\u5b9e\u73b0\u591a\u4e2a\u4efb\u52a1\u540c\u65f6\u8fdb\u884c\u3002 \u4e0d\u8fc7\u8fd9\u53ea\u662f\u770b\u8d77\u6765\u50cf\u662f\u5728\u540c\u65f6\u8fd0\u884c\uff0c\u5982\u679c\u4f60\u80fd\u6682\u505c\u65f6\u95f4\uff0c\u4f60\u4f1a\u53d1\u73b0CPU\u53ea\u662f\u5728\u6267\u884c\u67d0\u4e00\u4e2a\u7a0b\u5e8f\u800c\u5df2\u3002 \u8fd9\u79cd\u8ba9CPU\u8d44\u6e90\u5728\u7a0b\u5e8f\u4e4b\u95f4\u53cd\u590d\u6a2a\u8df3\uff0c\u4ece\u800c\u5b9e\u73b0\u591a\u4efb\u52a1\u7684\u6280\u672f\uff0c\u53eb\u505a**\u5e76\u53d1** \u90a3\u5982\u679c\u6211\u5c31\u662f\u60f3\u8981\u6309\u4e0b\u65f6\u95f4\u6682\u505c\u6309\u94ae\u7684\u65f6\u5019\uff0c\u771f\u7684\u6709\u591a\u4e2a\u7a0b\u5e8f\u5728\u4e00\u8d77\u6267\u884c\u600e\u4e48\u529e\uff1f \u518d\u52a0\u4e2aCPU\u54af\u3002\u8fd9\u53eb**\u5e76\u884c** \u4e3e\u4e2a\u6817\u5b50 \u00b6 \u73b0\u5728\u6709\u4e00\u4e2a\u73a9\u5177\u5382\uff0c\u5382\u91cc\u9762\u67092\u4e2a\u8f66\u95f4\uff1a\u4e00\u4e2a\u751f\u4ea7\u73a9\u5177\uff0c\u4e00\u4e2a\u751f\u4ea7\u5bb6\u7535 \u6bcf\u4e2a\u8f66\u95f4\u6709N\u6761\u6d41\u6c34\u7ebf\uff0c\u6bcf\u6761\u6d41\u6c34\u7ebf\u4e0a\u6709N\u4e2a\u5de5\u4eba\uff0c\u6bcf\u4e2a\u5de5\u4eba\u90fd\u6709\u5404\u81ea\u7684\u4efb\u52a1 \u8f66\u95f4\u9700\u8981\u5730\u65b9\u642d\u5efa\uff0c\u8fd8\u9700\u8981\u7535\u529b\u4f9b\u5e94 \u6211\u4eec\u634b\u4e00\u634b\u5173\u7cfb\uff1a \u53d1\u7535\u673a -> CPU \u5382 -> \u5185\u5b58 \u8f66\u95f4 -> \u8fdb\u7a0b \u6d41\u6c34\u7ebf -> \u7ebf\u7a0b \u5de5\u4eba -> \u4efb\u52a1 \u8f66\u95f4\u6ca1\u5efa\u8d77\u6765\uff0c\u5c31\u50cf\u4ee3\u7801\u653e\u5728\u786c\u76d8\u91cc\uff0c\u4ee3\u7801\u6254\u786c\u76d8\u91cc\u4e0d\u5c31\u53eb**\u7a0b\u5e8f**\u4e48 \u628a \u8f66\u95f4 \u5efa\u5230 \u5382\u623f \u91cc\u7528\u8d77\u6765\uff0c\u90a3\u4e9b \u8f66\u95f4 \u5c31\u6210\u4e86 \u6709\u7528\u7684\u8f66\u95f4 \u628a \u4ee3\u7801 \u653e\u5230 \u5185\u5b58 \u91cc\u8dd1\u8d77\u6765\uff0c\u90a3\u4e9b \u4ee3\u7801 \u5c31\u6210\u4e86 \u8fdb\u7a0b \u8f66\u95f4 \u642d\u597d\u4e86\u5f97\u6709 \u6d41\u6c34\u7ebf \u6765 \u7ec4\u88c5\u4ea7\u54c1\u554a \u8fdb\u7a0b \u5efa\u597d\u4e86\u8fd8\u5f97\u6709 \u7ebf\u7a0b \u6765 \u6267\u884c\u4efb\u52a1\u554a \u6240\u4ee5\u6bcf\u4e2a\u8f66\u95f4\u81f3\u5c11\u6709\u4e00\u6761\u4e3b\u6d41\u6c34\u7ebf \u6240\u4ee5\u6bcf\u4e2a\u8fdb\u7a0b\u81f3\u5c11\u6709\u4e00\u4e2a\u4e3b\u7ebf\u7a0b \u8f66\u95f4 \u4e00\u5f00\u59cb\u53ea\u6709\u4e00\u6761\u4e3b\u6d41\u6c34\u7ebf\u505a\u5168\u90e8\u6b65\u9aa4\uff0c\u6709\u5929\u53d1\u73b0\u6709\u4e2a\u6b65\u9aa4\u7279\u522b\u9ebb\u70e6 \u8fdb\u7a0b \u4e00\u5f00\u59cb\u53ea\u6709\u4e00\u4e2a**\u4e3b\u7ebf\u7a0b**\u505a\u6240\u6709\u4e8b\u60c5\uff0c\u6709\u5929\u53d1\u73b0\u6709\u4e2a\u64cd\u4f5c\u7279\u522b\u8017\u65f6 \u4e8e\u662f\u4e3b\u6d41\u6c34\u7ebf\u5c31\u518d\u62c9\u4e86\u4e00\u6761\u526f\u6d41\u6c34\u7ebf\u6765\u8d1f\u8d23\u8fd9\u4e2a\u9ebb\u70e6\u7684\u6b65\u9aa4\uff0c\u81ea\u5df1\u7ee7\u7eed\u4e0b\u4e00\u6b65\uff0c\u518d\u6709\u9ebb\u70e6\u6b65\u9aa4\u5c31\u7ee7\u7eed\u52a0\u526f\u6d41\u6c34\u7ebf \u4e8e\u662f\u4e3b\u7ebf\u7a0b\u5f00\u542f\u4e00\u4e2a**\u5b50\u7ebf\u7a0b**\u6765\u8d1f\u8d23\u8fd9\u4e2a\u8017\u65f6\u64cd\u4f5c\uff0c\u4e3b\u7ebf\u7a0b\u7ee7\u7eed\u6267\u884c\uff0c\u518d\u6709\u8017\u65f6\u64cd\u4f5c\u5c31\u7ee7\u7eed\u52a0\u5b50\u7ebf\u7a0b \u6709\u4e00\u5929\u5355\u5b50\u592a\u591a\uff0c\u4e00\u6761\u8f66\u95f4\u4e0d\u591f\uff0c\u90a3\u5c31\u52a0\u6761\u526f\u8f66\u95f4\u54af\uff0c\u518d\u4e0d\u591f\u518d\u52a0 \u6709\u4e00\u5929\u8ba1\u7b97\u91cf\u592a\u5927\uff0c\u4e00\u4e2a\u8fdb\u7a0b\u4e0d\u591f\uff0c\u90a3\u5c31\u52a0\u4e2a**\u5b50\u8fdb\u7a0b**\u54af\uff0c\u518d\u4e0d\u591f\u518d\u52a0 \u800c\u4e14\u526f\u8f66\u95f4\u5f97\u66f4\u4e3b\u8f66\u95f4\u4e00\u6a21\u4e00\u6837 \u800c\u4e14\u5b50\u8fdb\u7a0b\u5f97\u5b8c\u5168\u590d\u5236\u4e3b\u8fdb\u7a0b\uff0c\u5305\u62ec\u4ee3\u7801\u3001\u72b6\u6001\u7b49\u7b49 \u5e76\u4e14\uff0c\u4e00\u4e2a\u8f66\u95f4\u6302\u4e86\u6ca1\u4e8b\uff0c\u4e0d\u4f1a\u5f71\u54cd\u5176\u4ed6\u8f66\u95f4 \u5e76\u4e14\uff0c\u4e00\u4e2a\u8fdb\u7a0b\u6302\u4e86\u6ca1\u4e8b\uff0c\u4e0d\u4f1a\u5f71\u54cd\u5176\u4ed6\u8fdb\u7a0b \u90a3\u73b0\u5728\u8f66\u95f4\u4e4b\u95f4 \u8981\u4f20\u9012\u96f6\u4ef6\u600e\u4e48\u529e\uff0c\u642d\u4e2a\u7ba1\u5b50\uff0c\u76f4\u63a5\u6e9c\u8fc7\u53bb\uff0c\u5148\u653e\u7684\u522b\u4eba\u5c31\u5148\u62ff\u5230 \u90a3\u73b0\u5728**\u8fdb\u7a0b\u4e4b\u95f4**\u8981\u8fdb\u884c**\u901a\u4fe1**\u600e\u4e48\u529e\uff0c\u7528**\u961f\u5217**\u6216\u8005**\u7ba1\u9053**\u5457\uff0c\u5148\u653e\u7684\u5c31\u5148\u62ff\u5230 \u90a3\u6d41\u6c34\u7ebf\u4e4b\u95f4\u8981\u4f20\u9012\u4e1c\u897f\u600e\u4e48\u529e\uff1f\u653e\u8f66\u95f4\u7684\u5de5\u5177\u8f66\u4e0a\u4e0d\u5c31\u5b8c\u4e86 \u90a3\u7ebf\u7a0b\u4e4b\u95f4\u8981**\u901a\u4fe1**\u600e\u4e48\u529e\uff1f\u7528**\u5168\u5c40\u53d8\u91cf**\u4e0d\u5c31\u5b8c\u4e86 \u6d41\u6c34\u7ebf\u8ddf\u8f66\u95f4\u53ef\u4e0d\u4e00\u6837\uff0c\u8981\u662f\u54ea\u6761\u526f\u6d41\u6c34\u7ebf\u6302\u4e86\u662f\u4f1a\u5f71\u54cd\u6574\u4e2a\u8f66\u95f4\u7684 \u7ebf\u7a0b\u8ddf\u8fdb\u7a0b\u53ef\u4e0d\u4e00\u6837\uff0c\u8981\u662f\u54ea\u4e2a\u5b50\u7ebf\u7a0b\u6302\u4e86\u662f\u4f1a\u5f71\u54cd\u6574\u4e2a\u8fdb\u7a0b\u7684 \u4e3b\u6d41\u6c34\u7ebf\u8981\u662f\u6302\u4e86\uff0c\u6574\u4e2a\u8f66\u95f4\u5b8c\u728a\u5b50 \u4e3b\u7ebf\u7a0b\u8981\u662f\u6302\u4e86\uff0c\u6574\u4e2a\u8fdb\u7a0b\u5b8c\u728a\u5b50 \u6709\u7684\u6d41\u6c34\u7ebf\u5c31\u4e00\u4e2a\u5de5\u4eba\uff0c\u6709\u7684\u6d41\u6c34\u7ebf\u6709\u591a\u4e2a\u5de5\u4eba\uff0c\u8fd9\u4e2a\u5de5\u4eba\u52a8\u4f5c\u6162\u4e86\uff0c\u5c31\u628a\u87ba\u4e1d\u5200\u7ed9\u522b\u7684\u5de5\u4eba\u5148\u7528 \u6709\u7684\u7ebf\u7a0b\u5c31\u4e00\u4e2a\u534f\u7a0b\uff0c\u6709\u7684\u7ebf\u7a0b\u6709\u591a\u4e2a\u534f\u7a0b\uff0c\u8fd9\u4e2a\u534f\u7a0b\u963b\u585e\u4e86\uff0c\u5c31\u628a\u8fd0\u884c\u6743\u7ed9\u522b\u7684\u534f\u7a0b \u8fd9\u79cd\u79ef\u6781\u5229\u7528\u7b49\u5f85\u65f6\u95f4\u5b89\u6392\u5176\u4ed6\u5de5\u4eba\u7684\u6a21\u5f0f\uff0c\u53eb\u505a\u9ad8\u6548\u5229\u7528\u65f6\u95f4 \u8fd9\u79cd\u79ef\u6781\u5229\u7528\u7b49\u5f85\u65f6\u95f4\u505a\u5176\u4ed6\u4efb\u52a1\u7684\u5f62\u5f0f\uff0c\u53eb\u505a**\u534f\u7a0b** \u90a3\u73b0\u5728\u53d1\u7535\u673a\u53ea\u6709\u4e00\u4e2a\uff0c\u751f\u4ea7\u73a9\u5177\u7684\u8f66\u95f4\u8981\u7528\uff0c\u751f\u4ea7\u5bb6\u7535\u7684\u8f66\u95f4\u8981\u7528\uff0c\u8001\u677f\u53c8\u60f3\u4e24\u4e2a\u8f66\u95f4\u540c\u65f6\u751f\u4ea7 \u90a3\u73b0\u5728CPU\u53ea\u6709\u4e00\u4e2a\uff0c\u8fdb\u7a0bA\u8981\u7528\uff0c\u8fdb\u7a0bB\u8981\u7528\uff0c\u7528\u6237\u53c8\u60f3\u4e24\u4e2a\u8fdb\u7a0b\u4f7f\u7528\u8fd0\u884c \u90a3\u5c31\u8ba9\u53d1\u7535\u673a\u5feb\u901f\u5728\u4e24\u4e2a\u8f66\u95f4\u4e4b\u95f4\u5feb\u901f\u5207\u6362\uff0c\u54ea\u4e2a\u8f66\u95f4\u6709\u7535\u4e86\u7acb\u9a6c\u5e72\u6d3b\uff0c\u6ca1\u7535\u4e86\u7acb\u9a6c\u6682\u505c \u90a3\u5c31\u8ba9CPU\u8d44\u6e90\u5728\u4e24\u4e2a\u8fdb\u7a0b\u4e4b\u95f4\u53cd\u590d\u6a2a\u8df3\uff0c\u54ea\u4e2a\u8fdb\u7a0b\u88ab\u9009\u4e2d\u4e86\u7acb\u9a6c\u8fd0\u884c\uff0c\u65f6\u95f4\u7247\u5230\u4e86\u7acb\u9a6c\u6682\u505c \u56e0\u4e3a\u901f\u5ea6\u975e\u5e38\u5feb\uff0c\u6240\u4ee5\u8001\u677f\u770b\u7740\u4ee5\u4e3a\u4e24\u4e2a\u8f66\u95f4\u90fd\u542f\u52a8\u4e86 \u56e0\u4e3a\u901f\u5ea6\u975e\u5e38\u5feb\uff0c\u6240\u4ee5\u7528\u6237\u771f\u7684\u4ee5\u4e3a\u4e24\u4e2a\u4efb\u52a1\u540c\u65f6\u8fd0\u884c\uff0c\u8fd9\u53eb**\u5e76\u53d1** \u6709\u4e00\u5929\u8001\u677f\u53d1\u8d22\uff0c\u52a0\u4e86\u4e00\u53f0\u53d1\u7535\u673a\uff0c\u8fd9\u4e0b\u4e24\u4e2a\u8f66\u95f4\u90fd\u6709\u7535\u4e86\uff0c\u771f\u6b63\u7684\u4e24\u4e2a\u8f66\u95f4\u540c\u65f6\u751f\u4ea7 \u6709\u4e00\u5929\u7528\u6237\u53d1\u8d22\uff0c\u52a0\u4e86\u4e00\u4e2aCPU\uff0c\u8fd9\u4e0b\u4e24\u4e2a\u8fdb\u7a0b\u90fd\u6709\u8d44\u6e90\u4e86\uff0c\u771f\u6b63\u5b9e\u73b0\u4e24\u4e2a\u8fdb\u7a0b\u540c\u65f6\u8fd0\u884c\uff0c\u8fd9\u53eb**\u5e76\u884c** \u8fdb\u7a0b\u5360\u7684\u8d44\u6e90\u6bd4\u8f83\u5927\uff0c\u4f46\u662f\u5b89\u5168\uff0c\u4e00\u4e2a\u8fdb\u7a0b\u6302\u6389\u4e0d\u4f1a\u5bfc\u81f4\u53e6\u5916\u4e00\u4e2a\u8fdb\u7a0b\u6302\u6389 \u7ebf\u7a0b\u5207\u6362\u5f00\u9500\u66f4\u5c0f \u534f\u7a0b\u5229\u7528\u7b49\u5f85\u7684\u65f6\u95f4\u505a\u522b\u7684\u4e8b\uff0c\u4f46\u662f\u9700\u8981\u7a0b\u5e8f\u627f\u62c5\u8c03\u5ea6\u8d23\u4efb \u5728\u4e0d\u8003\u8651 GIL\uff08\u5168\u5c40\u9501\uff09\u7684\u60c5\u51b5\u4e0b\uff0c\u4f18\u5148\u7528\u534f\u7a0b\u3001\u518d\u7528\u7ebf\u7a0b\u3001\u6700\u540e\u7528\u8fdb\u7a0b","title":"\u603b\u53d9"},{"location":"Python/Adavanced/Thread/Python-No-15-Abstract/#_1","text":"\u73b0\u5728\u6709\u4e00\u4e2a\u73a9\u5177\u5382\uff0c\u5382\u91cc\u9762\u67092\u4e2a\u8f66\u95f4\uff1a\u4e00\u4e2a\u751f\u4ea7\u73a9\u5177\uff0c\u4e00\u4e2a\u751f\u4ea7\u5bb6\u7535 \u6bcf\u4e2a\u8f66\u95f4\u6709N\u6761\u6d41\u6c34\u7ebf\uff0c\u6bcf\u6761\u6d41\u6c34\u7ebf\u4e0a\u6709N\u4e2a\u5de5\u4eba\uff0c\u6bcf\u4e2a\u5de5\u4eba\u90fd\u6709\u5404\u81ea\u7684\u4efb\u52a1 \u8f66\u95f4\u9700\u8981\u5730\u65b9\u642d\u5efa\uff0c\u8fd8\u9700\u8981\u7535\u529b\u4f9b\u5e94 \u6211\u4eec\u634b\u4e00\u634b\u5173\u7cfb\uff1a \u53d1\u7535\u673a -> CPU \u5382 -> \u5185\u5b58 \u8f66\u95f4 -> \u8fdb\u7a0b \u6d41\u6c34\u7ebf -> \u7ebf\u7a0b \u5de5\u4eba -> \u4efb\u52a1 \u8f66\u95f4\u6ca1\u5efa\u8d77\u6765\uff0c\u5c31\u50cf\u4ee3\u7801\u653e\u5728\u786c\u76d8\u91cc\uff0c\u4ee3\u7801\u6254\u786c\u76d8\u91cc\u4e0d\u5c31\u53eb**\u7a0b\u5e8f**\u4e48 \u628a \u8f66\u95f4 \u5efa\u5230 \u5382\u623f \u91cc\u7528\u8d77\u6765\uff0c\u90a3\u4e9b \u8f66\u95f4 \u5c31\u6210\u4e86 \u6709\u7528\u7684\u8f66\u95f4 \u628a \u4ee3\u7801 \u653e\u5230 \u5185\u5b58 \u91cc\u8dd1\u8d77\u6765\uff0c\u90a3\u4e9b \u4ee3\u7801 \u5c31\u6210\u4e86 \u8fdb\u7a0b \u8f66\u95f4 \u642d\u597d\u4e86\u5f97\u6709 \u6d41\u6c34\u7ebf \u6765 \u7ec4\u88c5\u4ea7\u54c1\u554a \u8fdb\u7a0b \u5efa\u597d\u4e86\u8fd8\u5f97\u6709 \u7ebf\u7a0b \u6765 \u6267\u884c\u4efb\u52a1\u554a \u6240\u4ee5\u6bcf\u4e2a\u8f66\u95f4\u81f3\u5c11\u6709\u4e00\u6761\u4e3b\u6d41\u6c34\u7ebf \u6240\u4ee5\u6bcf\u4e2a\u8fdb\u7a0b\u81f3\u5c11\u6709\u4e00\u4e2a\u4e3b\u7ebf\u7a0b \u8f66\u95f4 \u4e00\u5f00\u59cb\u53ea\u6709\u4e00\u6761\u4e3b\u6d41\u6c34\u7ebf\u505a\u5168\u90e8\u6b65\u9aa4\uff0c\u6709\u5929\u53d1\u73b0\u6709\u4e2a\u6b65\u9aa4\u7279\u522b\u9ebb\u70e6 \u8fdb\u7a0b \u4e00\u5f00\u59cb\u53ea\u6709\u4e00\u4e2a**\u4e3b\u7ebf\u7a0b**\u505a\u6240\u6709\u4e8b\u60c5\uff0c\u6709\u5929\u53d1\u73b0\u6709\u4e2a\u64cd\u4f5c\u7279\u522b\u8017\u65f6 \u4e8e\u662f\u4e3b\u6d41\u6c34\u7ebf\u5c31\u518d\u62c9\u4e86\u4e00\u6761\u526f\u6d41\u6c34\u7ebf\u6765\u8d1f\u8d23\u8fd9\u4e2a\u9ebb\u70e6\u7684\u6b65\u9aa4\uff0c\u81ea\u5df1\u7ee7\u7eed\u4e0b\u4e00\u6b65\uff0c\u518d\u6709\u9ebb\u70e6\u6b65\u9aa4\u5c31\u7ee7\u7eed\u52a0\u526f\u6d41\u6c34\u7ebf \u4e8e\u662f\u4e3b\u7ebf\u7a0b\u5f00\u542f\u4e00\u4e2a**\u5b50\u7ebf\u7a0b**\u6765\u8d1f\u8d23\u8fd9\u4e2a\u8017\u65f6\u64cd\u4f5c\uff0c\u4e3b\u7ebf\u7a0b\u7ee7\u7eed\u6267\u884c\uff0c\u518d\u6709\u8017\u65f6\u64cd\u4f5c\u5c31\u7ee7\u7eed\u52a0\u5b50\u7ebf\u7a0b \u6709\u4e00\u5929\u5355\u5b50\u592a\u591a\uff0c\u4e00\u6761\u8f66\u95f4\u4e0d\u591f\uff0c\u90a3\u5c31\u52a0\u6761\u526f\u8f66\u95f4\u54af\uff0c\u518d\u4e0d\u591f\u518d\u52a0 \u6709\u4e00\u5929\u8ba1\u7b97\u91cf\u592a\u5927\uff0c\u4e00\u4e2a\u8fdb\u7a0b\u4e0d\u591f\uff0c\u90a3\u5c31\u52a0\u4e2a**\u5b50\u8fdb\u7a0b**\u54af\uff0c\u518d\u4e0d\u591f\u518d\u52a0 \u800c\u4e14\u526f\u8f66\u95f4\u5f97\u66f4\u4e3b\u8f66\u95f4\u4e00\u6a21\u4e00\u6837 \u800c\u4e14\u5b50\u8fdb\u7a0b\u5f97\u5b8c\u5168\u590d\u5236\u4e3b\u8fdb\u7a0b\uff0c\u5305\u62ec\u4ee3\u7801\u3001\u72b6\u6001\u7b49\u7b49 \u5e76\u4e14\uff0c\u4e00\u4e2a\u8f66\u95f4\u6302\u4e86\u6ca1\u4e8b\uff0c\u4e0d\u4f1a\u5f71\u54cd\u5176\u4ed6\u8f66\u95f4 \u5e76\u4e14\uff0c\u4e00\u4e2a\u8fdb\u7a0b\u6302\u4e86\u6ca1\u4e8b\uff0c\u4e0d\u4f1a\u5f71\u54cd\u5176\u4ed6\u8fdb\u7a0b \u90a3\u73b0\u5728\u8f66\u95f4\u4e4b\u95f4 \u8981\u4f20\u9012\u96f6\u4ef6\u600e\u4e48\u529e\uff0c\u642d\u4e2a\u7ba1\u5b50\uff0c\u76f4\u63a5\u6e9c\u8fc7\u53bb\uff0c\u5148\u653e\u7684\u522b\u4eba\u5c31\u5148\u62ff\u5230 \u90a3\u73b0\u5728**\u8fdb\u7a0b\u4e4b\u95f4**\u8981\u8fdb\u884c**\u901a\u4fe1**\u600e\u4e48\u529e\uff0c\u7528**\u961f\u5217**\u6216\u8005**\u7ba1\u9053**\u5457\uff0c\u5148\u653e\u7684\u5c31\u5148\u62ff\u5230 \u90a3\u6d41\u6c34\u7ebf\u4e4b\u95f4\u8981\u4f20\u9012\u4e1c\u897f\u600e\u4e48\u529e\uff1f\u653e\u8f66\u95f4\u7684\u5de5\u5177\u8f66\u4e0a\u4e0d\u5c31\u5b8c\u4e86 \u90a3\u7ebf\u7a0b\u4e4b\u95f4\u8981**\u901a\u4fe1**\u600e\u4e48\u529e\uff1f\u7528**\u5168\u5c40\u53d8\u91cf**\u4e0d\u5c31\u5b8c\u4e86 \u6d41\u6c34\u7ebf\u8ddf\u8f66\u95f4\u53ef\u4e0d\u4e00\u6837\uff0c\u8981\u662f\u54ea\u6761\u526f\u6d41\u6c34\u7ebf\u6302\u4e86\u662f\u4f1a\u5f71\u54cd\u6574\u4e2a\u8f66\u95f4\u7684 \u7ebf\u7a0b\u8ddf\u8fdb\u7a0b\u53ef\u4e0d\u4e00\u6837\uff0c\u8981\u662f\u54ea\u4e2a\u5b50\u7ebf\u7a0b\u6302\u4e86\u662f\u4f1a\u5f71\u54cd\u6574\u4e2a\u8fdb\u7a0b\u7684 \u4e3b\u6d41\u6c34\u7ebf\u8981\u662f\u6302\u4e86\uff0c\u6574\u4e2a\u8f66\u95f4\u5b8c\u728a\u5b50 \u4e3b\u7ebf\u7a0b\u8981\u662f\u6302\u4e86\uff0c\u6574\u4e2a\u8fdb\u7a0b\u5b8c\u728a\u5b50 \u6709\u7684\u6d41\u6c34\u7ebf\u5c31\u4e00\u4e2a\u5de5\u4eba\uff0c\u6709\u7684\u6d41\u6c34\u7ebf\u6709\u591a\u4e2a\u5de5\u4eba\uff0c\u8fd9\u4e2a\u5de5\u4eba\u52a8\u4f5c\u6162\u4e86\uff0c\u5c31\u628a\u87ba\u4e1d\u5200\u7ed9\u522b\u7684\u5de5\u4eba\u5148\u7528 \u6709\u7684\u7ebf\u7a0b\u5c31\u4e00\u4e2a\u534f\u7a0b\uff0c\u6709\u7684\u7ebf\u7a0b\u6709\u591a\u4e2a\u534f\u7a0b\uff0c\u8fd9\u4e2a\u534f\u7a0b\u963b\u585e\u4e86\uff0c\u5c31\u628a\u8fd0\u884c\u6743\u7ed9\u522b\u7684\u534f\u7a0b \u8fd9\u79cd\u79ef\u6781\u5229\u7528\u7b49\u5f85\u65f6\u95f4\u5b89\u6392\u5176\u4ed6\u5de5\u4eba\u7684\u6a21\u5f0f\uff0c\u53eb\u505a\u9ad8\u6548\u5229\u7528\u65f6\u95f4 \u8fd9\u79cd\u79ef\u6781\u5229\u7528\u7b49\u5f85\u65f6\u95f4\u505a\u5176\u4ed6\u4efb\u52a1\u7684\u5f62\u5f0f\uff0c\u53eb\u505a**\u534f\u7a0b** \u90a3\u73b0\u5728\u53d1\u7535\u673a\u53ea\u6709\u4e00\u4e2a\uff0c\u751f\u4ea7\u73a9\u5177\u7684\u8f66\u95f4\u8981\u7528\uff0c\u751f\u4ea7\u5bb6\u7535\u7684\u8f66\u95f4\u8981\u7528\uff0c\u8001\u677f\u53c8\u60f3\u4e24\u4e2a\u8f66\u95f4\u540c\u65f6\u751f\u4ea7 \u90a3\u73b0\u5728CPU\u53ea\u6709\u4e00\u4e2a\uff0c\u8fdb\u7a0bA\u8981\u7528\uff0c\u8fdb\u7a0bB\u8981\u7528\uff0c\u7528\u6237\u53c8\u60f3\u4e24\u4e2a\u8fdb\u7a0b\u4f7f\u7528\u8fd0\u884c \u90a3\u5c31\u8ba9\u53d1\u7535\u673a\u5feb\u901f\u5728\u4e24\u4e2a\u8f66\u95f4\u4e4b\u95f4\u5feb\u901f\u5207\u6362\uff0c\u54ea\u4e2a\u8f66\u95f4\u6709\u7535\u4e86\u7acb\u9a6c\u5e72\u6d3b\uff0c\u6ca1\u7535\u4e86\u7acb\u9a6c\u6682\u505c \u90a3\u5c31\u8ba9CPU\u8d44\u6e90\u5728\u4e24\u4e2a\u8fdb\u7a0b\u4e4b\u95f4\u53cd\u590d\u6a2a\u8df3\uff0c\u54ea\u4e2a\u8fdb\u7a0b\u88ab\u9009\u4e2d\u4e86\u7acb\u9a6c\u8fd0\u884c\uff0c\u65f6\u95f4\u7247\u5230\u4e86\u7acb\u9a6c\u6682\u505c \u56e0\u4e3a\u901f\u5ea6\u975e\u5e38\u5feb\uff0c\u6240\u4ee5\u8001\u677f\u770b\u7740\u4ee5\u4e3a\u4e24\u4e2a\u8f66\u95f4\u90fd\u542f\u52a8\u4e86 \u56e0\u4e3a\u901f\u5ea6\u975e\u5e38\u5feb\uff0c\u6240\u4ee5\u7528\u6237\u771f\u7684\u4ee5\u4e3a\u4e24\u4e2a\u4efb\u52a1\u540c\u65f6\u8fd0\u884c\uff0c\u8fd9\u53eb**\u5e76\u53d1** \u6709\u4e00\u5929\u8001\u677f\u53d1\u8d22\uff0c\u52a0\u4e86\u4e00\u53f0\u53d1\u7535\u673a\uff0c\u8fd9\u4e0b\u4e24\u4e2a\u8f66\u95f4\u90fd\u6709\u7535\u4e86\uff0c\u771f\u6b63\u7684\u4e24\u4e2a\u8f66\u95f4\u540c\u65f6\u751f\u4ea7 \u6709\u4e00\u5929\u7528\u6237\u53d1\u8d22\uff0c\u52a0\u4e86\u4e00\u4e2aCPU\uff0c\u8fd9\u4e0b\u4e24\u4e2a\u8fdb\u7a0b\u90fd\u6709\u8d44\u6e90\u4e86\uff0c\u771f\u6b63\u5b9e\u73b0\u4e24\u4e2a\u8fdb\u7a0b\u540c\u65f6\u8fd0\u884c\uff0c\u8fd9\u53eb**\u5e76\u884c** \u8fdb\u7a0b\u5360\u7684\u8d44\u6e90\u6bd4\u8f83\u5927\uff0c\u4f46\u662f\u5b89\u5168\uff0c\u4e00\u4e2a\u8fdb\u7a0b\u6302\u6389\u4e0d\u4f1a\u5bfc\u81f4\u53e6\u5916\u4e00\u4e2a\u8fdb\u7a0b\u6302\u6389 \u7ebf\u7a0b\u5207\u6362\u5f00\u9500\u66f4\u5c0f \u534f\u7a0b\u5229\u7528\u7b49\u5f85\u7684\u65f6\u95f4\u505a\u522b\u7684\u4e8b\uff0c\u4f46\u662f\u9700\u8981\u7a0b\u5e8f\u627f\u62c5\u8c03\u5ea6\u8d23\u4efb \u5728\u4e0d\u8003\u8651 GIL\uff08\u5168\u5c40\u9501\uff09\u7684\u60c5\u51b5\u4e0b\uff0c\u4f18\u5148\u7528\u534f\u7a0b\u3001\u518d\u7528\u7ebf\u7a0b\u3001\u6700\u540e\u7528\u8fdb\u7a0b","title":"\u4e3e\u4e2a\u6817\u5b50"},{"location":"Python/Adavanced/Thread/Python-No-16-Process/","text":"\u8fdb\u7a0b\uff0c\u662f\u8d44\u6e90\u5206\u914d\u7684\u5355\u4f4d \u7a0b\u5e8f\uff1a\u4f8b\u5982 xxx.py \u8fd9\u662f\u7a0b\u5e8f\uff0c\u662f\u9759\u6001\u7684 \u8fdb\u7a0b\uff1a\u4e00\u4e2a\u7a0b\u5e8f\u8fd0\u884c\u8d77\u6765\u540e\uff0c\u4ee3\u7801+\u7528\u5230\u7684\u8d44\u6e90 \u79f0\u4e4b\u4e3a\u8fdb\u7a0b\uff0c\u5b83\u662f\u64cd\u4f5c\u7cfb\u7edf\u5206\u914d\u8d44\u6e90\u7684 \u57fa\u672c\u5355\u5143 \u3002 \u8fdb\u7a0b\uff0c\u662f\u8d44\u6e90\u5206\u914d\u7684\u5355\u4f4d \u7ebf\u7a0b\uff0c\u662f\u64cd\u4f5c\u7cfb\u7edf\u8c03\u5ea6\u7684\u5355\u4f4d \u8fdb\u7a0b\u7684\u72b6\u6001 \u00b6 \u5de5\u4f5c\u4e2d\uff0c\u4efb\u52a1\u6570\u5f80\u5f80\u5927\u4e8eCPU\u6838\u5fc3\u6570\uff0c\u5373\u4e00\u5b9a\u6709\u4e00\u4e9b\u4efb\u4f55\u6b63\u5728\u6267\u884c\uff0c\u800c\u53e6\u5916\u4e00\u4e9b\u4efb\u52a1\u5728\u7b49\u5f85CPU\u8fdb\u884c\u6267\u884c \u56e0\u6b64\u8fdb\u7a0b\u6709\u4e0d\u540c\u7684\u72b6\u6001 \u8fdb\u7a0b\u7684\u72b6\u6001\u5206\u4e3a\uff1a \u65b0\u5efa \u3001 \u5c31\u7eea \u3001 \u8fd0\u884c \u3001 \u7b49\u5f85\uff08\u5835\u585e\uff09 \u3001 \u6b7b\u4ea1 \u5c31\u7eea\u6001\uff1a\u8fd0\u884c\u7684\u6761\u4ef6\u90fd\u5df2\u7ecf\u5177\u5907\uff0c\u6b63\u5728\u7b49\u5728CPU\u6267\u884c \u6267\u884c\u6001\uff1aCPU\u6b63\u5728\u6267\u884c\u5176\u529f\u80fd \u7b49\u5f85\u6001\uff1a\u7b49\u5f85\u67d0\u4e9b\u6761\u4ef6\u6ee1\u8db3\uff1b\u4f8b\u5982\u4e00\u4e2a\u7a0b\u5e8fsleep\u4e86\uff0c\u5c31\u5904\u4e8e\u7b49\u5f85\u6001 \u8fdb\u7a0b\u5c31\u597d\u50cf\u6d41\u6c34\u7ebf\u3002 \u4e00\u4e2a\u8fdb\u7a0b\u5c31\u662f\u4e00\u6761\u6d41\u6c34\u7ebf\uff0c\u6bcf\u6761\u6d41\u6c34\u7ebf\u4e4b\u95f4\u662f\u76f8\u4e92\u72ec\u7acb\u7684\uff1b \u6d41\u6c34\u7ebf\u5c65\u5e26\u4e0a\u7684\u4ea7\u54c1\u5c31\u662f\u5168\u5c40\u53d8\u91cf\uff1b \u6d41\u6c34\u7ebf\u4e0a\u7684\u5de5\u4eba\u5c31\u662f\u7ebf\u7a0b\uff1b \u4ea7\u54c1\uff08\u5168\u5c40\u53d8\u91cf\uff09\u5bf9\u4e8e\u540c\u4e00\u6761\u6d41\u6c34\u7ebf\u7684\u5de5\u4eba\uff08\u7ebf\u7a0b\uff09\u6765\u8bf4\u662f\u5171\u4eab\u7684\uff0c\u6bcf\u4e2a\u4eba\u90fd\u53ef\u4ee5\u8bbf\u95ee \u6d41\u6c34\u7ebf\uff08\u8fdb\u7a0b\uff09\u4e4b\u95f4\u662f\u76f8\u4e92\u72ec\u7acb\u7684\uff0c\u4e0d\u80fd\u6d41\u6c34\u7ebfA\u7684\u4ea7\u54c1\u53ef\u4ee5\u88ab\u6d41\u6c34\u7ebfB\u8bbf\u95ee\uff0c\u90a3\u4e0d\u5c31\u4e71\u5957\u4e86\u3002 \u521b\u5efa\u8fdb\u7a0b \u00b6 \u521b\u5efa\u8fdb\u7a0b\u5206\u4e3a\u4e09\u6b65\uff1a \u5bfc\u5165 multiprocessing \u6a21\u5757 \u521b\u5efa\u4e00\u4e2a Process \u5bf9\u8c61 \u901a\u8fc7 Process \u5bf9\u8c61\u542f\u52a8\u7ebf\u7a0b \u521b\u5efa\u4e00\u4e2a Process\u5bf9\u8c61\u7684\u65f6\u5019\u53ef\u4ee5\u4f20\u5165\u53c2\u6570 multiprocessing.Process(group=None, target=None, name=None, args=(), kwargs={}, *, daemon=None) \u5e94\u59cb\u7ec8\u4f7f\u7528\u5173\u952e\u5b57\u53c2\u6570\u8c03\u7528\u6784\u9020\u51fd\u6570\u3002 group\uff1a\u5e94\u8be5\u59cb\u7ec8\u662f None \uff1b\u5b83\u4ec5\u7528\u4e8e\u517c\u5bb9 threading.Thread \u3002 target\uff1a\u662f\u7531 run() \u65b9\u6cd5\u8c03\u7528\u7684\u53ef\u8c03\u7528\u5bf9\u8c61\u3002\u5b83\u9ed8\u8ba4\u4e3a None \uff0c\u610f\u5473\u7740\u4ec0\u4e48\u90fd\u6ca1\u6709\u88ab\u8c03\u7528\u3002 name\uff1a\u662f\u8fdb\u7a0b\u540d\u79f0 args\uff1a\u662f\u76ee\u6807\u8c03\u7528\u7684\u53c2\u6570\u5143\u7ec4\u3002 kwargs\uff1a\u662f\u76ee\u6807\u8c03\u7528\u7684\u5173\u952e\u5b57\u53c2\u6570\u5b57\u5178\u3002 daemon\uff1a \u5982\u679c\u63d0\u4f9b\uff0c\u5219\u952e\u53c2\u6570 daemon \u5c06\u8fdb\u7a0b daemon \u6807\u5fd7\u8bbe\u7f6e\u4e3a True \u6216 False \u3002 \u5982\u679c\u662f None \uff08\u9ed8\u8ba4\u503c\uff09\uff0c\u5219\u8be5\u6807\u5fd7\u5c06\u4ece\u521b\u5efa\u7684\u8fdb\u7a0b\u7ee7\u627f\u3002 \u5982\u679c\u5b50\u7c7b\u91cd\u8f7d\u4e86\u6784\u9020\u51fd\u6570\uff0c\u5fc5\u987b\u5148\u8c03\u7528\u7236\u7c7b\u6784\u9020\u5668 Process.__init__() \uff0c\u518d\u505a\u5176\u4ed6\u4e8b\u60c5\u3002 import multiprocessing import time def say_hi (): while True : print ( \"Hi-------\" ) time . sleep ( 1 ) def say_yes (): while True : print ( \"Yes------\" ) time . sleep ( 1 ) def main (): p1 = multiprocessing . Process ( target = say_hi ) p2 = multiprocessing . Process ( target = say_yes ) p1 . start () p2 . start () if __name__ == '__main__' : main () -------------------------------------------------- # Output: Hi ------- Yes ------ Hi ------- Yes ------ Hi ------- Yes ------ Hi ------- ... \u8fdb\u7a0b\u95f4\u901a\u4fe1 \u00b6 \u8fdb\u7a0b\u95f4\u7684\u901a\u4fe1\u6709\u5f88\u591a\u4e2d\u65b9\u5f0f\uff0c\u6bd4\u5982\u901a\u8fc7\u5e26\u7f51\u7edc\u529f\u80fd\u7684 socket \uff0c\u6216\u8005\u961f\u5217 Queue \u5047\u8bbe\u4e24\u4e2a\u8fdb\u7a0b\u4e4b\u95f4\u8981\u901a\u4fe1\uff0c\u8fdb\u7a0bA\u5411\u5185\u5b58\u4e2d\u7684 Queue \u653e\u8981\u901a\u4fe1\u7684\u5185\u5bb9\uff0c\u8fdb\u7a0bB\u53bb Queue \u4e2d\u53d6\u5373\u53ef\u3002 \u8fdb\u7a0b\u662f\u8fd0\u884c\u5728\u5185\u5b58\u4e2d\u7684\uff0c Queue \u4e5f\u662f\u8fd0\u884c\u5728\u5185\u5b58\u4e2d\u7684\uff0c\u6240\u4ee5\u901f\u5ea6\u5f88\u5feb\u3002 Queue \u5bf9\u4e8e\u8fdb\u7a0b\u6765\u8bf4\u662f\u5171\u4eab\u7684\u3002 import multiprocessing as p def download_from_web ( q ): \"\"\"\u4e0b\u8f7d\u6570\u636e\"\"\" # \u6a21\u62df\u4ece\u7f51\u4e0a\u4e0b\u8f7d\u7684\u6570\u636e data = [ 11 , 22 , 33 , 44 ] # \u5411\u961f\u5217\u4e2d\u5199\u5165\u6570\u636e for temp in data : if not q . full (): # \u5982\u679c\u961f\u5217\u672a\u6ee1 q . put ( temp ) # \u901a\u8fc7 put \u5c06\u5185\u5bb9\u653e\u8fdb\u961f\u5217 print ( \"download: \u4e0b\u8f7d\u5b8c\u6210\u5e76\u5b58\u5165\u961f\u5217\" ) def analysis_data ( q ): \"\"\"\u6570\u636e\u5904\u7406\"\"\" # \u4ece\u961f\u5217\u4e2d\u83b7\u53d6\u6570\u636e data = list () # \u6a21\u62df\u6570\u636e\u5904\u7406 while True : data . append ( q . get ()) # \u901a\u8fc7 get \u53d6\u961f\u5217\u4e2d\u7684\u5185\u5bb9 if q . empty (): # \u5982\u679c\u961f\u5217\u4e3a\u7a7a\u5219\u9000\u51fa break print ( \"analysis:\" , data ) def main (): # 1.\u521b\u5efa\u4e00\u4e2a\u961f\u5217 q = p . Queue ( 3 ) # 2.\u521b\u5efa\u591a\u4e2a\u8fdb\u7a0b\uff0c\u5c06\u961f\u5217\u7684\u5e94\u7528\u5f53\u4f5c\u5b9e\u53c2\u4f20\u9012\u5230\u91cc\u9762 p1 = p . Process ( target = download_from_web , args = ( q , )) p2 = p . Process ( target = analysis_data , args = ( q , )) p1 . start () p2 . start () if __name__ == \"__main__\" : main () def download_from_web ( q ): \"\"\"\u4e0b\u8f7d\u6570\u636e\"\"\" # \u6a21\u62df\u4ece\u7f51\u4e0a\u4e0b\u8f7d\u7684\u6570\u636e data = [ 11 , 22 , 33 , 44 ] # \u5411\u961f\u5217\u4e2d\u5199\u5165\u6570\u636e for temp in data : q . put ( temp ) print ( \"download: \u4e0b\u8f7d\u5b8c\u6210\u5e76\u5b58\u5165\u961f\u5217\" ) def analysis_data ( q ): \"\"\"\u6570\u636e\u5904\u7406\"\"\" # \u4ece\u961f\u5217\u4e2d\u83b7\u53d6\u6570\u636e data = list () # \u6a21\u62df\u6570\u636e\u5904\u7406 while True : data . append ( q . get ()) if q . empty (): break print ( \"analysis:\" , data ) def main (): # 1.\u521b\u5efa\u4e00\u4e2a\u961f\u5217 q = p . Queue ( 3 ) # 2.\u521b\u5efa\u591a\u4e2a\u8fdb\u7a0b\uff0c\u5c06\u961f\u5217\u7684\u5e94\u7528\u5f53\u4f5c\u5b9e\u53c2\u4f20\u9012\u5230\u91cc\u9762 p1 = p . Process ( target = download_from_web , args = ( q , )) p2 = p . Process ( target = analysis_data , args = ( q , )) p1 . start () p2 . start () if __name__ == \"__main__\" : main () -------------------------------------------------- # Output: download : \u4e0b\u8f7d\u5b8c\u6210\u5e76\u5b58\u5165\u961f\u5217 analysis : [ 11 , 22 , 33 , 44 ] q.put(obj[, block[, timeout]) obj\uff1a\u8981\u4f20\u9012\u7684\u5185\u5bb9 block\uff1a\u963b\u585e\uff0c\u9ed8\u8ba4True True\uff0c\u961f\u5217\u6ee1\u4e86\u4ee5\u540e\u4f1a\u4e00\u76f4\u7b49\u5f85 Flase\uff0c\u961f\u5217\u6ee1\u4e86\u4e4b\u540e\u4f1a\u629b\u51fa queue.Full \u9519\u8bef timeout\uff1a\u6d6e\u70b9\u578b\uff0c\u5355\u4f4d\u2014\u2014\u79d2\uff0c\u9ed8\u8ba4None\uff1b \u503c\u4e3a\u6b63\u6570\u65f6\uff0c\u7b49\u5f85\u65f6\u957f\u4e3a\u8bbe\u5b9a\u7684\u79d2\u6570 \u503c\u4e3a-1\u65f6\uff0c\u5c06\u65e0\u9650\u7b49\u5f85 blocking=Flase\u65f6\uff0ctimeout\u4e0d\u8d77\u4f5c\u7528\u3002 \u5982\u679c\u961f\u5217\u5173\u95ed\u5df2\u7ecf\u5173\u95ed\u4f1a\u629b\u51fa ValueError \uff083.8+\uff09 q.put_nowait(obj) \u76f8\u5f53\u4e8e q.put(block=Flase) q.get([block[, timeout]) block\uff1a\u963b\u585e\uff0c\u9ed8\u8ba4True True\uff0c\u961f\u5217\u7a7a\u4e86\u4ee5\u540e\u4f1a\u4e00\u76f4\u7b49\u5f85 Flase\uff0c\u961f\u5217\u7a7a\u4e86\u4e4b\u540e\u4f1a\u629b\u51fa queue.Empty \u9519\u8bef timeout\uff1a\u6d6e\u70b9\u578b\uff0c\u5355\u4f4d\u2014\u2014\u79d2\uff0c\u9ed8\u8ba4None\uff1b \u503c\u4e3a\u6b63\u6570\u65f6\uff0c\u7b49\u5f85\u65f6\u957f\u4e3a\u8bbe\u5b9a\u7684\u79d2\u6570 \u503c\u4e3a-1\u65f6\uff0c\u5c06\u65e0\u9650\u7b49\u5f85 blocking=Flase\u65f6\uff0ctimeout\u4e0d\u8d77\u4f5c\u7528\u3002 \u5982\u679c\u961f\u5217\u5173\u95ed\u5df2\u7ecf\u5173\u95ed\u4f1a\u629b\u51fa ValueError \uff083.8+\uff09 q.get_nowait() \u76f8\u5f53\u4e8e q.get(block=Flase) \u8fdb\u7a0b\u6c60 \u00b6 \u8fdb\u7a0b\u7684\u521b\u5efa\u548c\u6d88\u8d39\u662f\u5f88\u8017\u8d39\u8d44\u6e90\u7684\uff0c\u800c\u5b9e\u9645\u60c5\u51b5\u4e2d\u53ef\u80fd\u51fa\u73b0\u6210\u5343\u4e0a\u767e\u4e07\u4e2a\u8fdb\u7a0b\u9700\u8981\u6267\u884c\uff0c\u8fd9\u65f6\u5019\u4e0d\u53ef\u80fd\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u5355\u72ec\u521b\u5efa\u548c\u9500\u6bc1 \u8fd9\u4e9b\u8fdb\u7a0b\u5927\u540c\u5c0f\u5f02\uff0c\u4f46\u662f\u8fdb\u7a0b\u7684\u521b\u5efa\u548c\u9500\u6bc1\u662f\u76f8\u540c\u7684\u3002 \u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u628a\u521b\u5efa\u548c\u9500\u6bc1\u7684\u5de5\u4f5c\u62bd\u53d6\u51fa\u6765\uff0c\u901a\u8fc7\u66f4\u6362\u8fdb\u7a0b\u7684\u5185\u5bb9\uff0c\u4ee5\u6b64\u8fbe\u5230\u8f83\u5c0f\u5f00\u9500\u7684\u76ee\u7684\u3002 \u8fd9\u79cd\u6280\u672f\u53eb\u505a \u8fdb\u7a0b\u6c60 \u8fdb\u7a0b\u6c60\u5c31\u597d\u6bd4\u516c\u56ed\u91cc\u7684\u6e56\uff0c\u8fdb\u7a0b\u5c31\u597d\u6bd4\u8239\u3002 \u4f60\u4f5c\u4e3a\u8001\u677f\uff0c\u4eca\u5929\u6765\u4e86\u4e00\u4e2a\u4eba\u8981\u5212\u8239\uff0c\u4f60\u53bb\u4e70\u4e00\u8258\u8239\uff0c\u5ba2\u4eba\u5212\u5b8c\u4e86\u4f60\u628a\u8239\u5356\u4e86\u3002 \u660e\u5929\u518d\u6765\u4e24\u4e2a\u5ba2\u4eba\uff0c\u4f60\u53c8\u53bb\u4e70\u4e24\u8258\u8239\uff0c\u5ba2\u4eba\u5212\u5b8c\u4e86\u4f60\u53c8\u628a\u8239\u5356\u4e86\u3002 \u4e07\u4e00\u6765\u4e86\u4e00\u4e07\u4e2a\u5ba2\u4eba\uff0c\u4f60...\u6ca1\u94b1\u4e70\u8239\u4e86\u54c8\u54c8\u54c8\u3002 \u8fd9\u662f\u666e\u901a\u7684\u8fdb\u7a0b\u4f7f\u7528\u65b9\u6cd5\u3002 \u4f60\u4f5c\u4e3a\u8001\u677f\uff0c\u5148\u4e70\u597dN\u8258\u8239\uff08\u5f00\u542f\u8fdb\u7a0b\u6c60\uff09\uff0c\u6765\u4e86\u4e00\u4e2a\u5ba2\u4eba\uff0c\u4e0a\u8239\uff0c\u7528\u5b8c\u4e86\u6362\u4f60\uff0c\u4e0b\u4e00\u4e2a\u5ba2\u4eba\u4e0a\u53bb... \u7b49\u5230\u54ea\u5929\u751f\u610f\u4e0d\u505a\u4e86\u5173\u95e8\uff0c\u5c31\u628a\u8239\u4e00\u8d77\u5356\u6389\u5173\u95e8\uff08\u5173\u95ed\u8fdb\u7a0b\u6c60\uff09\u3002 \u8fd9\u662f\u8fdb\u7a0b\u6c60\u7684\u4f7f\u7528\u65b9\u6cd5 \u3002\u7701\u4e0b\u4e86\u4e70\u8239\u5356\u8239\uff08\u521b\u5efa\u548c\u9500\u6bc1\u8fdb\u7a0b\uff09\u7684\u529f\u592b\u3002 \u8fdb\u7a0b\u6c60\u4e2d\u6700\u5927\u5bb9\u91cf\u80fd\u540c\u65f6\u5bb9\u7eb3\u591a\u5c11\u4e2a\u8fdb\u7a0b\u662f\u7531\u5f00\u53d1\u8005\u6307\u5b9a\u7684\uff0c\u5177\u4f53\u591a\u5c11\u4e2a\u8981\u7ecf\u8fc7\u6d4b\u8bd5\u4eba\u5458\u538b\u529b\u6d4b\u8bd5\u4ee5\u540e\u5f97\u51fa\u4e00\u4e2a\u5408\u9002\u7684\u6570\u91cf\u3002 \u5f53\u8fdb\u7a0b\u6c60\u521b\u5efa\u4ee5\u540e\uff0c\u4e0d\u4f1a\u7acb\u5373\u5de5\u4f5c\uff0c\u800c\u662f\u7b49\u5230\u6709\u8fdb\u7a0b\u88ab\u521b\u5efa\u4e86\u624d\u5f00\u59cb\u5de5\u4f5c\u3002 from multiprocessing import Pool import os import time import random def work ( msg ): print ( \"Process- {} running, pid\uff1a {} \" . format ( msg , os . getpid ())) start = time . time () time . sleep ( random . random () * 2 ) end = time . time () print ( \"Process- {} finish, time consuming\uff1a {:.2f} \" . format ( msg , end - start )) def main (): po = Pool ( 3 ) # \u5b9a\u4e49\u4e00\u4e2a\u8fdb\u7a0b\u6c60\uff0c\u6700\u5927\u8fdb\u7a0b\u6570\u4e3a3 for i in range ( 1 , 11 ): # Pool.apply_async(\u8981\u8c03\u7528\u7684\u76ee\u6807, (\u4f20\u9012\u7ed9\u76ee\u6807\u7684\u53c2\u6570\u5143\u7ec4,)) # \u6bcf\u6b21\u5faa\u73af\u5c06\u4f1a\u7528\u7a7a\u95f2\u51fa\u6765\u7684\u5b50\u8fdb\u7a0b\u53bb\u8c03\u7528\u76ee\u6807 po . apply_async ( work , ( i , )) print ( \"------start------\" ) po . close () # \u5173\u95ed\u8fdb\u7a0b\u6c60\uff0c\u5173\u95ed\u540epo\u4e0d\u5728\u63a5\u6536\u65b0\u7684\u8bf7\u6c42 po . join () # \u7b49\u5f85po\u4e2d\u6240\u6709\u5b50\u8fdb\u7a0b\u6267\u884c\u5b8c\u540e\u518d\u5173\u95ed\uff0c\u5fc5\u987b\u653e\u5728close\u8bed\u53e5\u540e print ( \"-------end-------\" ) if __name__ == '__main__' : main () -------------------------------------------------- # Output: ------ start ------ Process - 1 running , pid \uff1a 20364 Process - 2 running , pid \uff1a 15912 Process - 3 running , pid \uff1a 16504 Process - 2 finish , time consuming \uff1a 1.01 Process - 4 running , pid \uff1a 15912 Process - 3 finish , time consuming \uff1a 1.03 Process - 5 running , pid \uff1a 16504 Process - 4 finish , time consuming \uff1a 0.17 Process - 6 running , pid \uff1a 15912 Process - 5 finish , time consuming \uff1a 0.23 Process - 7 running , pid \uff1a 16504 Process - 1 finish , time consuming \uff1a 1.50 Process - 8 running , pid \uff1a 20364 Process - 6 finish , time consuming \uff1a 1.43 Process - 9 running , pid \uff1a 15912 Process - 8 finish , time consuming \uff1a 1.65 Process - 10 running , pid \uff1a 20364 Process - 9 finish , time consuming \uff1a 0.55 Process - 7 finish , time consuming \uff1a 1.99 Process - 10 finish , time consuming \uff1a 0.20 ------- end ------- \u521b\u5efa\u8fdb\u7a0b\u6c60 \u00b6 \u521b\u5efa\u8fdb\u7a0b\u6c60\u603b\u5171\u5206\u6b65\uff1a \u5bfc\u5165 multiprocessing \u6a21\u5757 \u521b\u5efa\u4e00\u4e2a Pool \u5bf9\u8c61\u5e76\u6307\u5b9a\u6700\u5927\u8fdb\u7a0b\u6570 \u4f7f\u7528 apply() \u6216 apply_async() \u65b9\u6cd5 \u4f7f\u7528 close() \u65b9\u6cd5\u505c\u6b62\u63a5\u6536\u8fdb\u7a0b \u4f7f\u7528 join() \u65b9\u6cd5\u58f0\u660e\u7b49\u5f85\u5b50\u8fdb\u7a0b\u5b8c\u6bd5\u518d\u5173\u95ed\u8fdb\u7a0b\u6c60","title":"\u8fdb\u7a0b"},{"location":"Python/Adavanced/Thread/Python-No-16-Process/#_1","text":"\u5de5\u4f5c\u4e2d\uff0c\u4efb\u52a1\u6570\u5f80\u5f80\u5927\u4e8eCPU\u6838\u5fc3\u6570\uff0c\u5373\u4e00\u5b9a\u6709\u4e00\u4e9b\u4efb\u4f55\u6b63\u5728\u6267\u884c\uff0c\u800c\u53e6\u5916\u4e00\u4e9b\u4efb\u52a1\u5728\u7b49\u5f85CPU\u8fdb\u884c\u6267\u884c \u56e0\u6b64\u8fdb\u7a0b\u6709\u4e0d\u540c\u7684\u72b6\u6001 \u8fdb\u7a0b\u7684\u72b6\u6001\u5206\u4e3a\uff1a \u65b0\u5efa \u3001 \u5c31\u7eea \u3001 \u8fd0\u884c \u3001 \u7b49\u5f85\uff08\u5835\u585e\uff09 \u3001 \u6b7b\u4ea1 \u5c31\u7eea\u6001\uff1a\u8fd0\u884c\u7684\u6761\u4ef6\u90fd\u5df2\u7ecf\u5177\u5907\uff0c\u6b63\u5728\u7b49\u5728CPU\u6267\u884c \u6267\u884c\u6001\uff1aCPU\u6b63\u5728\u6267\u884c\u5176\u529f\u80fd \u7b49\u5f85\u6001\uff1a\u7b49\u5f85\u67d0\u4e9b\u6761\u4ef6\u6ee1\u8db3\uff1b\u4f8b\u5982\u4e00\u4e2a\u7a0b\u5e8fsleep\u4e86\uff0c\u5c31\u5904\u4e8e\u7b49\u5f85\u6001 \u8fdb\u7a0b\u5c31\u597d\u50cf\u6d41\u6c34\u7ebf\u3002 \u4e00\u4e2a\u8fdb\u7a0b\u5c31\u662f\u4e00\u6761\u6d41\u6c34\u7ebf\uff0c\u6bcf\u6761\u6d41\u6c34\u7ebf\u4e4b\u95f4\u662f\u76f8\u4e92\u72ec\u7acb\u7684\uff1b \u6d41\u6c34\u7ebf\u5c65\u5e26\u4e0a\u7684\u4ea7\u54c1\u5c31\u662f\u5168\u5c40\u53d8\u91cf\uff1b \u6d41\u6c34\u7ebf\u4e0a\u7684\u5de5\u4eba\u5c31\u662f\u7ebf\u7a0b\uff1b \u4ea7\u54c1\uff08\u5168\u5c40\u53d8\u91cf\uff09\u5bf9\u4e8e\u540c\u4e00\u6761\u6d41\u6c34\u7ebf\u7684\u5de5\u4eba\uff08\u7ebf\u7a0b\uff09\u6765\u8bf4\u662f\u5171\u4eab\u7684\uff0c\u6bcf\u4e2a\u4eba\u90fd\u53ef\u4ee5\u8bbf\u95ee \u6d41\u6c34\u7ebf\uff08\u8fdb\u7a0b\uff09\u4e4b\u95f4\u662f\u76f8\u4e92\u72ec\u7acb\u7684\uff0c\u4e0d\u80fd\u6d41\u6c34\u7ebfA\u7684\u4ea7\u54c1\u53ef\u4ee5\u88ab\u6d41\u6c34\u7ebfB\u8bbf\u95ee\uff0c\u90a3\u4e0d\u5c31\u4e71\u5957\u4e86\u3002","title":"\u8fdb\u7a0b\u7684\u72b6\u6001"},{"location":"Python/Adavanced/Thread/Python-No-16-Process/#_2","text":"\u521b\u5efa\u8fdb\u7a0b\u5206\u4e3a\u4e09\u6b65\uff1a \u5bfc\u5165 multiprocessing \u6a21\u5757 \u521b\u5efa\u4e00\u4e2a Process \u5bf9\u8c61 \u901a\u8fc7 Process \u5bf9\u8c61\u542f\u52a8\u7ebf\u7a0b \u521b\u5efa\u4e00\u4e2a Process\u5bf9\u8c61\u7684\u65f6\u5019\u53ef\u4ee5\u4f20\u5165\u53c2\u6570 multiprocessing.Process(group=None, target=None, name=None, args=(), kwargs={}, *, daemon=None) \u5e94\u59cb\u7ec8\u4f7f\u7528\u5173\u952e\u5b57\u53c2\u6570\u8c03\u7528\u6784\u9020\u51fd\u6570\u3002 group\uff1a\u5e94\u8be5\u59cb\u7ec8\u662f None \uff1b\u5b83\u4ec5\u7528\u4e8e\u517c\u5bb9 threading.Thread \u3002 target\uff1a\u662f\u7531 run() \u65b9\u6cd5\u8c03\u7528\u7684\u53ef\u8c03\u7528\u5bf9\u8c61\u3002\u5b83\u9ed8\u8ba4\u4e3a None \uff0c\u610f\u5473\u7740\u4ec0\u4e48\u90fd\u6ca1\u6709\u88ab\u8c03\u7528\u3002 name\uff1a\u662f\u8fdb\u7a0b\u540d\u79f0 args\uff1a\u662f\u76ee\u6807\u8c03\u7528\u7684\u53c2\u6570\u5143\u7ec4\u3002 kwargs\uff1a\u662f\u76ee\u6807\u8c03\u7528\u7684\u5173\u952e\u5b57\u53c2\u6570\u5b57\u5178\u3002 daemon\uff1a \u5982\u679c\u63d0\u4f9b\uff0c\u5219\u952e\u53c2\u6570 daemon \u5c06\u8fdb\u7a0b daemon \u6807\u5fd7\u8bbe\u7f6e\u4e3a True \u6216 False \u3002 \u5982\u679c\u662f None \uff08\u9ed8\u8ba4\u503c\uff09\uff0c\u5219\u8be5\u6807\u5fd7\u5c06\u4ece\u521b\u5efa\u7684\u8fdb\u7a0b\u7ee7\u627f\u3002 \u5982\u679c\u5b50\u7c7b\u91cd\u8f7d\u4e86\u6784\u9020\u51fd\u6570\uff0c\u5fc5\u987b\u5148\u8c03\u7528\u7236\u7c7b\u6784\u9020\u5668 Process.__init__() \uff0c\u518d\u505a\u5176\u4ed6\u4e8b\u60c5\u3002 import multiprocessing import time def say_hi (): while True : print ( \"Hi-------\" ) time . sleep ( 1 ) def say_yes (): while True : print ( \"Yes------\" ) time . sleep ( 1 ) def main (): p1 = multiprocessing . Process ( target = say_hi ) p2 = multiprocessing . Process ( target = say_yes ) p1 . start () p2 . start () if __name__ == '__main__' : main () -------------------------------------------------- # Output: Hi ------- Yes ------ Hi ------- Yes ------ Hi ------- Yes ------ Hi ------- ...","title":"\u521b\u5efa\u8fdb\u7a0b"},{"location":"Python/Adavanced/Thread/Python-No-16-Process/#_3","text":"\u8fdb\u7a0b\u95f4\u7684\u901a\u4fe1\u6709\u5f88\u591a\u4e2d\u65b9\u5f0f\uff0c\u6bd4\u5982\u901a\u8fc7\u5e26\u7f51\u7edc\u529f\u80fd\u7684 socket \uff0c\u6216\u8005\u961f\u5217 Queue \u5047\u8bbe\u4e24\u4e2a\u8fdb\u7a0b\u4e4b\u95f4\u8981\u901a\u4fe1\uff0c\u8fdb\u7a0bA\u5411\u5185\u5b58\u4e2d\u7684 Queue \u653e\u8981\u901a\u4fe1\u7684\u5185\u5bb9\uff0c\u8fdb\u7a0bB\u53bb Queue \u4e2d\u53d6\u5373\u53ef\u3002 \u8fdb\u7a0b\u662f\u8fd0\u884c\u5728\u5185\u5b58\u4e2d\u7684\uff0c Queue \u4e5f\u662f\u8fd0\u884c\u5728\u5185\u5b58\u4e2d\u7684\uff0c\u6240\u4ee5\u901f\u5ea6\u5f88\u5feb\u3002 Queue \u5bf9\u4e8e\u8fdb\u7a0b\u6765\u8bf4\u662f\u5171\u4eab\u7684\u3002 import multiprocessing as p def download_from_web ( q ): \"\"\"\u4e0b\u8f7d\u6570\u636e\"\"\" # \u6a21\u62df\u4ece\u7f51\u4e0a\u4e0b\u8f7d\u7684\u6570\u636e data = [ 11 , 22 , 33 , 44 ] # \u5411\u961f\u5217\u4e2d\u5199\u5165\u6570\u636e for temp in data : if not q . full (): # \u5982\u679c\u961f\u5217\u672a\u6ee1 q . put ( temp ) # \u901a\u8fc7 put \u5c06\u5185\u5bb9\u653e\u8fdb\u961f\u5217 print ( \"download: \u4e0b\u8f7d\u5b8c\u6210\u5e76\u5b58\u5165\u961f\u5217\" ) def analysis_data ( q ): \"\"\"\u6570\u636e\u5904\u7406\"\"\" # \u4ece\u961f\u5217\u4e2d\u83b7\u53d6\u6570\u636e data = list () # \u6a21\u62df\u6570\u636e\u5904\u7406 while True : data . append ( q . get ()) # \u901a\u8fc7 get \u53d6\u961f\u5217\u4e2d\u7684\u5185\u5bb9 if q . empty (): # \u5982\u679c\u961f\u5217\u4e3a\u7a7a\u5219\u9000\u51fa break print ( \"analysis:\" , data ) def main (): # 1.\u521b\u5efa\u4e00\u4e2a\u961f\u5217 q = p . Queue ( 3 ) # 2.\u521b\u5efa\u591a\u4e2a\u8fdb\u7a0b\uff0c\u5c06\u961f\u5217\u7684\u5e94\u7528\u5f53\u4f5c\u5b9e\u53c2\u4f20\u9012\u5230\u91cc\u9762 p1 = p . Process ( target = download_from_web , args = ( q , )) p2 = p . Process ( target = analysis_data , args = ( q , )) p1 . start () p2 . start () if __name__ == \"__main__\" : main () def download_from_web ( q ): \"\"\"\u4e0b\u8f7d\u6570\u636e\"\"\" # \u6a21\u62df\u4ece\u7f51\u4e0a\u4e0b\u8f7d\u7684\u6570\u636e data = [ 11 , 22 , 33 , 44 ] # \u5411\u961f\u5217\u4e2d\u5199\u5165\u6570\u636e for temp in data : q . put ( temp ) print ( \"download: \u4e0b\u8f7d\u5b8c\u6210\u5e76\u5b58\u5165\u961f\u5217\" ) def analysis_data ( q ): \"\"\"\u6570\u636e\u5904\u7406\"\"\" # \u4ece\u961f\u5217\u4e2d\u83b7\u53d6\u6570\u636e data = list () # \u6a21\u62df\u6570\u636e\u5904\u7406 while True : data . append ( q . get ()) if q . empty (): break print ( \"analysis:\" , data ) def main (): # 1.\u521b\u5efa\u4e00\u4e2a\u961f\u5217 q = p . Queue ( 3 ) # 2.\u521b\u5efa\u591a\u4e2a\u8fdb\u7a0b\uff0c\u5c06\u961f\u5217\u7684\u5e94\u7528\u5f53\u4f5c\u5b9e\u53c2\u4f20\u9012\u5230\u91cc\u9762 p1 = p . Process ( target = download_from_web , args = ( q , )) p2 = p . Process ( target = analysis_data , args = ( q , )) p1 . start () p2 . start () if __name__ == \"__main__\" : main () -------------------------------------------------- # Output: download : \u4e0b\u8f7d\u5b8c\u6210\u5e76\u5b58\u5165\u961f\u5217 analysis : [ 11 , 22 , 33 , 44 ] q.put(obj[, block[, timeout]) obj\uff1a\u8981\u4f20\u9012\u7684\u5185\u5bb9 block\uff1a\u963b\u585e\uff0c\u9ed8\u8ba4True True\uff0c\u961f\u5217\u6ee1\u4e86\u4ee5\u540e\u4f1a\u4e00\u76f4\u7b49\u5f85 Flase\uff0c\u961f\u5217\u6ee1\u4e86\u4e4b\u540e\u4f1a\u629b\u51fa queue.Full \u9519\u8bef timeout\uff1a\u6d6e\u70b9\u578b\uff0c\u5355\u4f4d\u2014\u2014\u79d2\uff0c\u9ed8\u8ba4None\uff1b \u503c\u4e3a\u6b63\u6570\u65f6\uff0c\u7b49\u5f85\u65f6\u957f\u4e3a\u8bbe\u5b9a\u7684\u79d2\u6570 \u503c\u4e3a-1\u65f6\uff0c\u5c06\u65e0\u9650\u7b49\u5f85 blocking=Flase\u65f6\uff0ctimeout\u4e0d\u8d77\u4f5c\u7528\u3002 \u5982\u679c\u961f\u5217\u5173\u95ed\u5df2\u7ecf\u5173\u95ed\u4f1a\u629b\u51fa ValueError \uff083.8+\uff09 q.put_nowait(obj) \u76f8\u5f53\u4e8e q.put(block=Flase) q.get([block[, timeout]) block\uff1a\u963b\u585e\uff0c\u9ed8\u8ba4True True\uff0c\u961f\u5217\u7a7a\u4e86\u4ee5\u540e\u4f1a\u4e00\u76f4\u7b49\u5f85 Flase\uff0c\u961f\u5217\u7a7a\u4e86\u4e4b\u540e\u4f1a\u629b\u51fa queue.Empty \u9519\u8bef timeout\uff1a\u6d6e\u70b9\u578b\uff0c\u5355\u4f4d\u2014\u2014\u79d2\uff0c\u9ed8\u8ba4None\uff1b \u503c\u4e3a\u6b63\u6570\u65f6\uff0c\u7b49\u5f85\u65f6\u957f\u4e3a\u8bbe\u5b9a\u7684\u79d2\u6570 \u503c\u4e3a-1\u65f6\uff0c\u5c06\u65e0\u9650\u7b49\u5f85 blocking=Flase\u65f6\uff0ctimeout\u4e0d\u8d77\u4f5c\u7528\u3002 \u5982\u679c\u961f\u5217\u5173\u95ed\u5df2\u7ecf\u5173\u95ed\u4f1a\u629b\u51fa ValueError \uff083.8+\uff09 q.get_nowait() \u76f8\u5f53\u4e8e q.get(block=Flase)","title":"\u8fdb\u7a0b\u95f4\u901a\u4fe1"},{"location":"Python/Adavanced/Thread/Python-No-16-Process/#_4","text":"\u8fdb\u7a0b\u7684\u521b\u5efa\u548c\u6d88\u8d39\u662f\u5f88\u8017\u8d39\u8d44\u6e90\u7684\uff0c\u800c\u5b9e\u9645\u60c5\u51b5\u4e2d\u53ef\u80fd\u51fa\u73b0\u6210\u5343\u4e0a\u767e\u4e07\u4e2a\u8fdb\u7a0b\u9700\u8981\u6267\u884c\uff0c\u8fd9\u65f6\u5019\u4e0d\u53ef\u80fd\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u5355\u72ec\u521b\u5efa\u548c\u9500\u6bc1 \u8fd9\u4e9b\u8fdb\u7a0b\u5927\u540c\u5c0f\u5f02\uff0c\u4f46\u662f\u8fdb\u7a0b\u7684\u521b\u5efa\u548c\u9500\u6bc1\u662f\u76f8\u540c\u7684\u3002 \u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u628a\u521b\u5efa\u548c\u9500\u6bc1\u7684\u5de5\u4f5c\u62bd\u53d6\u51fa\u6765\uff0c\u901a\u8fc7\u66f4\u6362\u8fdb\u7a0b\u7684\u5185\u5bb9\uff0c\u4ee5\u6b64\u8fbe\u5230\u8f83\u5c0f\u5f00\u9500\u7684\u76ee\u7684\u3002 \u8fd9\u79cd\u6280\u672f\u53eb\u505a \u8fdb\u7a0b\u6c60 \u8fdb\u7a0b\u6c60\u5c31\u597d\u6bd4\u516c\u56ed\u91cc\u7684\u6e56\uff0c\u8fdb\u7a0b\u5c31\u597d\u6bd4\u8239\u3002 \u4f60\u4f5c\u4e3a\u8001\u677f\uff0c\u4eca\u5929\u6765\u4e86\u4e00\u4e2a\u4eba\u8981\u5212\u8239\uff0c\u4f60\u53bb\u4e70\u4e00\u8258\u8239\uff0c\u5ba2\u4eba\u5212\u5b8c\u4e86\u4f60\u628a\u8239\u5356\u4e86\u3002 \u660e\u5929\u518d\u6765\u4e24\u4e2a\u5ba2\u4eba\uff0c\u4f60\u53c8\u53bb\u4e70\u4e24\u8258\u8239\uff0c\u5ba2\u4eba\u5212\u5b8c\u4e86\u4f60\u53c8\u628a\u8239\u5356\u4e86\u3002 \u4e07\u4e00\u6765\u4e86\u4e00\u4e07\u4e2a\u5ba2\u4eba\uff0c\u4f60...\u6ca1\u94b1\u4e70\u8239\u4e86\u54c8\u54c8\u54c8\u3002 \u8fd9\u662f\u666e\u901a\u7684\u8fdb\u7a0b\u4f7f\u7528\u65b9\u6cd5\u3002 \u4f60\u4f5c\u4e3a\u8001\u677f\uff0c\u5148\u4e70\u597dN\u8258\u8239\uff08\u5f00\u542f\u8fdb\u7a0b\u6c60\uff09\uff0c\u6765\u4e86\u4e00\u4e2a\u5ba2\u4eba\uff0c\u4e0a\u8239\uff0c\u7528\u5b8c\u4e86\u6362\u4f60\uff0c\u4e0b\u4e00\u4e2a\u5ba2\u4eba\u4e0a\u53bb... \u7b49\u5230\u54ea\u5929\u751f\u610f\u4e0d\u505a\u4e86\u5173\u95e8\uff0c\u5c31\u628a\u8239\u4e00\u8d77\u5356\u6389\u5173\u95e8\uff08\u5173\u95ed\u8fdb\u7a0b\u6c60\uff09\u3002 \u8fd9\u662f\u8fdb\u7a0b\u6c60\u7684\u4f7f\u7528\u65b9\u6cd5 \u3002\u7701\u4e0b\u4e86\u4e70\u8239\u5356\u8239\uff08\u521b\u5efa\u548c\u9500\u6bc1\u8fdb\u7a0b\uff09\u7684\u529f\u592b\u3002 \u8fdb\u7a0b\u6c60\u4e2d\u6700\u5927\u5bb9\u91cf\u80fd\u540c\u65f6\u5bb9\u7eb3\u591a\u5c11\u4e2a\u8fdb\u7a0b\u662f\u7531\u5f00\u53d1\u8005\u6307\u5b9a\u7684\uff0c\u5177\u4f53\u591a\u5c11\u4e2a\u8981\u7ecf\u8fc7\u6d4b\u8bd5\u4eba\u5458\u538b\u529b\u6d4b\u8bd5\u4ee5\u540e\u5f97\u51fa\u4e00\u4e2a\u5408\u9002\u7684\u6570\u91cf\u3002 \u5f53\u8fdb\u7a0b\u6c60\u521b\u5efa\u4ee5\u540e\uff0c\u4e0d\u4f1a\u7acb\u5373\u5de5\u4f5c\uff0c\u800c\u662f\u7b49\u5230\u6709\u8fdb\u7a0b\u88ab\u521b\u5efa\u4e86\u624d\u5f00\u59cb\u5de5\u4f5c\u3002 from multiprocessing import Pool import os import time import random def work ( msg ): print ( \"Process- {} running, pid\uff1a {} \" . format ( msg , os . getpid ())) start = time . time () time . sleep ( random . random () * 2 ) end = time . time () print ( \"Process- {} finish, time consuming\uff1a {:.2f} \" . format ( msg , end - start )) def main (): po = Pool ( 3 ) # \u5b9a\u4e49\u4e00\u4e2a\u8fdb\u7a0b\u6c60\uff0c\u6700\u5927\u8fdb\u7a0b\u6570\u4e3a3 for i in range ( 1 , 11 ): # Pool.apply_async(\u8981\u8c03\u7528\u7684\u76ee\u6807, (\u4f20\u9012\u7ed9\u76ee\u6807\u7684\u53c2\u6570\u5143\u7ec4,)) # \u6bcf\u6b21\u5faa\u73af\u5c06\u4f1a\u7528\u7a7a\u95f2\u51fa\u6765\u7684\u5b50\u8fdb\u7a0b\u53bb\u8c03\u7528\u76ee\u6807 po . apply_async ( work , ( i , )) print ( \"------start------\" ) po . close () # \u5173\u95ed\u8fdb\u7a0b\u6c60\uff0c\u5173\u95ed\u540epo\u4e0d\u5728\u63a5\u6536\u65b0\u7684\u8bf7\u6c42 po . join () # \u7b49\u5f85po\u4e2d\u6240\u6709\u5b50\u8fdb\u7a0b\u6267\u884c\u5b8c\u540e\u518d\u5173\u95ed\uff0c\u5fc5\u987b\u653e\u5728close\u8bed\u53e5\u540e print ( \"-------end-------\" ) if __name__ == '__main__' : main () -------------------------------------------------- # Output: ------ start ------ Process - 1 running , pid \uff1a 20364 Process - 2 running , pid \uff1a 15912 Process - 3 running , pid \uff1a 16504 Process - 2 finish , time consuming \uff1a 1.01 Process - 4 running , pid \uff1a 15912 Process - 3 finish , time consuming \uff1a 1.03 Process - 5 running , pid \uff1a 16504 Process - 4 finish , time consuming \uff1a 0.17 Process - 6 running , pid \uff1a 15912 Process - 5 finish , time consuming \uff1a 0.23 Process - 7 running , pid \uff1a 16504 Process - 1 finish , time consuming \uff1a 1.50 Process - 8 running , pid \uff1a 20364 Process - 6 finish , time consuming \uff1a 1.43 Process - 9 running , pid \uff1a 15912 Process - 8 finish , time consuming \uff1a 1.65 Process - 10 running , pid \uff1a 20364 Process - 9 finish , time consuming \uff1a 0.55 Process - 7 finish , time consuming \uff1a 1.99 Process - 10 finish , time consuming \uff1a 0.20 ------- end -------","title":"\u8fdb\u7a0b\u6c60"},{"location":"Python/Adavanced/Thread/Python-No-16-Process/#_5","text":"\u521b\u5efa\u8fdb\u7a0b\u6c60\u603b\u5171\u5206\u6b65\uff1a \u5bfc\u5165 multiprocessing \u6a21\u5757 \u521b\u5efa\u4e00\u4e2a Pool \u5bf9\u8c61\u5e76\u6307\u5b9a\u6700\u5927\u8fdb\u7a0b\u6570 \u4f7f\u7528 apply() \u6216 apply_async() \u65b9\u6cd5 \u4f7f\u7528 close() \u65b9\u6cd5\u505c\u6b62\u63a5\u6536\u8fdb\u7a0b \u4f7f\u7528 join() \u65b9\u6cd5\u58f0\u660e\u7b49\u5f85\u5b50\u8fdb\u7a0b\u5b8c\u6bd5\u518d\u5173\u95ed\u8fdb\u7a0b\u6c60","title":"\u521b\u5efa\u8fdb\u7a0b\u6c60"},{"location":"Python/Adavanced/Thread/Python-No-17-Thread/","text":"\u7ebf\u7a0b\uff0c\u662f\u64cd\u4f5c\u7cfb\u7edf\u8c03\u5ea6\u7684\u5355\u4f4d \u4e00\u4e2a\u7a0b\u5e8f\u5199\u5b8c\u4e86\uff0c\u653e\u5728\u786c\u76d8\u91cc\u4e0d\u8fd0\u884c\uff0c\u53eb\u505a**\u7a0b\u5e8f** \u4e00\u4e2a\u7a0b\u5e8f\u5199\u5b8c\u4e86\uff0c\u653e\u5230\u5185\u5b58\u91cc\u8dd1\u8d77\u6765\uff0c\u53eb\u505a**\u8fdb\u7a0b** \u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a**\u7ebf\u7a0b**\uff0c\u79f0\u4e3a**\u4e3b\u7ebf\u7a0b** \u4e00\u4e2a\u7ebf\u7a0b\u8981\u5e72\u5f88\u591a\u4e8b\u60c5\uff0c\u6709\u4e9b\u4e8b\u60c5\u5f88\u8017\u65f6\uff0c\u5c31\u521b\u5efa\u4e2a**\u5b50\u7ebf\u7a0b**\uff0c\u8ba9\u5b50\u7ebf\u7a0b\u53bb\u505a\uff0c\u4e3b\u7ebf\u7a0b\u7ee7\u7eed\u4e0b\u4e00\u6b65 \u5f53\u6709\u591a\u4e2a\u7ebf\u7a0b\u7684\u65f6\u5019\uff0cCPU\u4f1a\u8f6e\u6d41\u5207\u6362\u6267\u884c\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u6267\u884c\u591a\u957f\u65f6\u95f4\u53eb\u505a**\u65f6\u95f4\u7247** \u6bd4\u5982 t1 \u5206\u5230\u4e860.001\u79d2\u7684\u65f6\u95f4\u7247\uff0ct2 \u5206\u5230\u4e860.002\u79d2\u7684\u65f6\u95f4\u7247 \u663e\u7136\u8fd9\u4e48\u77ed\u65f6\u95f4\u662f\u4e0d\u591f\u6267\u884c\u7684\uff0c\u6240\u4ee5CPU\u4f1a\u5feb\u901f\u7684\u5207\u6765\u5207\u53bb\uff0c\u8fd9\u6837\u5c31\u770b\u8d77\u6765\u597d\u50cf\u80fd\u6267\u884c**\u591a\u4efb\u52a1** \u591a\u4efb\u52a1\u5c31\u662f\u4f60\u53ef\u4ee5\u540c\u65f6\u542c\u6b4c\u3001\u5199\u6587\u6863\u3001\u6302QQ\u7b49\u7b49\uff0c\u4f46\u5176\u5b9e\u540c\u4e00\u65f6\u523bCPU\u53ea\u6267\u884c\u4e00\u4e2a\u7ebf\u7a0b \u53ea\u4e0d\u8fc7\u5207\u6362\u7684\u5feb\uff0c\u65f6\u95f4\u7247\u4e5f\u5f88\u5c0f\uff0c\u6240\u4ee5\u4eba\u611f\u89c9\u4e0d\u51fa\u6765\u3002 \u7ebf\u7a0b\u7684\u6267\u884c\u987a\u5e8f\u662f\u7531\u64cd\u4f5c\u7cfb\u7edf\u51b3\u5b9a\u7684\uff0c\u5f00\u53d1\u8005\u5de6\u53f3\u4e0d\u4e86\u3002 \u5b50\u7ebf\u7a0b\u7531\u4e3b\u7ebf\u7a0b\u521b\u5efa\uff0c\u5b50\u7ebf\u7a0b\u5173\u95ed\u540e\u7559\u4e0b\u7684\u8fa3\u9e21\u7531\u4e3b\u7ebf\u7a0b\u6e05\u7406 \u4e00\u65e6\u4e3b\u7ebf\u7a0b\u6302\u4e86\uff0c\u5b50\u7ebf\u7a0b\u5168\u90e8\u6302\u6389\u3002 \u4e3b\u7ebf\u7a0b\u4f1a\u7b49\u5f85\u6240\u6709\u5b50\u7ebf\u7a0b\u7ed3\u675f\u540e\u624d\u7ed3\u675f \u5355\u7ebf\u7a0b\u64cd\u4f5c import time def say_hi (): for i in range ( 5 ): print ( 'Hi!' ) time . sleep ( 1 ) # \u8017\u65f6\u64cd\u4f5c def say_yes (): for i in range ( 5 ): print ( 'Yes!' ) time . sleep ( 1 ) # \u8017\u65f6\u64cd\u4f5c def main (): say_hi () say_yes () if __name__ == '__main__' : main () -------------------------------------------------- # Output: Hi ! Hi ! Hi ! Hi ! Hi ! Yes ! Yes ! Yes ! Yes ! Yes ! \u591a\u7ebf\u7a0b\u64cd\u4f5c import time import threading # \u5bfc\u5165 threading \u6a21\u5757 def say_hi (): for i in range ( 5 ): print ( 'Hi!' ) time . sleep ( 1 ) # \u8017\u65f6\u64cd\u4f5c def say_yes (): for i in range ( 5 ): print ( 'Yes!' ) time . sleep ( 1 ) # \u8017\u65f6\u64cd\u4f5c def main (): t1 = threading . Thread ( target = say_hi ) # \u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0b\u5bf9\u8c61 t2 = threading . Thread ( target = say_yes ) # \u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0b\u5bf9\u8c61 t1 . start () # \u542f\u52a8\u7ebf\u7a0b t2 . start () # \u542f\u52a8\u7ebf\u7a0b if __name__ == '__main__' : main () -------------------------------------------------- # Output: Hi ! Yes ! Hi ! Yes ! Hi ! Yes ! Yes ! Hi ! Hi ! Yes ! \u5355\u7ebf\u7a0b\u548c\u591a\u7ebf\u7a0b\u7684\u533a\u522b\u5c31\u50cf\u8fd9\u4e2a\u6817\u5b50 \u4f60\u8981\u6765\u4e00\u6bb5\u70ed\u821erap\uff0c - \u5355\u7ebf\u7a0b\u7684\u64cd\u4f5c\u662f\uff1arap\u5b8c\u518d\u70ed\u821e\uff0c\u6216\u8005\u70ed\u821e\u5b8c\u518drap - \u591a\u7ebf\u7a0b\u7684\u64cd\u4f5c\u662f\uff1a\u8fb9\u70ed\u821e\u8fb9rap \u521b\u5efa\u5b50\u7ebf\u7a0b\u5e76\u542f\u52a8 \u00b6 \u521b\u5efa\u7ebf\u7a0b\u64cd\u4f5c\u53ef\u4ee5\u5206\u4e3a\u4e09\u6b65\uff1a \u5bfc\u5165 threading \u6a21\u5757 \u521b\u5efa\u4e00\u4e2aThread\u5bf9\u8c61 \u901a\u8fc7Thread\u5bf9\u8c61\u542f\u52a8\u7ebf\u7a0b \u521b\u5efa\u4e00\u4e2aThread\u5bf9\u8c61\u7684\u65f6\u5019\u53ef\u4ee5\u4f20\u5165\u53c2\u6570 threading.Thread(group=None, target=None, name=None, args=(), kwargs={}, *, daemon=None) group \u5e94\u8be5\u4e3a None\uff1b\u4e3a\u4e86\u65e5\u540e\u6269\u5c55 ThreadGroup \u7c7b\u5b9e\u73b0\u800c\u4fdd\u7559\u3002 target\uff1a \u7ebf\u7a0b\u4e2d\u9700\u8981\u6267\u884c\u7684\u51fd\u6570 \u3002\u9ed8\u8ba4\u662f None\uff0c\u8868\u793a\u4e0d\u9700\u8981\u8c03\u7528\u4efb\u4f55\u65b9\u6cd5\u3002 name\uff1a \u7ebf\u7a0b\u540d\u79f0 \u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7531 \"Thread-N\" \u683c\u5f0f\u6784\u6210\u4e00\u4e2a\u552f\u4e00\u7684\u540d\u79f0\uff0c\u5176\u4e2d N \u662f\u5c0f\u7684\u5341\u8fdb\u5236\u6570\u3002 args\uff1a\u7528\u4e8e\u8c03\u7528\u76ee\u6807\u51fd\u6570\u7684**\u53c2\u6570\u5143\u7ec4**\u3002\u9ed8\u8ba4\u662f ()\u3002 \uff08\u5fc5\u987b\u662f\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff09 kwargs\uff1a\u7528\u4e8e\u8c03\u7528\u76ee\u6807\u51fd\u6570\u7684\u5173\u952e\u5b57**\u53c2\u6570\u5b57\u5178**\u3002\u9ed8\u8ba4\u662f {}\u3002 \uff08\u5fc5\u987b\u662f\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff09 daemon\u4e0d\u662fNone \uff0c\u7ebf\u7a0b\u5c06\u88ab\u663e\u5f0f\u7684\u8bbe\u7f6e\u4e3a \u5b88\u62a4\u6a21\u5f0f \uff0c\u4e0d\u7ba1\u8be5\u7ebf\u7a0b\u662f\u5426\u662f\u5b88\u62a4\u6a21\u5f0f\u3002 daemon=None \uff0c\u7ebf\u7a0b\u5c06\u7ee7\u627f\u5f53\u524d\u7ebf\u7a0b\u7684\u5b88\u62a4\u6a21\u5f0f\u5c5e\u6027\u3002 \u5982\u679c\u5b50\u7c7b\u91cd\u8f7d\u4e86\u6784\u9020\u51fd\u6570\uff0c\u5fc5\u987b\u5148\u8c03\u7528\u7236\u7c7b\u6784\u9020\u5668 Thread.__init__() \uff0c\u518d\u505a\u5176\u4ed6\u4e8b\u60c5\u3002 \u51fd\u6570\u65b9\u5f0f \u00b6 \u51fd\u6570\u65b9\u5f0f\u9002\u5408\u4e8e \u2014\u2014 \u4e00\u4e2a\u7ebf\u7a0b\u4e2d\u8981\u505a\u7684\u4e8b\u60c5\u6bd4\u8f83\u5c11\uff0c\u4e00\u4e2a\u51fd\u6570\u5c31\u80fd\u641e\u5b9a\u3002 \u5bfc\u5165 threading \u6a21\u5757 \u521b\u5efa\u4e00\u4e2aThread\u5bf9\u8c61\u5e76\u628a\u51fd\u6570\u4f20\u8fdb\u53bb \u901a\u8fc7Thread\u5bf9\u8c61\u542f\u52a8\u7ebf\u7a0b import threading # 1. \u5bfc\u5165 thrading \u6a21\u5757 def funcName (): # \u9700\u8981\u5b50\u7ebf\u7a0b\u6267\u884c\u7684\u51fd\u6570 pass t1 = threading . Thread ( target = funcName ) # 2. \u521b\u5efa\u4e00\u4e2aThread\u5bf9\u8c61\u5e76\u628a\u51fd\u6570\u4f20\u8fdb\u53bb t1 . start () # 3. \u542f\u52a8\u7ebf\u7a0b \u7ee7\u627f\u65b9\u5f0f \u00b6 \u7ee7\u627f\u65b9\u5f0f\u9002\u5408\u4e8e \u2014\u2014 \u4e00\u4e2a\u7ebf\u7a0b\u91cc\u9762\u505a\u7684\u4e8b\u60c5\u6bd4\u8f83\u590d\u6742\uff0c\u9700\u8981\u5206\u6210\u591a\u4e2a\u51fd\u6570\u6765\u505a\u3002 \u5bfc\u5165 threading \u6a21\u5757 \u521b\u5efa\u4e00\u4e2a\u7c7b\u7ee7\u627f Thread \u7c7b \u91cd\u5199 run \u65b9\u6cd5 \u521b\u5efa\u4e00\u4e2a\u7ee7\u627f\u4e86 Thread \u7c7b\u7684\u5bf9\u8c61 \u7528start\u65b9\u6cd5\u542f\u52a8\u7ebf\u7a0b import threading # 1. \u5bfc\u5165 threading \u6a21\u5757 class clsName ( threading . Thread ): # 2. \u7ee7\u627fThread\u7c7b def run ( self ): # 3. \u91cd\u5199run\u65b9\u6cd5 print ( self . name ) # self.name \u4fdd\u5b58\u7684\u662f\u5f53\u524d\u7ebf\u7a0b\u7684\u540d\u79f0 t1 = clsName () # 4. \u521b\u5efa\u4e00\u4e2a\u7ee7\u627f\u4e86 Thread \u7c7b\u7684\u5bf9\u8c61 t1 . start () # 5. \u542f\u52a8\u7ebf\u7a0b t1.start() \u53ea\u4f1a\u53bb\u8c03\u7528 run \u65b9\u6cd5\u3002\u5982\u679c\u7c7b\u4e2d\u8fd8\u6709\u5176\u4ed6\u65b9\u6cd5\uff0c\u53ea\u80fd\u5728\u7c7b\u4e2d\u8c03\u7528\uff0c\u4e0d\u80fd\u7528 t1 \u53bb\u8c03\u7528\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u7ee7\u627f\u4e86 Thread \u7684\u7c7b\u7684\u4e4b\u7c7b\uff0c\u9664\u4e86run\u65b9\u6cd5\uff0c\u5176\u4ed6\u65b9\u6cd5\u90fd\u53ef\u4ee5\u5b9a\u4e49\u6210\u79c1\u6709\u7684\uff08\u516c\u6709\u7684\u5916\u9762\u4e5f\u4e0d\u80fd\u8c03\u7528\u554a\uff09 import threading class MyThread ( threading . Thread ): def run ( self ): print ( self . name ) self . __say_hi () self . __say_yes () def __say_hi ( self ): print ( 'Hi!' ) def __say_yes ( self ): print ( 'Yes!' ) t1 = MyThread () t1 . start () -------------------------------------------------- # Output: Thread - 1 Hi ! Yes ! \u63d2\u961f join() \u00b6 join([timeout]) \u5f53\u67d0\u4e2a\u7ebf\u7a0b\u5bf9\u8c61\u6210\u529f\u8c03\u7528\u4e86 join() \u65b9\u6cd5\u4e4b\u540e\uff0c\u4f1a\u4f18\u5148\u83b7\u5f97CPU\u7684\u8d44\u6e90\uff0c\u8ba9\u5176\u4ed6\u7ebf\u7a0b\u7b49\u5f85 \u77e5\u9053\u8fd9\u4e2a\u7ebf\u7a0b\u5bf9\u8c61\u6267\u884c\u7ed3\u675f\u540e\uff0c\u624d\u628a\u8d44\u6e90\u8ba9\u7ed9\u522b\u7684\u7ebf\u7a0b import threading def f1 ( n ): for i in range ( n ): print ( threading . current_thread () . getName ()) def f2 ( n ): for i in range ( n ): print ( threading . current_thread () . getName () + \"------\" + str ( i )) def main (): t1 = threading . Thread ( target = f1 , args = ( 5 ,)) t2 = threading . Thread ( target = f2 , args = ( 5 ,)) t1 . start () t2 . start () for i in range ( 5 ): print ( threading . current_thread () . getName ()) if __name__ == '__main__' : main () -------------------------------------------------- # Output: Thread - 1 Thread - 1 MainThread Thread - 2 ------ 0 MainThread Thread - 2 ------ 1 MainThread Thread - 2 ------ 2 MainThread MainThread Thread - 2 ------ 3 Thread - 2 ------ 4 Thread - 1 Thread - 1 Thread - 1 \u53ef\u4ee5\u770b\u5230\uff0c\u6ca1\u6709\u52a0 join \u65b9\u6cd5\uff0c\u6240\u4ee5\u4e3b\u7ebf\u7a0b \u548c t1 \u548c t2 \u76f8\u4e92\u4e89\u62a2\u8d44\u6e90\u3002 \u5982\u679c\u73b0\u5728\u9700\u8981 t1 \u8fd9\u4e2a\u7ebf\u7a0b\u6267\u884c\u5b8c\u518d\u7ed9\u5176\u4ed6\u7ebf\u7a0b\u6267\u884c\uff0c\u4e5f\u5c31\u662f\u8bf4\u8981\u6c42 t1 \u72ec\u5360\u4e00\u6bb5\u65f6\u95f4 \u90a3\u5c31\u8ba9 t1 \u8c03\u7528 join() \u65b9\u6cd5 import threading def f1 ( n ): for i in range ( n ): print ( threading . current_thread () . getName ()) def f2 ( n ): for i in range ( n ): print ( threading . current_thread () . getName () + \"------\" + str ( i )) def main (): t1 = threading . Thread ( target = f1 , args = ( 5 ,)) t2 = threading . Thread ( target = f2 , args = ( 5 ,)) t1 . start () t1 . join () t2 . start () for i in range ( 5 ): print ( threading . current_thread () . getName ()) if __name__ == '__main__' : main () -------------------------------------------------- # Output: Thread - 1 Thread - 1 Thread - 1 Thread - 1 Thread - 1 Thread - 2 ------ 0 Thread - 2 ------ 1 MainThread Thread - 2 ------ 2 MainThread Thread - 2 ------ 3 MainThread Thread - 2 ------ 4 MainThread MainThread \u8fd9\u6837\u5c31\u5b9e\u73b0\u4e86 t1 \u72ec\u5360\u8d44\u6e90\uff0c\u5b8c\u6210\u540e\u624d\u7ed9\u5176\u4ed6\u7ebf\u7a0b \u67e5\u770b\u6240\u6709\u7ebf\u7a0b \u00b6 threading.enumerate() \u4ee5\u5217\u8868\u5f62\u5f0f\u8fd4\u56de\u5f53\u524d\u6240\u6709\u5b58\u6d3b\u7684 Thread \u5bf9\u8c61\u3002 \u8be5\u5217\u8868\u5305\u542b\u5b88\u62a4\u7ebf\u7a0b\uff0ccurrent_thread() \u521b\u5efa\u7684\u865a\u62df\u7ebf\u7a0b\u5bf9\u8c61\u548c\u4e3b\u7ebf\u7a0b\u3002 \u5b83\u4e0d\u5305\u542b\u5df2\u7ec8\u7ed3\u7684\u7ebf\u7a0b\u548c\u5c1a\u672a\u5f00\u59cb\u7684\u7ebf\u7a0b\u3002 import time import threading def say_hi (): for i in range ( 3 ): print ( 'Hi!' ) time . sleep ( 1 ) def say_yes (): for i in range ( 3 ): print ( 'Yes!' ) time . sleep ( 1 ) def main (): t1 = threading . Thread ( target = say_hi ) t2 = threading . Thread ( target = say_yes ) t1 . start () t2 . start () while True : print ( threading . enumerate ()) if len ( threading . enumerate ()) <= 1 : break time . sleep ( 1 ) if __name__ == '__main__' : main () -------------------------------------------------- # Output: Hi ! Yes ! [ < _MainThread ( MainThread , started 1292 ) > , < Thread ( Thread - 1 , started 7968 ) > , < Thread ( Thread - 2 , started 3796 ) > ] [ < _MainThread ( MainThread , started 1292 ) > , < Thread ( Thread - 1 , started 7968 ) > , < Thread ( Thread - 2 , started 3796 ) > ] Hi ! Yes ! Hi ! Yes ! [ < _MainThread ( MainThread , started 1292 ) > , < Thread ( Thread - 1 , started 7968 ) > , < Thread ( Thread - 2 , started 3796 ) > ] [ < _MainThread ( MainThread , started 1292 ) > , < Thread ( Thread - 1 , started 7968 ) > ] \u591a\u7ebf\u7a0b\u5171\u4eab\u5168\u5c40\u53d8\u91cf \u00b6 \u5047\u8bbe\u73b0\u5728\u6709\u4e2a\u4efb\u52a1\uff0c\u53bb\u6293\u53d6\u67d0\u4e2a\u7f51\u7ad9\u4e0a\u6240\u6709\u7684\u7167\u7247\uff0c\u7136\u540e\u53d1\u9001\u5230\u67d0\u4e2a\u90ae\u7bb1\u3002 \u8fd9\u91cc\u5c31\u53ef\u4ee5\u5206\u6210\u4e24\u4e2a\u5b50\u4efb\u52a1\uff0c\u4e00\u4e2a\u6293\u53d6\u7167\u7247\uff0c\u4e00\u4e2a\u53d1\u9001\u7167\u7247 \u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0b\u8d1f\u8d23\u6293\u53d6\u7167\u7247\uff0c\u4e00\u4e2a\u7ebf\u7a0b\u8d1f\u8d23\u53d1\u9001\u7167\u7247 \u90a3\u4e48\u53ef\u4ee5\u53d1\u73b0\uff0c \u7167\u7247 \u662f\u4e24\u4e2a\u7ebf\u7a0b\u90fd\u8981\u7528\u5230\u7684\u6570\u636e\u3002 \u6240\u4ee5\u6211\u4eec\u5e94\u8be5\u628a \u7167\u7247 \u8bbe\u7f6e\u4e3a**\u5168\u5c40\u53d8\u91cf**\uff0c\u8fd9\u6837\u4e24\u4e2a\u7ebf\u7a0b\u624d\u53ef\u4ee5\u8fdb\u884c\u5408\u4f5c\u3002 \u5728\u591a\u7ebf\u7a0b\u4efb\u52a1\u4e2d\uff0c \u5168\u5c40\u53d8\u91cf \u662f\u53ef\u4ee5\u7ed9\u6bcf\u4e00\u4e2a\u7ebf\u7a0b\u5171\u4eab\u7684\u3002 import threading g_num = 10 # \u5168\u5c40\u53d8\u91cf def add1 (): global g_num g_num += 5 print ( \"add1----------- %d \" % g_num ) def add2 (): print ( \"add2----------- %d \" % g_num ) def main (): t1 = threading . Thread ( target = add1 , name = 'add1' ) t2 = threading . Thread ( target = add2 , name = 'add2' ) t1 . start () t2 . start () print ( \"main----------- %d \" % g_num ) if __name__ == \"__main__\" : main () -------------------------------------------------- # Output: add1 ----------- 15 add2 ----------- 15 main ----------- 15 \u4ece\u6817\u5b50\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u7ebf\u7a0b t1 \u4e2d\u7684 add1 \u5bf9\u5168\u5c40\u53d8\u91cf g_num \u8fdb\u884c\u4e86\u4fee\u6539 \u5728\u7ebf\u7a0b t2 \u7684 add2 \u5bf9 g_num \u8fdb\u884c\u8bbf\u95ee\u7684\u65f6\u5019\u8bbf\u95ee\u5230\u7684\u662f\u4fee\u6539\u540e\u7684\u503c \u5728\u4e3b\u7ebf\u7a0b\u7684 main \u65b9\u6cd5\u4e2d\u8bbf\u95ee\u4e5f\u662f\u4fee\u6539\u540e\u7684\u503c\u3002 \u6240\u4ee5\uff1a\u5168\u5c40\u53d8\u91cf\u5bf9\u4e8e\u4efb\u4f55\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u5305\u62ec\u4e3b\u7ebf\u7a0b\uff0c\u6765\u8bf4\u90fd\u662f\u5171\u4eab\u7684\u3002 \u9501 \u00b6 \u5168\u5c40\u53d8\u91cf\u5bf9\u4e8e\u4efb\u4f55\u4e00\u4e2a\u7ebf\u7a0b\u6765\u8bf4\u90fd\u662f\u5171\u4eab\u7684\uff0c\u90a3\u5c31\u4e00\u5b9a\u4f1a\u5f15\u53d1\u4e89\u62a2\u8d44\u6e90\u7684\u60c5\u51b5\uff0c\u8fd9\u662f\u7531CPU\u7684\u8fd0\u884c\u673a\u5236\u5bfc\u81f4\u7684\u3002 \u5982\u679c\u5bf9\u540c\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u4e24\u4e2a\u7ebf\u7a0b\u4e00\u4e2a\u5199\u4e00\u4e2a\u8bfb\u5012\u8fd8\u597d\uff0c\u4f46\u662f\u5982\u679c\u4e24\u4e2a\u540c\u65f6\u5199\u5c31\u4f1a\u5f15\u53d1\u5404\u79cd\u95ee\u9898\u3002 \u7279\u522b\u662f\u5728\u94f6\u884c\u3001\u91d1\u878d\u9886\u57df\uff0c\u4f1a\u5f15\u53d1\u66f4\u5927\u7684\u95ee\u9898\u3002\u6bd4\u5982\u4e00\u8fb9\u8f6c\u4e86\u5e10\u8fd8\u6ca1\u6536\u5230\u7a81\u7136\u51fa\u73b0\u95ee\u9898\uff0c\u8f6c\u8d26\u7684\u6263\u94b1\u4e86\uff0c\u6536\u8d26\u7684\u6ca1\u6536\u5230\uff0c\u90a3\u5c31\u51c9\u51c9\u4e86~ \u6240\u4ee5\u4e3a\u4e86\u89e3\u51b3\u8fd9\u79cd\u7f3a\u9677\uff0c\u5f15\u5165\u4e86\u9501\u7684\u6982\u5ff5\u3002 \u4e3e\u4e2a\u6817\u5b50\uff0c\u5f88\u591a\u4eba\u4e0a\u4e00\u4e2a\u5395\u6240\uff0c\u524d\u9762\u7684\u8fdb\u53bb\u4e86\u5f97\u9501\u95e8\u5427\uff1f\u529e\u5b8c\u4e8b\u4e86\u5f00\u9501\u51fa\u6765\u540e\u9762\u7684\u624d\u80fd\u8fdb\u53bb\uff0c\u4e0a\u9501\uff0c\u529e\u4e8b\u513f\u3002 \u9501\u5c31\u662f\u8fd9\u6837\u7684\u6982\u5ff5\u3002\u54ea\u4e2a\u7ebf\u7a0b\u5148\u62a2\u5230\u9501\u54ea\u4e2a\u5c31\u5148\u6267\u884c\uff0c\u6267\u884c\u5b8c\u4e86\u91ca\u653e\u9501\uff0c\u4e0b\u4e00\u4e2a\u7ebf\u7a0b\u62a2\u5230\u4e86\u5c31\u9501\u4e0a..... \u8fd9\u53eb\u505a**\u540c\u6b65\u63a7\u5236** \u4e92\u65a5\u9501 \u521b\u5efa\u9501\uff1a mutex = threading.Lock() \uff0c\u9ed8\u8ba4\u6ca1\u6709\u4e0a\u9501\u7684 \u9501\u5b9a\uff1a mutex.acquire(blocking=True, timeout=1) \u89e3\u9501\uff1a mutex.release() acquire(blocking=True, timeout=1) \u6210\u529f\u83b7\u5f97\u9501\u8fd4\u56deTrue\uff0c\u5426\u5219\u8fd4\u56deFlase blocking\uff1a\u8bbe\u7f6e\u4e3a True \u65f6\uff0c\u4f1a\u4e00\u76f4\u7b49\u5230\u524d\u9762\u7684\u9501\u91ca\u653e\u7136\u540e\u9501\u5b9a\uff0c\u8bbe\u7f6e\u4e3a Flase \u5219\u4e0d\u4f1a\u3002 timeout\uff1a\u6d6e\u70b9\u578b\uff0c\u5355\u4f4d\u2014\u2014\u79d2\uff1b \u503c\u4e3a\u6b63\u6570\u65f6\uff0c\u7b49\u5f85\u65f6\u957f\u4e3a\u8bbe\u5b9a\u7684\u79d2\u6570 \u503c\u4e3a-1\u65f6\uff0c\u5c06\u65e0\u9650\u7b49\u5f85 blocking=Flase \u65f6\uff0ctimeout\u4e0d\u8d77\u4f5c\u7528\u3002 release() \u9501\u88ab\u9501\u5b9a\u65f6\uff0c\u91cd\u7f6e\u4e3a\u672a\u9501\u5b9a\u3002\u9501\u6ca1\u88ab\u9501\u5b9a\u65f6\uff0c\u5f15\u53d1 RuntimeError \u9519\u8bef\u3002 import threading import time g_num = 0 mutex = threading . Lock () def add1 ( num ): global g_num mutex . acquire () for i in range ( num ): g_num += 1 mutex . release () print ( \"add1----------- %d \" % g_num ) def add2 ( num ): global g_num mutex . acquire () for i in range ( num ): g_num += 1 mutex . release () print ( \"add2----------- %d \" % g_num ) def main (): t1 = threading . Thread ( target = add1 , args = ( 1_000_000 , )) t2 = threading . Thread ( target = add2 , args = ( 1_000_000 , )) t1 . start () t2 . start () time . sleep ( 2 ) print ( \"main----------- %d \" % g_num ) if __name__ == \"__main__\" : main () -------------------------------------------------- # Output: add1 ----------- 1000000 add2 ----------- 2000000 main ----------- 2000000 \u6b7b\u9501 \u00b6 \u9501\u5e76\u975e\u53ea\u6709\u4e00\u4e2a\uff0c\u53ef\u4ee5\u6709\u591a\u4e2a\u3002\u6709\u591a\u4e2a\u9501\uff0c\u5c31\u53ef\u80fd\u53d1\u751f\u6b7b\u9501\u3002 \u4e3e\u4e2a\u6817\u5b50\uff0c \u7535\u5f71\u91cc\u7ecf\u5e38\u80fd\u770b\u89c1\u7684\u955c\u5934\u2014\u2014\u4fe9\u4eba\u6253\u67b6\u4e0d\u5206\u4e0a\u4e0b\uff0cA\u9501\u4f4f\u4e86B\u7684\u811a\u8e1d\uff0cB\u9501\u4f4f\u4e86A\u7684\u8116\u5b50\u3002 A\uff1a\u4f60\u653e\u5f00\u6211 B\uff1a\u4f60\u5148\u653e\u5f00\u6211 A\uff1a\u4f60\u653e\u5f00\u6211\u6211\u5c31\u653e\u5f00\u4f60 B\uff1a\u4f60\u5148\u653e\u5f00\u6211\uff0c\u6211\u518d\u653e\u5f00\u4f60 A\uff1a\u51ed\u4ec0\u4e48\u6211\u5148\u653e B\uff1a\u90a3\u6211\u4e5f\u4e0d\u653e ...2000 year later... \u4e24\u4eba\u6b7b\u4e86\u3002 The end. \u8fd9\u5c31\u662f\u6b7b\u9501\uff0c\u4e92\u4e0d\u76f8\u8ba9\uff0c\u4e92\u76f8\u9501\u4e86\u5bf9\u65b9\u9700\u8981\u7684\u8d44\u6e90\uff0c\u90fd\u7b49\u7740\u5bf9\u65b9\u5148\u91ca\u653e \u7ebf\u7a0bA\u4e0a\u4e86A\u9501\u5e72\u6d3b\uff0c\u7ebf\u7a0bB\u4e0a\u4e86B\u9501\uff0c\u8fd9\u662f\u4e24\u628a\u9501\uff0c\u6240\u4ee5\u76f8\u5b89\u65e0\u4e8b\u3002 \u8fd0\u884c\u7740\u8fd0\u884c\u7740\u7ebf\u7a0bA\u9700\u8981\u4e00\u4efd\u8d44\u6e90\uff0c\u8fd9\u4efd\u8d44\u6e90\u88ab\u7ebf\u7a0bB\u4e0a\u4e86\u9501\u7528\u7740\u5462\uff1b\u7ebf\u7a0bB\u4e5f\u9700\u8981\u4e00\u4efd\u8d44\u6e90\uff0c\u8fd9\u4efd\u8d44\u6e90\u88ab\u7ebf\u7a0bA\u4e0a\u4e86\u9501\u7528\u7740\u5462\u3002 \u8fd9\u65f6\u5019\u7ebf\u7a0bA\u548c\u7ebf\u7a0bB\u90fd\u5728\u7b49\u5bf9\u65b9\u91ca\u653e\u9501\uff0c\u5c31\u8fd9\u4e48\u4e00\u76f4\u7b49\u4e00\u76f4\u7b49 import time import threading class ThreadLockA ( theading . Thread ): def run ( self ): mutexA . acquire () # \u4f7f\u7528A\u9501\u4e0a\u9501 print ( self . name + '-----------doA--up--' ) time . sleep ( 1 ) # \u8fd9\u91cc\u4f1a\u4e0a\u9501\u5931\u8d25\uff0c\u56e0\u4e3a\u4e0a\u9762 time.sleep(1)\u7684\u65f6\u5019B\u9501\u5df2\u7ecf\u88ab\u4e0a\u9501\u4e86 # \u6216\u8005\u6b64\u7ebf\u7a0b\u540e\u6267\u884c\uff0cA\u9501\u5df2\u7ecf\u88ab\u4e0a\u9501\u4e86\uff0c\u4f1a\u4e0a\u9501\u5931\u8d25\u3002 # \u6240\u4ee5\u6b7b\u9501\u4f1a\u53d1\u751f\u5728\u8fd9 mutexB . acquire () # \u8bf7\u6c42B\u9501\u4e0a\u9501 print ( self . name + '-----------doA--down--' ) mutexB . release () mutexA . release () # \u5bf9A\u9501\u8fdb\u884c\u89e3\u9501 class ThreadLockB ( threading . Thread ) \uff1b def run ( self ): mutexB . acquire () # \u4f7f\u7528B\u9501\u4e0a\u9501 print ( self . name + '-----------doB--up--' ) time . sleep ( 1 ) # \u8fd9\u91cc\u4f1a\u4e0a\u9501\u5931\u8d25\uff0c\u56e0\u4e3a\u4e0a\u9762 time.sleep(1)\u7684\u65f6\u5019A\u9501\u5df2\u7ecf\u88ab\u4e0a\u9501\u4e86 # \u6216\u8005\u6b64\u7ebf\u7a0b\u540e\u6267\u884c\uff0cA\u9501\u5df2\u7ecf\u88ab\u4e0a\u9501\u4e86\uff0c\u4f1a\u4e0a\u9501\u5931\u8d25\u3002 # \u6240\u4ee5\u6b7b\u9501\u4f1a\u53d1\u751f\u5728\u8fd9 mutexA . acquire () print ( self . name + '-----------doB--down--' ) mutexA . release () mutexB . release () # \u5bf9B\u9501\u8fdb\u884c\u89e3\u9501 mutexA = threading . Lock () mutexB = threading . Lock () if __name__ == '__main__' : t1 = ThreadLockA () t2 = ThreadLockB () t1 . start () t2 . start () -------------------------------------------------- # Output: ----------- doA -- up -- ----------- doB -- up -- \u00b7\u00b7\u00b7 \u8fd9\u91cc\u5df2\u7ecf\u5361\u6b7b\u4e86 \u4e3a\u4e86\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\uff0c\u53c8\u4e24\u79cd\u65b9\u6cd5 1. \u7a0b\u5e8f\u8bbe\u8ba1\u65f6\u8981\u5c3d\u91cf\u907f\u514d\uff08\u4f7f\u7528\u94f6\u884c\u5bb6\u7b97\u6cd5\uff09 2. \u6dfb\u52a0\u8d85\u65f6\u65f6\u95f4\u7b49","title":"\u7ebf\u7a0b"},{"location":"Python/Adavanced/Thread/Python-No-17-Thread/#_1","text":"\u521b\u5efa\u7ebf\u7a0b\u64cd\u4f5c\u53ef\u4ee5\u5206\u4e3a\u4e09\u6b65\uff1a \u5bfc\u5165 threading \u6a21\u5757 \u521b\u5efa\u4e00\u4e2aThread\u5bf9\u8c61 \u901a\u8fc7Thread\u5bf9\u8c61\u542f\u52a8\u7ebf\u7a0b \u521b\u5efa\u4e00\u4e2aThread\u5bf9\u8c61\u7684\u65f6\u5019\u53ef\u4ee5\u4f20\u5165\u53c2\u6570 threading.Thread(group=None, target=None, name=None, args=(), kwargs={}, *, daemon=None) group \u5e94\u8be5\u4e3a None\uff1b\u4e3a\u4e86\u65e5\u540e\u6269\u5c55 ThreadGroup \u7c7b\u5b9e\u73b0\u800c\u4fdd\u7559\u3002 target\uff1a \u7ebf\u7a0b\u4e2d\u9700\u8981\u6267\u884c\u7684\u51fd\u6570 \u3002\u9ed8\u8ba4\u662f None\uff0c\u8868\u793a\u4e0d\u9700\u8981\u8c03\u7528\u4efb\u4f55\u65b9\u6cd5\u3002 name\uff1a \u7ebf\u7a0b\u540d\u79f0 \u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7531 \"Thread-N\" \u683c\u5f0f\u6784\u6210\u4e00\u4e2a\u552f\u4e00\u7684\u540d\u79f0\uff0c\u5176\u4e2d N \u662f\u5c0f\u7684\u5341\u8fdb\u5236\u6570\u3002 args\uff1a\u7528\u4e8e\u8c03\u7528\u76ee\u6807\u51fd\u6570\u7684**\u53c2\u6570\u5143\u7ec4**\u3002\u9ed8\u8ba4\u662f ()\u3002 \uff08\u5fc5\u987b\u662f\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff09 kwargs\uff1a\u7528\u4e8e\u8c03\u7528\u76ee\u6807\u51fd\u6570\u7684\u5173\u952e\u5b57**\u53c2\u6570\u5b57\u5178**\u3002\u9ed8\u8ba4\u662f {}\u3002 \uff08\u5fc5\u987b\u662f\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff09 daemon\u4e0d\u662fNone \uff0c\u7ebf\u7a0b\u5c06\u88ab\u663e\u5f0f\u7684\u8bbe\u7f6e\u4e3a \u5b88\u62a4\u6a21\u5f0f \uff0c\u4e0d\u7ba1\u8be5\u7ebf\u7a0b\u662f\u5426\u662f\u5b88\u62a4\u6a21\u5f0f\u3002 daemon=None \uff0c\u7ebf\u7a0b\u5c06\u7ee7\u627f\u5f53\u524d\u7ebf\u7a0b\u7684\u5b88\u62a4\u6a21\u5f0f\u5c5e\u6027\u3002 \u5982\u679c\u5b50\u7c7b\u91cd\u8f7d\u4e86\u6784\u9020\u51fd\u6570\uff0c\u5fc5\u987b\u5148\u8c03\u7528\u7236\u7c7b\u6784\u9020\u5668 Thread.__init__() \uff0c\u518d\u505a\u5176\u4ed6\u4e8b\u60c5\u3002","title":"\u521b\u5efa\u5b50\u7ebf\u7a0b\u5e76\u542f\u52a8"},{"location":"Python/Adavanced/Thread/Python-No-17-Thread/#_2","text":"\u51fd\u6570\u65b9\u5f0f\u9002\u5408\u4e8e \u2014\u2014 \u4e00\u4e2a\u7ebf\u7a0b\u4e2d\u8981\u505a\u7684\u4e8b\u60c5\u6bd4\u8f83\u5c11\uff0c\u4e00\u4e2a\u51fd\u6570\u5c31\u80fd\u641e\u5b9a\u3002 \u5bfc\u5165 threading \u6a21\u5757 \u521b\u5efa\u4e00\u4e2aThread\u5bf9\u8c61\u5e76\u628a\u51fd\u6570\u4f20\u8fdb\u53bb \u901a\u8fc7Thread\u5bf9\u8c61\u542f\u52a8\u7ebf\u7a0b import threading # 1. \u5bfc\u5165 thrading \u6a21\u5757 def funcName (): # \u9700\u8981\u5b50\u7ebf\u7a0b\u6267\u884c\u7684\u51fd\u6570 pass t1 = threading . Thread ( target = funcName ) # 2. \u521b\u5efa\u4e00\u4e2aThread\u5bf9\u8c61\u5e76\u628a\u51fd\u6570\u4f20\u8fdb\u53bb t1 . start () # 3. \u542f\u52a8\u7ebf\u7a0b","title":"\u51fd\u6570\u65b9\u5f0f"},{"location":"Python/Adavanced/Thread/Python-No-17-Thread/#_3","text":"\u7ee7\u627f\u65b9\u5f0f\u9002\u5408\u4e8e \u2014\u2014 \u4e00\u4e2a\u7ebf\u7a0b\u91cc\u9762\u505a\u7684\u4e8b\u60c5\u6bd4\u8f83\u590d\u6742\uff0c\u9700\u8981\u5206\u6210\u591a\u4e2a\u51fd\u6570\u6765\u505a\u3002 \u5bfc\u5165 threading \u6a21\u5757 \u521b\u5efa\u4e00\u4e2a\u7c7b\u7ee7\u627f Thread \u7c7b \u91cd\u5199 run \u65b9\u6cd5 \u521b\u5efa\u4e00\u4e2a\u7ee7\u627f\u4e86 Thread \u7c7b\u7684\u5bf9\u8c61 \u7528start\u65b9\u6cd5\u542f\u52a8\u7ebf\u7a0b import threading # 1. \u5bfc\u5165 threading \u6a21\u5757 class clsName ( threading . Thread ): # 2. \u7ee7\u627fThread\u7c7b def run ( self ): # 3. \u91cd\u5199run\u65b9\u6cd5 print ( self . name ) # self.name \u4fdd\u5b58\u7684\u662f\u5f53\u524d\u7ebf\u7a0b\u7684\u540d\u79f0 t1 = clsName () # 4. \u521b\u5efa\u4e00\u4e2a\u7ee7\u627f\u4e86 Thread \u7c7b\u7684\u5bf9\u8c61 t1 . start () # 5. \u542f\u52a8\u7ebf\u7a0b t1.start() \u53ea\u4f1a\u53bb\u8c03\u7528 run \u65b9\u6cd5\u3002\u5982\u679c\u7c7b\u4e2d\u8fd8\u6709\u5176\u4ed6\u65b9\u6cd5\uff0c\u53ea\u80fd\u5728\u7c7b\u4e2d\u8c03\u7528\uff0c\u4e0d\u80fd\u7528 t1 \u53bb\u8c03\u7528\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u7ee7\u627f\u4e86 Thread \u7684\u7c7b\u7684\u4e4b\u7c7b\uff0c\u9664\u4e86run\u65b9\u6cd5\uff0c\u5176\u4ed6\u65b9\u6cd5\u90fd\u53ef\u4ee5\u5b9a\u4e49\u6210\u79c1\u6709\u7684\uff08\u516c\u6709\u7684\u5916\u9762\u4e5f\u4e0d\u80fd\u8c03\u7528\u554a\uff09 import threading class MyThread ( threading . Thread ): def run ( self ): print ( self . name ) self . __say_hi () self . __say_yes () def __say_hi ( self ): print ( 'Hi!' ) def __say_yes ( self ): print ( 'Yes!' ) t1 = MyThread () t1 . start () -------------------------------------------------- # Output: Thread - 1 Hi ! Yes !","title":"\u7ee7\u627f\u65b9\u5f0f"},{"location":"Python/Adavanced/Thread/Python-No-17-Thread/#join","text":"join([timeout]) \u5f53\u67d0\u4e2a\u7ebf\u7a0b\u5bf9\u8c61\u6210\u529f\u8c03\u7528\u4e86 join() \u65b9\u6cd5\u4e4b\u540e\uff0c\u4f1a\u4f18\u5148\u83b7\u5f97CPU\u7684\u8d44\u6e90\uff0c\u8ba9\u5176\u4ed6\u7ebf\u7a0b\u7b49\u5f85 \u77e5\u9053\u8fd9\u4e2a\u7ebf\u7a0b\u5bf9\u8c61\u6267\u884c\u7ed3\u675f\u540e\uff0c\u624d\u628a\u8d44\u6e90\u8ba9\u7ed9\u522b\u7684\u7ebf\u7a0b import threading def f1 ( n ): for i in range ( n ): print ( threading . current_thread () . getName ()) def f2 ( n ): for i in range ( n ): print ( threading . current_thread () . getName () + \"------\" + str ( i )) def main (): t1 = threading . Thread ( target = f1 , args = ( 5 ,)) t2 = threading . Thread ( target = f2 , args = ( 5 ,)) t1 . start () t2 . start () for i in range ( 5 ): print ( threading . current_thread () . getName ()) if __name__ == '__main__' : main () -------------------------------------------------- # Output: Thread - 1 Thread - 1 MainThread Thread - 2 ------ 0 MainThread Thread - 2 ------ 1 MainThread Thread - 2 ------ 2 MainThread MainThread Thread - 2 ------ 3 Thread - 2 ------ 4 Thread - 1 Thread - 1 Thread - 1 \u53ef\u4ee5\u770b\u5230\uff0c\u6ca1\u6709\u52a0 join \u65b9\u6cd5\uff0c\u6240\u4ee5\u4e3b\u7ebf\u7a0b \u548c t1 \u548c t2 \u76f8\u4e92\u4e89\u62a2\u8d44\u6e90\u3002 \u5982\u679c\u73b0\u5728\u9700\u8981 t1 \u8fd9\u4e2a\u7ebf\u7a0b\u6267\u884c\u5b8c\u518d\u7ed9\u5176\u4ed6\u7ebf\u7a0b\u6267\u884c\uff0c\u4e5f\u5c31\u662f\u8bf4\u8981\u6c42 t1 \u72ec\u5360\u4e00\u6bb5\u65f6\u95f4 \u90a3\u5c31\u8ba9 t1 \u8c03\u7528 join() \u65b9\u6cd5 import threading def f1 ( n ): for i in range ( n ): print ( threading . current_thread () . getName ()) def f2 ( n ): for i in range ( n ): print ( threading . current_thread () . getName () + \"------\" + str ( i )) def main (): t1 = threading . Thread ( target = f1 , args = ( 5 ,)) t2 = threading . Thread ( target = f2 , args = ( 5 ,)) t1 . start () t1 . join () t2 . start () for i in range ( 5 ): print ( threading . current_thread () . getName ()) if __name__ == '__main__' : main () -------------------------------------------------- # Output: Thread - 1 Thread - 1 Thread - 1 Thread - 1 Thread - 1 Thread - 2 ------ 0 Thread - 2 ------ 1 MainThread Thread - 2 ------ 2 MainThread Thread - 2 ------ 3 MainThread Thread - 2 ------ 4 MainThread MainThread \u8fd9\u6837\u5c31\u5b9e\u73b0\u4e86 t1 \u72ec\u5360\u8d44\u6e90\uff0c\u5b8c\u6210\u540e\u624d\u7ed9\u5176\u4ed6\u7ebf\u7a0b","title":"\u63d2\u961f join()"},{"location":"Python/Adavanced/Thread/Python-No-17-Thread/#_4","text":"threading.enumerate() \u4ee5\u5217\u8868\u5f62\u5f0f\u8fd4\u56de\u5f53\u524d\u6240\u6709\u5b58\u6d3b\u7684 Thread \u5bf9\u8c61\u3002 \u8be5\u5217\u8868\u5305\u542b\u5b88\u62a4\u7ebf\u7a0b\uff0ccurrent_thread() \u521b\u5efa\u7684\u865a\u62df\u7ebf\u7a0b\u5bf9\u8c61\u548c\u4e3b\u7ebf\u7a0b\u3002 \u5b83\u4e0d\u5305\u542b\u5df2\u7ec8\u7ed3\u7684\u7ebf\u7a0b\u548c\u5c1a\u672a\u5f00\u59cb\u7684\u7ebf\u7a0b\u3002 import time import threading def say_hi (): for i in range ( 3 ): print ( 'Hi!' ) time . sleep ( 1 ) def say_yes (): for i in range ( 3 ): print ( 'Yes!' ) time . sleep ( 1 ) def main (): t1 = threading . Thread ( target = say_hi ) t2 = threading . Thread ( target = say_yes ) t1 . start () t2 . start () while True : print ( threading . enumerate ()) if len ( threading . enumerate ()) <= 1 : break time . sleep ( 1 ) if __name__ == '__main__' : main () -------------------------------------------------- # Output: Hi ! Yes ! [ < _MainThread ( MainThread , started 1292 ) > , < Thread ( Thread - 1 , started 7968 ) > , < Thread ( Thread - 2 , started 3796 ) > ] [ < _MainThread ( MainThread , started 1292 ) > , < Thread ( Thread - 1 , started 7968 ) > , < Thread ( Thread - 2 , started 3796 ) > ] Hi ! Yes ! Hi ! Yes ! [ < _MainThread ( MainThread , started 1292 ) > , < Thread ( Thread - 1 , started 7968 ) > , < Thread ( Thread - 2 , started 3796 ) > ] [ < _MainThread ( MainThread , started 1292 ) > , < Thread ( Thread - 1 , started 7968 ) > ]","title":"\u67e5\u770b\u6240\u6709\u7ebf\u7a0b"},{"location":"Python/Adavanced/Thread/Python-No-17-Thread/#_5","text":"\u5047\u8bbe\u73b0\u5728\u6709\u4e2a\u4efb\u52a1\uff0c\u53bb\u6293\u53d6\u67d0\u4e2a\u7f51\u7ad9\u4e0a\u6240\u6709\u7684\u7167\u7247\uff0c\u7136\u540e\u53d1\u9001\u5230\u67d0\u4e2a\u90ae\u7bb1\u3002 \u8fd9\u91cc\u5c31\u53ef\u4ee5\u5206\u6210\u4e24\u4e2a\u5b50\u4efb\u52a1\uff0c\u4e00\u4e2a\u6293\u53d6\u7167\u7247\uff0c\u4e00\u4e2a\u53d1\u9001\u7167\u7247 \u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0b\u8d1f\u8d23\u6293\u53d6\u7167\u7247\uff0c\u4e00\u4e2a\u7ebf\u7a0b\u8d1f\u8d23\u53d1\u9001\u7167\u7247 \u90a3\u4e48\u53ef\u4ee5\u53d1\u73b0\uff0c \u7167\u7247 \u662f\u4e24\u4e2a\u7ebf\u7a0b\u90fd\u8981\u7528\u5230\u7684\u6570\u636e\u3002 \u6240\u4ee5\u6211\u4eec\u5e94\u8be5\u628a \u7167\u7247 \u8bbe\u7f6e\u4e3a**\u5168\u5c40\u53d8\u91cf**\uff0c\u8fd9\u6837\u4e24\u4e2a\u7ebf\u7a0b\u624d\u53ef\u4ee5\u8fdb\u884c\u5408\u4f5c\u3002 \u5728\u591a\u7ebf\u7a0b\u4efb\u52a1\u4e2d\uff0c \u5168\u5c40\u53d8\u91cf \u662f\u53ef\u4ee5\u7ed9\u6bcf\u4e00\u4e2a\u7ebf\u7a0b\u5171\u4eab\u7684\u3002 import threading g_num = 10 # \u5168\u5c40\u53d8\u91cf def add1 (): global g_num g_num += 5 print ( \"add1----------- %d \" % g_num ) def add2 (): print ( \"add2----------- %d \" % g_num ) def main (): t1 = threading . Thread ( target = add1 , name = 'add1' ) t2 = threading . Thread ( target = add2 , name = 'add2' ) t1 . start () t2 . start () print ( \"main----------- %d \" % g_num ) if __name__ == \"__main__\" : main () -------------------------------------------------- # Output: add1 ----------- 15 add2 ----------- 15 main ----------- 15 \u4ece\u6817\u5b50\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u7ebf\u7a0b t1 \u4e2d\u7684 add1 \u5bf9\u5168\u5c40\u53d8\u91cf g_num \u8fdb\u884c\u4e86\u4fee\u6539 \u5728\u7ebf\u7a0b t2 \u7684 add2 \u5bf9 g_num \u8fdb\u884c\u8bbf\u95ee\u7684\u65f6\u5019\u8bbf\u95ee\u5230\u7684\u662f\u4fee\u6539\u540e\u7684\u503c \u5728\u4e3b\u7ebf\u7a0b\u7684 main \u65b9\u6cd5\u4e2d\u8bbf\u95ee\u4e5f\u662f\u4fee\u6539\u540e\u7684\u503c\u3002 \u6240\u4ee5\uff1a\u5168\u5c40\u53d8\u91cf\u5bf9\u4e8e\u4efb\u4f55\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u5305\u62ec\u4e3b\u7ebf\u7a0b\uff0c\u6765\u8bf4\u90fd\u662f\u5171\u4eab\u7684\u3002","title":"\u591a\u7ebf\u7a0b\u5171\u4eab\u5168\u5c40\u53d8\u91cf"},{"location":"Python/Adavanced/Thread/Python-No-17-Thread/#_6","text":"\u5168\u5c40\u53d8\u91cf\u5bf9\u4e8e\u4efb\u4f55\u4e00\u4e2a\u7ebf\u7a0b\u6765\u8bf4\u90fd\u662f\u5171\u4eab\u7684\uff0c\u90a3\u5c31\u4e00\u5b9a\u4f1a\u5f15\u53d1\u4e89\u62a2\u8d44\u6e90\u7684\u60c5\u51b5\uff0c\u8fd9\u662f\u7531CPU\u7684\u8fd0\u884c\u673a\u5236\u5bfc\u81f4\u7684\u3002 \u5982\u679c\u5bf9\u540c\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u4e24\u4e2a\u7ebf\u7a0b\u4e00\u4e2a\u5199\u4e00\u4e2a\u8bfb\u5012\u8fd8\u597d\uff0c\u4f46\u662f\u5982\u679c\u4e24\u4e2a\u540c\u65f6\u5199\u5c31\u4f1a\u5f15\u53d1\u5404\u79cd\u95ee\u9898\u3002 \u7279\u522b\u662f\u5728\u94f6\u884c\u3001\u91d1\u878d\u9886\u57df\uff0c\u4f1a\u5f15\u53d1\u66f4\u5927\u7684\u95ee\u9898\u3002\u6bd4\u5982\u4e00\u8fb9\u8f6c\u4e86\u5e10\u8fd8\u6ca1\u6536\u5230\u7a81\u7136\u51fa\u73b0\u95ee\u9898\uff0c\u8f6c\u8d26\u7684\u6263\u94b1\u4e86\uff0c\u6536\u8d26\u7684\u6ca1\u6536\u5230\uff0c\u90a3\u5c31\u51c9\u51c9\u4e86~ \u6240\u4ee5\u4e3a\u4e86\u89e3\u51b3\u8fd9\u79cd\u7f3a\u9677\uff0c\u5f15\u5165\u4e86\u9501\u7684\u6982\u5ff5\u3002 \u4e3e\u4e2a\u6817\u5b50\uff0c\u5f88\u591a\u4eba\u4e0a\u4e00\u4e2a\u5395\u6240\uff0c\u524d\u9762\u7684\u8fdb\u53bb\u4e86\u5f97\u9501\u95e8\u5427\uff1f\u529e\u5b8c\u4e8b\u4e86\u5f00\u9501\u51fa\u6765\u540e\u9762\u7684\u624d\u80fd\u8fdb\u53bb\uff0c\u4e0a\u9501\uff0c\u529e\u4e8b\u513f\u3002 \u9501\u5c31\u662f\u8fd9\u6837\u7684\u6982\u5ff5\u3002\u54ea\u4e2a\u7ebf\u7a0b\u5148\u62a2\u5230\u9501\u54ea\u4e2a\u5c31\u5148\u6267\u884c\uff0c\u6267\u884c\u5b8c\u4e86\u91ca\u653e\u9501\uff0c\u4e0b\u4e00\u4e2a\u7ebf\u7a0b\u62a2\u5230\u4e86\u5c31\u9501\u4e0a..... \u8fd9\u53eb\u505a**\u540c\u6b65\u63a7\u5236** \u4e92\u65a5\u9501 \u521b\u5efa\u9501\uff1a mutex = threading.Lock() \uff0c\u9ed8\u8ba4\u6ca1\u6709\u4e0a\u9501\u7684 \u9501\u5b9a\uff1a mutex.acquire(blocking=True, timeout=1) \u89e3\u9501\uff1a mutex.release() acquire(blocking=True, timeout=1) \u6210\u529f\u83b7\u5f97\u9501\u8fd4\u56deTrue\uff0c\u5426\u5219\u8fd4\u56deFlase blocking\uff1a\u8bbe\u7f6e\u4e3a True \u65f6\uff0c\u4f1a\u4e00\u76f4\u7b49\u5230\u524d\u9762\u7684\u9501\u91ca\u653e\u7136\u540e\u9501\u5b9a\uff0c\u8bbe\u7f6e\u4e3a Flase \u5219\u4e0d\u4f1a\u3002 timeout\uff1a\u6d6e\u70b9\u578b\uff0c\u5355\u4f4d\u2014\u2014\u79d2\uff1b \u503c\u4e3a\u6b63\u6570\u65f6\uff0c\u7b49\u5f85\u65f6\u957f\u4e3a\u8bbe\u5b9a\u7684\u79d2\u6570 \u503c\u4e3a-1\u65f6\uff0c\u5c06\u65e0\u9650\u7b49\u5f85 blocking=Flase \u65f6\uff0ctimeout\u4e0d\u8d77\u4f5c\u7528\u3002 release() \u9501\u88ab\u9501\u5b9a\u65f6\uff0c\u91cd\u7f6e\u4e3a\u672a\u9501\u5b9a\u3002\u9501\u6ca1\u88ab\u9501\u5b9a\u65f6\uff0c\u5f15\u53d1 RuntimeError \u9519\u8bef\u3002 import threading import time g_num = 0 mutex = threading . Lock () def add1 ( num ): global g_num mutex . acquire () for i in range ( num ): g_num += 1 mutex . release () print ( \"add1----------- %d \" % g_num ) def add2 ( num ): global g_num mutex . acquire () for i in range ( num ): g_num += 1 mutex . release () print ( \"add2----------- %d \" % g_num ) def main (): t1 = threading . Thread ( target = add1 , args = ( 1_000_000 , )) t2 = threading . Thread ( target = add2 , args = ( 1_000_000 , )) t1 . start () t2 . start () time . sleep ( 2 ) print ( \"main----------- %d \" % g_num ) if __name__ == \"__main__\" : main () -------------------------------------------------- # Output: add1 ----------- 1000000 add2 ----------- 2000000 main ----------- 2000000","title":"\u9501"},{"location":"Python/Adavanced/Thread/Python-No-17-Thread/#_7","text":"\u9501\u5e76\u975e\u53ea\u6709\u4e00\u4e2a\uff0c\u53ef\u4ee5\u6709\u591a\u4e2a\u3002\u6709\u591a\u4e2a\u9501\uff0c\u5c31\u53ef\u80fd\u53d1\u751f\u6b7b\u9501\u3002 \u4e3e\u4e2a\u6817\u5b50\uff0c \u7535\u5f71\u91cc\u7ecf\u5e38\u80fd\u770b\u89c1\u7684\u955c\u5934\u2014\u2014\u4fe9\u4eba\u6253\u67b6\u4e0d\u5206\u4e0a\u4e0b\uff0cA\u9501\u4f4f\u4e86B\u7684\u811a\u8e1d\uff0cB\u9501\u4f4f\u4e86A\u7684\u8116\u5b50\u3002 A\uff1a\u4f60\u653e\u5f00\u6211 B\uff1a\u4f60\u5148\u653e\u5f00\u6211 A\uff1a\u4f60\u653e\u5f00\u6211\u6211\u5c31\u653e\u5f00\u4f60 B\uff1a\u4f60\u5148\u653e\u5f00\u6211\uff0c\u6211\u518d\u653e\u5f00\u4f60 A\uff1a\u51ed\u4ec0\u4e48\u6211\u5148\u653e B\uff1a\u90a3\u6211\u4e5f\u4e0d\u653e ...2000 year later... \u4e24\u4eba\u6b7b\u4e86\u3002 The end. \u8fd9\u5c31\u662f\u6b7b\u9501\uff0c\u4e92\u4e0d\u76f8\u8ba9\uff0c\u4e92\u76f8\u9501\u4e86\u5bf9\u65b9\u9700\u8981\u7684\u8d44\u6e90\uff0c\u90fd\u7b49\u7740\u5bf9\u65b9\u5148\u91ca\u653e \u7ebf\u7a0bA\u4e0a\u4e86A\u9501\u5e72\u6d3b\uff0c\u7ebf\u7a0bB\u4e0a\u4e86B\u9501\uff0c\u8fd9\u662f\u4e24\u628a\u9501\uff0c\u6240\u4ee5\u76f8\u5b89\u65e0\u4e8b\u3002 \u8fd0\u884c\u7740\u8fd0\u884c\u7740\u7ebf\u7a0bA\u9700\u8981\u4e00\u4efd\u8d44\u6e90\uff0c\u8fd9\u4efd\u8d44\u6e90\u88ab\u7ebf\u7a0bB\u4e0a\u4e86\u9501\u7528\u7740\u5462\uff1b\u7ebf\u7a0bB\u4e5f\u9700\u8981\u4e00\u4efd\u8d44\u6e90\uff0c\u8fd9\u4efd\u8d44\u6e90\u88ab\u7ebf\u7a0bA\u4e0a\u4e86\u9501\u7528\u7740\u5462\u3002 \u8fd9\u65f6\u5019\u7ebf\u7a0bA\u548c\u7ebf\u7a0bB\u90fd\u5728\u7b49\u5bf9\u65b9\u91ca\u653e\u9501\uff0c\u5c31\u8fd9\u4e48\u4e00\u76f4\u7b49\u4e00\u76f4\u7b49 import time import threading class ThreadLockA ( theading . Thread ): def run ( self ): mutexA . acquire () # \u4f7f\u7528A\u9501\u4e0a\u9501 print ( self . name + '-----------doA--up--' ) time . sleep ( 1 ) # \u8fd9\u91cc\u4f1a\u4e0a\u9501\u5931\u8d25\uff0c\u56e0\u4e3a\u4e0a\u9762 time.sleep(1)\u7684\u65f6\u5019B\u9501\u5df2\u7ecf\u88ab\u4e0a\u9501\u4e86 # \u6216\u8005\u6b64\u7ebf\u7a0b\u540e\u6267\u884c\uff0cA\u9501\u5df2\u7ecf\u88ab\u4e0a\u9501\u4e86\uff0c\u4f1a\u4e0a\u9501\u5931\u8d25\u3002 # \u6240\u4ee5\u6b7b\u9501\u4f1a\u53d1\u751f\u5728\u8fd9 mutexB . acquire () # \u8bf7\u6c42B\u9501\u4e0a\u9501 print ( self . name + '-----------doA--down--' ) mutexB . release () mutexA . release () # \u5bf9A\u9501\u8fdb\u884c\u89e3\u9501 class ThreadLockB ( threading . Thread ) \uff1b def run ( self ): mutexB . acquire () # \u4f7f\u7528B\u9501\u4e0a\u9501 print ( self . name + '-----------doB--up--' ) time . sleep ( 1 ) # \u8fd9\u91cc\u4f1a\u4e0a\u9501\u5931\u8d25\uff0c\u56e0\u4e3a\u4e0a\u9762 time.sleep(1)\u7684\u65f6\u5019A\u9501\u5df2\u7ecf\u88ab\u4e0a\u9501\u4e86 # \u6216\u8005\u6b64\u7ebf\u7a0b\u540e\u6267\u884c\uff0cA\u9501\u5df2\u7ecf\u88ab\u4e0a\u9501\u4e86\uff0c\u4f1a\u4e0a\u9501\u5931\u8d25\u3002 # \u6240\u4ee5\u6b7b\u9501\u4f1a\u53d1\u751f\u5728\u8fd9 mutexA . acquire () print ( self . name + '-----------doB--down--' ) mutexA . release () mutexB . release () # \u5bf9B\u9501\u8fdb\u884c\u89e3\u9501 mutexA = threading . Lock () mutexB = threading . Lock () if __name__ == '__main__' : t1 = ThreadLockA () t2 = ThreadLockB () t1 . start () t2 . start () -------------------------------------------------- # Output: ----------- doA -- up -- ----------- doB -- up -- \u00b7\u00b7\u00b7 \u8fd9\u91cc\u5df2\u7ecf\u5361\u6b7b\u4e86 \u4e3a\u4e86\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\uff0c\u53c8\u4e24\u79cd\u65b9\u6cd5 1. \u7a0b\u5e8f\u8bbe\u8ba1\u65f6\u8981\u5c3d\u91cf\u907f\u514d\uff08\u4f7f\u7528\u94f6\u884c\u5bb6\u7b97\u6cd5\uff09 2. \u6dfb\u52a0\u8d85\u65f6\u65f6\u95f4\u7b49","title":"\u6b7b\u9501"},{"location":"Python/Adavanced/Thread/Python-No-18-Coroutine/","text":"\u534f\u7a0b\uff0c\u65f6\u95f4\u7ba1\u7406\u5927\u5e08 **\u7ebf\u7a0b**\u662f\u7cfb\u7edf\u7ea7\u522b\u7684\uff0c\u7531\u64cd\u4f5c\u7cfb\u7edf\u8c03\u5ea6 **\u534f\u7a0b**\u662f\u7a0b\u5e8f\u7ea7\u522b\u7684\uff0c\u7531\u7a0b\u5e8f\u6839\u636e\u9700\u8981\u81ea\u5df1\u8c03\u5ea6 \u534f\u7a0b\u53ef\u4ee5\u60f3\u8c61\u6210\u7ebf\u7a0b\u91cc\u7684\u7ebf\u7a0b\uff0c\u4e5f\u5c31\u662f\u5c06\u4e00\u4e2a\u7ebf\u7a0b\u91cc\u591a\u4e2a\u4efb\u52a1\u5206\u62c6\u7ed9\u591a\u4e2a\u534f\u7a0b\u3002 \u4f7f\u7528\u7ebf\u7a0b\u7684\u65f6\u5019\u662f\uff1a\u7ebf\u7a0b\u6267\u884c\u9047\u5230\u8017\u65f6\uff08\u963b\u585e\uff09\u7684\u5730\u65b9\uff0c\u518d\u5f00\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u53bb\u6267\u884c\u8fd9\u4e2a\u8017\u65f6\u7684\u4efb\u52a1\uff0c\u539f\u672c\u7684\u7ebf\u7a0b\u7ee7\u7eed\u6267\u884c\u3002 \u5c31\u597d\u6bd4\u6211\u5728\u7b97\u9898\uff0c\u7b97\u7740\u7b97\u7740\u8ba1\u7b97\u91cf\u6bd4\u8f83\u5927\u6bd4\u8f83\u8017\u65f6\uff0c\u6211\u5c31\u53eb\u4e86\u5c0f\u660e\u5e2e\u6211\u7b97\uff0c\u6211\u7ee7\u7eed\u7b97\u4e0b\u9762\u7684\u3002 \u4f7f\u7528\u534f\u7a0b\u7684\u65f6\u5019\u662f\uff1a\u5229\u7528\u522b\u7684\u534f\u7a0b\u6267\u884c\u8017\u65f6\u64cd\u4f5c\u65f6\u7684\u90a3\u70b9\u65f6\u95f4\u5207\u6362\u53bb\u522b\u7684\u534f\u7a0b\u7ee7\u7eed\u6267\u884c\uff0c\u4e5f\u5c31\u662f\u5728\u534f\u7a0b\u4e4b\u95f4\u53cd\u590d\u6a2a\u8df3\u3002 \u5c31\u597d\u6bd4\u6211\u5728\u7b97\u9898\uff0c\u7b97\u7740\u7b97\u7740\u8ba1\u7b97\u91cf\u6709\u70b9\u5927\uff0c\u5c31\u5148\u505a\u522b\u7684\u9898\uff0c\u56de\u5934\u81ea\u5df1\u518d\u7ee7\u7eed\u628a\u9898\u7b97\u5b8c \u534f\u7a0b\u7684\u4f18\u70b9\uff1a 1. \u65e0\u9700\u7ebf\u7a0b\u4e0a\u4e0b\u6587\u5207\u6362\u7684\u5f00\u9500\uff0c\u56e0\u4e3a\u90fd\u5728\u540c\u4e00\u4e2a\u7ebf\u7a0b\u91cc\uff0c\u907f\u514d\u4e86\u65e0\u610f\u4e49\u7684\u8c03\u5ea6\uff0c\u7531\u6b64\u53ef\u4ee5\u63d0\u9ad8\u6027\u80fd\u3002 2. \u65e0\u9700\u539f\u5b50\u64cd\u4f5c\u9501\u5b9a\u53ca\u540c\u6b65\u7684\u5f00\u9500 3. \u65b9\u4fbf\u5207\u6362\u63a7\u5236\u6d41\uff0c\u7b80\u5316\u7f16\u7a0b\u6a21\u578b 4. \u9ad8\u5e76\u53d1+\u9ad8\u6269\u5c55\u6027+\u4f4e\u6210\u672c\uff1a\u4e00\u4e2aCPU\u652f\u6301\u4e0a\u4e07\u4e2a\u534f\u7a0b\u90fd\u4e0d\u662f\u95ee\u9898\u3002\u6240\u4ee5\u5f88\u9002\u5408\u9ad8\u5e76\u53d1\u5904\u7406\u3002 \u7f3a\u70b9\uff1a 1. \u56e0\u4e3a\u534f\u7a0b\u90fd\u662f\u7a0b\u5e8f\u8c03\u5ea6\u7684\uff0c\u6240\u4ee5\u9700\u8981\u7a0b\u5e8f\u5458\u627f\u62c5\u8c03\u5ea6\u7684\u8d23\u4efb\uff0c\u540c\u65f6\u4e5f\u5931\u53bb\u4e86\u6807\u51c6\u7ebf\u7a0b\u4f7f\u7528\u591aCPU\u7684\u80fd\u529b 2. \u65e0\u6cd5\u5229\u7528\u591a\u6838\u8d44\u6e90\uff1a\u534f\u7a0b\u7684\u672c\u8d28\u662f\u4e2a\u5355\u7ebf\u7a0b\uff0c\u4e0d\u80fd\u540c\u65f6\u7528\u4e0a\u5355\u4e2aCPU\u7684\u591a\u4e2a\u6838\u3002\u534f\u7a0b\u9700\u8981\u548c\u8fdb\u7a0b\u914d\u5408\u624d\u80fd\u8fd0\u884c\u5728\u591aCPU\u4e0a\uff0c\u4e0d\u8fc7\u7edd\u5927\u90e8\u5206\u5e94\u7528\u90fd\u6ca1\u6709\u8fd9\u4e2a\u5fc5\u8981\uff0c\u9664\u975e\u662fCPU\u5bc6\u96c6\u578b\u5e94\u7528 3. \u8fdb\u884c\u963b\u585e\u64cd\u4f5c\uff08\u5982IO\uff09\u4f1a\u963b\u585e\u6389\u6574\u4e2a\u7a0b\u5e8f\u3002 \u4f7f\u7528 yield \u5b9e\u73b0\u5e76\u53d1 \u00b6 import time def task_1 (): while True : print ( \" {:-^16s} \" . format ( \"task_1\" )) time . sleep ( 0.1 ) yield def task_2 (): while True : print ( \" {:-^16s} \" . format ( \"task_2\" )) time . sleep ( 0.1 ) yield def main (): t1 = task_1 () t2 = task_2 () # \u5148\u8ba9t1\u8fd0\u884c\u4e00\u4f1a\u513f\uff0c\u5f53t1\u4e2d\u9047\u5230yield\u7684\u65f6\u5019\uff0c\u518d\u8fd4\u56de\u5230main()\u7684while\u5faa\u73af # \u7136\u540e\u6267\u884ct2\uff0c\u5f53\u5b83\u9047\u5230yield\u7684\u65f6\u5019\uff0c\u518d\u6b21\u5207\u6362\u5230t1\u4e2d # \u5c31\u8fd9\u6837t1/t2/t1/t2...\u4ea4\u66ff\u8fd0\u884c\uff0c\u6700\u7ec8\u5b9e\u73b0\u4e86\u591a\u4efb\u52a1...\u534f\u7a0b while True : next ( t1 ) next ( t2 ) if __name__ == '__main__' : main () -------------------------------------------------- # Output: ----- task_1 ----- ----- task_2 ----- ----- task_1 ----- ----- task_2 ----- ----- task_1 ----- ----- task_2 ----- ----- task_1 ----- ----- task_2 ----- ----- task_1 ----- ----- task_2 ----- ... \u4f7f\u7528 greenlet \u5b9e\u73b0\u5e76\u53d1 \u00b6 >_: pip install greenlet from greenlet import greenlet import time def task_1 (): while True : print ( \" {:-^16s} \" . format ( \"task_1\" )) gr2 . switch () # \u5207\u6362\u5230 gr2\u4e2d\uff0c\u4e5f\u5c31\u662f task_2() \u4e2d\u8fd0\u884c time . sleep ( 0.5 ) def task_2 (): while True : print ( \" {:-^16s} \" . format ( \"task_2\" )) gr1 . switch () # \u5207\u6362\u5230 gr1\u4e2d\uff0c\u4e5f\u5c31\u662f task_1() \u4e2d\u8fd0\u884c time . sleep ( 0.5 ) gr1 = greenlet ( task_1 ) gr2 = greenlet ( task_2 ) # \u5207\u6362\u5230 gr1\u4e2d\uff0c\u4e5f\u5c31\u662f task_1() \u4e2d\u8fd0\u884c gr1 . switch -------------------------------------------------- # Output: ----- task_1 ----- ----- task_2 ----- ----- task_1 ----- ----- task_2 ----- ----- task_1 ----- ----- task_2 ----- ----- task_1 ----- ----- task_2 ----- ----- task_1 ----- ----- task_2 ----- ... \u4f7f\u7528 gevent \u5b9e\u73b0\u5e76\u53d1 \u00b6 import gevent gevent.spawn(funcName, args) \u5148\u770b\u770b\u6ca1\u6709\u963b\u585e\u64cd\u4f5c\u7684\u65f6\u5019\uff1a # \u6ca1\u6709\u963b\u585e import gevent def task_1 ( n ): for i in range ( n ): print ( gevent . getcurrent (), i ) def task_2 ( n ): for i in range ( n ): print ( gevent . getcurrent (), i ) def task_3 ( n ): for i in range ( n ): print ( gevent . getcurrent (), i ) def main (): g1 = gevent . spawn ( task_1 , 5 ) g2 = gevent . spawn ( task_2 , 5 ) g3 = gevent . spawn ( task_3 , 5 ) g1 . join () g2 . join () g3 . join () if __name__ == '__main__' : main () -------------------------------------------------- # Output: < Greenlet at 0x1f6eaf0cd00 : task_1 ( 5 ) > 0 < Greenlet at 0x1f6eaf0cd00 : task_1 ( 5 ) > 1 < Greenlet at 0x1f6eaf0cd00 : task_1 ( 5 ) > 2 < Greenlet at 0x1f6eaf0cd00 : task_1 ( 5 ) > 3 < Greenlet at 0x1f6eaf0cd00 : task_1 ( 5 ) > 4 < Greenlet at 0x1f6eaf0ce10 : task_2 ( 5 ) > 0 < Greenlet at 0x1f6eaf0ce10 : task_2 ( 5 ) > 1 < Greenlet at 0x1f6eaf0ce10 : task_2 ( 5 ) > 2 < Greenlet at 0x1f6eaf0ce10 : task_2 ( 5 ) > 3 < Greenlet at 0x1f6eaf0ce10 : task_2 ( 5 ) > 4 < Greenlet at 0x1f6eaf0cbf0 : task_3 ( 5 ) > 0 < Greenlet at 0x1f6eaf0cbf0 : task_3 ( 5 ) > 1 < Greenlet at 0x1f6eaf0cbf0 : task_3 ( 5 ) > 2 < Greenlet at 0x1f6eaf0cbf0 : task_3 ( 5 ) > 3 < Greenlet at 0x1f6eaf0cbf0 : task_3 ( 5 ) > 4 gevent \u662f\u5229\u7528\u534f\u7a0b\u963b\u585e\u7684\u65f6\u5019\u53bb\u6267\u884c\u522b\u7684\u534f\u7a0b \u8fd9\u91cc\u6ca1\u6709\u963b\u585e\u64cd\u4f5c\uff0c\u6240\u4ee5\u5e76\u4e0d\u4f1a\u53d1\u751f\u4ec0\u4e48\u53d8\u5316\uff0c\u8ddf\u666e\u901a\u51fd\u6570\u8c03\u7528\u4e00\u6837\uff0c\u66f4\u63d0\u4e0d\u4e0a\u5e76\u53d1 \u73b0\u5728\u6765\u52a0\u70b9\u963b\u585e\u64cd\u4f5c\u770b\u770b # \u6709\u963b\u585e import gevent def task_1 ( n ): for i in range ( n ): print ( gevent . getcurrent (), i ) # time.sleep(0.1) # \u5728gevent\u4e2d\uff0ctime.sleep()\u8fd9\u79cd\u963b\u585e\u64cd\u4f5c\u662f\u4e0d\u8d77\u4f5c\u7528\u7684 gevent . sleep ( 0.1 ) def task_2 ( n ): for i in range ( n ): print ( gevent . getcurrent (), i ) gevent . sleep ( 0.1 ) def task_3 ( n ): for i in range ( n ): print ( gevent . getcurrent (), i ) gevent . sleep ( 0.1 ) def main (): g1 = gevent . spawn ( task_1 , 5 ) g2 = gevent . spawn ( task_2 , 5 ) g3 = gevent . spawn ( task_3 , 5 ) g1 . join () g2 . join () g3 . join () if __name__ == '__main__' : main () -------------------------------------------------- # Output: < Greenlet at 0x1433a62b370 : task_1 ( 5 ) > 0 < Greenlet at 0x1433a62b590 : task_2 ( 5 ) > 0 < Greenlet at 0x1433a62b480 : task_3 ( 5 ) > 0 < Greenlet at 0x1433a62b370 : task_1 ( 5 ) > 1 < Greenlet at 0x1433a62b590 : task_2 ( 5 ) > 1 < Greenlet at 0x1433a62b480 : task_3 ( 5 ) > 1 < Greenlet at 0x1433a62b370 : task_1 ( 5 ) > 2 < Greenlet at 0x1433a62b590 : task_2 ( 5 ) > 2 < Greenlet at 0x1433a62b480 : task_3 ( 5 ) > 2 < Greenlet at 0x1433a62b370 : task_1 ( 5 ) > 3 < Greenlet at 0x1433a62b590 : task_2 ( 5 ) > 3 < Greenlet at 0x1433a62b480 : task_3 ( 5 ) > 3 < Greenlet at 0x1433a62b370 : task_1 ( 5 ) > 4 < Greenlet at 0x1433a62b590 : task_2 ( 5 ) > 4 < Greenlet at 0x1433a62b480 : task_3 ( 5 ) > 4 \u4e0a\u8ff0\u4ee3\u7801 \u5efa\u7acb\u4e86\u4e09\u4e2a gevent \u5bf9\u8c61\uff0c\u91cc\u9762\u5206\u522b\u8f6c\u8f7d\u4e86 task_1\u3001task_2\u3001task_3 \u4e09\u4e2a\u6267\u884c\u51fd\u6570\u3002 \u63a5\u7740\u4e09\u4e2a gevent \u5bf9\u8c61\u90fd\u4f7f\u7528 join \u65b9\u6cd5\u8fd0\u884c\u4e86\u6267\u884c\u51fd\u6570 \u5728\u4e09\u4e2a\u6267\u884c\u51fd\u6570\u4e2d\u53c8\u7528\u4e86 gevent.sleep() \u6a21\u62df\u963b\u585e\u64cd\u4f5c\uff08\u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\u5e76\u4e0d\u4f1a\u4e13\u95e8\u7528sleep\u53bb\u963b\u585e\uff0c\u800c\u662f\u5728\u6267\u884c\u5230 IO \u7b49\u8017\u65f6\u64cd\u4f5c\u65f6\uff0cgevent\u81ea\u52a8\u5207\u6362\u3002\uff09 \u5728\u6267\u884c task_1 \u7684\u65f6\u5019\uff0c\u6253\u5370\u4e86\u7b2c\u4e00\u53e5\uff0c\u7136\u540e\u9047\u5230\u4e86 gevent.sleep() \u7684\u963b\u585e\u64cd\u4f5c\uff0c\u5207\u6362\u5230 task_2 \uff0c\u6253\u5370\u4e86\u7b2c\u4e8c\u5c40\uff0c\u53c8\u9047\u5230\u963b\u585e\uff0c\u53c8\u5207\u6362...\u4e00\u76f4\u5230\u5168\u90e8\u6267\u884c\u5b8c\u6bd5 \u53e6\u5916\uff0ctask_1 \u4e2d\u7684 time.sleep() \u5728 gevent \u7ba1\u7406\u7684\u534f\u7a0b\u4e2d\u662f\u4e0d\u8d77\u4f5c\u7528\u7684\uff0c\u9700\u8981\u4f7f\u7528 gevent.sleep() \u624d\u884c\u3002 \u8fd9\u5c31\u5e26\u6765\u4e00\u4e2a\u95ee\u9898\uff1a\u5982\u679c\u6211\u7684\u4ee3\u7801\u662f\u5f00\u53d1\u5b8c\u4e86\u624d\u52a0\u5165\u4e86 gevent \uff0c\u90a3\u5c82\u4e0d\u662f\u8981\u628a\u5f88\u591a\u5730\u65b9\u624b\u52a8\u6539\u5230 gevent \u80fd\u63a5\u53d7\u3002\u8fd8\u597d gevent \u63d0\u4f9b\u4e86\u4e00\u4e2a\u8865\u4e01 gevent \u8865\u4e01 \u00b6 from gevent import monkey monkey.patch_all() \u4e00\u5b9a\u8981\u5199\u5728\u6700\u4e0a\u65b9 import time import gevent from gevent import monkey monkey . patch_all () # \u6253\u8865\u4e01 def task_1 ( n ): for i in range ( n ): print ( gevent . getcurrent (), i ) time . sleep ( 0.1 ) def task_2 ( n ): for i in range ( n ): print ( gevent . getcurrent (), i ) time . sleep ( 0.1 ) def task_3 ( n ): for i in range ( n ): print ( gevent . getcurrent (), i ) time . sleep ( 0.1 ) def main (): g1 = gevent . spawn ( task_1 , 5 ) g2 = gevent . spawn ( task_2 , 5 ) g3 = gevent . spawn ( task_3 , 5 ) g1 . join () g2 . join () g3 . join () if __name__ == '__main__' : main () -------------------------------------------------- # Output: < Greenlet at 0x1433a62b370 : task_1 ( 5 ) > 0 < Greenlet at 0x1433a62b590 : task_2 ( 5 ) > 0 < Greenlet at 0x1433a62b480 : task_3 ( 5 ) > 0 < Greenlet at 0x1433a62b370 : task_1 ( 5 ) > 1 < Greenlet at 0x1433a62b590 : task_2 ( 5 ) > 1 < Greenlet at 0x1433a62b480 : task_3 ( 5 ) > 1 < Greenlet at 0x1433a62b370 : task_1 ( 5 ) > 2 < Greenlet at 0x1433a62b590 : task_2 ( 5 ) > 2 < Greenlet at 0x1433a62b480 : task_3 ( 5 ) > 2 < Greenlet at 0x1433a62b370 : task_1 ( 5 ) > 3 < Greenlet at 0x1433a62b590 : task_2 ( 5 ) > 3 < Greenlet at 0x1433a62b480 : task_3 ( 5 ) > 3 < Greenlet at 0x1433a62b370 : task_1 ( 5 ) > 4 < Greenlet at 0x1433a62b590 : task_2 ( 5 ) > 4 < Greenlet at 0x1433a62b480 : task_3 ( 5 ) > 4 joinall \u00b6 \u6709\u6ca1\u6709\u53d1\u73b0 g1.join() g2.join() g3.join() \u5199\u4e86\u4e09\u4e2ajoin \u4e0d\u5982\u7ed9\u4ed6\u6765\u4e2a\u4e00\u6b21\u6027 gevent.joinall(spawn_list, timeout=None, raise_error=False, count=None) import time import gevent from gevent import monkey monkey . patch_all () def task_1 ( n ): for i in range ( n ): print ( gevent . getcurrent (), i ) time . sleep ( 0.1 ) def task_2 ( n ): for i in range ( n ): print ( gevent . getcurrent (), i ) time . sleep ( 0.1 ) def task_3 ( n ): for i in range ( n ): print ( gevent . getcurrent (), i ) time . sleep ( 0.1 ) def main (): # joinall \u63a5\u53d7\u4e00\u4e2a spawn \u5217\u8868 gevent . joinall ([ gevent . spawn ( task_1 , 5 ), gevent . spawn ( task_2 , 5 ), gevent . spawn ( task_3 , 5 ) ] \uff0c timeout = 5 ) if __name__ == '__main__' : main () -------------------------------------------------- # Output: < Greenlet at 0x12e8cba9d00 : task_1 ( 5 ) > 0 < Greenlet at 0x12e8cba9e10 : task_2 ( 5 ) > 0 < Greenlet at 0x12e8cba9bf0 : task_3 ( 5 ) > 0 < Greenlet at 0x12e8cba9d00 : task_1 ( 5 ) > 1 < Greenlet at 0x12e8cba9e10 : task_2 ( 5 ) > 1 < Greenlet at 0x12e8cba9bf0 : task_3 ( 5 ) > 1 < Greenlet at 0x12e8cba9d00 : task_1 ( 5 ) > 2 < Greenlet at 0x12e8cba9e10 : task_2 ( 5 ) > 2 < Greenlet at 0x12e8cba9bf0 : task_3 ( 5 ) > 2 < Greenlet at 0x12e8cba9d00 : task_1 ( 5 ) > 3 < Greenlet at 0x12e8cba9e10 : task_2 ( 5 ) > 3 < Greenlet at 0x12e8cba9bf0 : task_3 ( 5 ) > 3 < Greenlet at 0x12e8cba9d00 : task_1 ( 5 ) > 4 < Greenlet at 0x12e8cba9e10 : task_2 ( 5 ) > 4 < Greenlet at 0x12e8cba9bf0 : task_3 ( 5 ) > 4 \u53ea\u7ba1\u5728 joinall \u91cc\u521b\u5efa spawn \u5bf9\u8c61\u5c31\u884c\uff0c\u5176\u4ed6\u4e0d\u7528\u7ba1\uff0cgevent \u81ea\u5df1\u4f1a\u5904\u7406\u597d\u7684 \u8fd9\u4e5f\u662f\u6700\u5e38\u7528\u7684\u65b9\u6cd5","title":"\u534f\u7a0b"},{"location":"Python/Adavanced/Thread/Python-No-18-Coroutine/#yield","text":"import time def task_1 (): while True : print ( \" {:-^16s} \" . format ( \"task_1\" )) time . sleep ( 0.1 ) yield def task_2 (): while True : print ( \" {:-^16s} \" . format ( \"task_2\" )) time . sleep ( 0.1 ) yield def main (): t1 = task_1 () t2 = task_2 () # \u5148\u8ba9t1\u8fd0\u884c\u4e00\u4f1a\u513f\uff0c\u5f53t1\u4e2d\u9047\u5230yield\u7684\u65f6\u5019\uff0c\u518d\u8fd4\u56de\u5230main()\u7684while\u5faa\u73af # \u7136\u540e\u6267\u884ct2\uff0c\u5f53\u5b83\u9047\u5230yield\u7684\u65f6\u5019\uff0c\u518d\u6b21\u5207\u6362\u5230t1\u4e2d # \u5c31\u8fd9\u6837t1/t2/t1/t2...\u4ea4\u66ff\u8fd0\u884c\uff0c\u6700\u7ec8\u5b9e\u73b0\u4e86\u591a\u4efb\u52a1...\u534f\u7a0b while True : next ( t1 ) next ( t2 ) if __name__ == '__main__' : main () -------------------------------------------------- # Output: ----- task_1 ----- ----- task_2 ----- ----- task_1 ----- ----- task_2 ----- ----- task_1 ----- ----- task_2 ----- ----- task_1 ----- ----- task_2 ----- ----- task_1 ----- ----- task_2 ----- ...","title":"\u4f7f\u7528 yield \u5b9e\u73b0\u5e76\u53d1"},{"location":"Python/Adavanced/Thread/Python-No-18-Coroutine/#greenlet","text":">_: pip install greenlet from greenlet import greenlet import time def task_1 (): while True : print ( \" {:-^16s} \" . format ( \"task_1\" )) gr2 . switch () # \u5207\u6362\u5230 gr2\u4e2d\uff0c\u4e5f\u5c31\u662f task_2() \u4e2d\u8fd0\u884c time . sleep ( 0.5 ) def task_2 (): while True : print ( \" {:-^16s} \" . format ( \"task_2\" )) gr1 . switch () # \u5207\u6362\u5230 gr1\u4e2d\uff0c\u4e5f\u5c31\u662f task_1() \u4e2d\u8fd0\u884c time . sleep ( 0.5 ) gr1 = greenlet ( task_1 ) gr2 = greenlet ( task_2 ) # \u5207\u6362\u5230 gr1\u4e2d\uff0c\u4e5f\u5c31\u662f task_1() \u4e2d\u8fd0\u884c gr1 . switch -------------------------------------------------- # Output: ----- task_1 ----- ----- task_2 ----- ----- task_1 ----- ----- task_2 ----- ----- task_1 ----- ----- task_2 ----- ----- task_1 ----- ----- task_2 ----- ----- task_1 ----- ----- task_2 ----- ...","title":"\u4f7f\u7528 greenlet \u5b9e\u73b0\u5e76\u53d1"},{"location":"Python/Adavanced/Thread/Python-No-18-Coroutine/#gevent","text":"import gevent gevent.spawn(funcName, args) \u5148\u770b\u770b\u6ca1\u6709\u963b\u585e\u64cd\u4f5c\u7684\u65f6\u5019\uff1a # \u6ca1\u6709\u963b\u585e import gevent def task_1 ( n ): for i in range ( n ): print ( gevent . getcurrent (), i ) def task_2 ( n ): for i in range ( n ): print ( gevent . getcurrent (), i ) def task_3 ( n ): for i in range ( n ): print ( gevent . getcurrent (), i ) def main (): g1 = gevent . spawn ( task_1 , 5 ) g2 = gevent . spawn ( task_2 , 5 ) g3 = gevent . spawn ( task_3 , 5 ) g1 . join () g2 . join () g3 . join () if __name__ == '__main__' : main () -------------------------------------------------- # Output: < Greenlet at 0x1f6eaf0cd00 : task_1 ( 5 ) > 0 < Greenlet at 0x1f6eaf0cd00 : task_1 ( 5 ) > 1 < Greenlet at 0x1f6eaf0cd00 : task_1 ( 5 ) > 2 < Greenlet at 0x1f6eaf0cd00 : task_1 ( 5 ) > 3 < Greenlet at 0x1f6eaf0cd00 : task_1 ( 5 ) > 4 < Greenlet at 0x1f6eaf0ce10 : task_2 ( 5 ) > 0 < Greenlet at 0x1f6eaf0ce10 : task_2 ( 5 ) > 1 < Greenlet at 0x1f6eaf0ce10 : task_2 ( 5 ) > 2 < Greenlet at 0x1f6eaf0ce10 : task_2 ( 5 ) > 3 < Greenlet at 0x1f6eaf0ce10 : task_2 ( 5 ) > 4 < Greenlet at 0x1f6eaf0cbf0 : task_3 ( 5 ) > 0 < Greenlet at 0x1f6eaf0cbf0 : task_3 ( 5 ) > 1 < Greenlet at 0x1f6eaf0cbf0 : task_3 ( 5 ) > 2 < Greenlet at 0x1f6eaf0cbf0 : task_3 ( 5 ) > 3 < Greenlet at 0x1f6eaf0cbf0 : task_3 ( 5 ) > 4 gevent \u662f\u5229\u7528\u534f\u7a0b\u963b\u585e\u7684\u65f6\u5019\u53bb\u6267\u884c\u522b\u7684\u534f\u7a0b \u8fd9\u91cc\u6ca1\u6709\u963b\u585e\u64cd\u4f5c\uff0c\u6240\u4ee5\u5e76\u4e0d\u4f1a\u53d1\u751f\u4ec0\u4e48\u53d8\u5316\uff0c\u8ddf\u666e\u901a\u51fd\u6570\u8c03\u7528\u4e00\u6837\uff0c\u66f4\u63d0\u4e0d\u4e0a\u5e76\u53d1 \u73b0\u5728\u6765\u52a0\u70b9\u963b\u585e\u64cd\u4f5c\u770b\u770b # \u6709\u963b\u585e import gevent def task_1 ( n ): for i in range ( n ): print ( gevent . getcurrent (), i ) # time.sleep(0.1) # \u5728gevent\u4e2d\uff0ctime.sleep()\u8fd9\u79cd\u963b\u585e\u64cd\u4f5c\u662f\u4e0d\u8d77\u4f5c\u7528\u7684 gevent . sleep ( 0.1 ) def task_2 ( n ): for i in range ( n ): print ( gevent . getcurrent (), i ) gevent . sleep ( 0.1 ) def task_3 ( n ): for i in range ( n ): print ( gevent . getcurrent (), i ) gevent . sleep ( 0.1 ) def main (): g1 = gevent . spawn ( task_1 , 5 ) g2 = gevent . spawn ( task_2 , 5 ) g3 = gevent . spawn ( task_3 , 5 ) g1 . join () g2 . join () g3 . join () if __name__ == '__main__' : main () -------------------------------------------------- # Output: < Greenlet at 0x1433a62b370 : task_1 ( 5 ) > 0 < Greenlet at 0x1433a62b590 : task_2 ( 5 ) > 0 < Greenlet at 0x1433a62b480 : task_3 ( 5 ) > 0 < Greenlet at 0x1433a62b370 : task_1 ( 5 ) > 1 < Greenlet at 0x1433a62b590 : task_2 ( 5 ) > 1 < Greenlet at 0x1433a62b480 : task_3 ( 5 ) > 1 < Greenlet at 0x1433a62b370 : task_1 ( 5 ) > 2 < Greenlet at 0x1433a62b590 : task_2 ( 5 ) > 2 < Greenlet at 0x1433a62b480 : task_3 ( 5 ) > 2 < Greenlet at 0x1433a62b370 : task_1 ( 5 ) > 3 < Greenlet at 0x1433a62b590 : task_2 ( 5 ) > 3 < Greenlet at 0x1433a62b480 : task_3 ( 5 ) > 3 < Greenlet at 0x1433a62b370 : task_1 ( 5 ) > 4 < Greenlet at 0x1433a62b590 : task_2 ( 5 ) > 4 < Greenlet at 0x1433a62b480 : task_3 ( 5 ) > 4 \u4e0a\u8ff0\u4ee3\u7801 \u5efa\u7acb\u4e86\u4e09\u4e2a gevent \u5bf9\u8c61\uff0c\u91cc\u9762\u5206\u522b\u8f6c\u8f7d\u4e86 task_1\u3001task_2\u3001task_3 \u4e09\u4e2a\u6267\u884c\u51fd\u6570\u3002 \u63a5\u7740\u4e09\u4e2a gevent \u5bf9\u8c61\u90fd\u4f7f\u7528 join \u65b9\u6cd5\u8fd0\u884c\u4e86\u6267\u884c\u51fd\u6570 \u5728\u4e09\u4e2a\u6267\u884c\u51fd\u6570\u4e2d\u53c8\u7528\u4e86 gevent.sleep() \u6a21\u62df\u963b\u585e\u64cd\u4f5c\uff08\u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\u5e76\u4e0d\u4f1a\u4e13\u95e8\u7528sleep\u53bb\u963b\u585e\uff0c\u800c\u662f\u5728\u6267\u884c\u5230 IO \u7b49\u8017\u65f6\u64cd\u4f5c\u65f6\uff0cgevent\u81ea\u52a8\u5207\u6362\u3002\uff09 \u5728\u6267\u884c task_1 \u7684\u65f6\u5019\uff0c\u6253\u5370\u4e86\u7b2c\u4e00\u53e5\uff0c\u7136\u540e\u9047\u5230\u4e86 gevent.sleep() \u7684\u963b\u585e\u64cd\u4f5c\uff0c\u5207\u6362\u5230 task_2 \uff0c\u6253\u5370\u4e86\u7b2c\u4e8c\u5c40\uff0c\u53c8\u9047\u5230\u963b\u585e\uff0c\u53c8\u5207\u6362...\u4e00\u76f4\u5230\u5168\u90e8\u6267\u884c\u5b8c\u6bd5 \u53e6\u5916\uff0ctask_1 \u4e2d\u7684 time.sleep() \u5728 gevent \u7ba1\u7406\u7684\u534f\u7a0b\u4e2d\u662f\u4e0d\u8d77\u4f5c\u7528\u7684\uff0c\u9700\u8981\u4f7f\u7528 gevent.sleep() \u624d\u884c\u3002 \u8fd9\u5c31\u5e26\u6765\u4e00\u4e2a\u95ee\u9898\uff1a\u5982\u679c\u6211\u7684\u4ee3\u7801\u662f\u5f00\u53d1\u5b8c\u4e86\u624d\u52a0\u5165\u4e86 gevent \uff0c\u90a3\u5c82\u4e0d\u662f\u8981\u628a\u5f88\u591a\u5730\u65b9\u624b\u52a8\u6539\u5230 gevent \u80fd\u63a5\u53d7\u3002\u8fd8\u597d gevent \u63d0\u4f9b\u4e86\u4e00\u4e2a\u8865\u4e01","title":"\u4f7f\u7528 gevent \u5b9e\u73b0\u5e76\u53d1"},{"location":"Python/Adavanced/Thread/Python-No-18-Coroutine/#gevent_1","text":"from gevent import monkey monkey.patch_all() \u4e00\u5b9a\u8981\u5199\u5728\u6700\u4e0a\u65b9 import time import gevent from gevent import monkey monkey . patch_all () # \u6253\u8865\u4e01 def task_1 ( n ): for i in range ( n ): print ( gevent . getcurrent (), i ) time . sleep ( 0.1 ) def task_2 ( n ): for i in range ( n ): print ( gevent . getcurrent (), i ) time . sleep ( 0.1 ) def task_3 ( n ): for i in range ( n ): print ( gevent . getcurrent (), i ) time . sleep ( 0.1 ) def main (): g1 = gevent . spawn ( task_1 , 5 ) g2 = gevent . spawn ( task_2 , 5 ) g3 = gevent . spawn ( task_3 , 5 ) g1 . join () g2 . join () g3 . join () if __name__ == '__main__' : main () -------------------------------------------------- # Output: < Greenlet at 0x1433a62b370 : task_1 ( 5 ) > 0 < Greenlet at 0x1433a62b590 : task_2 ( 5 ) > 0 < Greenlet at 0x1433a62b480 : task_3 ( 5 ) > 0 < Greenlet at 0x1433a62b370 : task_1 ( 5 ) > 1 < Greenlet at 0x1433a62b590 : task_2 ( 5 ) > 1 < Greenlet at 0x1433a62b480 : task_3 ( 5 ) > 1 < Greenlet at 0x1433a62b370 : task_1 ( 5 ) > 2 < Greenlet at 0x1433a62b590 : task_2 ( 5 ) > 2 < Greenlet at 0x1433a62b480 : task_3 ( 5 ) > 2 < Greenlet at 0x1433a62b370 : task_1 ( 5 ) > 3 < Greenlet at 0x1433a62b590 : task_2 ( 5 ) > 3 < Greenlet at 0x1433a62b480 : task_3 ( 5 ) > 3 < Greenlet at 0x1433a62b370 : task_1 ( 5 ) > 4 < Greenlet at 0x1433a62b590 : task_2 ( 5 ) > 4 < Greenlet at 0x1433a62b480 : task_3 ( 5 ) > 4","title":"gevent \u8865\u4e01"},{"location":"Python/Adavanced/Thread/Python-No-18-Coroutine/#joinall","text":"\u6709\u6ca1\u6709\u53d1\u73b0 g1.join() g2.join() g3.join() \u5199\u4e86\u4e09\u4e2ajoin \u4e0d\u5982\u7ed9\u4ed6\u6765\u4e2a\u4e00\u6b21\u6027 gevent.joinall(spawn_list, timeout=None, raise_error=False, count=None) import time import gevent from gevent import monkey monkey . patch_all () def task_1 ( n ): for i in range ( n ): print ( gevent . getcurrent (), i ) time . sleep ( 0.1 ) def task_2 ( n ): for i in range ( n ): print ( gevent . getcurrent (), i ) time . sleep ( 0.1 ) def task_3 ( n ): for i in range ( n ): print ( gevent . getcurrent (), i ) time . sleep ( 0.1 ) def main (): # joinall \u63a5\u53d7\u4e00\u4e2a spawn \u5217\u8868 gevent . joinall ([ gevent . spawn ( task_1 , 5 ), gevent . spawn ( task_2 , 5 ), gevent . spawn ( task_3 , 5 ) ] \uff0c timeout = 5 ) if __name__ == '__main__' : main () -------------------------------------------------- # Output: < Greenlet at 0x12e8cba9d00 : task_1 ( 5 ) > 0 < Greenlet at 0x12e8cba9e10 : task_2 ( 5 ) > 0 < Greenlet at 0x12e8cba9bf0 : task_3 ( 5 ) > 0 < Greenlet at 0x12e8cba9d00 : task_1 ( 5 ) > 1 < Greenlet at 0x12e8cba9e10 : task_2 ( 5 ) > 1 < Greenlet at 0x12e8cba9bf0 : task_3 ( 5 ) > 1 < Greenlet at 0x12e8cba9d00 : task_1 ( 5 ) > 2 < Greenlet at 0x12e8cba9e10 : task_2 ( 5 ) > 2 < Greenlet at 0x12e8cba9bf0 : task_3 ( 5 ) > 2 < Greenlet at 0x12e8cba9d00 : task_1 ( 5 ) > 3 < Greenlet at 0x12e8cba9e10 : task_2 ( 5 ) > 3 < Greenlet at 0x12e8cba9bf0 : task_3 ( 5 ) > 3 < Greenlet at 0x12e8cba9d00 : task_1 ( 5 ) > 4 < Greenlet at 0x12e8cba9e10 : task_2 ( 5 ) > 4 < Greenlet at 0x12e8cba9bf0 : task_3 ( 5 ) > 4 \u53ea\u7ba1\u5728 joinall \u91cc\u521b\u5efa spawn \u5bf9\u8c61\u5c31\u884c\uff0c\u5176\u4ed6\u4e0d\u7528\u7ba1\uff0cgevent \u81ea\u5df1\u4f1a\u5904\u7406\u597d\u7684 \u8fd9\u4e5f\u662f\u6700\u5e38\u7528\u7684\u65b9\u6cd5","title":"joinall"},{"location":"Python/Basic/Python-No-1-Abstract/","text":"\u5173\u4e8ePython \u8bed\u8a00\u54f2\u5b66\uff1a \u7b80\u6d01 \u7c7b\u578b\uff1a\u89e3\u91ca\u578b\u8bed\u8a00\u3001\u52a8\u6001\u8bed\u8a00\u3001\u9762\u5411\u5bf9\u8c61\uff08\u4e00\u5207\u7686\u5bf9\u8c61\uff09 \u7f3a\u70b9\uff1a \u901f\u5ea6\u6162 \u4ee3\u7801\u4e0d\u80fd\u52a0\u5bc6 \u8bed\u8a00\u601d\u60f3\uff1a \u4e00\u5207\u7686\u5bf9\u8c61 \u51fd\u6570\u662f\u4e00\u7b49\u516c\u6c11 \u89e3\u91ca\u5668 \u00b6 CPython \u00b6 \u9ed8\u8ba4\u89e3\u91ca\u5668\u3002 PyPy \u00b6 \u76ee\u6807\u662f\u6267\u884c\u901f\u5ea6\uff0c\u91c7\u7528JIT\u6280\u672f\uff0c\u5bf9python\u4ee3\u7801\u8fdb\u884c\u52a8\u7f16\u8bd1\u3002 \u4f46\u662f\u4e0eCPython\u4e0d\u540c\u3002 PyPy VS CPython Jython \u00b6 Jython\u662f\u8fd0\u884c\u5728Java\u5e73\u53f0\u4e0a\u7684Python\u89e3\u91ca\u5668\uff0c\u53ef\u4ee5\u76f4\u63a5\u628aPython\u4ee3\u7801\u7f16\u8bd1\u6210Java\u5b57\u8282\u7801\u6267\u884c\u3002 IronPython \u00b6 IronPython\u548cJython\u7c7b\u4f3c\uff0c\u53ea\u4e0d\u8fc7IronPython\u662f\u8fd0\u884c\u5728\u5fae\u8f6f.Net\u5e73\u53f0\u4e0a\u7684Python\u89e3\u91ca\u5668\uff0c\u53ef\u4ee5\u76f4\u63a5\u628aPython\u4ee3\u7801\u7f16\u8bd1\u6210.Net\u7684\u5b57\u8282\u7801\u3002 \u547d\u4ee4\u884c\u6a21\u5f0f & \u4ea4\u4e92\u6a21\u5f0f \u00b6 \u547d\u4ee4\u884c\u6a21\u5f0f \u00b6 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502Command Prompt - \u25a1 x \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502Microsoft Windows [Version 10.0.0] \u2502 \u2502\u00a9 2015 Microsoft Corporation. All rights reserved. \u2502 \u2502 \u2502 \u2502C:> _ \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u53ef\u4ee5\u5207\u6362\u5230\u6587\u4ef6\u6240\u5728\u76ee\u5f55\u4e0b\uff0c\u7136\u540e\u8f93\u5165 python \u6587\u4ef6\u540d.py \u6765\u6267\u884cpython\u6587\u4ef6 Python\u4ea4\u4e92\u6a21\u5f0f \u00b6 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502Command Prompt - python - \u25a1 x \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502Microsoft Windows [Version 10.0.0] \u2502 \u2502\u00a9 2015 Microsoft Corporation. All rights reserved. \u2502 \u2502 \u2502 \u2502C:> python \u2502 \u2502Python 3.7 ... on win32 \u2502 \u2502Type \"help\", ... for more information. \u2502 \u2502>>> 100 + 200 \u2502 \u2502300 \u2502 \u2502>>> _ \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u8f93\u5165 python \u8fdb\u5165\u4ea4\u4e92\u6a21\u5f0f\uff0c \u8f93\u5165 exit() \u6216 quit() \u9000\u51fa\u4ea4\u4e92\u6a21\u5f0f \u6587\u4ef6\u540d \u00b6 \u6269\u5c55\u540d\uff1a.py \u6587\u4ef6\u540d\uff1a\u82f1\u6587\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u4e0b\u5212\u7ebf \u76f4\u63a5\u8fd0\u884c.py\u6587\u4ef6 \u00b6 Win Linux Mac \u524d\u63d0\uff1a 1) \u5728hello.py\u6587\u4ef6\u7684\u7b2c\u4e00\u884c\u52a0\u4e0a\u4e00\u4e2a\u7279\u6b8a\u7684\u6ce8\u91ca #!/usr/bin/env python3 \uff0c \u5982 #!/usr/bin/env python3 print ( \"Hello World!\" ) 2) \u901a\u8fc7\u547d\u4ee4\u7ed9hello.py\u6587\u4ef6\u6267\u884c\u6743\u9650 $ chmod a+x hello.py \u4e2d\u6587\u7f16\u7801 \u00b6 Python2 \u9ed8\u8ba4\u7f16\u7801\u683c\u5f0f\u662f\uff1aASCII\uff0c\u4f7f\u7528\u4e2d\u6587\u4f1a\u51fa\u9519 \u89e3\u51b3\u65b9\u6cd5\uff1a\u5728\u6587\u4ef6\u5f00\u5934\u52a0\u5165 # -*- coding: UTF-8 -*- \u6216 # coding=utf-8 #!/usr/bin/python # -*- coding: UTF-8 -*- print ( \"\u653e\u7801\u8fc7\u6765\" ) Python3 \u9ed8\u8ba4\u7f16\u7801\u683c\u5f0f\u662f\uff1aUTF-8\uff0c\u6240\u4ee5\u65e0\u9700\u6307\u5b9a\u7f16\u7801\u683c\u5f0f \u6ce8\u610f\uff1apy\u6587\u4ef6\u9700\u8981\u5b58\u50a8\u683c\u5f0f\u4e3a UTF-8 #!/usr/bin/env python3 print ( \"\u653e\u7801\u8fc7\u6765\" ) \u4f46\u6700\u597d\u8fd8\u662f\u52a0\u4e0a #!/usr/bin/env python3 # -*- coding: UTF-8 -*- print ( \"\u653e\u7801\u8fc7\u6765\" ) python\u7684\u4e00\u5207\u7686\u5bf9\u8c61 \u00b6 # \u793a\u4f8b\u5982\u4e0b a = 2019 b = \"\u4e00\u5207\u7686\u5bf9\u8c61\" print ( type ( 2019 )) print ( type ( int )) print ( type ( b )) print ( type ( str )) class Student : pass stu = Student () print ( type ( stu )) print ( type ( Student )) print ( int . __bases__ ) print ( str . __bases__ ) print ( Student . __bases__ ) print ( type . __bases__ ) print ( object . __bases__ ) print ( type ( object )) print ( type ( type )) \u8fd0\u884c\u7ed3\u679c\uff1a < class ' int '> # 2019\u662f\u7531int\u8fd9\u4e2a\u7c7b\u521b\u5efa\u7684\u5b9e\u4f8b < class ' type '> # int\u8fd9\u4e2a\u7c7b\u662f\u7531type\u8fd9\u4e2a\u7c7b\u521b\u5efa\u7684\u5b9e\u4f8b < class ' str '> # \u540c\u4e0a < class ' type '> < class ' __main__ . Student '> # stu\u662f\u7c7bStudent\u521b\u5efa\u7684\u5b9e\u4f8b < class ' type '> # \u7c7bStudent\u662f\u7531type\u8fd9\u4e2a\u7c7b\u521b\u5efa\u7684\u5b9e\u4f8b ( < class ' object '>,) # \u7c7bint\u7684\u57fa\u7c7b\u662fobject\u8fd9\u4e2a\u7c7b ( < class ' object '>,) # \u540c\u4e0a ( < class ' object '>,) # \u540c\u4e0a ( < class ' object '>,) # \u91cd\u70b9\uff1a\u7c7btype\u7684\u57fa\u7c7b\u4e5f\u662fobject\u8fd9\u4e2a\u57fa\u7c7b () # \u91cd\u70b9\uff1a\u7c7bobject\u6ca1\u6709\u57fa\u7c7b < class ' type '> # \u96be\u70b9\uff1a\u7c7bobject\u662f\u7531\u7c7btype\u521b\u5efa\u7684\u5b9e\u4f8b < class ' type '> # \u96be\u70b9\uff1a\u7c7btype\u662f\u7531type\u7c7b\u81ea\u8eab\u521b\u5efa\u7684\u5b9e\u4f8b \u5bf9\u4e8e\u4e0a\u9762\u56fe\u7247\u7684\u89e3\u8bfb\u5982\u4e0b\uff1a object\u662f\u4e00\u5207\u5bf9\u8c61\uff1alist\u3001str\u3001dict\u3001tuple\u7684\u57fa\u7c7b\uff0c\u540c\u65f6object\u662ftype\u7684\u5b9e\u4f8b \u7c7btype\u662f\u81ea\u8eab\u7684\u5b9e\u4f8b\uff0c\u540c\u65f6type\u4e5f\u7ee7\u627f\u81eaobject\u7c7b \u7531\u7ed3\u8bba1\u548c\u7ed3\u8bba2\uff0c\u5f97\u51fa\u4e00\u5207\u7686\u5bf9\u8c61\uff0c\u540c\u65f6\u4e00\u5207\u7686\u7ee7\u627f\u81eaobject\u7c7b \u7c7bobject \u662f\u4e00\u5207\u5bf9\u8c61\u7684\u57fa\u7c7b \u7c7bobject \u662f \u7c7btype \u7684\u5b9e\u4f8b \u7c7btype \u7ee7\u627f\u81ea \u7c7bobject \u7c7btype \u662f \u7c7btype \u7684\u5b9e\u4f8b \u4e00\u5207\u7686\u5bf9\u8c61\uff0c\u4e00\u5207\u7686\u7ee7\u627f\u81eaobject\u7c7b","title":"\u603b\u53d9"},{"location":"Python/Basic/Python-No-1-Abstract/#_1","text":"","title":"\u89e3\u91ca\u5668"},{"location":"Python/Basic/Python-No-1-Abstract/#cpython","text":"\u9ed8\u8ba4\u89e3\u91ca\u5668\u3002","title":"CPython"},{"location":"Python/Basic/Python-No-1-Abstract/#pypy","text":"\u76ee\u6807\u662f\u6267\u884c\u901f\u5ea6\uff0c\u91c7\u7528JIT\u6280\u672f\uff0c\u5bf9python\u4ee3\u7801\u8fdb\u884c\u52a8\u7f16\u8bd1\u3002 \u4f46\u662f\u4e0eCPython\u4e0d\u540c\u3002 PyPy VS CPython","title":"PyPy"},{"location":"Python/Basic/Python-No-1-Abstract/#jython","text":"Jython\u662f\u8fd0\u884c\u5728Java\u5e73\u53f0\u4e0a\u7684Python\u89e3\u91ca\u5668\uff0c\u53ef\u4ee5\u76f4\u63a5\u628aPython\u4ee3\u7801\u7f16\u8bd1\u6210Java\u5b57\u8282\u7801\u6267\u884c\u3002","title":"Jython"},{"location":"Python/Basic/Python-No-1-Abstract/#ironpython","text":"IronPython\u548cJython\u7c7b\u4f3c\uff0c\u53ea\u4e0d\u8fc7IronPython\u662f\u8fd0\u884c\u5728\u5fae\u8f6f.Net\u5e73\u53f0\u4e0a\u7684Python\u89e3\u91ca\u5668\uff0c\u53ef\u4ee5\u76f4\u63a5\u628aPython\u4ee3\u7801\u7f16\u8bd1\u6210.Net\u7684\u5b57\u8282\u7801\u3002","title":"IronPython"},{"location":"Python/Basic/Python-No-1-Abstract/#_2","text":"","title":"\u547d\u4ee4\u884c\u6a21\u5f0f &amp; \u4ea4\u4e92\u6a21\u5f0f"},{"location":"Python/Basic/Python-No-1-Abstract/#_3","text":"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502Command Prompt - \u25a1 x \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502Microsoft Windows [Version 10.0.0] \u2502 \u2502\u00a9 2015 Microsoft Corporation. All rights reserved. \u2502 \u2502 \u2502 \u2502C:> _ \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u53ef\u4ee5\u5207\u6362\u5230\u6587\u4ef6\u6240\u5728\u76ee\u5f55\u4e0b\uff0c\u7136\u540e\u8f93\u5165 python \u6587\u4ef6\u540d.py \u6765\u6267\u884cpython\u6587\u4ef6","title":"\u547d\u4ee4\u884c\u6a21\u5f0f"},{"location":"Python/Basic/Python-No-1-Abstract/#python","text":"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502Command Prompt - python - \u25a1 x \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502Microsoft Windows [Version 10.0.0] \u2502 \u2502\u00a9 2015 Microsoft Corporation. All rights reserved. \u2502 \u2502 \u2502 \u2502C:> python \u2502 \u2502Python 3.7 ... on win32 \u2502 \u2502Type \"help\", ... for more information. \u2502 \u2502>>> 100 + 200 \u2502 \u2502300 \u2502 \u2502>>> _ \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u8f93\u5165 python \u8fdb\u5165\u4ea4\u4e92\u6a21\u5f0f\uff0c \u8f93\u5165 exit() \u6216 quit() \u9000\u51fa\u4ea4\u4e92\u6a21\u5f0f","title":"Python\u4ea4\u4e92\u6a21\u5f0f"},{"location":"Python/Basic/Python-No-1-Abstract/#_4","text":"\u6269\u5c55\u540d\uff1a.py \u6587\u4ef6\u540d\uff1a\u82f1\u6587\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u4e0b\u5212\u7ebf","title":"\u6587\u4ef6\u540d"},{"location":"Python/Basic/Python-No-1-Abstract/#py","text":"Win Linux Mac \u524d\u63d0\uff1a 1) \u5728hello.py\u6587\u4ef6\u7684\u7b2c\u4e00\u884c\u52a0\u4e0a\u4e00\u4e2a\u7279\u6b8a\u7684\u6ce8\u91ca #!/usr/bin/env python3 \uff0c \u5982 #!/usr/bin/env python3 print ( \"Hello World!\" ) 2) \u901a\u8fc7\u547d\u4ee4\u7ed9hello.py\u6587\u4ef6\u6267\u884c\u6743\u9650 $ chmod a+x hello.py","title":"\u76f4\u63a5\u8fd0\u884c.py\u6587\u4ef6"},{"location":"Python/Basic/Python-No-1-Abstract/#_5","text":"Python2 \u9ed8\u8ba4\u7f16\u7801\u683c\u5f0f\u662f\uff1aASCII\uff0c\u4f7f\u7528\u4e2d\u6587\u4f1a\u51fa\u9519 \u89e3\u51b3\u65b9\u6cd5\uff1a\u5728\u6587\u4ef6\u5f00\u5934\u52a0\u5165 # -*- coding: UTF-8 -*- \u6216 # coding=utf-8 #!/usr/bin/python # -*- coding: UTF-8 -*- print ( \"\u653e\u7801\u8fc7\u6765\" ) Python3 \u9ed8\u8ba4\u7f16\u7801\u683c\u5f0f\u662f\uff1aUTF-8\uff0c\u6240\u4ee5\u65e0\u9700\u6307\u5b9a\u7f16\u7801\u683c\u5f0f \u6ce8\u610f\uff1apy\u6587\u4ef6\u9700\u8981\u5b58\u50a8\u683c\u5f0f\u4e3a UTF-8 #!/usr/bin/env python3 print ( \"\u653e\u7801\u8fc7\u6765\" ) \u4f46\u6700\u597d\u8fd8\u662f\u52a0\u4e0a #!/usr/bin/env python3 # -*- coding: UTF-8 -*- print ( \"\u653e\u7801\u8fc7\u6765\" )","title":"\u4e2d\u6587\u7f16\u7801"},{"location":"Python/Basic/Python-No-1-Abstract/#python_1","text":"# \u793a\u4f8b\u5982\u4e0b a = 2019 b = \"\u4e00\u5207\u7686\u5bf9\u8c61\" print ( type ( 2019 )) print ( type ( int )) print ( type ( b )) print ( type ( str )) class Student : pass stu = Student () print ( type ( stu )) print ( type ( Student )) print ( int . __bases__ ) print ( str . __bases__ ) print ( Student . __bases__ ) print ( type . __bases__ ) print ( object . __bases__ ) print ( type ( object )) print ( type ( type )) \u8fd0\u884c\u7ed3\u679c\uff1a < class ' int '> # 2019\u662f\u7531int\u8fd9\u4e2a\u7c7b\u521b\u5efa\u7684\u5b9e\u4f8b < class ' type '> # int\u8fd9\u4e2a\u7c7b\u662f\u7531type\u8fd9\u4e2a\u7c7b\u521b\u5efa\u7684\u5b9e\u4f8b < class ' str '> # \u540c\u4e0a < class ' type '> < class ' __main__ . Student '> # stu\u662f\u7c7bStudent\u521b\u5efa\u7684\u5b9e\u4f8b < class ' type '> # \u7c7bStudent\u662f\u7531type\u8fd9\u4e2a\u7c7b\u521b\u5efa\u7684\u5b9e\u4f8b ( < class ' object '>,) # \u7c7bint\u7684\u57fa\u7c7b\u662fobject\u8fd9\u4e2a\u7c7b ( < class ' object '>,) # \u540c\u4e0a ( < class ' object '>,) # \u540c\u4e0a ( < class ' object '>,) # \u91cd\u70b9\uff1a\u7c7btype\u7684\u57fa\u7c7b\u4e5f\u662fobject\u8fd9\u4e2a\u57fa\u7c7b () # \u91cd\u70b9\uff1a\u7c7bobject\u6ca1\u6709\u57fa\u7c7b < class ' type '> # \u96be\u70b9\uff1a\u7c7bobject\u662f\u7531\u7c7btype\u521b\u5efa\u7684\u5b9e\u4f8b < class ' type '> # \u96be\u70b9\uff1a\u7c7btype\u662f\u7531type\u7c7b\u81ea\u8eab\u521b\u5efa\u7684\u5b9e\u4f8b \u5bf9\u4e8e\u4e0a\u9762\u56fe\u7247\u7684\u89e3\u8bfb\u5982\u4e0b\uff1a object\u662f\u4e00\u5207\u5bf9\u8c61\uff1alist\u3001str\u3001dict\u3001tuple\u7684\u57fa\u7c7b\uff0c\u540c\u65f6object\u662ftype\u7684\u5b9e\u4f8b \u7c7btype\u662f\u81ea\u8eab\u7684\u5b9e\u4f8b\uff0c\u540c\u65f6type\u4e5f\u7ee7\u627f\u81eaobject\u7c7b \u7531\u7ed3\u8bba1\u548c\u7ed3\u8bba2\uff0c\u5f97\u51fa\u4e00\u5207\u7686\u5bf9\u8c61\uff0c\u540c\u65f6\u4e00\u5207\u7686\u7ee7\u627f\u81eaobject\u7c7b \u7c7bobject \u662f\u4e00\u5207\u5bf9\u8c61\u7684\u57fa\u7c7b \u7c7bobject \u662f \u7c7btype \u7684\u5b9e\u4f8b \u7c7btype \u7ee7\u627f\u81ea \u7c7bobject \u7c7btype \u662f \u7c7btype \u7684\u5b9e\u4f8b \u4e00\u5207\u7686\u5bf9\u8c61\uff0c\u4e00\u5207\u7686\u7ee7\u627f\u81eaobject\u7c7b","title":"python\u7684\u4e00\u5207\u7686\u5bf9\u8c61"},{"location":"Python/Basic/Python-No-10-Module/","text":"\u4e00\u4e2apy\u6587\u4ef6\u5c31\u662f\u4e00\u4e2a\u6a21\u5757 \u6a21\u5757 Module \u00b6 \u4e00\u4e2a .py \u6587\u4ef6\u5c31\u79f0\u4e4b\u4e3a\u4e00\u4e2a \u6a21\u5757 module \u597d\u5904\uff1a 1. \u63d0\u9ad8\u4e86\u4ee3\u7801\u7684\u53ef\u7ef4\u62a4\u6027\uff1b 2. \u53ef\u4ee5\u88ab\u5176\u4ed6\u5730\u65b9\u5e94\u7528\uff1b 3. \u53ef\u4ee5\u907f\u514d\u547d\u540d\u51b2\u7a81\u3002 import \u00b6 import\u52a0\u8f7d\u7684\u6a21\u5757\u5206\u4e3a\u56db\u4e2a\u901a\u7528\u7c7b\u522b\uff1a 1. \u4f7f\u7528python\u7f16\u5199\u7684\u4ee3\u7801\uff08 py\u6587\u4ef6 \uff09\uff1b 2. \u5df2\u88ab\u7f16\u8bd1\u4e3a\u5171\u4eab\u5e93\u6216DLL\u7684 C\u6216C++\u6269\u5c55 \uff1b 3. \u5305\u597d\u4e00\u7ec4\u6a21\u5757\u7684 \u5305 4. \u4f7f\u7528C\u7f16\u5199\u5e76\u94fe\u63a5\u5230python\u89e3\u91ca\u5668\u7684 \u5185\u7f6e\u6a21\u5757 . \u5305 Package \u00b6 \u6a21\u5757\u7684\u4e0a\u4e00\u7ea7\u79f0\u4e3a \u5305 package \u5305\u662f\u4e00\u4e2a\u6587\u4ef6\u5939\uff0c\u53ef\u4ee5\u901a\u8fc7\u5305\u6765\u7ec4\u7ec7\u6a21\u5757\uff0c\u907f\u514d\u51b2\u7a81\u3002 \u4e00\u4e2a\u5305\u91cc\u5fc5\u987b\u542b\u6709\u4e00\u4e2a __init__.py __init__.py \u53ef\u4ee5\u662f\u7a7a\u6587\u4ef6\uff0c\u4e5f\u53ef\u4ee5\u6709Python\u4ee3\u7801 __init__.py \u672c\u8eab\u5c31\u7b97\u4e00\u4e2a\u6a21\u5757\uff0c\u5b83\u7684\u6a21\u5757\u540d\u5c31\u662f\u5305\u540d \u5305\u91cc\u9762\u8fd8\u53ef\u4ee5\u6709\u5305 MyPackage \u251c\u2500 web \u2502 \u251c\u2500 __init__ . py \u2502 \u251c\u2500 utils . py \u2502 \u2514\u2500 test . py \u251c\u2500 dirc \u2502 \u251c\u2500 utils . py \u2502 \u2514\u2500 test . py \u2502 \u251c\u2500 __init__ . py \u251c\u2500 main . py \u2514\u2500 utils . py \u9876\u5c42\u5305\u4e3a MyPackage \u5b50\u5305\u4e3a web \u666e\u901a\u76ee\u5f55 dirc \uff08\u56e0\u4e3a\u5b83\u6ca1\u6709 __init__.py \u6587\u4ef6\uff09 test.py \u7684\u6a21\u5757\u540d\u4e3a MyPackage.web.test utils.py \u6709\u4e24\u4e2a\uff0c\u6a21\u5757\u540d\u5206\u522b\u4e3a MyPackage.web.utils \u548c MyPackage.utils \u81ea\u5df1\u521b\u5efa\u6a21\u5757\u65f6\u6ce8\u610f\u547d\u540d\u4e0d\u8981\u4e0e\u7cfb\u7edf\u6a21\u5757\u51b2\u7a81 \u8981\u68c0\u67e5\u7cfb\u7edf\u4e2d\u662f\u5426\u5b58\u5728\u8be5\u6a21\u5757\uff0c\u53ef\u4ee5\u5728\u4ea4\u4e92\u73af\u5883\u4e0b\u6267\u884c import abc \uff0c\u82e5\u6210\u529f\u8bf4\u660e\u7cfb\u7edf\u5b58\u5728\u6b64\u6a21\u5757\u3002 >>> import aabbccc Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > ModuleNotFoundError : No module named 'aabbccc' \u4f7f\u7528\u6a21\u5757 \u00b6 #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"Here is the module documentation\" __author__ = 'Boii' import sys def test (): args = sys . argv if len ( args ) == 1 : print ( 'Hello, world!' ) elif len ( args ) == 2 : print ( 'Hello, %s !' % args [ 1 ]) else : print ( 'Too many arguments!' ) if __name__ == '__main__' : test () \u6807\u51c6\u6a21\u5757\u6587\u4ef6\u6a21\u677f \u00b6 #!/usr/bin/env python3 \u662f\u5411Unix / Linux / Mac \u7cfb\u7edf\u58f0\u660e\u672c\u6587\u4ef6\u662fPython3\u6587\u4ef6 # -*- coding: utf-8 -*- \u8868\u793a\u672c\u6587\u4ef6\u4f7f\u7528\u6807\u51c6utf-8\u7f16\u7801\uff0c\u867d\u7136Python3\u4e4b\u540e\u9ed8\u8ba4\u652f\u6301\u4e2d\u6587\uff0c\u4f46\u4e3a\u4fdd\u7a33\u59a5\u8fd8\u662f\u5199\u4e0a \"Here is the module documentation\" \u662f\u6a21\u5757\u6587\u6863\u6ce8\u91ca\uff0c\u4efb\u4f55\u6a21\u5757\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u90fd\u88ab\u89c6\u4e3a\u6a21\u5757\u7684\u6587\u6863\u6ce8\u91ca\u3002\u53ef\u4ee5\u901a\u8fc7 \u6a21\u5757\u540d.__doc__ \u83b7\u5f97\u3002 __author__ = 'Boii' \u662f\u4f5c\u8005\u3002\u53ef\u4ee5\u901a\u8fc7 \u6a21\u5757\u540d.__author__ \u83b7\u5f97\u3002 \u6807\u51c6\u6a21\u5757\u6587\u4ef6\u6a21\u677f\u4e5f\u53ef\u4ee5\u4e0d\u5199\uff0c\u5e76\u4e0d\u5f71\u54cd\u3002 \u5bfc\u5165\u3001\u53c2\u6570\u5217\u8868\u3001 name \u00b6 import sys \u5f15\u5165\u4e86\u5185\u7f6e\u6a21\u5757 sys args = sys.argv \uff0c\u8fd9\u91cc sys.argv \u662f\u53c2\u6570\u5217\u8868\uff0c\u662f\u4e00\u4e2a list\uff0c\u4fdd\u5b58\u7684\u662f \u901a\u8fc7\u547d\u4ee4\u6267\u884c\u672c\u6587\u4ef6\u7684\u65f6\u5019\u6240\u5e26\u7684\u53c2\u6570 \u3002\u4f46\u8be5 list\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u6c38\u8fdc\u662f\u6587\u4ef6\u540d\u3002 \u4f8b\u5982\u4e0a\u9762\u7684\u6587\u4ef6\u540d\u4e3a Hello.py \uff0c\u5219\u8fd0\u884c\u547d\u4ee4 python Hello.py \u540esys,argv\u4e3a ['Hello.py'] . \u5982\u679c\u6267\u884c\u7684\u547d\u4ee4\u4e3a python Hello.py Boii \uff0c\u5219sys.argv\u4e3a ['Hello.py', 'Boii'] if __name__ == '__main__': test() \u5982\u679c\u8fd9\u4e2a\u6587\u4ef6\u662f\u72ec\u7acb\u8fd0\u884c\u7684\uff0c\u5219 if \u4e3a True\uff0c\u5982\u679c\u8fd9\u4e2a\u6587\u4ef6\u662f\u88ab\u5bfc\u5165\u7684\uff0c\u5219 if \u4e3a False\u3002 $ python Hello.py Hello, world! $ python Hello.py Boii Hello, Boii! \u2191 \u901a\u8fc7\u547d\u4ee4\u72ec\u7acb\u8fd0\u884c\u8fd9\u4e2a\u6587\u4ef6\uff0c\u6240\u4ee5 if \u4e3a True\uff0c\u6267\u884c\u4e86 test() \u51fd\u6570 $ python Python 3 .8.3 >>> >>> import Hello >>> >>> Hello.test () Hello, world! \u2191 \u901a\u8fc7\u5bfc\u5165\u7684\u65b9\u5f0f\u8fd0\u884c\u8fd9\u4e2a\u6587\u4ef6\uff0c\u6240\u4ee5 if \u4e3a False\uff0c\u6ca1\u6709\u6267\u884c test() \u51fd\u6570\uff0c\u7b49\u5230 Hello.test() \u4e3b\u52a8\u8c03\u7528\u65f6\u624d\u6267\u884c\u4e86 test() \u51fd\u6570 \u603b\u7ed3 \u00b6 \u4e00\u4e2a .py \u6587\u4ef6\u5c31\u662f\u4e00\u4e2a\u6a21\u5757 module \u4e00\u4e2a\u5e26\u6709 __init__.py \u7684\u6587\u4ef6\u5939\u5c31\u662f\u4e00\u4e2a\u5305 package","title":"\u6a21\u5757"},{"location":"Python/Basic/Python-No-10-Module/#module","text":"\u4e00\u4e2a .py \u6587\u4ef6\u5c31\u79f0\u4e4b\u4e3a\u4e00\u4e2a \u6a21\u5757 module \u597d\u5904\uff1a 1. \u63d0\u9ad8\u4e86\u4ee3\u7801\u7684\u53ef\u7ef4\u62a4\u6027\uff1b 2. \u53ef\u4ee5\u88ab\u5176\u4ed6\u5730\u65b9\u5e94\u7528\uff1b 3. \u53ef\u4ee5\u907f\u514d\u547d\u540d\u51b2\u7a81\u3002","title":"\u6a21\u5757 Module"},{"location":"Python/Basic/Python-No-10-Module/#import","text":"import\u52a0\u8f7d\u7684\u6a21\u5757\u5206\u4e3a\u56db\u4e2a\u901a\u7528\u7c7b\u522b\uff1a 1. \u4f7f\u7528python\u7f16\u5199\u7684\u4ee3\u7801\uff08 py\u6587\u4ef6 \uff09\uff1b 2. \u5df2\u88ab\u7f16\u8bd1\u4e3a\u5171\u4eab\u5e93\u6216DLL\u7684 C\u6216C++\u6269\u5c55 \uff1b 3. \u5305\u597d\u4e00\u7ec4\u6a21\u5757\u7684 \u5305 4. \u4f7f\u7528C\u7f16\u5199\u5e76\u94fe\u63a5\u5230python\u89e3\u91ca\u5668\u7684 \u5185\u7f6e\u6a21\u5757 .","title":"import"},{"location":"Python/Basic/Python-No-10-Module/#package","text":"\u6a21\u5757\u7684\u4e0a\u4e00\u7ea7\u79f0\u4e3a \u5305 package \u5305\u662f\u4e00\u4e2a\u6587\u4ef6\u5939\uff0c\u53ef\u4ee5\u901a\u8fc7\u5305\u6765\u7ec4\u7ec7\u6a21\u5757\uff0c\u907f\u514d\u51b2\u7a81\u3002 \u4e00\u4e2a\u5305\u91cc\u5fc5\u987b\u542b\u6709\u4e00\u4e2a __init__.py __init__.py \u53ef\u4ee5\u662f\u7a7a\u6587\u4ef6\uff0c\u4e5f\u53ef\u4ee5\u6709Python\u4ee3\u7801 __init__.py \u672c\u8eab\u5c31\u7b97\u4e00\u4e2a\u6a21\u5757\uff0c\u5b83\u7684\u6a21\u5757\u540d\u5c31\u662f\u5305\u540d \u5305\u91cc\u9762\u8fd8\u53ef\u4ee5\u6709\u5305 MyPackage \u251c\u2500 web \u2502 \u251c\u2500 __init__ . py \u2502 \u251c\u2500 utils . py \u2502 \u2514\u2500 test . py \u251c\u2500 dirc \u2502 \u251c\u2500 utils . py \u2502 \u2514\u2500 test . py \u2502 \u251c\u2500 __init__ . py \u251c\u2500 main . py \u2514\u2500 utils . py \u9876\u5c42\u5305\u4e3a MyPackage \u5b50\u5305\u4e3a web \u666e\u901a\u76ee\u5f55 dirc \uff08\u56e0\u4e3a\u5b83\u6ca1\u6709 __init__.py \u6587\u4ef6\uff09 test.py \u7684\u6a21\u5757\u540d\u4e3a MyPackage.web.test utils.py \u6709\u4e24\u4e2a\uff0c\u6a21\u5757\u540d\u5206\u522b\u4e3a MyPackage.web.utils \u548c MyPackage.utils \u81ea\u5df1\u521b\u5efa\u6a21\u5757\u65f6\u6ce8\u610f\u547d\u540d\u4e0d\u8981\u4e0e\u7cfb\u7edf\u6a21\u5757\u51b2\u7a81 \u8981\u68c0\u67e5\u7cfb\u7edf\u4e2d\u662f\u5426\u5b58\u5728\u8be5\u6a21\u5757\uff0c\u53ef\u4ee5\u5728\u4ea4\u4e92\u73af\u5883\u4e0b\u6267\u884c import abc \uff0c\u82e5\u6210\u529f\u8bf4\u660e\u7cfb\u7edf\u5b58\u5728\u6b64\u6a21\u5757\u3002 >>> import aabbccc Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > ModuleNotFoundError : No module named 'aabbccc'","title":"\u5305 Package"},{"location":"Python/Basic/Python-No-10-Module/#_1","text":"#!/usr/bin/env python3 # -*- coding: utf-8 -*- \"Here is the module documentation\" __author__ = 'Boii' import sys def test (): args = sys . argv if len ( args ) == 1 : print ( 'Hello, world!' ) elif len ( args ) == 2 : print ( 'Hello, %s !' % args [ 1 ]) else : print ( 'Too many arguments!' ) if __name__ == '__main__' : test ()","title":"\u4f7f\u7528\u6a21\u5757"},{"location":"Python/Basic/Python-No-10-Module/#_2","text":"#!/usr/bin/env python3 \u662f\u5411Unix / Linux / Mac \u7cfb\u7edf\u58f0\u660e\u672c\u6587\u4ef6\u662fPython3\u6587\u4ef6 # -*- coding: utf-8 -*- \u8868\u793a\u672c\u6587\u4ef6\u4f7f\u7528\u6807\u51c6utf-8\u7f16\u7801\uff0c\u867d\u7136Python3\u4e4b\u540e\u9ed8\u8ba4\u652f\u6301\u4e2d\u6587\uff0c\u4f46\u4e3a\u4fdd\u7a33\u59a5\u8fd8\u662f\u5199\u4e0a \"Here is the module documentation\" \u662f\u6a21\u5757\u6587\u6863\u6ce8\u91ca\uff0c\u4efb\u4f55\u6a21\u5757\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u90fd\u88ab\u89c6\u4e3a\u6a21\u5757\u7684\u6587\u6863\u6ce8\u91ca\u3002\u53ef\u4ee5\u901a\u8fc7 \u6a21\u5757\u540d.__doc__ \u83b7\u5f97\u3002 __author__ = 'Boii' \u662f\u4f5c\u8005\u3002\u53ef\u4ee5\u901a\u8fc7 \u6a21\u5757\u540d.__author__ \u83b7\u5f97\u3002 \u6807\u51c6\u6a21\u5757\u6587\u4ef6\u6a21\u677f\u4e5f\u53ef\u4ee5\u4e0d\u5199\uff0c\u5e76\u4e0d\u5f71\u54cd\u3002","title":"\u6807\u51c6\u6a21\u5757\u6587\u4ef6\u6a21\u677f"},{"location":"Python/Basic/Python-No-10-Module/#name","text":"import sys \u5f15\u5165\u4e86\u5185\u7f6e\u6a21\u5757 sys args = sys.argv \uff0c\u8fd9\u91cc sys.argv \u662f\u53c2\u6570\u5217\u8868\uff0c\u662f\u4e00\u4e2a list\uff0c\u4fdd\u5b58\u7684\u662f \u901a\u8fc7\u547d\u4ee4\u6267\u884c\u672c\u6587\u4ef6\u7684\u65f6\u5019\u6240\u5e26\u7684\u53c2\u6570 \u3002\u4f46\u8be5 list\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u6c38\u8fdc\u662f\u6587\u4ef6\u540d\u3002 \u4f8b\u5982\u4e0a\u9762\u7684\u6587\u4ef6\u540d\u4e3a Hello.py \uff0c\u5219\u8fd0\u884c\u547d\u4ee4 python Hello.py \u540esys,argv\u4e3a ['Hello.py'] . \u5982\u679c\u6267\u884c\u7684\u547d\u4ee4\u4e3a python Hello.py Boii \uff0c\u5219sys.argv\u4e3a ['Hello.py', 'Boii'] if __name__ == '__main__': test() \u5982\u679c\u8fd9\u4e2a\u6587\u4ef6\u662f\u72ec\u7acb\u8fd0\u884c\u7684\uff0c\u5219 if \u4e3a True\uff0c\u5982\u679c\u8fd9\u4e2a\u6587\u4ef6\u662f\u88ab\u5bfc\u5165\u7684\uff0c\u5219 if \u4e3a False\u3002 $ python Hello.py Hello, world! $ python Hello.py Boii Hello, Boii! \u2191 \u901a\u8fc7\u547d\u4ee4\u72ec\u7acb\u8fd0\u884c\u8fd9\u4e2a\u6587\u4ef6\uff0c\u6240\u4ee5 if \u4e3a True\uff0c\u6267\u884c\u4e86 test() \u51fd\u6570 $ python Python 3 .8.3 >>> >>> import Hello >>> >>> Hello.test () Hello, world! \u2191 \u901a\u8fc7\u5bfc\u5165\u7684\u65b9\u5f0f\u8fd0\u884c\u8fd9\u4e2a\u6587\u4ef6\uff0c\u6240\u4ee5 if \u4e3a False\uff0c\u6ca1\u6709\u6267\u884c test() \u51fd\u6570\uff0c\u7b49\u5230 Hello.test() \u4e3b\u52a8\u8c03\u7528\u65f6\u624d\u6267\u884c\u4e86 test() \u51fd\u6570","title":"\u5bfc\u5165\u3001\u53c2\u6570\u5217\u8868\u3001name"},{"location":"Python/Basic/Python-No-10-Module/#_3","text":"\u4e00\u4e2a .py \u6587\u4ef6\u5c31\u662f\u4e00\u4e2a\u6a21\u5757 module \u4e00\u4e2a\u5e26\u6709 __init__.py \u7684\u6587\u4ef6\u5939\u5c31\u662f\u4e00\u4e2a\u5305 package","title":"\u603b\u7ed3"},{"location":"Python/Basic/Python-No-19-File/","text":"\u6587\u4ef6\u57fa\u672c\u64cd\u4f5c \u540c\u6b65\u548c\u5f02\u6b65\u7684\u533a\u522b\u5c31\u5728\u4e8e\u662f\u5426\u7b49\u5f85IO\u6267\u884c\u7684\u7ed3\u679c\u3002\u597d\u6bd4\u4f60\u53bb\u9ea6\u5f53\u52b3\u70b9\u9910\uff0c \u4f60\u8bf4\u201c\u6765\u4e2a\u6c49\u5821\u201d\uff0c\u670d\u52a1\u5458\u544a\u8bc9\u4f60\uff0c\u5bf9\u4e0d\u8d77\uff0c\u6c49\u5821\u8981\u73b0\u505a\uff0c\u9700\u8981\u7b495\u5206\u949f\uff0c\u4e8e\u662f\u4f60\u7ad9\u5728\u6536\u94f6\u53f0\u524d\u9762\u7b49\u4e865\u5206\u949f\uff0c\u62ff\u5230\u6c49\u5821\u518d\u53bb\u901b\u5546\u573a\uff0c\u8fd9\u662f**\u540c\u6b65IO**\u3002 \u4f60\u8bf4\u201c\u6765\u4e2a\u6c49\u5821\u201d\uff0c\u670d\u52a1\u5458\u544a\u8bc9\u4f60\uff0c\u6c49\u5821\u9700\u8981\u7b495\u5206\u949f\uff0c\u4f60\u53ef\u4ee5\u5148\u53bb\u901b\u5546\u573a\uff0c\u7b49\u505a\u597d\u4e86\uff0c\u6211\u4eec\u518d\u901a\u77e5\u4f60\uff0c\u8fd9\u6837\u4f60\u53ef\u4ee5\u7acb\u523b\u53bb\u5e72\u522b\u7684\u4e8b\u60c5\uff08\u901b\u5546\u573a\uff09\uff0c\u8fd9\u662f**\u5f02\u6b65IO**\u3002 \u5f88\u660e\u663e\uff0c\u4f7f\u7528\u5f02\u6b65IO\u6765\u7f16\u5199\u7a0b\u5e8f\u6027\u80fd\u4f1a\u8fdc\u8fdc\u9ad8\u4e8e\u540c\u6b65IO\uff0c\u4f46\u662f\u5f02\u6b65IO\u7684\u7f3a\u70b9\u662f\u7f16\u7a0b\u6a21\u578b\u590d\u6742\u3002\u60f3\u60f3\u770b\uff0c\u4f60\u5f97\u77e5\u9053\u4ec0\u4e48\u65f6\u5019\u901a\u77e5\u4f60\u201c\u6c49\u5821\u505a\u597d\u4e86\u201d\uff0c\u800c\u901a\u77e5\u4f60\u7684\u65b9\u6cd5\u4e5f\u5404\u4e0d\u76f8\u540c\u3002\u5982\u679c\u662f\u670d\u52a1\u5458\u8dd1\u8fc7\u6765\u627e\u5230\u4f60\uff0c\u8fd9\u662f**\u56de\u8c03\u6a21\u5f0f**\uff0c\u5982\u679c\u670d\u52a1\u5458\u53d1\u77ed\u4fe1\u901a\u77e5\u4f60\uff0c\u4f60\u5c31\u5f97\u4e0d\u505c\u5730\u68c0\u67e5\u624b\u673a\uff0c\u8fd9\u662f**\u8f6e\u8be2\u6a21\u5f0f**\u3002\u603b\u4e4b\uff0c\u5f02\u6b65IO\u7684\u590d\u6742\u5ea6\u8fdc\u8fdc\u9ad8\u4e8e\u540c\u6b65IO\u3002 \u6587\u4ef6\u8bfb\u5199\u5176\u5b9e\u90fd\u662f\u7531\u64cd\u4f5c\u7cfb\u7edf\u5b8c\u6210\u7684\uff0c\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u662f\u4e0d\u5141\u8bb8\u666e\u901a\u7a0b\u5e8f\u76f4\u63a5\u64cd\u4f5c\u78c1\u76d8\u7684\uff0c\u6240\u4ee5\u8bfb\u5199\u6587\u4ef6\u5c31\u662f\u8bf7\u6c42\u64cd\u4f5c\u7cfb\u7edf\u6253\u5f00\u4e00\u4e2a \u6587\u4ef6\u5bf9\u8c61 \uff08\u53c8\u79f0\uff1a\u6587\u4ef6\u63cf\u8ff0\u7b26\uff09\uff0c\u901a\u8fc7\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u7684\u63a5\u53e3\u4ece\u8fd9\u4e2a \u6587\u4ef6\u5bf9\u8c61 \u4e2d\u8bfb\u53d6\u6570\u636e\u6216\u5199\u5165\u6570\u636e \u540c\u6b65IO \u00b6 >>> with open ( file_path , 'r/w/a' ) as alias : \u00b7\u00b7\u00b7 do sth r \uff1a\u8bfb w \uff1a\u8986\u76d6\u5199 a+ \uff1a\u8ffd\u52a0\u5199 \u8bfb read \u00b6 \u8bfb\u53d6\u7684\u8fc7\u7a0b\uff1a1. \u6253\u5f00\u6587\u4ef6\uff1b2. \u8bfb\u53d6\u6587\u4ef6\uff1b3. \u5173\u95ed\u6587\u4ef6 \u7b2c\u4e00\u6b65\uff1a f = open('/user/boii/io_note.txt', 'r') \u7528python\u5185\u7f6e\u7684 open() \u51fd\u6570\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u5bf9\u8c61\uff0c \u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u5165\u8bfb\u7684\u6587\u4ef6\u7684\u8def\u5f84\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4f20\u5165 r \u4e3a\u8bfb\u53d6\u7684\u610f\u601d \u5982\u679c\u6253\u5f00\u6210\u529f\uff0c open() \u4f1a\u8fd4\u56de\u4e00\u4e2a \u6587\u4ef6\u5bf9\u8c61 \uff1b \u5982\u679c\u6253\u5f00\u5931\u8d25\uff0c open() \u4f1a\u629b\u51fa\u4e00\u4e2a IOError \u9519\u8bef\u3002 \u7b2c\u4e8c\u6b65\uff1a f.read() \u901a\u8fc7 read() \u65b9\u6cd5\uff0c\u53ef\u4ee5\u5c06\u5168\u90e8\u5185\u5bb9\u8bfb\u53d6\u51fa\u6765\u3002 \u7b2c\u4e09\u6b65\uff1a f.close() \u6587\u4ef6\u6253\u5f00\u6210\u529f\u540e\uff0c\u5fc5\u987b\u4f7f\u7528 close() \u65b9\u6cd5\u5173\u95ed\u6587\u4ef6\u3002 \u56e0\u4e3a\u6587\u4ef6\u5bf9\u8c61\u4f1a\u5360\u7528\u64cd\u4f5c\u7cfb\u7edf\u8d44\u6e90\uff0c\u4e14\u64cd\u4f5c\u7cfb\u7edf\u540c\u4e00\u65f6\u95f4\u80fd\u6253\u5f00\u7684\u6587\u4ef6\u6570\u91cf\u4e5f\u6709\u9650\u3002 \u6587\u4ef6\u6253\u5f00\u5931\u8d25\u540e\uff0c\u4f1a\u4ea7\u751f IOError \uff0c\u5219\u4e0d\u4f1a\u8c03\u7528 f.close() \u7efc\u5408\u8d77\u6765\u53ef\u4ee5\u8fd9\u4e48\u5199\uff1a try : f = open ( '/user/boii/io_note.txt' , 'r' ) # \u6253\u5f00\u6587\u4ef6 print ( f . read ()) # \u8bfb\u53d6\u6587\u4ef6 except IOError as e : print ( e ) else : f . close () # \u5173\u95ed\u6587\u4ef6 -------------------------------------------------- # Output: # \u5982\u679c\u6587\u4ef6\u6253\u5f00\u6210\u529f\uff0c\u4f1a\u8f93\u51fa\uff08\u6587\u4ef6\u5168\u90e8\u5185\u5bb9\uff09\uff1aio # \u5982\u679c\u6587\u4ef6\u6253\u5f00\u5931\u8d25\uff0c\u4f1a\u8f93\u51fa\uff1a[Errno 2] No such file or directory: '/user/boii/io_note.txt' \u4f46\u662f\u8fd9\u6837\u592a\u7e41\u7410\uff0c\u4e00\u70b9\u4e5f\u4e0d\u7b26\u5408Python\u4f18\u96c5\u7684\u6c14\u8d28\u3002 \u6240\u4ee5 Python \u5f15\u5165\u4e86 with \u8bed\u53e5\u6765\u81ea\u52a8\u5e2e\u6211\u4eec\u8c03\u7528 close() \u65b9\u6cd5 with open ( '/user/boii/io_note.txt' , 'r' ) as f : print ( f . read ()) \u6307\u5b9a\u5b57\u8282 read(size) \u00b6 file_obj.read(size) read() \u65b9\u6cd5\u4e0d\u586b\u5199\u53c2\u6570\uff0c\u76f4\u63a5\u8bfb\u53d6\u6587\u4ef6\u5168\u90e8\u5185\u5bb9\u3002\u5982\u679c\u4e00\u4e2a\u6587\u4ef6\u592a\u5927\uff0c\u5168\u90e8\u8bfb\u53d6\u4f1a\u7206\u5185\u5b58\u7684\u3002 \u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a size \u7684\u65b9\u5f0f\u6307\u5b9a\u8bfb\u53d6 size \u4e2a\u5b57\u8282\u7684\u5185\u5bb9\u3002 # io.txt Hello Python ! I am Boii . I am learning . -------------------------------------------------- # io_read.py with open ( 'io.txt' , 'r' ) as f : data = f . read ( 8 ) # \u8bfb\u53d6\u524d8\u4e2a\u5b57\u8282 print ( data ) -------------------------------------------------- # Output: Hello Py \u8df3\u8fc7\u5b57\u8282 seek(size) \u00b6 file_obj.seek(size) \u901a\u8fc7 seek() \u53ef\u4ee5\u5728\u8bfb\u53d6\u4e4b\u524d\u8df3\u8fc7 size \u4e2a\u5b57\u8282\uff0c\u518d\u5f00\u59cb\u8bfb\u53d6 # io.txt Hello Python ! I am Boii . I am learning . -------------------------------------------------- # io_read.py with open ( 'io.txt' , 'r' ) as f : f . seek ( 3 ) data = f . read ( 8 ) # \u8bfb\u53d6\u524d8\u4e2a\u5b57\u8282 print ( data ) -------------------------------------------------- # Output: lo Pytho \u8bfb\u53d6\u4e00\u884c readline() \u00b6 file_obj.readline() readline() \u65b9\u6cd5\u4f1a\u8bfb\u53d6\u6587\u4ef6\u7684\u4e00\u884c\uff0c\u9047\u5230 \\n \u5c31\u8ba4\u4e3a\u662f\u4e00\u884c # io.txt Hello Python ! I am Boii . I am learning . -------------------------------------------------- # io_read.py with open ( 'io.txt' , 'r' ) as f : data = f . readline () # \u8bfb\u53d6\u7b2c\u4e00\u884c print ( data ) -------------------------------------------------- # Output: Hello Python ! \u8fd9\u6837\u53ea\u80fd\u8bfb\u53d6\u4e00\u884c\uff0c\u53ef\u4ee5\u4f7f\u7528 while \u5faa\u73af\u4e00\u884c\u4e00\u884c\u7684\u8bfb\u53d6 # io.txt Hello Python ! I am Boii . I am learning . -------------------------------------------------- # io_read.py with open ( 'io.txt' , 'r' ) as f : data = f . readline () # \u8bfb\u53d6\u7b2c\u4e00\u884c while data : print ( data , end = '' ) data = f . readline () # \u63a5\u7740\u8bfb\u4e0b\u4e00\u884c -------------------------------------------------- # Output: Hello Python ! I am Boii . I am learning . \u8bfb\u53d6\u591a\u884c readlines() \u00b6 file_obj.readlines() readlines() \u65b9\u6cd5\u4f1a\u4e00\u6b21\u6027\u8bfb\u53d6\u6587\u4ef6\u4e2d\u591a\u884c\u5185\u5bb9\uff0c\u6700\u540e\u8fd4\u56de\u4e00\u4e2a list\uff0c\u4e00\u4e2a\u5143\u7d20\u4e00\u884c\u5185\u5bb9\u3002 # io.txt Hello Python ! I am Boii . I am learning . -------------------------------------------------- # io_read.py with open ( 'io.txt' , 'r' ) as f : datas = f . readlines () # \u8bfb\u53d6\u591a\u884c for line in datas : print ( line , end = '' ) -------------------------------------------------- # Output: Hello Python ! I am Boii . I am learning . \u6548\u679c\u662f\u4e00\u6837\u7684\u3002 \u5199 write \u00b6 \u5199\u5165\u7684\u8fc7\u7a0b\uff1a1. \u6253\u5f00\u6587\u4ef6\uff1b2. \u5199\u5165\u6587\u4ef6\uff1b3. \u5173\u95ed\u6587\u4ef6 \u5199\u5165\u540c\u6837\u53ef\u4ee5\u4f7f\u7528 with \u8bed\u53e5\uff0c with \u8bed\u53e5\u81ea\u52a8\u4f1a\u5173\u95ed\u6587\u4ef6 \u8bfb\u6587\u4ef6\u7684\u65f6\u5019\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u4f1a\u629b\u51fa IOError \u9519\u8bef \u5199\u6587\u4ef6\u7684\u65f6\u5019\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u4f1a\u521b\u5efa\u6587\u4ef6 \u5199\u5165\u6709\u4e24\u79cd\uff0c\u4e00\u79cd\u662f\u8986\u76d6\u539f\u6709\u5185\u5bb9\u5199\u5165\u65b0\u5185\u5bb9\uff1b\u4e00\u79cd\u662f\u5728\u539f\u6709\u5185\u5bb9\u57fa\u7840\u4e0a\u8ffd\u52a0\u65b0\u5185\u5bb9\u3002 \u8986\u76d6\u5199\u5728 open() \u51fd\u6570\u4e2d\u8981\u4f20\u5165 w \uff0c\u8ffd\u52a0\u5199\u5728 open() \u51fd\u6570\u4e2d\u8981\u4f20\u5165 a \u5199\u5165\u5355\u884c wirte() \u00b6 # io_write.py contend = '''I am the contend which be writed down into file. Hello Python!''' with open ( 'io.txt' , 'w' ) as f : f . write ( contend ) # \u5199\u5165\u6587\u4ef6 -------------------------------------------------- # io.txt I am the contend which be writed down into file . Hello Python ! \u5199\u5165\u591a\u884c writelines() \u00b6 file_obj.writelines(str) \u5f53\u6709\u591a\u884c\u8981\u5199\u5165\u7684\u65f6\u5019\uff0c\u9664\u4e86\u4e0a\u9762\u7528 ''' \u7684\u591a\u884c\u5b57\u7b26\u4e32\uff0c\u53ef\u4ee5\u7528 writelines(list) \u6765\u5c06\u5185\u5bb9\u4e00\u6b21\u5199\u5165\u3002\u7b2c\u4e00\u4e2a\u53c2\u6570\u63a5\u53d7\u7684\u662f\u4e00\u4e2a list \u5217\u8868 \u6216 string \u5b57\u7b26\u4e32 # io_write.py datas = [ 'Hello Python!' , 'I am Boii' , 'I like coding' ] with open ( 'io.txt' , 'w' ) as f : f . writelines ( datas ) # \u5199\u5165\u6587\u4ef6 -------------------------------------------------- # io.txt Hello Python ! I am BoiiI like coding \u8ddf\u9884\u8bbe\u7ed3\u679c\u4e0d\u4e00\u6837\uff0c\u5e76\u6ca1\u6709\u6362\u884c\u7b26\u3002\u53ef\u4ee5\u76f4\u63a5\u7ed9 datas \u7684\u6bcf\u4e2a\u5143\u7d20\u52a0\u4e0a \\n \u4f46\u662f\u8fd9\u79cd\u529e\u6cd5\u5f88\u8d39\u529b\uff0c\u4e14\u5f88\u591a\u65f6\u5019\u5185\u5bb9\u4e0d\u662f\u4f60\u51b3\u5b9a\u7684\uff0c\u8fd9\u65f6\u5019 \u5217\u8868\u751f\u6210\u5f0f \u5c31\u6392\u4e0a\u7528\u573a\u4e86\u3002 # io_write.py datas = [ 'Hello Python!' , 'I am Boii' , 'I like coding' ] with open ( 'io.txt' , 'w' ) as f : new_datas = [ line + ' \\n ' for line in datas ] f . writelines ( new_datas ) # \u5199\u5165\u6587\u4ef6 -------------------------------------------------- # io.txt Hello Python ! I am Boii I like coding \u8ffd\u52a0\u5199 \u00b6 # io_write.py contend = '''I am the contend which be writed down into file. Hello Python!''' with open ( 'io.txt' , 'a' ) as f : f . write ( contend ) # \u5199\u5165\u6587\u4ef6 -------------------------------------------------- # io.txt \u7b2c\u4e00\u6b21\u6267\u884c I am the contend which be writed down into file . Hello Python ! # io.txt \u7b2c\u4e8c\u6b21\u6267\u884c I am the contend which be writed down into file . Hello Python ! I am the contend which be writed down into file . Hello Python ! \u6253\u5f00\u6a21\u5f0f \u00b6 \u6253\u5f00\u6a21\u5f0f\u6709\u5f88\u591a\uff0c\u5927\u81f4\u5206\u4e3a\uff1a \u5b57\u7b26 \u610f\u4e49 r \u8bfb\u53d6\uff08\u9ed8\u8ba4\uff09 w \u8986\u76d6\u5199 a \u8ffd\u52a0\u5199 x \u6392\u4ed6\u6027\u521b\u5efa\uff0c\u5982\u679c\u6587\u4ef6\u5df2\u5b58\u5728\u5219\u5931\u8d25 b \u4e8c\u8fdb\u5236\u6a21\u5f0f t \u6587\u672c\u6a21\u5f0f\uff08\u9ed8\u8ba4\uff09 + \u53ef\u8bfb\u53ef\u5199 \u8868\u4e2d\u7684\u5b57\u7b26\u7ec4\u5408\u8d77\u6765\u5c31\u6709\u4e30\u5bcc\u7684\u6253\u5f00\u65b9\u5f0f r \u53ea\u8bfb\uff0c r+ \u53ef\u8bfb\u53ef\u5199\uff0c rb \u53ea\u8bfb\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\uff08\u56fe\u7247\u97f3\u89c6\u9891\u7b49\uff09 w \u53ea\u8986\u76d6\u5199\uff0c w+ \u53ef\u8bfb\u53ef\u8986\u76d6\u5199\uff0c wb \u53ea\u8986\u76d6\u5199\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6 a \u53ea\u8ffd\u52a0\u5199\uff0c a+ \u53ef\u8bfb\u53ef\u8ffd\u52a0\u5199\uff0c\u4ee5\u6b64\u7c7b\u63a8 \u5b57\u7b26\u7f16\u7801 \u00b6 \u8981\u8bfb\u53d6\u975eUTF-8\u7f16\u7801\u7684\u6587\u4ef6\uff0c\u9700\u8981\u7ed9 open() \u51fd\u6570\u4f20\u5165 encoding \u53c2\u6570 \u4f8b\u5982\u6253\u5f00\u4e00\u4e2aGBK\u7f16\u7801\u7684\u6587\u4ef6 >>> with open ( 'io.txt' , 'r' , encoding = 'gbk' ) as f : \u00b7\u00b7\u00b7 print ( f . read ()) Hello Python ! \u4f46\u6709\u65f6\u5019\u6253\u5f00\u7684\u6587\u4ef6\u7f16\u7801\u4e0d\u89c4\u8303\uff0c\u6df7\u6742\u4e86\u591a\u79cd\u7f16\u7801\u7684\u5b57\u7b26\uff0c \u800c\u6253\u5f00\u65f6\u53ea\u80fd\u6309\u4e00\u79cd\u7f16\u7801\u6253\u5f00\uff0c\u6240\u4ee5\u52bf\u5fc5\u4f1a\u9020\u6210\u4e71\u7801\u3002 \u8fd9\u79cd\u4e71\u7801\u7684\u5904\u7406\u53ef\u4ee5\u7528 errors \u53c2\u6570\u3002 open(filepath, mode, encoding='value', errors='value') errors \u53c2\u6570\u7684\u503c\u6709 ignore\uff1a\u76f4\u63a5\u5ffd\u7565 strict\uff1a\u5f15\u53d1 ValueError \u5f02\u5e38\u3002\u4e0e\u9ed8\u8ba4\u503c None \u6548\u679c\u76f8\u540c replace_sign\uff1a\u4f1a\u5c06\u9519\u8bef\u7684\u5730\u65b9\u66ff\u6362\u4e3a\u6307\u5b9a\u7684 replace_sign \u7b26\u53f7 \u5176\u4ed6","title":"File"},{"location":"Python/Basic/Python-No-19-File/#io","text":">>> with open ( file_path , 'r/w/a' ) as alias : \u00b7\u00b7\u00b7 do sth r \uff1a\u8bfb w \uff1a\u8986\u76d6\u5199 a+ \uff1a\u8ffd\u52a0\u5199","title":"\u540c\u6b65IO"},{"location":"Python/Basic/Python-No-19-File/#read","text":"\u8bfb\u53d6\u7684\u8fc7\u7a0b\uff1a1. \u6253\u5f00\u6587\u4ef6\uff1b2. \u8bfb\u53d6\u6587\u4ef6\uff1b3. \u5173\u95ed\u6587\u4ef6 \u7b2c\u4e00\u6b65\uff1a f = open('/user/boii/io_note.txt', 'r') \u7528python\u5185\u7f6e\u7684 open() \u51fd\u6570\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u5bf9\u8c61\uff0c \u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u5165\u8bfb\u7684\u6587\u4ef6\u7684\u8def\u5f84\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4f20\u5165 r \u4e3a\u8bfb\u53d6\u7684\u610f\u601d \u5982\u679c\u6253\u5f00\u6210\u529f\uff0c open() \u4f1a\u8fd4\u56de\u4e00\u4e2a \u6587\u4ef6\u5bf9\u8c61 \uff1b \u5982\u679c\u6253\u5f00\u5931\u8d25\uff0c open() \u4f1a\u629b\u51fa\u4e00\u4e2a IOError \u9519\u8bef\u3002 \u7b2c\u4e8c\u6b65\uff1a f.read() \u901a\u8fc7 read() \u65b9\u6cd5\uff0c\u53ef\u4ee5\u5c06\u5168\u90e8\u5185\u5bb9\u8bfb\u53d6\u51fa\u6765\u3002 \u7b2c\u4e09\u6b65\uff1a f.close() \u6587\u4ef6\u6253\u5f00\u6210\u529f\u540e\uff0c\u5fc5\u987b\u4f7f\u7528 close() \u65b9\u6cd5\u5173\u95ed\u6587\u4ef6\u3002 \u56e0\u4e3a\u6587\u4ef6\u5bf9\u8c61\u4f1a\u5360\u7528\u64cd\u4f5c\u7cfb\u7edf\u8d44\u6e90\uff0c\u4e14\u64cd\u4f5c\u7cfb\u7edf\u540c\u4e00\u65f6\u95f4\u80fd\u6253\u5f00\u7684\u6587\u4ef6\u6570\u91cf\u4e5f\u6709\u9650\u3002 \u6587\u4ef6\u6253\u5f00\u5931\u8d25\u540e\uff0c\u4f1a\u4ea7\u751f IOError \uff0c\u5219\u4e0d\u4f1a\u8c03\u7528 f.close() \u7efc\u5408\u8d77\u6765\u53ef\u4ee5\u8fd9\u4e48\u5199\uff1a try : f = open ( '/user/boii/io_note.txt' , 'r' ) # \u6253\u5f00\u6587\u4ef6 print ( f . read ()) # \u8bfb\u53d6\u6587\u4ef6 except IOError as e : print ( e ) else : f . close () # \u5173\u95ed\u6587\u4ef6 -------------------------------------------------- # Output: # \u5982\u679c\u6587\u4ef6\u6253\u5f00\u6210\u529f\uff0c\u4f1a\u8f93\u51fa\uff08\u6587\u4ef6\u5168\u90e8\u5185\u5bb9\uff09\uff1aio # \u5982\u679c\u6587\u4ef6\u6253\u5f00\u5931\u8d25\uff0c\u4f1a\u8f93\u51fa\uff1a[Errno 2] No such file or directory: '/user/boii/io_note.txt' \u4f46\u662f\u8fd9\u6837\u592a\u7e41\u7410\uff0c\u4e00\u70b9\u4e5f\u4e0d\u7b26\u5408Python\u4f18\u96c5\u7684\u6c14\u8d28\u3002 \u6240\u4ee5 Python \u5f15\u5165\u4e86 with \u8bed\u53e5\u6765\u81ea\u52a8\u5e2e\u6211\u4eec\u8c03\u7528 close() \u65b9\u6cd5 with open ( '/user/boii/io_note.txt' , 'r' ) as f : print ( f . read ())","title":"\u8bfb read"},{"location":"Python/Basic/Python-No-19-File/#readsize","text":"file_obj.read(size) read() \u65b9\u6cd5\u4e0d\u586b\u5199\u53c2\u6570\uff0c\u76f4\u63a5\u8bfb\u53d6\u6587\u4ef6\u5168\u90e8\u5185\u5bb9\u3002\u5982\u679c\u4e00\u4e2a\u6587\u4ef6\u592a\u5927\uff0c\u5168\u90e8\u8bfb\u53d6\u4f1a\u7206\u5185\u5b58\u7684\u3002 \u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a size \u7684\u65b9\u5f0f\u6307\u5b9a\u8bfb\u53d6 size \u4e2a\u5b57\u8282\u7684\u5185\u5bb9\u3002 # io.txt Hello Python ! I am Boii . I am learning . -------------------------------------------------- # io_read.py with open ( 'io.txt' , 'r' ) as f : data = f . read ( 8 ) # \u8bfb\u53d6\u524d8\u4e2a\u5b57\u8282 print ( data ) -------------------------------------------------- # Output: Hello Py","title":"\u6307\u5b9a\u5b57\u8282 read(size)"},{"location":"Python/Basic/Python-No-19-File/#seeksize","text":"file_obj.seek(size) \u901a\u8fc7 seek() \u53ef\u4ee5\u5728\u8bfb\u53d6\u4e4b\u524d\u8df3\u8fc7 size \u4e2a\u5b57\u8282\uff0c\u518d\u5f00\u59cb\u8bfb\u53d6 # io.txt Hello Python ! I am Boii . I am learning . -------------------------------------------------- # io_read.py with open ( 'io.txt' , 'r' ) as f : f . seek ( 3 ) data = f . read ( 8 ) # \u8bfb\u53d6\u524d8\u4e2a\u5b57\u8282 print ( data ) -------------------------------------------------- # Output: lo Pytho","title":"\u8df3\u8fc7\u5b57\u8282 seek(size)"},{"location":"Python/Basic/Python-No-19-File/#readline","text":"file_obj.readline() readline() \u65b9\u6cd5\u4f1a\u8bfb\u53d6\u6587\u4ef6\u7684\u4e00\u884c\uff0c\u9047\u5230 \\n \u5c31\u8ba4\u4e3a\u662f\u4e00\u884c # io.txt Hello Python ! I am Boii . I am learning . -------------------------------------------------- # io_read.py with open ( 'io.txt' , 'r' ) as f : data = f . readline () # \u8bfb\u53d6\u7b2c\u4e00\u884c print ( data ) -------------------------------------------------- # Output: Hello Python ! \u8fd9\u6837\u53ea\u80fd\u8bfb\u53d6\u4e00\u884c\uff0c\u53ef\u4ee5\u4f7f\u7528 while \u5faa\u73af\u4e00\u884c\u4e00\u884c\u7684\u8bfb\u53d6 # io.txt Hello Python ! I am Boii . I am learning . -------------------------------------------------- # io_read.py with open ( 'io.txt' , 'r' ) as f : data = f . readline () # \u8bfb\u53d6\u7b2c\u4e00\u884c while data : print ( data , end = '' ) data = f . readline () # \u63a5\u7740\u8bfb\u4e0b\u4e00\u884c -------------------------------------------------- # Output: Hello Python ! I am Boii . I am learning .","title":"\u8bfb\u53d6\u4e00\u884c readline()"},{"location":"Python/Basic/Python-No-19-File/#readlines","text":"file_obj.readlines() readlines() \u65b9\u6cd5\u4f1a\u4e00\u6b21\u6027\u8bfb\u53d6\u6587\u4ef6\u4e2d\u591a\u884c\u5185\u5bb9\uff0c\u6700\u540e\u8fd4\u56de\u4e00\u4e2a list\uff0c\u4e00\u4e2a\u5143\u7d20\u4e00\u884c\u5185\u5bb9\u3002 # io.txt Hello Python ! I am Boii . I am learning . -------------------------------------------------- # io_read.py with open ( 'io.txt' , 'r' ) as f : datas = f . readlines () # \u8bfb\u53d6\u591a\u884c for line in datas : print ( line , end = '' ) -------------------------------------------------- # Output: Hello Python ! I am Boii . I am learning . \u6548\u679c\u662f\u4e00\u6837\u7684\u3002","title":"\u8bfb\u53d6\u591a\u884c readlines()"},{"location":"Python/Basic/Python-No-19-File/#write","text":"\u5199\u5165\u7684\u8fc7\u7a0b\uff1a1. \u6253\u5f00\u6587\u4ef6\uff1b2. \u5199\u5165\u6587\u4ef6\uff1b3. \u5173\u95ed\u6587\u4ef6 \u5199\u5165\u540c\u6837\u53ef\u4ee5\u4f7f\u7528 with \u8bed\u53e5\uff0c with \u8bed\u53e5\u81ea\u52a8\u4f1a\u5173\u95ed\u6587\u4ef6 \u8bfb\u6587\u4ef6\u7684\u65f6\u5019\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u4f1a\u629b\u51fa IOError \u9519\u8bef \u5199\u6587\u4ef6\u7684\u65f6\u5019\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u4f1a\u521b\u5efa\u6587\u4ef6 \u5199\u5165\u6709\u4e24\u79cd\uff0c\u4e00\u79cd\u662f\u8986\u76d6\u539f\u6709\u5185\u5bb9\u5199\u5165\u65b0\u5185\u5bb9\uff1b\u4e00\u79cd\u662f\u5728\u539f\u6709\u5185\u5bb9\u57fa\u7840\u4e0a\u8ffd\u52a0\u65b0\u5185\u5bb9\u3002 \u8986\u76d6\u5199\u5728 open() \u51fd\u6570\u4e2d\u8981\u4f20\u5165 w \uff0c\u8ffd\u52a0\u5199\u5728 open() \u51fd\u6570\u4e2d\u8981\u4f20\u5165 a","title":"\u5199 write"},{"location":"Python/Basic/Python-No-19-File/#wirte","text":"# io_write.py contend = '''I am the contend which be writed down into file. Hello Python!''' with open ( 'io.txt' , 'w' ) as f : f . write ( contend ) # \u5199\u5165\u6587\u4ef6 -------------------------------------------------- # io.txt I am the contend which be writed down into file . Hello Python !","title":"\u5199\u5165\u5355\u884c wirte()"},{"location":"Python/Basic/Python-No-19-File/#writelines","text":"file_obj.writelines(str) \u5f53\u6709\u591a\u884c\u8981\u5199\u5165\u7684\u65f6\u5019\uff0c\u9664\u4e86\u4e0a\u9762\u7528 ''' \u7684\u591a\u884c\u5b57\u7b26\u4e32\uff0c\u53ef\u4ee5\u7528 writelines(list) \u6765\u5c06\u5185\u5bb9\u4e00\u6b21\u5199\u5165\u3002\u7b2c\u4e00\u4e2a\u53c2\u6570\u63a5\u53d7\u7684\u662f\u4e00\u4e2a list \u5217\u8868 \u6216 string \u5b57\u7b26\u4e32 # io_write.py datas = [ 'Hello Python!' , 'I am Boii' , 'I like coding' ] with open ( 'io.txt' , 'w' ) as f : f . writelines ( datas ) # \u5199\u5165\u6587\u4ef6 -------------------------------------------------- # io.txt Hello Python ! I am BoiiI like coding \u8ddf\u9884\u8bbe\u7ed3\u679c\u4e0d\u4e00\u6837\uff0c\u5e76\u6ca1\u6709\u6362\u884c\u7b26\u3002\u53ef\u4ee5\u76f4\u63a5\u7ed9 datas \u7684\u6bcf\u4e2a\u5143\u7d20\u52a0\u4e0a \\n \u4f46\u662f\u8fd9\u79cd\u529e\u6cd5\u5f88\u8d39\u529b\uff0c\u4e14\u5f88\u591a\u65f6\u5019\u5185\u5bb9\u4e0d\u662f\u4f60\u51b3\u5b9a\u7684\uff0c\u8fd9\u65f6\u5019 \u5217\u8868\u751f\u6210\u5f0f \u5c31\u6392\u4e0a\u7528\u573a\u4e86\u3002 # io_write.py datas = [ 'Hello Python!' , 'I am Boii' , 'I like coding' ] with open ( 'io.txt' , 'w' ) as f : new_datas = [ line + ' \\n ' for line in datas ] f . writelines ( new_datas ) # \u5199\u5165\u6587\u4ef6 -------------------------------------------------- # io.txt Hello Python ! I am Boii I like coding","title":"\u5199\u5165\u591a\u884c writelines()"},{"location":"Python/Basic/Python-No-19-File/#_1","text":"# io_write.py contend = '''I am the contend which be writed down into file. Hello Python!''' with open ( 'io.txt' , 'a' ) as f : f . write ( contend ) # \u5199\u5165\u6587\u4ef6 -------------------------------------------------- # io.txt \u7b2c\u4e00\u6b21\u6267\u884c I am the contend which be writed down into file . Hello Python ! # io.txt \u7b2c\u4e8c\u6b21\u6267\u884c I am the contend which be writed down into file . Hello Python ! I am the contend which be writed down into file . Hello Python !","title":"\u8ffd\u52a0\u5199"},{"location":"Python/Basic/Python-No-19-File/#_2","text":"\u6253\u5f00\u6a21\u5f0f\u6709\u5f88\u591a\uff0c\u5927\u81f4\u5206\u4e3a\uff1a \u5b57\u7b26 \u610f\u4e49 r \u8bfb\u53d6\uff08\u9ed8\u8ba4\uff09 w \u8986\u76d6\u5199 a \u8ffd\u52a0\u5199 x \u6392\u4ed6\u6027\u521b\u5efa\uff0c\u5982\u679c\u6587\u4ef6\u5df2\u5b58\u5728\u5219\u5931\u8d25 b \u4e8c\u8fdb\u5236\u6a21\u5f0f t \u6587\u672c\u6a21\u5f0f\uff08\u9ed8\u8ba4\uff09 + \u53ef\u8bfb\u53ef\u5199 \u8868\u4e2d\u7684\u5b57\u7b26\u7ec4\u5408\u8d77\u6765\u5c31\u6709\u4e30\u5bcc\u7684\u6253\u5f00\u65b9\u5f0f r \u53ea\u8bfb\uff0c r+ \u53ef\u8bfb\u53ef\u5199\uff0c rb \u53ea\u8bfb\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\uff08\u56fe\u7247\u97f3\u89c6\u9891\u7b49\uff09 w \u53ea\u8986\u76d6\u5199\uff0c w+ \u53ef\u8bfb\u53ef\u8986\u76d6\u5199\uff0c wb \u53ea\u8986\u76d6\u5199\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6 a \u53ea\u8ffd\u52a0\u5199\uff0c a+ \u53ef\u8bfb\u53ef\u8ffd\u52a0\u5199\uff0c\u4ee5\u6b64\u7c7b\u63a8","title":"\u6253\u5f00\u6a21\u5f0f"},{"location":"Python/Basic/Python-No-19-File/#_3","text":"\u8981\u8bfb\u53d6\u975eUTF-8\u7f16\u7801\u7684\u6587\u4ef6\uff0c\u9700\u8981\u7ed9 open() \u51fd\u6570\u4f20\u5165 encoding \u53c2\u6570 \u4f8b\u5982\u6253\u5f00\u4e00\u4e2aGBK\u7f16\u7801\u7684\u6587\u4ef6 >>> with open ( 'io.txt' , 'r' , encoding = 'gbk' ) as f : \u00b7\u00b7\u00b7 print ( f . read ()) Hello Python ! \u4f46\u6709\u65f6\u5019\u6253\u5f00\u7684\u6587\u4ef6\u7f16\u7801\u4e0d\u89c4\u8303\uff0c\u6df7\u6742\u4e86\u591a\u79cd\u7f16\u7801\u7684\u5b57\u7b26\uff0c \u800c\u6253\u5f00\u65f6\u53ea\u80fd\u6309\u4e00\u79cd\u7f16\u7801\u6253\u5f00\uff0c\u6240\u4ee5\u52bf\u5fc5\u4f1a\u9020\u6210\u4e71\u7801\u3002 \u8fd9\u79cd\u4e71\u7801\u7684\u5904\u7406\u53ef\u4ee5\u7528 errors \u53c2\u6570\u3002 open(filepath, mode, encoding='value', errors='value') errors \u53c2\u6570\u7684\u503c\u6709 ignore\uff1a\u76f4\u63a5\u5ffd\u7565 strict\uff1a\u5f15\u53d1 ValueError \u5f02\u5e38\u3002\u4e0e\u9ed8\u8ba4\u503c None \u6548\u679c\u76f8\u540c replace_sign\uff1a\u4f1a\u5c06\u9519\u8bef\u7684\u5730\u65b9\u66ff\u6362\u4e3a\u6307\u5b9a\u7684 replace_sign \u7b26\u53f7 \u5176\u4ed6","title":"\u5b57\u7b26\u7f16\u7801"},{"location":"Python/Basic/Python-No-2-Basic/","text":"Python \u57fa\u7840\u77e5\u8bc6 \u8f93\u5165 & \u8f93\u51fa \u00b6 \u8f93\u51fa \u00b6 print('\u8f93\u51fa\u5185\u5bb9') >>> print ( 300 ) # 300 >>> print ( 100 + 200 ) # 300 >>> print ( '100 + 200 =' , 100 + 200 ) # 100 + 200 = 300 >>> print ( 'Hello World!' ) # Hello World! >>> print ( 'The quick' , 'brown for' , 'jumps over.' ) # The quick brown for jumps over. \u8f93\u5165 \u00b6 \u627f\u63a5\u53d8\u91cf = input('\u63d0\u793a\u4fe1\u606f') >>> name = input () Boii >>> name 'Boii' >>> print ( name ) Boii # name.py name = input ( 'Please enter your name:' ) print ( 'Hello' , name ) >_: python name.py Please enter your name: Boii Hello Boii \u53d8\u91cf \u00b6 \u5927\u5c0f\u5199\u82f1\u6587\u3001\u6570\u5b57\u3001\u4e0b\u5212\u7ebf_ \u4e0d\u80fd\u6570\u5b57\u5f00\u5934 \u5927\u5c0f\u5199\u654f\u611f \u4e0d\u80fd\u7528\u5173\u952e\u5b57 \u4e0d\u9700\u8981\u58f0\u660e\u7c7b\u578b \u7b80\u6d01\u660e\u4e86\uff0c\u4fe1\u8fbe\u96c5\u539f\u5219\u3002\u53d8\u91cf\u540d\u7528\u540d\u8bcd\uff0c\u51fd\u6570\u540d\u65b9\u6cd5\u540d\u7528\u52a8\u8bcd \u7531\u4e8epython\u662f\u52a8\u6001\u8bed\u8a00\uff0c\u4e0d\u9700\u8981\u58f0\u660e\u7c7b\u578b\uff0c\u6240\u4ee5\u547d\u540d\u5c3d\u91cf\u4f53\u73b0\u7c7b\u578b\u6216\u7528\u524d\u7f00\u4f53\u73b0\u3002\u5982 i_age, fPrice, b_flag \u614e\u7528\u5b57\u6bcdO\u548cI a = 1 # a\u662f\u4e00\u4e2a\u6574\u578b b = 1.0 # b\u662f\u4e00\u4e2a\u6d6e\u70b9\u578b c = 'abc' # c\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32 d = True # d\u662f\u4e00\u4e2a\u5e03\u5c14\u503c e = None # e\u662f\u4e00\u4e2a\u7a7a\u503c # \u591a\u4e2a\u53d8\u91cf\u540c\u65f6\u8d4b\u503c a = b = c = 1 # \u4ee5\u4e0a\u8bed\u53e5, \u5185\u5b58\u4e2d\u4f1a\u521b\u5efa\u4e00\u4e2a\u7a7a\u95f4,\u503c\u4e3a1; \u518d\u521b\u5efa\u4e09\u4e2a\u7a7a\u95f4a, b, c, \u5b58\u653e1\u7684\u5730\u5740\uff0c\u5373\u6307\u54111\u90a3\u5757\u5185\u5b58 x , y , z = 1 , 2 , \"Boii\" # \u4ee5\u4e0a\u8bed\u53e5, x\u4e3a1, y\u4e3a2, z\u4e3aBoii \u53d8\u91cf\u5b9e\u9645\u4e0a\u662f\u6307\u5411 \u00b6 >>> a = 'ABC' >>> b = a >>> a = 'XYZ' >>> print ( b ) ABC a = 'ABC' b = a a = 'XYZ' \u6570\u636e\u7c7b\u578b \u00b6 \u6570\u636e\u7c7b\u578b.md \u8fd0\u7b97\u7b26 \u00b6 \u8fd0\u7b97\u7b26 \u7f29\u8fdb \u00b6 Python\u4ee5\u7f29\u8fdb\u6765\u533a\u5206\u4ee3\u7801\u5757\u3002\u8fde\u7eed\u7684\u76f8\u540c\u7f29\u8fdb\u89c6\u4e3a\u540c\u4e00\u4ee3\u7801\u5757\uff0c\u540c\u4e00\u4f5c\u7528\u57df\uff0c\u5982\u540cC\u4e2d\u7684\u82b1\u62ec\u53f7\u3002 \u6309\u7167\u7ea6\u5b9a\u4fd7\u6210\uff0c4\u4e2a\u7a7a\u683c\u4e3a\u4e00\u4e2a\u7f29\u8fdb\u3002\u5728IDE\u4e2d\u6700\u597d\u8bbe\u7f6e\u597dtab\u81ea\u52a8\u8f6c\u6362\u4e3a4\u4e2a\u7a7a\u683c \u591a\u884c\u8bed\u53e5 \u00b6 \u5982\u679c\u4e00\u4e2a\u8bed\u53e5\u592a\u957f\uff0c\u53ef\u4ee5\u4f7f\u7528 \\ \u58f0\u660e\u6b64\u8bed\u53e5\u672a\u7ed3\u675f total = item_one + \\ item_two + \\ item_three \u6ce8\u91ca \u00b6 # \u8fd9\u662f\u5355\u884c\u6ce8\u91ca ''' \u8fd9\u662f\u591a\u884c\u6ce8\u91ca\uff0c\u4f7f\u7528\u5355\u5f15\u53f7 \u8fd9\u662f\u591a\u884c\u6ce8\u91ca\uff0c\u4f7f\u7528\u5355\u5f15\u53f7 \u8fd9\u662f\u591a\u884c\u6ce8\u91ca\uff0c\u4f7f\u7528\u5355\u5f15\u53f7 ''' \"\"\" \u8fd9\u662f\u591a\u884c\u6ce8\u91ca\uff0c\u4f7f\u7528\u53cc\u5f15\u53f7 \u8fd9\u662f\u591a\u884c\u6ce8\u91ca\uff0c\u4f7f\u7528\u53cc\u5f15\u53f7 \u8fd9\u662f\u591a\u884c\u6ce8\u91ca\uff0c\u4f7f\u7528\u53cc\u5f15\u53f7 \"\"\"","title":"\u57fa\u7840"},{"location":"Python/Basic/Python-No-2-Basic/#_1","text":"","title":"\u8f93\u5165 &amp; \u8f93\u51fa"},{"location":"Python/Basic/Python-No-2-Basic/#_2","text":"print('\u8f93\u51fa\u5185\u5bb9') >>> print ( 300 ) # 300 >>> print ( 100 + 200 ) # 300 >>> print ( '100 + 200 =' , 100 + 200 ) # 100 + 200 = 300 >>> print ( 'Hello World!' ) # Hello World! >>> print ( 'The quick' , 'brown for' , 'jumps over.' ) # The quick brown for jumps over.","title":"\u8f93\u51fa"},{"location":"Python/Basic/Python-No-2-Basic/#_3","text":"\u627f\u63a5\u53d8\u91cf = input('\u63d0\u793a\u4fe1\u606f') >>> name = input () Boii >>> name 'Boii' >>> print ( name ) Boii # name.py name = input ( 'Please enter your name:' ) print ( 'Hello' , name ) >_: python name.py Please enter your name: Boii Hello Boii","title":"\u8f93\u5165"},{"location":"Python/Basic/Python-No-2-Basic/#_4","text":"\u5927\u5c0f\u5199\u82f1\u6587\u3001\u6570\u5b57\u3001\u4e0b\u5212\u7ebf_ \u4e0d\u80fd\u6570\u5b57\u5f00\u5934 \u5927\u5c0f\u5199\u654f\u611f \u4e0d\u80fd\u7528\u5173\u952e\u5b57 \u4e0d\u9700\u8981\u58f0\u660e\u7c7b\u578b \u7b80\u6d01\u660e\u4e86\uff0c\u4fe1\u8fbe\u96c5\u539f\u5219\u3002\u53d8\u91cf\u540d\u7528\u540d\u8bcd\uff0c\u51fd\u6570\u540d\u65b9\u6cd5\u540d\u7528\u52a8\u8bcd \u7531\u4e8epython\u662f\u52a8\u6001\u8bed\u8a00\uff0c\u4e0d\u9700\u8981\u58f0\u660e\u7c7b\u578b\uff0c\u6240\u4ee5\u547d\u540d\u5c3d\u91cf\u4f53\u73b0\u7c7b\u578b\u6216\u7528\u524d\u7f00\u4f53\u73b0\u3002\u5982 i_age, fPrice, b_flag \u614e\u7528\u5b57\u6bcdO\u548cI a = 1 # a\u662f\u4e00\u4e2a\u6574\u578b b = 1.0 # b\u662f\u4e00\u4e2a\u6d6e\u70b9\u578b c = 'abc' # c\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32 d = True # d\u662f\u4e00\u4e2a\u5e03\u5c14\u503c e = None # e\u662f\u4e00\u4e2a\u7a7a\u503c # \u591a\u4e2a\u53d8\u91cf\u540c\u65f6\u8d4b\u503c a = b = c = 1 # \u4ee5\u4e0a\u8bed\u53e5, \u5185\u5b58\u4e2d\u4f1a\u521b\u5efa\u4e00\u4e2a\u7a7a\u95f4,\u503c\u4e3a1; \u518d\u521b\u5efa\u4e09\u4e2a\u7a7a\u95f4a, b, c, \u5b58\u653e1\u7684\u5730\u5740\uff0c\u5373\u6307\u54111\u90a3\u5757\u5185\u5b58 x , y , z = 1 , 2 , \"Boii\" # \u4ee5\u4e0a\u8bed\u53e5, x\u4e3a1, y\u4e3a2, z\u4e3aBoii","title":"\u53d8\u91cf"},{"location":"Python/Basic/Python-No-2-Basic/#_5","text":">>> a = 'ABC' >>> b = a >>> a = 'XYZ' >>> print ( b ) ABC a = 'ABC' b = a a = 'XYZ'","title":"\u53d8\u91cf\u5b9e\u9645\u4e0a\u662f\u6307\u5411"},{"location":"Python/Basic/Python-No-2-Basic/#_6","text":"\u6570\u636e\u7c7b\u578b.md","title":"\u6570\u636e\u7c7b\u578b"},{"location":"Python/Basic/Python-No-2-Basic/#_7","text":"\u8fd0\u7b97\u7b26","title":"\u8fd0\u7b97\u7b26"},{"location":"Python/Basic/Python-No-2-Basic/#_8","text":"Python\u4ee5\u7f29\u8fdb\u6765\u533a\u5206\u4ee3\u7801\u5757\u3002\u8fde\u7eed\u7684\u76f8\u540c\u7f29\u8fdb\u89c6\u4e3a\u540c\u4e00\u4ee3\u7801\u5757\uff0c\u540c\u4e00\u4f5c\u7528\u57df\uff0c\u5982\u540cC\u4e2d\u7684\u82b1\u62ec\u53f7\u3002 \u6309\u7167\u7ea6\u5b9a\u4fd7\u6210\uff0c4\u4e2a\u7a7a\u683c\u4e3a\u4e00\u4e2a\u7f29\u8fdb\u3002\u5728IDE\u4e2d\u6700\u597d\u8bbe\u7f6e\u597dtab\u81ea\u52a8\u8f6c\u6362\u4e3a4\u4e2a\u7a7a\u683c","title":"\u7f29\u8fdb"},{"location":"Python/Basic/Python-No-2-Basic/#_9","text":"\u5982\u679c\u4e00\u4e2a\u8bed\u53e5\u592a\u957f\uff0c\u53ef\u4ee5\u4f7f\u7528 \\ \u58f0\u660e\u6b64\u8bed\u53e5\u672a\u7ed3\u675f total = item_one + \\ item_two + \\ item_three","title":"\u591a\u884c\u8bed\u53e5"},{"location":"Python/Basic/Python-No-2-Basic/#_10","text":"# \u8fd9\u662f\u5355\u884c\u6ce8\u91ca ''' \u8fd9\u662f\u591a\u884c\u6ce8\u91ca\uff0c\u4f7f\u7528\u5355\u5f15\u53f7 \u8fd9\u662f\u591a\u884c\u6ce8\u91ca\uff0c\u4f7f\u7528\u5355\u5f15\u53f7 \u8fd9\u662f\u591a\u884c\u6ce8\u91ca\uff0c\u4f7f\u7528\u5355\u5f15\u53f7 ''' \"\"\" \u8fd9\u662f\u591a\u884c\u6ce8\u91ca\uff0c\u4f7f\u7528\u53cc\u5f15\u53f7 \u8fd9\u662f\u591a\u884c\u6ce8\u91ca\uff0c\u4f7f\u7528\u53cc\u5f15\u53f7 \u8fd9\u662f\u591a\u884c\u6ce8\u91ca\uff0c\u4f7f\u7528\u53cc\u5f15\u53f7 \"\"\"","title":"\u6ce8\u91ca"},{"location":"Python/Basic/Python-No-20-IO/","text":"\u6587\u4ef6\u6b63\u5e38\u64cd\u4f5c Python\u7684\u81ea\u5e26\u6a21\u5757 os \u53ef\u4ee5\u8fdb\u884c\u8bb8\u591a\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u76f8\u5173\u7684\u64cd\u4f5c\u3002 \u4f8b\u5982**\u67e5\u770b\u5f53\u524d\u7cfb\u7edf\u7c7b\u578b** >>> import os >>> os . name 'nt' nt \u8868\u793a windows \uff0c posix \u8868\u793a Linux/Unix/Mac OS X \u5728 Linux/Unix/Max OS X \u4e0a\u60f3\u83b7\u5f97\u66f4\u8be6\u7ec6\u7684\u4fe1\u606f\uff0c\u53ef\u4ee5\u4f7f\u7528 uname() \uff0c\u4e0d\u8fc7\u5728 windows \u4e0a\u4e0d\u63d0\u4f9b >>> import os >>> os . uname () posix . uname_result ( sysname = 'Darwin' , nodename = 'MichaelMacPro.local' , release = '14.3.0' , version = 'Darwin Kernel Version 14.3.0: Mon Mar 23 11:59:05 PDT 2015; root:xnu-2782.20.48~5/RELEASE_X86_64' , machine = 'x86_64' ) \u518d\u4f8b\u5982**\u67e5\u770b\u73af\u5883\u53d8\u91cf**\uff0c os.environ >>> import os >>> os . environ environ ({ 'ALLUSERSPROFILE' : 'C: \\\\ ProgramData' , 'APPDATA' : 'C: \\\\ Users \\\\ pr919 \\\\ AppData \\\\ Roaming' , 'ASL.LOG' : 'Destination=file' , 'CATALINA_HOME' : 'D: \\\\ ---Programming--- \\\\ IntelliJ IDEA \\\\ apache-tomcat-8.5.42' , ... , 'WT_SESSION' : '245de0da-1ef4-4cda-93ca-c132289e2c9c' }) \u8fd9\u6837\u5c31\u5217\u51fa\u4e86\u6240\u6709\u73af\u5883\u53d8\u91cf\u4e86 \u5982\u679c\u8981\u83b7\u5f97\u67d0\u4e00\u6761\uff0c\u53ef\u4ee5\u7528 os.environ.get('key') >>> import os >>> os . environ . get ( 'JAVA_HOME' ) 'C: \\\\ Program Files \\\\ Java \\\\ jdk1.8.0_201' \u83b7\u5f97\u5f53\u524d\u76ee\u5f55 getcwd \u00b6 os.getcwd() >>> import os >>> os . getcwd () 'C: \\\\ Users \\\\ pr919' \u5217\u51fa\u76ee\u5f55 listdir\u3001walk \u00b6 os.listdir(path) \uff0c\u5355\u5c42\u5217\u51fa\uff1bpath\u53ef\u4ee5\u662f\u7edd\u5bf9\u8def\u5f84\u6216\u76f8\u5bf9\u8def\u5f84\uff0c\u4e0d\u586b\u9ed8\u8ba4\u5f53\u524d\u76ee\u5f55 os.walk(path) \uff0c\u904d\u5386\u5217\u51fa\uff1b listdir() \u5217\u51fapath\u4e0b\u4e00\u5c42\u7684\u76ee\u5f55\u548c\u6587\u4ef6\uff0c\u4e0d\u5305\u62ec\u5b50\u76ee\u5f55 >>> import os >>> os . listdir () >>> os . listdir ( r 'D:\\---Programming---\\Python\\Python' ) [ 'DLLs' , 'Doc' , 'include' , 'Lib' , 'libs' , 'LICENSE.txt' , 'NEWS.txt' , 'python-3.8.3-amd64.exe' , 'python.exe' , 'python3.dll' , 'python38.dll' , 'pythonw.exe' , 'Scripts' , 'tcl' , 'Tools' , 'vcruntime140.dll' , 'vcruntime140_1.dll' ] >>> for i in os . listdir ( r 'D:\\---Programming---\\Python\\Python' ): ... print ( i ) ... DLLs Doc include Lib libs LICENSE . txt NEWS . txt python - 3.8.3 - amd64 . exe python . exe python3 . dll python38 . dll pythonw . exe Scripts tcl Tools vcruntime140 . dll vcruntime140_1 . dll walk() \u5217\u51fapath\u4e0b\u7684\u76ee\u5f55\u548c\u6587\u4ef6\uff0c\u5305\u62ec\u5b50\u76ee\u5f55 import os cwd = os . getcwd () for i in os . walk ( cwd ): print ( i , end = ' \\n\\n ' ) -------------------------------------------------- # Output: ( 'D: \\\\ Project' , [ 'weather' , '__pycache__' ], [ 'app.config' , 'io.txt' , 'mo.py' , 'mo2.py' , 'my.log' , 'test.py' ]) ( 'D: \\\\ Project \\\\ weather' , [ '.idea' , '__pycache__' ], [ 'city_code.csv' , 'city_code.txt' , 'query.py' , 'Ui_weather.py' , 'weather.py' , 'weather.ui' ]) ( 'D: \\\\ Project \\\\ weather \\\\ .idea' , [ 'inspectionProfiles' ], [ 'misc.xml' , 'modules.xml' , 'weather.iml' , 'workspace.xml' ]) ( 'D: \\\\ Project \\\\ weather \\\\ .idea \\\\ inspectionProfiles' , [], [ 'Project_Default.xml' ]) ( 'D: \\\\ Project \\\\ weather \\\\ __pycache__' , [], [ 'query.cpython-37.pyc' , 'Ui_weather.cpython-37.pyc' ]) ( 'D: \\\\ Project \\\\ __pycache__' , [], [ 'mo.cpython-38.pyc' , 'Person.cpython-38.pyc' ]) os.walk(path) \u8fd4\u56de\u7684\u662f\u4e00\u4e2a \u751f\u6210\u5668 generator \u6bcf\u6b21\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u5143\u7ec4\u4e2d\u5171\u6709\u4e09\u4e2a\u5143\u7d20\uff1a(root, dirs, files) \u7b2c\u4e00\u4e2a root \u662f\u4e00\u4e2astring\uff0c\u8868\u793a\u5f53\u524d\u5c42\u7684**\u8def\u5f84** \u7b2c\u4e8c\u4e2a dirs \u662f\u4e00\u4e2alist\uff0c\u8868\u793a\u5f53\u524d\u5c42**\u62e5\u6709\u7684\u76ee\u5f55** \u7b2c\u4e09\u4e2a files \u662f\u4e00\u4e2alist\uff0c\u8868\u793a\u5f53\u524d\u5c42**\u62e5\u6709\u7684\u6587\u4ef6** \u521b\u5efa\u76ee\u5f55 mkdir\u3001makedirs \u00b6 os.mkdir(path) \uff0c \u521b\u5efa\u5355\u5c42\u76ee\u5f55 \uff1bpath\u53ef\u4ee5\u662f\u76f8\u5bf9\u8def\u5f84\u6216\u7edd\u5bf9\u8def\u5f84 \u5982\u679c\u76ee\u5f55\u5df2\u5b58\u5728\uff0c\u4f1a\u629b\u51fa FileExistsError \u9519\u8bef\u3002 # \u6807\u51c6\u521b\u5efa\u76ee\u5f55\u6d41\u7a0b dirpath = 'iodir' if not os . path . exists ( dirpath ): os . mkdir ( dirpath ) os.makedirs(dir/subdir) \uff0c \u521b\u5efa\u591a\u5c42\u76ee\u5f55 \uff1b \u5982\u679c\u76ee\u5f55\u5df2\u5b58\u5728\uff0c\u4f1a\u629b\u51fa FileExistsError \u9519\u8bef\u3002 # \u521b\u5efa\u591a\u5c42\u76ee\u5f55 dirpath = 'iodir/subiodir' if not os . path . exists ( dirpath ): os . makedirs ( dirpath ) \u5220\u9664\u76ee\u5f55 rmdir\u3001shutil.rmtree \u00b6 os.rmdir(path) \uff0c \u5220\u9664\u7a7a\u76ee\u5f55 \uff1bpath\u53ef\u4ee5\u8bf4\u76f8\u5bf9\u8def\u5f84\u6216\u7edd\u5bf9\u8def\u5f84 \u5982\u679c\u76ee\u5f55\u4e0d\u5b58\u5728\uff0c\u4f1a\u629b\u51fa FileNotFoundError \u9519\u8bef\u3002 \u5982\u679c\u76ee\u5f55\u4e0d\u4e3a\u7a7a\uff0c\u4f1a\u629b\u51fa OSError \u9519\u8bef\u3002 # \u6807\u51c6\u5220\u9664\u76ee\u5f55\u6d41\u7a0b import os dirpath = 'iodir' if os . path . exists ( dirpath ): os . rmdir ( dirpath ) -------------------------------------------------- # Output: \u6ca1\u4efb\u4f55\u8f93\u51fa \uff0c \u5220\u9664\u76ee\u5f55\u6210\u529f \u76ee\u5f55\u4e0b\u4e0d\u4e3a\u7a7a \uff0c \u8f93\u51fa \uff1a Traceback ( most recent call last ): ... OSError : [ WinError 145 ] \u76ee\u5f55\u4e0d\u662f\u7a7a\u7684 \u3002 : 'iodir' shutil,rmtree(path) \uff0c \u5220\u9664\u975e\u7a7a\u76ee\u5f55 \uff1b \u5982\u679c\u76ee\u5f55\u4e0d\u5b58\u5728\uff0c\u4f1a\u629b\u51fa FileNotFoundError \u9519\u8bef\u3002 iodir \u4e0b\u6709\u4e00\u4e2a io.txt \u6587\u4ef6\uff0c\u6267\u884c shuitl.rmtree() \u5982\u4e0b import os , shuitl dirpath = 'iodir' if os . path . exists ( dirpath ): shuitl . rmtree ( dirpath ) -------------------------------------------------- # Output: \u6ca1\u4efb\u4f55\u8f93\u51fa \uff0c \u5220\u9664\u76ee\u5f55\u6210\u529f \u76ee\u5f55\u4e0d\u5b58\u5728 \uff0c \u8f93\u51fa \uff1a Traceback ( most recent call last ): ... FileNotFoundError : [ WinError 3 ] \u7cfb\u7edf\u627e\u4e0d\u5230\u6307\u5b9a\u7684\u8def\u5f84 \u3002 : 'iodir' \u5220\u9664\u6587\u4ef6 \u00b6 os.remove(filename) \uff1b \u5220\u9664\u5355\u4e2a\u6587\u4ef6 import os filename = 'io.txt' if os . path . exists ( filename ): os . remove ( filename ) \u8def\u5f84\u62fc\u63a5 join \u00b6 os.path.join() \u4e0d\u7528\u7684\u64cd\u4f5c\u7cfb\u7edf\u8def\u5f84\u5206\u9694\u7b26\u662f\u4e0d\u540c\u7684 \u4f8b\u5982\u5728 windows \u4e0b\u662f \\ \uff0c\u5728 Linux/Unix/Mac OS X \u4e0b\u662f / \u6240\u4ee5\u4fdd\u9669\u8d77\u89c1\uff0c\u5728\u62fc\u63a5\u8def\u5f84\u7684\u65f6\u5019\u7528os\u63d0\u4f9b\u7684 os.path.join() \u51fd\u6570\u3002 \u8fd9\u6837\u5728\u4e0d\u540c\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u8fd0\u884c\u4ee3\u7801\u7684\u65f6\u5019\u90fd\u53ef\u4ee5\u5f97\u5230\u6b63\u786e\u7684\u8def\u5f84\u62fc\u63a5\u3002 import os dir = os . path . join ( 'gpdir' , 'padir' , 'subdir' ) print ( dir ) -------------------------------------------------- # Output in windows: gpdir \\ padir \\ subdir # Output in Linux/Unix gpdir / padir / subdir \u8def\u5f84\u62c6\u5206 split \u00b6 os.path.split() \u8fd4\u56de\u503c\u662f\u4e00\u4e2a**\u53cc\u5143\u7d20\u5143\u7ec4**\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u8def\u5f84\u7684\u524d\u90e8\u5206\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u662f\u6700\u540e\u7ea7\u522b\u7684\u76ee\u5f55\u6216\u6587\u4ef6\u540d >>> os . path . split ( 'gpdir\\padir\\subdir' ) ( 'gpdir \\\\ padir' , 'subdir' ) >>> os . path . split ( 'gpdir/padir/subdir' ) ( 'gpdir/padir' , 'subdir' ) \u83b7\u53d6\u6587\u4ef6\u6269\u5c55\u540d splitext \u00b6 os.path.splitext() \u8fd4\u56de\u503c\u662f\u4e00\u4e2a**\u53cc\u5143\u7d20\u5143\u7ec4**\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u8def\u5f84\u524d\u90e8\u5206\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u662f\u6700\u540e\u7ea7\u522b\u6587\u4ef6\u7684\u6269\u5c55\u540d >>> os . path . splitext ( 'gpdir/padir/subdir/io.txt' ) ( 'gpdir/padir/subdir/io' , '.txt' ) >>> os . path . splitext ( 'gpdir/padir/subdir' ) ( 'gpdir/padir/subdir' , '' ) >>> os . path . splitext ( 'gpdir\\padir\\subdir\\io.txt' ) ( 'gpdir \\\\ padir \\\\ subdir \\\\ io' , '.txt' ) >>> os . path . splitext ( 'gpdir\\padir\\subdir' ) ( 'gpdir \\\\ padir \\\\ subdir' , '' ) \u6587\u4ef6\u3001\u76ee\u5f55\u91cd\u547d\u540d \u00b6 os.rename(oldName, newName) \u53ef\u4ee5\u5bf9\u6587\u4ef6\u6216\u76ee\u5f55\u8fdb\u884c\u91cd\u547d\u540d >>> . rename ( 'testdir' , 'newtestdir' ) >>> os . rename ( 'test.txt' , 'iotest.py' ) \u5224\u65ad\u662f\u76ee\u5f55\u8fd8\u662f\u6587\u4ef6 \u00b6 os.path.isdir(path) os.path.isfile(path) \u793a\u4f8b \u00b6 \u5217\u51fa\u5f53\u524d\u76ee\u5f55\u4e0b\u6240\u6709\u76ee\u5f55 >>> [ x for x in os . listdir () if os . path . isdir ( x )] [ '.lein' , '.local' , '.m2' , '.npm' , '.ssh' , '.vim' , 'Applications' , 'Desktop' , ... ] \u5217\u51fa\u5f53\u524d\u76ee\u5f55\u4e0b\u6240\u6709 .py \u6587\u4ef6 >>> [ x for x in os . listdir () if os . path . isfile ( x ) and os . path . splitext ( x )[ 1 ] == '.py' ] [ 'apis.py' , 'config.py' , 'models.py' , 'test_db.py' , 'urls.py' , 'wsgiapp.py' ]","title":"IO"},{"location":"Python/Basic/Python-No-20-IO/#getcwd","text":"os.getcwd() >>> import os >>> os . getcwd () 'C: \\\\ Users \\\\ pr919'","title":"\u83b7\u5f97\u5f53\u524d\u76ee\u5f55 getcwd"},{"location":"Python/Basic/Python-No-20-IO/#listdirwalk","text":"os.listdir(path) \uff0c\u5355\u5c42\u5217\u51fa\uff1bpath\u53ef\u4ee5\u662f\u7edd\u5bf9\u8def\u5f84\u6216\u76f8\u5bf9\u8def\u5f84\uff0c\u4e0d\u586b\u9ed8\u8ba4\u5f53\u524d\u76ee\u5f55 os.walk(path) \uff0c\u904d\u5386\u5217\u51fa\uff1b listdir() \u5217\u51fapath\u4e0b\u4e00\u5c42\u7684\u76ee\u5f55\u548c\u6587\u4ef6\uff0c\u4e0d\u5305\u62ec\u5b50\u76ee\u5f55 >>> import os >>> os . listdir () >>> os . listdir ( r 'D:\\---Programming---\\Python\\Python' ) [ 'DLLs' , 'Doc' , 'include' , 'Lib' , 'libs' , 'LICENSE.txt' , 'NEWS.txt' , 'python-3.8.3-amd64.exe' , 'python.exe' , 'python3.dll' , 'python38.dll' , 'pythonw.exe' , 'Scripts' , 'tcl' , 'Tools' , 'vcruntime140.dll' , 'vcruntime140_1.dll' ] >>> for i in os . listdir ( r 'D:\\---Programming---\\Python\\Python' ): ... print ( i ) ... DLLs Doc include Lib libs LICENSE . txt NEWS . txt python - 3.8.3 - amd64 . exe python . exe python3 . dll python38 . dll pythonw . exe Scripts tcl Tools vcruntime140 . dll vcruntime140_1 . dll walk() \u5217\u51fapath\u4e0b\u7684\u76ee\u5f55\u548c\u6587\u4ef6\uff0c\u5305\u62ec\u5b50\u76ee\u5f55 import os cwd = os . getcwd () for i in os . walk ( cwd ): print ( i , end = ' \\n\\n ' ) -------------------------------------------------- # Output: ( 'D: \\\\ Project' , [ 'weather' , '__pycache__' ], [ 'app.config' , 'io.txt' , 'mo.py' , 'mo2.py' , 'my.log' , 'test.py' ]) ( 'D: \\\\ Project \\\\ weather' , [ '.idea' , '__pycache__' ], [ 'city_code.csv' , 'city_code.txt' , 'query.py' , 'Ui_weather.py' , 'weather.py' , 'weather.ui' ]) ( 'D: \\\\ Project \\\\ weather \\\\ .idea' , [ 'inspectionProfiles' ], [ 'misc.xml' , 'modules.xml' , 'weather.iml' , 'workspace.xml' ]) ( 'D: \\\\ Project \\\\ weather \\\\ .idea \\\\ inspectionProfiles' , [], [ 'Project_Default.xml' ]) ( 'D: \\\\ Project \\\\ weather \\\\ __pycache__' , [], [ 'query.cpython-37.pyc' , 'Ui_weather.cpython-37.pyc' ]) ( 'D: \\\\ Project \\\\ __pycache__' , [], [ 'mo.cpython-38.pyc' , 'Person.cpython-38.pyc' ]) os.walk(path) \u8fd4\u56de\u7684\u662f\u4e00\u4e2a \u751f\u6210\u5668 generator \u6bcf\u6b21\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u5143\u7ec4\u4e2d\u5171\u6709\u4e09\u4e2a\u5143\u7d20\uff1a(root, dirs, files) \u7b2c\u4e00\u4e2a root \u662f\u4e00\u4e2astring\uff0c\u8868\u793a\u5f53\u524d\u5c42\u7684**\u8def\u5f84** \u7b2c\u4e8c\u4e2a dirs \u662f\u4e00\u4e2alist\uff0c\u8868\u793a\u5f53\u524d\u5c42**\u62e5\u6709\u7684\u76ee\u5f55** \u7b2c\u4e09\u4e2a files \u662f\u4e00\u4e2alist\uff0c\u8868\u793a\u5f53\u524d\u5c42**\u62e5\u6709\u7684\u6587\u4ef6**","title":"\u5217\u51fa\u76ee\u5f55 listdir\u3001walk"},{"location":"Python/Basic/Python-No-20-IO/#mkdirmakedirs","text":"os.mkdir(path) \uff0c \u521b\u5efa\u5355\u5c42\u76ee\u5f55 \uff1bpath\u53ef\u4ee5\u662f\u76f8\u5bf9\u8def\u5f84\u6216\u7edd\u5bf9\u8def\u5f84 \u5982\u679c\u76ee\u5f55\u5df2\u5b58\u5728\uff0c\u4f1a\u629b\u51fa FileExistsError \u9519\u8bef\u3002 # \u6807\u51c6\u521b\u5efa\u76ee\u5f55\u6d41\u7a0b dirpath = 'iodir' if not os . path . exists ( dirpath ): os . mkdir ( dirpath ) os.makedirs(dir/subdir) \uff0c \u521b\u5efa\u591a\u5c42\u76ee\u5f55 \uff1b \u5982\u679c\u76ee\u5f55\u5df2\u5b58\u5728\uff0c\u4f1a\u629b\u51fa FileExistsError \u9519\u8bef\u3002 # \u521b\u5efa\u591a\u5c42\u76ee\u5f55 dirpath = 'iodir/subiodir' if not os . path . exists ( dirpath ): os . makedirs ( dirpath )","title":"\u521b\u5efa\u76ee\u5f55 mkdir\u3001makedirs"},{"location":"Python/Basic/Python-No-20-IO/#rmdirshutilrmtree","text":"os.rmdir(path) \uff0c \u5220\u9664\u7a7a\u76ee\u5f55 \uff1bpath\u53ef\u4ee5\u8bf4\u76f8\u5bf9\u8def\u5f84\u6216\u7edd\u5bf9\u8def\u5f84 \u5982\u679c\u76ee\u5f55\u4e0d\u5b58\u5728\uff0c\u4f1a\u629b\u51fa FileNotFoundError \u9519\u8bef\u3002 \u5982\u679c\u76ee\u5f55\u4e0d\u4e3a\u7a7a\uff0c\u4f1a\u629b\u51fa OSError \u9519\u8bef\u3002 # \u6807\u51c6\u5220\u9664\u76ee\u5f55\u6d41\u7a0b import os dirpath = 'iodir' if os . path . exists ( dirpath ): os . rmdir ( dirpath ) -------------------------------------------------- # Output: \u6ca1\u4efb\u4f55\u8f93\u51fa \uff0c \u5220\u9664\u76ee\u5f55\u6210\u529f \u76ee\u5f55\u4e0b\u4e0d\u4e3a\u7a7a \uff0c \u8f93\u51fa \uff1a Traceback ( most recent call last ): ... OSError : [ WinError 145 ] \u76ee\u5f55\u4e0d\u662f\u7a7a\u7684 \u3002 : 'iodir' shutil,rmtree(path) \uff0c \u5220\u9664\u975e\u7a7a\u76ee\u5f55 \uff1b \u5982\u679c\u76ee\u5f55\u4e0d\u5b58\u5728\uff0c\u4f1a\u629b\u51fa FileNotFoundError \u9519\u8bef\u3002 iodir \u4e0b\u6709\u4e00\u4e2a io.txt \u6587\u4ef6\uff0c\u6267\u884c shuitl.rmtree() \u5982\u4e0b import os , shuitl dirpath = 'iodir' if os . path . exists ( dirpath ): shuitl . rmtree ( dirpath ) -------------------------------------------------- # Output: \u6ca1\u4efb\u4f55\u8f93\u51fa \uff0c \u5220\u9664\u76ee\u5f55\u6210\u529f \u76ee\u5f55\u4e0d\u5b58\u5728 \uff0c \u8f93\u51fa \uff1a Traceback ( most recent call last ): ... FileNotFoundError : [ WinError 3 ] \u7cfb\u7edf\u627e\u4e0d\u5230\u6307\u5b9a\u7684\u8def\u5f84 \u3002 : 'iodir'","title":"\u5220\u9664\u76ee\u5f55 rmdir\u3001shutil.rmtree"},{"location":"Python/Basic/Python-No-20-IO/#_1","text":"os.remove(filename) \uff1b \u5220\u9664\u5355\u4e2a\u6587\u4ef6 import os filename = 'io.txt' if os . path . exists ( filename ): os . remove ( filename )","title":"\u5220\u9664\u6587\u4ef6"},{"location":"Python/Basic/Python-No-20-IO/#join","text":"os.path.join() \u4e0d\u7528\u7684\u64cd\u4f5c\u7cfb\u7edf\u8def\u5f84\u5206\u9694\u7b26\u662f\u4e0d\u540c\u7684 \u4f8b\u5982\u5728 windows \u4e0b\u662f \\ \uff0c\u5728 Linux/Unix/Mac OS X \u4e0b\u662f / \u6240\u4ee5\u4fdd\u9669\u8d77\u89c1\uff0c\u5728\u62fc\u63a5\u8def\u5f84\u7684\u65f6\u5019\u7528os\u63d0\u4f9b\u7684 os.path.join() \u51fd\u6570\u3002 \u8fd9\u6837\u5728\u4e0d\u540c\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u8fd0\u884c\u4ee3\u7801\u7684\u65f6\u5019\u90fd\u53ef\u4ee5\u5f97\u5230\u6b63\u786e\u7684\u8def\u5f84\u62fc\u63a5\u3002 import os dir = os . path . join ( 'gpdir' , 'padir' , 'subdir' ) print ( dir ) -------------------------------------------------- # Output in windows: gpdir \\ padir \\ subdir # Output in Linux/Unix gpdir / padir / subdir","title":"\u8def\u5f84\u62fc\u63a5 join"},{"location":"Python/Basic/Python-No-20-IO/#split","text":"os.path.split() \u8fd4\u56de\u503c\u662f\u4e00\u4e2a**\u53cc\u5143\u7d20\u5143\u7ec4**\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u8def\u5f84\u7684\u524d\u90e8\u5206\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u662f\u6700\u540e\u7ea7\u522b\u7684\u76ee\u5f55\u6216\u6587\u4ef6\u540d >>> os . path . split ( 'gpdir\\padir\\subdir' ) ( 'gpdir \\\\ padir' , 'subdir' ) >>> os . path . split ( 'gpdir/padir/subdir' ) ( 'gpdir/padir' , 'subdir' )","title":"\u8def\u5f84\u62c6\u5206 split"},{"location":"Python/Basic/Python-No-20-IO/#splitext","text":"os.path.splitext() \u8fd4\u56de\u503c\u662f\u4e00\u4e2a**\u53cc\u5143\u7d20\u5143\u7ec4**\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u8def\u5f84\u524d\u90e8\u5206\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u662f\u6700\u540e\u7ea7\u522b\u6587\u4ef6\u7684\u6269\u5c55\u540d >>> os . path . splitext ( 'gpdir/padir/subdir/io.txt' ) ( 'gpdir/padir/subdir/io' , '.txt' ) >>> os . path . splitext ( 'gpdir/padir/subdir' ) ( 'gpdir/padir/subdir' , '' ) >>> os . path . splitext ( 'gpdir\\padir\\subdir\\io.txt' ) ( 'gpdir \\\\ padir \\\\ subdir \\\\ io' , '.txt' ) >>> os . path . splitext ( 'gpdir\\padir\\subdir' ) ( 'gpdir \\\\ padir \\\\ subdir' , '' )","title":"\u83b7\u53d6\u6587\u4ef6\u6269\u5c55\u540d splitext"},{"location":"Python/Basic/Python-No-20-IO/#_2","text":"os.rename(oldName, newName) \u53ef\u4ee5\u5bf9\u6587\u4ef6\u6216\u76ee\u5f55\u8fdb\u884c\u91cd\u547d\u540d >>> . rename ( 'testdir' , 'newtestdir' ) >>> os . rename ( 'test.txt' , 'iotest.py' )","title":"\u6587\u4ef6\u3001\u76ee\u5f55\u91cd\u547d\u540d"},{"location":"Python/Basic/Python-No-20-IO/#_3","text":"os.path.isdir(path) os.path.isfile(path)","title":"\u5224\u65ad\u662f\u76ee\u5f55\u8fd8\u662f\u6587\u4ef6"},{"location":"Python/Basic/Python-No-20-IO/#_4","text":"\u5217\u51fa\u5f53\u524d\u76ee\u5f55\u4e0b\u6240\u6709\u76ee\u5f55 >>> [ x for x in os . listdir () if os . path . isdir ( x )] [ '.lein' , '.local' , '.m2' , '.npm' , '.ssh' , '.vim' , 'Applications' , 'Desktop' , ... ] \u5217\u51fa\u5f53\u524d\u76ee\u5f55\u4e0b\u6240\u6709 .py \u6587\u4ef6 >>> [ x for x in os . listdir () if os . path . isfile ( x ) and os . path . splitext ( x )[ 1 ] == '.py' ] [ 'apis.py' , 'config.py' , 'models.py' , 'test_db.py' , 'urls.py' , 'wsgiapp.py' ]","title":"\u793a\u4f8b"},{"location":"Python/Basic/Python-No-3-Judge%26Loop/","text":"\u7a0b\u5e8f\u7ed3\u6784\uff1a\u5224\u65ad\u4e0e\u5faa\u73af Judgment&circulation \u00b6 \uff01\uff01\u4e0d\u8981\u7528\u6d6e\u70b9\u6570\u6bd4\u8f83\u76f8\u7b49\uff01\uff01 \u5224\u65ad \u00b6 if condition : print () elif condition : print () else : print () \u4f8b\u5982 age = 20 if age > = 6 : print ( 'teenager' ) elif age >= 18 : print ( 'adult' ) else : print ( 'kid' ) \u8fd8\u53ef\u4ee5\u7b80\u5199 if x : print ( 'True' ) \u6216 if x : print ( 'True' ) \u53ea\u8981 x \u662f\u975e\u96f6\u6570\u503c\u3001\u975e\u7a7a\u5b57\u7b26\u4e32\u3001\u975e\u7a7alist\u3001\u975e\u7a7atuple\uff0c\u4e5f\u4e0d\u662fNone\uff0c\u5c31\u5224\u65ad\u4e3aTrue\uff0c\u5426\u5219\u4e3aFalse \u5faa\u73af \u00b6 for \u00b6 for x in Iterable : do sth \u4f8b\u5982 Li = [ 1 , 2 , 3 , 4 , 5 , 6 ] sum = 0 for x in Li : sum += x print ( sum ) # 21 sum = 0 for x in [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ]: sum = sum + x print ( sum ) #55 range() \u00b6 >>> range ( 5 ) 0 , 1 , 2 , 3 , 4 >>> list ( range ( 5 )) [ 0 , 1 , 2 , 3 , 4 ] # \u4ece1\u52a0\u5230100 sum = 0 for x in range ( 101 ): sum = sum + x print ( sum ) # 5050 while \u00b6 while condition : do sth sum = 0 n = 99 while n > 0 : sum = sum + n n = n - 2 print ( sum ) break \u00b6 \u8df3\u51fa\u6574\u4e2a\u5faa\u73af\uff0c\u4e14\u4e0d\u6267\u884celse\u5b50\u53e5 continue \u00b6 \u8df3\u51fa\u672c\u6b21\u5faa\u73af else \u00b6 else \u5b50\u53e5\u4f1a\u5728\u5faa\u73af\u4e0d\u6ee1\u8db3\u6761\u4ef6\u9000\u51fa\u65f6\u6267\u884c \u4f46\u5982\u679c break \u8df3\u51fa\u5faa\u73af\u65f6\uff0c\u4e0d\u4f1a\u6267\u884celse\u5b50\u53e5 sum = 0 n = 99 while n > 0 : sum = sum + n n = n - 2 else : print ( 'else' ) # \u5faa\u73af\u7ed3\u675f\u540e\u4f1a\u6267\u884c\u8fd9\u53e5\u8bdd print ( sum ) --------------------------------- # Output: else 2500 sum = 0 n = 99 while n > 0 : sum = sum + n n = n - 2 if n < 10 : break # n \u5c0f\u4e8e 10\u7684\u65f6\u5019\u4f1a\u8df3\u51fa\u5faa\u73af\uff0c\u5e76\u4e14\u4e0d\u4f1a\u6267\u884c else \u5b50\u53e5 else : print ( 'else' ) print ( sum ) --------------------------------- # Output: 2475 pass \u00b6 pass \u8bed\u53e5\u4ec0\u4e48\u4e5f\u4e0d\u505a\u3002\u5f53\u8bed\u6cd5\u4e0a\u9700\u8981\u4e00\u4e2a\u8bed\u53e5\uff0c\u4f46\u7a0b\u5e8f\u9700\u8981\u4ec0\u4e48\u52a8\u4f5c\u4e5f\u4e0d\u505a\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u5b83\u3002 >>> while True : ... pass # Busy-wait for keyboard interrupt (Ctrl+C) >>> class MyEmptyClass : ... pass >>> def initlog ( * args ): ... pass # Remember to implement this!","title":"\u5224\u65ad\u548c\u5faa\u73af"},{"location":"Python/Basic/Python-No-3-Judge%26Loop/#judgmentcirculation","text":"\uff01\uff01\u4e0d\u8981\u7528\u6d6e\u70b9\u6570\u6bd4\u8f83\u76f8\u7b49\uff01\uff01","title":"Judgment&amp;circulation"},{"location":"Python/Basic/Python-No-3-Judge%26Loop/#_1","text":"if condition : print () elif condition : print () else : print () \u4f8b\u5982 age = 20 if age > = 6 : print ( 'teenager' ) elif age >= 18 : print ( 'adult' ) else : print ( 'kid' ) \u8fd8\u53ef\u4ee5\u7b80\u5199 if x : print ( 'True' ) \u6216 if x : print ( 'True' ) \u53ea\u8981 x \u662f\u975e\u96f6\u6570\u503c\u3001\u975e\u7a7a\u5b57\u7b26\u4e32\u3001\u975e\u7a7alist\u3001\u975e\u7a7atuple\uff0c\u4e5f\u4e0d\u662fNone\uff0c\u5c31\u5224\u65ad\u4e3aTrue\uff0c\u5426\u5219\u4e3aFalse","title":"\u5224\u65ad"},{"location":"Python/Basic/Python-No-3-Judge%26Loop/#_2","text":"","title":"\u5faa\u73af"},{"location":"Python/Basic/Python-No-3-Judge%26Loop/#for","text":"for x in Iterable : do sth \u4f8b\u5982 Li = [ 1 , 2 , 3 , 4 , 5 , 6 ] sum = 0 for x in Li : sum += x print ( sum ) # 21 sum = 0 for x in [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ]: sum = sum + x print ( sum ) #55","title":"for"},{"location":"Python/Basic/Python-No-3-Judge%26Loop/#range","text":">>> range ( 5 ) 0 , 1 , 2 , 3 , 4 >>> list ( range ( 5 )) [ 0 , 1 , 2 , 3 , 4 ] # \u4ece1\u52a0\u5230100 sum = 0 for x in range ( 101 ): sum = sum + x print ( sum ) # 5050","title":"range()"},{"location":"Python/Basic/Python-No-3-Judge%26Loop/#while","text":"while condition : do sth sum = 0 n = 99 while n > 0 : sum = sum + n n = n - 2 print ( sum )","title":"while"},{"location":"Python/Basic/Python-No-3-Judge%26Loop/#break","text":"\u8df3\u51fa\u6574\u4e2a\u5faa\u73af\uff0c\u4e14\u4e0d\u6267\u884celse\u5b50\u53e5","title":"break"},{"location":"Python/Basic/Python-No-3-Judge%26Loop/#continue","text":"\u8df3\u51fa\u672c\u6b21\u5faa\u73af","title":"continue"},{"location":"Python/Basic/Python-No-3-Judge%26Loop/#else","text":"else \u5b50\u53e5\u4f1a\u5728\u5faa\u73af\u4e0d\u6ee1\u8db3\u6761\u4ef6\u9000\u51fa\u65f6\u6267\u884c \u4f46\u5982\u679c break \u8df3\u51fa\u5faa\u73af\u65f6\uff0c\u4e0d\u4f1a\u6267\u884celse\u5b50\u53e5 sum = 0 n = 99 while n > 0 : sum = sum + n n = n - 2 else : print ( 'else' ) # \u5faa\u73af\u7ed3\u675f\u540e\u4f1a\u6267\u884c\u8fd9\u53e5\u8bdd print ( sum ) --------------------------------- # Output: else 2500 sum = 0 n = 99 while n > 0 : sum = sum + n n = n - 2 if n < 10 : break # n \u5c0f\u4e8e 10\u7684\u65f6\u5019\u4f1a\u8df3\u51fa\u5faa\u73af\uff0c\u5e76\u4e14\u4e0d\u4f1a\u6267\u884c else \u5b50\u53e5 else : print ( 'else' ) print ( sum ) --------------------------------- # Output: 2475","title":"else"},{"location":"Python/Basic/Python-No-3-Judge%26Loop/#pass","text":"pass \u8bed\u53e5\u4ec0\u4e48\u4e5f\u4e0d\u505a\u3002\u5f53\u8bed\u6cd5\u4e0a\u9700\u8981\u4e00\u4e2a\u8bed\u53e5\uff0c\u4f46\u7a0b\u5e8f\u9700\u8981\u4ec0\u4e48\u52a8\u4f5c\u4e5f\u4e0d\u505a\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u5b83\u3002 >>> while True : ... pass # Busy-wait for keyboard interrupt (Ctrl+C) >>> class MyEmptyClass : ... pass >>> def initlog ( * args ): ... pass # Remember to implement this!","title":"pass"},{"location":"Python/Basic/Python-No-4-Data-Type/","text":"\u57fa\u7840\u77e5\u8bc6\uff1a\u6570\u636e\u7c7b\u578b \u5e38\u89c1\u5185\u7f6e\u7c7b\u578b \u00b6 \u5185\u7f6e\u7c7b\u578b\uff1a None\uff08\u5168\u5c40\u53ea\u6709\u4e00\u4e2a\uff09 \u6570\u503c\u7c7b\u578b\uff1aint\u3001float\u3001complax\uff08\u590d\u6570\uff09\u3001bool \u8fed\u4ee3\u7c7b\u578b \u5e8f\u5217\u7c7b\u578b\uff1alist\u3001bytes\u3001range\u3001tuple\u3001string\u3001array \u6620\u5c04\u7c7b\u578b\uff1adict \u96c6\u5408\u7c7b\u578b\uff1aset\u3001frozenset \u4e0a\u4e0b\u6587\u7ba1\u7406\u7c7b\u578b\uff1awith \u53ef\u53d8\u7c7b\u578b\uff1alist\u3001set\u3001dict \u4e0d\u53ef\u53d8\u7c7b\u578b\uff1aint\u3001float\u3001string\u3001tuple \u57fa\u672c\u6570\u636e\u7c7b\u578b \u00b6 \u6574\u578b \u00b6 \u53ef\u4ee5\u662f\u4efb\u610f\u5927\u5c0f\u7684\u6574\u6570 \u4e0e\u6570\u5b66\u4e0a\u7684\u8868\u793a\u65b9\u6cd5\u4e00\u6837 \u5982\uff1a1\uff0c100\uff0c-800\uff0c0 \u53ef\u4ee5\u7528\u5341\u516d\u8fdb\u5236\u8868\u793a\u6cd5 \u5982\uff1a0xFF00, 0xab54f \u5e38\u7528\u57fa\u672c\u8fd0\u7b97 \u00b6 \u52a0\uff08+\uff09 \u51cf\uff08-\uff09 \u4e58\uff08*\uff09 \u9664\uff08/\uff09 \u6a21\uff08%\uff09 >>> 3 + 2 5 >>> 3 - 2 1 >>> 3 * 2 6 >>> 3 / 2 1.5 >>> 2 + 3 * 4 14 >>> ( 2 + 3 ) * 4 20 >>> 17 % 3 2 \u9664\u6cd5\u8fd0\u7b97 \uff08/\uff09\u6c38\u8fdc\u8fd4\u56de\u6d6e\u70b9\u578b >>> 9 / 3 3.0 \u4e58\u65b9\uff08**\uff09 \u622a\u65ad\u9664\u6cd5\u3001\u6574\u6570\u9664\uff08//\uff09 >>> 3 ** 2 9 >>> 3 ** 3 27 >>> 17 // 3 5 \u5305\u542b\u591a\u79cd\u6df7\u5408\u7c7b\u578b\u8fd0\u7b97\u6570\u7684\u8fd0\u7b97\u4f1a\u628a\u6574\u6570\u8f6c\u6362\u4e3a\u6d6e\u70b9\u6570 >>> 4 * 3.75 - 1 14.0 \u6d6e\u70b9\u6570 \u00b6 \u5373\u5c0f\u6570 \u5982\uff1a1.2\uff0c524.33\uff0c-9.11 \u5982\u679c\u662f\u5f88\u5927\u6216\u5f88\u5c0f\u7684\u6d6e\u70b9\u6570\uff0c\u5fc5\u987b\u7528\u79d1\u5b66\u8ba1\u6570\u6cd5\u8868\u793a\uff0c\u7528 e+\u6307\u6570 \u4ee3\u66ff\u5e95\u6570 10^\u6307\u6570 \uff0c\u5982\uff1a 1.23\u00d710^9 \u5c31\u662f 1.23e9 \u6216 12.3e8\uff0c 0.000012 \u5c31\u662f 1.2e-5 \u6d6e\u70b9\u6570\u8fd0\u7b97\u53ef\u80fd\u4f1a\u6709\u56db\u820d\u4e94\u5165\u7684\u8bef\u5dee \u5b57\u7b26\u4e32 \u00b6 str1 = 'OK' # OK str2 = \"OK\" # OK str3 = \"I'm ok.\" # I'm ok. str4 = 'I \\' m ok.' # I'm ok. str5 = \"I \\\" m ok.\" # I\"m ok. str6 = 'I\"m ok.' # I\"m ok. str7 = '''\u8fd9\u662f\u4e00\u4e2a\u6bb5\u843d\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u6362\u884c\uff0c\u4e0d\u9700\u53cd\u659c\u6760\u6765\u58f0\u660e\u8bed\u53e5\u672a\u7ed3\u675f \u76f4\u5230\u9047\u5230\u4e0b\u4e00\u4e2a\u4e09\u5355\u5f15\u53f7\uff0c\u624d\u8ba4\u4e3a\u7ed3\u675f \u4f46\u662f\u6362\u884c\u4f1a\u8ddf\u7740\u6362\u884c\uff0c\u7a7a\u683c\u4f1a\u8ddf\u7740\u7a7a\u683c''' \"\"\" str7\u8f93\u51fa\u4e3a\uff1a \u8fd9\u662f\u4e00\u4e2a\u6bb5\u843d\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u6362\u884c\uff0c\u4e0d\u9700\u53cd\u659c\u6760\u6765\u58f0\u660e\u8bed\u53e5\u672a\u7ed3\u675f \u76f4\u5230\u9047\u5230\u4e0b\u4e00\u4e2a\u4e09\u5355\u5f15\u53f7\uff0c\u624d\u8ba4\u4e3a\u7ed3\u675f \u4f46\u662f\u6362\u884c\u4f1a\u8ddf\u7740\u6362\u884c\uff0c\u7a7a\u683c\u4f1a\u8ddf\u7740\u7a7a\u683c \"\"\" \\ n \u6362\u884c \\ t \u7f29\u8fdb # \u4f7f\u7528\u8f6c\u4e49\u5b57\u7b26 str8 = 'ab \\n cd' ''' str8\u8f93\u51fa\u4e3a\uff1a ab cd ''' r '\u5b57\u7b26\u4e32' \u8868\u793a\u4e0d\u8f6c\u4e49 # \u4e0d\u8f6c\u4e49 str9 = r 'ab\\ncd' # ab\\ncd \u8f6c\u4e49\u5b57\u7b26 \u8f6c\u4e49\u5b57\u7b26 \u63cf\u8ff0 \\ \u7eed\u884c\u7b26 \\ \u53cd\u659c\u6760 \\' \u5355\u5f15\u53f7 \\\" \u53cc\u5f15\u53f7 \\a \u54cd\u94c3 \\b \u9000\u683c \\e \u8f6c\u4e49 \\000 \u7a7a \\n \u6362\u884c \\v \u7eb5\u5411\u5236\u8868\u7b26 \\t \u6a2a\u5411\u5236\u8868\u7b26 \\r \u56de\u8f66 \\f \u6362\u9875 \\o \u516b\u8fdb\u5236 \\x \u5341\u516d\u8fdb\u5236 \u5e03\u5c14\u503c \u00b6 True False \u53ef\u4ee5\u7528 and , or , not \u8fd0\u7b97 \u7a7a\u503c \u00b6 \u7a7a\u503c\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u503c\uff0c\u7528 None \u8868\u793a\u3002 None \u4e0d\u7b49\u4e8e 0 \uff0c 0 \u662f\u6709\u610f\u4e49\u7684. \u5168\u5c40\u53ea\u6709\u4e00\u4e2aNone \u590d\u5408\u6570\u636e\u7c7b\u578b \u00b6 \u5217\u8868 List \u00b6 \u4e00\u79cd \u6709\u5e8f\u7684\u3001\u53ef\u53d8\u7684 \u5143\u7d20\u96c6\u5408 \u7528 [ ] \u6807\u8bc6 \u53ef\u968f\u673a\u6dfb\u52a0\u548c\u5220\u9664\u5176\u4e2d\u7684\u5143\u7d20 \u53ef\u7406\u89e3\u4e3a\u53ef\u53d8\u7684\u6570\u7ec4 \u662f\u4e00\u79cd\u590d\u5408\u6570\u636e\u7c7b\u578b List \u4e2d\u7684\u5143\u7d20\u53ef\u4ee5\u4e0d\u540c\u7c7b\u578b \u533a\u522b\u4e8e\u5143\u7ec4Tuple\uff1aList \u4e2d\u7684\u5143\u7d20\u53ef\u53d8 >>> name = [ 'Alice' , 'Boii' , 'Chen' , 'Dannie' , 'Eva' ] >>> print ( name ) [ 'Alice' , 'Boii' , 'Chen' , 'Dannie' , 'Eva' ] List\u7d22\u5f15 \u00b6 | P | y | t | h | o | n | 0 1 2 3 4 5 # \u4ece\u5de6\u5f80\u53f3\uff0c\u4e0b\u6807\u4ece0\u5f00\u59cb - 6 - 5 - 4 - 3 - 2 - 1 # \u4ece\u53f3\u5f80\u5de6\uff0c\u4e0b\u6807\u4ece-1\u5f00\u59cb List\u7684\u589e\u5220\u6539\u67e5 \u00b6 \u521d\u59cb\u5316 \u00b6 listName = [element1, element2, element3, ...] \u589e \u00b6 \u8ffd\u52a0\u5230\u672b\u5c3e append \u00b6 listName.append(value) >>> name = [ 'Alice' , 'Boii' , 'Chen' , 'Dannie' , 'Eva' ] >>> name . append ( 'Fit' ) >>> name [ 'Alice' , 'Boii' , 'Chen' , 'Dannie' , 'Eva' , 'Fit' ] \u63d2\u5165\u5230\u6307\u5b9a\u4f4d\u7f6e insert \u00b6 listName.insert(index, value) >>> name = [ 'Alice' , 'Boii' , 'Chen' , 'Dannie' , 'Eva' ] >>> name . insert ( 3 , 'Fit' ) >>> name [ 'Alice' , 'Boii' , 'Chen' , 'Fit' , 'Dannie' , 'Eva' ] \u5220 \u00b6 \u5220\u9664\u672b\u5c3e\u5143\u7d20 pop \u00b6 listName.pop() >>> name = [ 'Alice' , 'Boii' , 'Chen' , 'Dannie' , 'Eva' ] >>> >>> name . pop () 'Eva' >>> name [ 'Alice' , 'Boii' , 'Chen' , 'Dannie' ] \u5220\u9664\u6307\u5b9a\u4f4d\u7f6e\u5143\u7d20 pop \u00b6 listName.pop(index) \u6216 del listName[index] >>> name = [ 'Alice' , 'Boii' , 'Chen' , 'Dannie' , 'Eva' ] >>> name . pop ( 3 ) 'Dannie' >>> name [ 'Alice' , 'Boii' , 'Chen' , 'Eva' ] >>> del name [ 2 ] [ 'Alice' , 'Boii' , 'Eva' ] \u6539 \u00b6 \u4fee\u6539\u67d0\u4e2a\u5143\u7d20\uff0c\u76f4\u63a5\u7ed9\u8be5\u5143\u7d20\u8d4b\u65b0\u503c\u5373\u53ef listName[index] = value >>> name = [ 'Alice' , 'Boii' , 'Chen' , 'Dannie' , 'Eva' ] >>> >>> name [ 2 ] = 'Cai' >>> name [ 'Alice' , 'Boii' , 'Cai' , 'Dannie' , 'Eva' ] \u67e5 \u00b6 \u4f7f\u7528\u4e0b\u6807\u6765\u8bbf\u95eeList\u4e2d\u7684\u5143\u7d20 listName[index] name = [ 'Alice' , 'Boii' , 'Chen' , 'Dannie' , 'Eva' ] print ( name [ 0 ]) # 'Alice' \u8bbf\u95eeList\u7b2c\u4e00\u4e2a\u5143\u7d20 print ( name [ 1 ]) # 'Boii' \u8bbf\u95eeList\u7b2c\u4e8c\u4e2a\u5143\u7d20 print ( name [ - 1 ]) # 'Eva' \u8bbf\u95eeList\u6700\u540e\u4e00\u4e2a\u5143\u7d20 \u83b7\u5f97\u957f\u5ea6 len() \u00b6 len(List\u540d) >>> name = [ 'Alice' , 'Boii' , 'Chen' , 'Dannie' , 'Eva' ] >>> len ( name ) 5 List\u4e2d\u5143\u7d20\u53ef\u4ee5\u4e0d\u540c\u7c7b\u578b \u00b6 >>> L = [ 'Boii' , 23 , True , 'https://tcp404.com' ] >>> L [ 'Boii' , 23 , True , 'https://tcp404.com' ] List\u5d4c\u5957List \u00b6 \u7c7b\u4f3c\u4e8e\u591a\u7ef4\u6570\u7ec4\u7684\u6982\u5ff5 >>> l_main = [ 'Boii' , 23 , [ 'https://' , 'tcp404' , '.com' ], 443 ] >>> len ( l_main ) 4 >>> len ( l_main [ 2 ]) 3 \u7b49\u4ef7\u4e8e >>> l_sub = [ 'https://' , 'tcp404' , '.com' ] >>> l_main = [ 'Boii' , 23 , l_sub , 443 ] #\u83b7\u53d6 tcp404\u53ef\u4ee5\u7528\u4e00\u4e0b\u65b9\u5f0f >>> l_main [ 2 ][ 1 ] 'tcp404' \u7a7aList \u00b6 >>> L = [] >>> len ( L ) 0 >>> li = list () >>> len ( li ) 0 \u5143\u7ec4 Tuple \u00b6 \u4e00\u79cd \u6709\u5e8f\u7684\u3001\u4e0d\u53ef\u53d8\u7684 \u5143\u7d20\u96c6\u5408 \u7528 ( ) \u6807\u8bc6 Tuple\u4e2d\u7684\u5143\u7d20\u4e00\u65e6\u521d\u59cb\u5316\u5c31\u4e0d\u53ef\u53d8 \u53ef\u7406\u89e3\u4e3a\u4e0d\u53ef\u53d8\u7684\u6570\u7ec4 \u662f\u4e00\u79cd\u590d\u5408\u6570\u636e\u7c7b\u578b Tuple\u4e2d\u7684\u5143\u7d20\u53ef\u4ee5\u4e0d\u540c\u7c7b\u578b \u533a\u522b\u4e8eList\uff1aTuple \u4e2d\u7684\u5143\u7d20 \u4e0d\u53ef\u53d8 \u521d\u59cb\u5316 \u00b6 tupleName = (elem1, elem2, elem3, ...) Tuple\u7d22\u5f15 \u00b6 | P | y | t | h | o | n | 0 1 2 3 4 5 # \u4ece\u5de6\u5f80\u53f3\uff0c\u4e0b\u6807\u4ece0\u5f00\u59cb - 6 - 5 - 4 - 3 - 2 - 1 # \u4ece\u53f3\u5f80\u5de6\uff0c\u4e0b\u6807\u4ece-1\u5f00\u59cb Tuple\u7684\u589e\u5220\u6539\u67e5 \u00b6 Tuple\u4e0d\u53ef\u53d8\uff0c\u6240\u4ee5\u4e0d\u53ef\u4ee5 \u589e\u52a0\u3001\u5220\u9664\u3001\u4fee\u6539\uff0c\u53ea\u80fd\u67e5\u8be2 \u67e5\u8be2\u4e0eList\u76f8\u540c \u67e5 \u00b6 tupleName[index] >>> T = ( 1 , 2 , 'Boii' ) >>> T [ 2 ] 'Boii' >>> T [ 0 ] 1 >>> T ( 1 , 2 , 'Boii' ) \u7a7aTuple () \u00b6 >>> tr = () >>> tr () \u5b9a\u4e49\u5355\u5143\u7d20\u7684Tuple (element\uff0c) \u00b6 \u4e3a\u907f\u514d\u4e0e\u6570\u5b66\u7684\u62ec\u53f7\u6df7\u6dc6\uff0c\u5b9a\u4e49\u4e00\u4e2a\u5143\u7d20\u7684Tuple\u65f6\uff0c\u8981\u5728\u5143\u7d20\u540e\u52a0\u4e0a\u9017\u53f7 >>> tr = ( 'Boii' ,) >>> tr ( 'Boii' ,) \u4e14\u5728python\u89e3\u91ca\u4e2d\uff1a tr = (1) \u4f1a\u88ab\u8ba4\u4e3a\u662f tr = 1, tr \u5c31\u53d8\u6210\u4e00\u4e2a\u666e\u901a\u7684\u6574\u578b\u53d8\u91cf tr = ('Boii') \u4f1a\u88ab\u8ba4\u4e3a\u662f tr = 'Boii', tr \u5c31\u53d8\u6210\u4e00\u4e2a\u666e\u901a\u7684\u5b57\u7b26\u4e32\u53d8\u91cf >>> tr = ( 1 ) # \u7b49\u4ef7\u4e8e tr = 1 >>> tr 1 >>> tr = ( 'Boii' ) # \u7b49\u4ef7\u4e8e tr = 'Boii' >>> tr 'Boii' >>> >>> >>> tr = ( 'Boii' ,) # \u221a \u6b63\u786e\u5b9a\u4e49\u5355\u5143\u7d20Tuple >>> tr ( 'Boii' ,) Tuple\u4e0d\u53ef\u53d8\u7684\u610f\u4e49 \u00b6 \u56e0\u4e3atuple\u4e0d\u53ef\u53d8\uff0c\u6240\u4ee5\u4ee3\u7801\u66f4\u5b89\u5168\u3002\u5982\u679c\u53ef\u80fd\uff0c\u80fd\u7528tuple\u4ee3\u66fflist\u5c31\u5c3d\u91cf\u7528tuple\u3002 \uff01\uff01\uff01\u4e0d\u53ef\u53d8Tuple\u4e2d\u7684\u53ef\u53d8\u5143\u7d20 \u00b6 Tuple\u7684\u4e0d\u53ef\u53d8\u6307\u7684\u662fTuple\u6307\u5411\u7684\u5143\u7d20\u4e0d\u53ef\u53d8 \u5982\u679c\u5143\u7d20\u4e2d\u6709 \u53ef\u53d8\u7684Listlist \uff0c\u90a3\u4e48Tuple\u4f9d\u7136\u53ef\u4ee5\u4fee\u6539 >>> t = ( 'a' , 'b' , [ 'A' , 'B' ]) >>> t [ 2 ][ 0 ] = 'X' >>> t [ 2 ][ 1 ] = 'Y' >>> t ( 'a' , 'b' , [ 'X' , 'Y' ]) \u5b9a\u4e49Tuplet\u65f6 \u4fee\u6539Tuplet\u7684\u5143\u7d20\u540e \u5b57\u5178 Dict \u00b6 \u4e00\u79cd \u65e0\u5e8f\u7684\u3001\u53ef\u53d8\u7684 \u952e-\u503c\u5bf9\u96c6\u5408 \u7528 { } \u6807\u8bc6 \u952ekey \u5fc5\u987b\u662f\u4e0d\u53ef\u53d8\u5bf9\u8c61 \uff08\u5982\u5b57\u7b26\u4e32\u3001\u6574\u6570\u3002\u800clist\uff0ctuple\u8fd9\u4e9b\u4e0d\u53ef\u4ee5\u4f5c\u4e3akey\uff09 \u952ekey \u4e0d\u53ef\u4ee5\u91cd\u590d \u952ekey \u53ef\u4ee5\u4e0d\u540c\u7c7b\u578b\uff0c\u4f46\u4e0d\u5efa\u8bae \u952ekey \u53ef\u4ee5\u662f\u53d8\u91cf\uff0c\u4f46\u662f\u8fd9\u4e2a\u53d8\u91cf\u5fc5\u987b\u6307\u5411\u5b57\u7b26\u4e32\u3001\u6574\u6570\u8fd9\u7c7b\u4e0d\u53ef\u53d8\u5bf9\u8c61 Dictionary VS List 1. Dict \u67e5\u627e\u548c\u63d2\u5165\u7684\u901f\u5ea6\u6781\u5feb\uff0c\u4e0d\u4f1a\u968f\u7740key\u7684\u589e\u52a0\u800c\u53d8\u6162\uff1b 2. Dict \u9700\u8981\u5360\u7528\u5927\u91cf\u7684\u5185\u5b58\uff0c\u5185\u5b58\u6d6a\u8d39\u591a\u3002 3. List \u67e5\u627e\u548c\u63d2\u5165\u7684\u65f6\u95f4\u968f\u7740\u5143\u7d20\u7684\u589e\u52a0\u800c\u589e\u52a0\uff1b 4. List \u5360\u7528\u7a7a\u95f4\u5c0f\uff0c\u6d6a\u8d39\u5185\u5b58\u5f88\u5c11\u3002 \u521d\u59cb\u5316 \u00b6 dictName = { key1 : value1, key2 : value2, key3 : value3, ... } d = { 'a' : 1 , 'b' : 2 , 'c' : 3 , 'd' : 4 } # \u952e\u53ef\u4ee5\u4e0d\u540c\u7c7b\u578b dd = { 'a' : 'Alice' , 'b' : 'Boii' , 18 : 'Kk' } Dict\u7d22\u5f15 \u00b6 Dict\u7684\u7d22\u5f15\u5c31\u662f \u952ekey\u3002 Dict\u7684\u589e\u5220\u6539\u67e5\u548c\u5224\u65ad \u00b6 \u589e \u00b6 dictName[key] = value >>> d = { 'a' : 1 , 'b' : 2 , 'c' : 3 , 'd' : 4 } >>> d [ 'AC' ] = 'diu' >>> d { 'a' : 1 , 'b' : 2 , 'c' : 3 , 'd' : 4 , 'AC' : 'diu' } # \u4f7f\u7528\u53d8\u91cf\u4f5c\u4e3akey >>> d = { 'a' : 1 , 'b' : 2 , 'c' : 3 , 'd' : 4 } >>> a = 'x' >>> d [ a ] = 'what' >>> d { 'a' : 1 , 'b' : 2 , 'c' : 3 , 'd' : 4 , 'x' : 'what' } \u5220 pop\u3001del \u00b6 dictName.pop(key) del dictName[key] >>> d = { 'a' : 1 , 'b' : 2 , 'c' : 3 , 'd' : 4 } >>> d . pop ( 'a' ) { 'b' : 2 , 'c' : 3 , 'd' : 4 } >>> del d [ 'c' ] { 'b' : 2 , 'd' : 4 } \u6539 \u00b6 dictName[key] = newValue \u56e0\u4e3akey\u4e0d\u80fd\u91cd\u590d\uff0c\u6240\u4ee5\u5982\u679ckey\u4e0d\u5b58\u5728\uff0c\u4f1a\u53d8\u6210\u6dfb\u52a0\uff0c\u5982\u679ckey\u5b58\u5728\uff0cnewValue\u4f1a\u8986\u76d6oldValue >>> d = { 'a' : 1 , 'b' : 2 , 'c' : 3 , 'd' : 4 } >>> d [ 'a' ] = 25 >>> d { 'a' : 25 , 'b' : 2 , 'c' : 3 , 'd' : 4 } >>> d [ 'e' ] = 15 >>> d { 'a' : 25 , 'b' : 2 , 'c' : 3 , 'd' : 4 , 'e' : 15 } \u67e5 get \u00b6 dictName.get(key) \u5982\u679ckey\u5b58\u5728\uff0c\u8fd4\u56de\u5bf9\u5e94\u7684value \u5982\u679ckey\u4e0d\u5b58\u5728\uff0c\u8fd4\u56deNone d = { 'a' : 1 , 'b' : 2 , 'c' : 3 , 'd' : 4 } d . get ( 'a' ) # 1 d . get ( 'z' ) # None dictName.get(key, return) \u5982\u679ckey\u5b58\u5728\uff0c\u8fd4\u56de\u5bf9\u5e94\u7684value \u5982\u679ckey\u4e0d\u5b58\u5728\uff0c\u8fd4\u56de\u6307\u5b9a\u7684\u8fd4\u56de\u503creturn\uff0creturn\u53ef\u4ee5\u662f\u6574\u578b\u3001\u5b57\u7b26\u4e32\uff0c\u751a\u81f3\u662fList\u7b49 >>> d = { 'a' : 1 , 'b' : 2 , 'c' : 3 , 'd' : 4 } >>> >>> d . get ( 'z' , 0 ) 0 >>> d . get ( 'z' , 'No This Key' ) 'No This Key' >>> d . get ( 'z' , [ 0 , 0 ]) [ 0 , 0 ] >>> d . get ( 'z' , { 1 : 'a' , 2 : 'b' }) { 1 : 'a' , 2 : 'b' } \u5224\u65ad in\u3001not in \u00b6 key in dictName >>> d = { 'a' : 25 , 'b' : 2 , 'c' : 3 , 'd' : 4 } >>> 'b' in d True >>> 'z' in d False \u96c6\u5408 Set \u00b6 \u4e00\u79cd \u65e0\u5e8f\u7684\u3001\u4e0d\u91cd\u590d\u7684\u3001\u53ef\u53d8\u7684 \u7684\u5143\u7d20\u7684\u96c6\u5408 \u7528 set([ ]) \u6216 {key, key, ...} \u6807\u8bc6 \u7c7b\u4f3c\u6570\u5b66\u6982\u5ff5\u4e2d\u7684\u96c6\u5408 \u53ef\u4ee5\u901a\u8fc7 Dict \u6765\u7406\u89e3\uff1aSet \u662f\u4e00\u79cd\u4e0d\u5b58\u50a8 value \u7684 Dict\uff08\u56e0\u4e3akey\u4e0d\u80fd\u91cd\u590d\uff09 \u662f\u4e00\u79cd\u590d\u5408\u6570\u636e\u7c7b\u578b Set \u4e2d\u7684\u5143\u7d20\u53ef\u4ee5\u4e0d\u540c\u7c7b\u578b Set\u7d22\u5f15 \u00b6 Set \u662f\u65e0\u5e8f\u7684\uff0c\u6240\u4ee5\u6ca1\u6709\u7d22\u5f15\uff0c\u53ea\u6709\u5143\u7d20\uff0c\u6216\u8005\u8bf4\u53ea\u6709key \u521d\u59cb\u5316 \u00b6 setName = set(key_list) setName = {key1, key2, key3, ...} >>> s1 = set ([ 1 , 2 , 3 , 'a' , ( 32 , 'a' , False ), 55 ]) >>> s1 { 1 , 2 , 3 , 55 , ( 32 , 'a' , False ), 'a' } >>> s2 = set ( 'abadfgaae' ) >>> s2 { 'g' , 'b' , 'e' , 'f' , 'd' , 'a' } >>> s3 = { 1 , 2 , 3 , 4 , 4 , 4 , 5 , 5 } >>> s3 { 1 , 2 , 3 , 4 , 5 } Set\u7684\u589e\u5220\u6539\u67e5 \u00b6 \u589e add\u3001update \u00b6 setName.add(key) \u53ea\u80fd\u6dfb\u52a0\u57fa\u672c\u6570\u636e\u7c7b\u578b setName.update(key) \u53ef\u4ee5\u6dfb\u52a0\u57fa\u672c\u6570\u636e\u7c7b\u578b\u548c\u590d\u5408\u6570\u636e\u7c7b\u578b >>> s3 = set ([ 1 , 2 , 3 , 4 , 4 , 4 , 5 , 5 ]) >>> s3 . add ( 7 ) >>> s3 { 1 , 2 , 3 , 4 , 5 , 7 } >>> s3 . update ([ 'a' , 'b' ]) >>> s3 { 1 , 2 , 3 , 4 , 5 , 7 , 'a' , 'b' } \u5220\u9664 remove\u3001discard\u3001pop \u00b6 setName.remove(key) \u5220\u9664\u6307\u5b9a\u5143\u7d20\uff0c\u5982\u679c\u5143\u7d20\u4e0d\u5b58\u5728\u4f1a\u5b58\u5728\u9519\u8bef setName.discard(key) \u5220\u9664\u6307\u5b9a\u5143\u7d20\uff0c\u5982\u679c\u5143\u7d20\u4e0d\u5b58\u5728\u4e0d\u4f1a\u5b58\u5728\u9519\u8bef setName.pop() \u968f\u673a\u5220\u9664\u4e00\u4e2a\u5143\u7d20 >>> s = set ([ 1 , 2 , 3 , 4 , 7 , 4 , 15 , 4 , 5 , 5 ]) >>> s { 1 , 2 , 3 , 4 , 5 , 7 , 15 } >>> s . remove ( 5 ) >>> s { 1 , 2 , 3 , 4 , 7 , 15 } >>> s . remove ( 20 ) Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > KeyError : 20 >>> s . discard ( 15 ) >>> s { 1 , 2 , 3 , 4 , 7 } >>> s . discard ( 20 ) >>> >>> s . pop () 4 >>> s { 2 , 3 , 1 , 7 } >>> s . pop () 3 >>> s { 2 , 1 , 7 } >>> s . pop () 2 >>> s { 1 , 7 } \u6539 remove + add \u00b6 Set \u4e2d\u6ca1\u6709\u6539\u7684\u529e\u6cd5\uff0c\u56e0\u4e3a\u96c6\u5408\u662f\u65e0\u5e8f\u7684\uff0c\u6539\u4e00\u4e2a\u5143\u7d20\u6ca1\u6709\u610f\u4e49 \u53ea\u80fd\u5220\u9664\u8981\u6539\u7684key\uff0c\u7136\u540e\u6dfb\u52a0\u65b0\u7684key setName.remove(key) setName.add(key) \u67e5 \u00b6 \u5f3a\u5236\u7c7b\u578b\u8f6c\u6362 \u00b6 \u51fd\u6570 \u63cf\u8ff0 int(x [,base]) \u5c06x\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6574\u6570 long(x [,base] ) \u5c06x\u8f6c\u6362\u4e3a\u4e00\u4e2a\u957f\u6574\u6570 float(x) \u5c06x\u8f6c\u6362\u5230\u4e00\u4e2a\u6d6e\u70b9\u6570 complex(real [,imag]) \u521b\u5efa\u4e00\u4e2a\u590d\u6570 str(x) \u5c06\u5bf9\u8c61 x \u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32 repr(x) \u5c06\u5bf9\u8c61 x \u8f6c\u6362\u4e3a\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32 eval(str) \u7528\u6765\u8ba1\u7b97\u5728\u5b57\u7b26\u4e32\u4e2d\u7684\u6709\u6548Python\u8868\u8fbe\u5f0f,\u5e76\u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61 tuple(s) \u5c06\u5e8f\u5217 s \u8f6c\u6362\u4e3a\u4e00\u4e2aTuple list(s) \u5c06\u5e8f\u5217 s \u8f6c\u6362\u4e3a\u4e00\u4e2aList set(s) \u8f6c\u6362\u4e3a\u53ef\u53d8\u96c6\u5408 dict(d) \u521b\u5efa\u4e00\u4e2aDict\u3002d \u5fc5\u987b\u662f\u4e00\u4e2a\u5e8f\u5217 (key,value)Tuple\u3002 frozenset(s) \u8f6c\u6362\u4e3a\u4e0d\u53ef\u53d8\u96c6\u5408 chr(x) \u5c06\u4e00\u4e2a\u6574\u6570\u8f6c\u6362\u4e3a\u4e00\u4e2a\u5b57\u7b26 unichr(x) \u5c06\u4e00\u4e2a\u6574\u6570\u8f6c\u6362\u4e3aUnicode\u5b57\u7b26 ord(x) \u5c06\u4e00\u4e2a\u5b57\u7b26\u8f6c\u6362\u4e3a\u5b83\u7684ASCII\u5341\u8fdb\u5236\u6574\u6570\u503c hex(x) \u5c06\u4e00\u4e2a\u6574\u6570\u8f6c\u6362\u4e3a\u4e00\u4e2a\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32 oct(x) \u5c06\u4e00\u4e2a\u6574\u6570\u8f6c\u6362\u4e3a\u4e00\u4e2a\u516b\u8fdb\u5236\u5b57\u7b26\u4e32 \u6570\u5b57 \u6574\u6570 - 1 0 1 \u6d6e\u70b9 - 0.1 0.0 1.0 \u4e8c\u8fdb\u5236 0b11 \u7ed3\u679c 3 \u516b\u8fdb\u5236 0o77 \u7ed3\u679c 63 16 \u8fdb\u5236 0xFF \u7ed3\u679c 255 \u5b57\u7b26\u4e32 < class ' str '> \u7eaf\u5b57\u7b26\u4e32 'str' \"str\" '''str''' \"\"\"str\"\"\" \u5b57\u7b26\u4e32\u6570\u5b57 ( \u4e8c\u8fdb\u5236 0 b ) '0b0' \u8f6c\u6210\u5b57\u7b26 str ( 0b10 ) \u7ed3\u679c '2' ## \u53ef\u4ee5\u524d\u7f6e\u8865\u96f6str(0b00000010) \u5b57\u7b26\u4e32\u6570\u5b57 ( \u516b\u8fdb\u5236 0 o ) '0o0' \u8f6c\u6362\u5b57\u7b26 str ( 0o77 ) \u7ed3\u679c '63' ## \u53ef\u4ee5\u524d\u7f6e\u8865\u96f6str(0o0077) \u5b57\u7b26\u4e32\u6570\u5b57 ( \u5341\u8fdb\u5236 ) '0' \u8f6c\u6362\u5b57\u7b26 str ( 100 ) \u7ed3\u679c '100' ## \u4e0d\u80fd\u524d\u7f6e\u8865\u96f6 \u5b57\u7b26\u4e32\u6570\u5b57 ( 16 \u8fdb\u5236 0 x ) '0x0' \u8f6c\u6362\u5b57\u7b26 str ( 0xFF ) \u7ed3\u679c '255' ## \u53ef\u4ee5\u524d\u7f6e\u8865\u96f6str(0x00FF) \u4e8c\u8fdb\u5236 < class ' bytes '> \u4e8c\u8fdb\u5236\u5b57\u8282\u8868\u793a b '' # ASCII \u5b57\u7b26 0-9 a-z A-Z \u7b49 \u6570\u5b57 \u8f6c \u5b57\u7b26\u4e32 \u00b6 ## 255(10\u8fdb\u5236) 0b11(2\u8fdb\u5236) 0xFF(16\u8fdb\u5236) ## (10\u8fdb\u5236\u6570) >>> bin ( 255 ) '0b11111111' >>> oct ( 255 ) '0o377' >>> hex ( 255 ) '0xff' ## (2\u8fdb\u5236\u6570) >>> bin ( 0b11 ) '0b11' >>> hex ( 0xFF ) '0xff' ## (16\u8fdb\u5236\u6570) >>> bin ( 0xFF ) '0b11111111' >>> hex ( 0xFF ) '0xff' \u5b57\u7b26\u4e32 \u8f6c \u6570\u5b57\uff08\u5341\u8fdb\u5236\u6570\uff09 \u00b6 ## '123'(\u4ee510\u8fdb\u5236\u89e3\u6790) '10'(\u4ee52\u8fdb\u5236\u89e3\u6790) 'a'(\u4ee516\u8fdb\u5236\u89e3\u6790) ## (10\u8fdb\u5236\u8868\u793a\u7684\u5b57\u7b26\u4e32) >>> int ( '123' ) 123 ## \u5341\u8fdb\u5236\u5b57\u7b26\u8f6c\u5341\u8fdb\u5236\u6570\u5b57 >>> int ( '123' , 10 ) 123 ## \u9ed8\u8ba4\u662f\u5341\u8fdb\u5236 ## (\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u5b57\u7b26\u4e32) >>> int ( '100' , 2 ) 4 ## \u4e8c\u8fdb\u5236\u7684 100 \u7b49\u4e8e \u5341\u8fdb\u5236\u7684 4\uff08\u53ef\u4ee5\u4e0d\u52a0\u524d\u7f6e 0b\uff09 >>> int ( '0b100' , 2 ) 4 ## \u4e8c\u8fdb\u5236\u7684 100 \u7b49\u4e8e \u5341\u8fdb\u5236\u7684 4 >>> int ( '0b0100' , 2 ) 4 ## \u53ef\u4ee5\u524d\u7f6e\u8865\u96f6 ## (16\u8fdb\u5236\u8868\u793a\u7684\u5b57\u7b26\u4e32) >>> int ( 'a' , 16 ) 10 ## 16\u8fdb\u5236\u7684 a \u7b49\u4e8e \u5341\u8fdb\u5236\u7684 10\uff08\u53ef\u4ee5\u4e0d\u52a0\u524d\u7f6e 0x\uff09 >>> int ( '0xa' , 16 ) 10 ## 16\u8fdb\u5236\u7684 a \u7b49\u4e8e \u5341\u8fdb\u5236\u7684 10 >>> int ( '0x0a' , 16 ) 10 ## 16\u8fdb\u5236\u7684 a \u7b49\u4e8e \u5341\u8fdb\u5236\u7684 10\uff08\u53ef\u4ee5\u524d\u7f6e\u8865\u96f6\uff09 >>> int ( '10' , 16 ) 16 ## 16\u8fdb\u5236\u768410 \u7b49\u4e8e \u5341\u8fdb\u5236\u7684 16\uff08\u53ef\u4ee5\u4e0d\u52a0\u524d\u7f6e 0x\uff09 >>> int ( '0x10' , 16 ) 16 ## 16\u8fdb\u5236\u768410 \u7b49\u4e8e \u5341\u8fdb\u5236\u7684 16 >>> int ( '0x0010' , 16 ) 16 ## 16\u8fdb\u5236\u768410 \u7b49\u4e8e \u5341\u8fdb\u5236\u7684 16\uff08\u53ef\u4ee5\u524d\u7f6e\u8865\u96f6\uff09 \u6570\u5b57 \u8f6c \u6570\u5b57 \u00b6 ## 0b11 0xFF ## \u5341\u8fdb\u5236 \u8f6c \u5341\u8fdb\u5236 >>> int ( 255 ) 255 # \u65e0\u610f\u4e49\u64cd\u4f5c >>> 255 255 # \u65e0\u610f\u4e49\u64cd\u4f5c ## \u4e8c\u8fdb\u5236 \u8f6c \u5341\u8fdb\u5236 >>> int ( 0b11 ) 3 # \u53ef\u52a0\u524d\u7f6e\u96f6 int(0b0011) >>> 0b11111111 255 # \u7b49\u4ef7 ## 16\u8fdb\u5236 \u8f6c \u5341\u8fdb\u5236 >>> int ( 0xFF ) 255 >>> 0xff 255 # \u7b49\u4ef7 \u4e14 \u5ffd\u7565\u5927\u5c0f\u5199 >>> 0xFF 255 # \u7b49\u4ef7 \u4e14 \u5ffd\u7565\u5927\u5c0f\u5199 ## \u5341\u8fdb\u5236 \u8f6c \u4e8c\u8fdb\u5236\uff08\u4f7f\u7528 \u6570\u5b57 \u8f6c \u5b57\u8282\u7801/\u5b57\u7b26\uff09 255 \u7b49\u4ef7 0b11111111 ## \u5341\u8fdb\u5236 \u8f6c 16\u8fdb\u5236\uff08\u4f7f\u7528 \u6570\u5b57 \u8f6c \u5b57\u8282\u7801/\u5b57\u7b26\uff09 255 \u7b49\u4ef7 0xff \u5b57\u7b26\u4e32 \u8f6c \u5b57\u8282\u7801 \u00b6 >>> bytes ( 'abc' , 'utf-8' ) b 'abc' >>> bytes ( '\u7f16\u7a0b' , 'utf-8' ) b ' \\xe7\\xbc\\x96\\xe7\\xa8\\x8b ' >>> bytes ( 'Python3\u7f16\u7a0b' , 'utf-8' ) b 'Python3 \\xe7\\xbc\\x96\\xe7\\xa8\\x8b ' >>> 'Python3\u7f16\u7a0b' . encode ( 'UTF-8' ) b 'Python3 \\xe7\\xbc\\x96\\xe7\\xa8\\x8b ' >>> S = 'Python3\u7f16\u7a0b' 'Python3\u7f16\u7a0b' >>> B = bytes ( S , 'utf-8' ) b 'Python3 \\xe7\\xbc\\x96\\xe7\\xa8\\x8b ' >>> FMT = str ( len ( B )) + 's' '13s' >>> struct . pack ( FMT , B ) b 'Python3 \\xe7\\xbc\\x96\\xe7\\xa8\\x8b ' ## \u4ee516\u8fdb\u5236\u6570\u5b57\u5199\u7684\u5b57\u7b26\u4e32\uff0c\u76f4\u63a5\u8f6c\u6210\u4e00\u6837\u7684\u5b57\u8282\u7801\uff082\u4e2a16\u8fdb\u5236\u5b57\u7b26\u624d\u662f\u4e00\u4e2a\u5b57\u8282\uff09 >>> bytes . fromhex ( '01' ) b ' \\x01 ' # \u5355\u5b57\u8282 >>> bytes . fromhex ( '0001' ) b ' \\x00\\x01 ' # \u53cc\u5b57\u8282 >>> bytes . fromhex ( 'aabbccddeeff' ) b ' \\xaa\\xbb\\xcc\\xdd\\xee\\xff ' # \u591a\u5b57\u8282 \u5b57\u8282\u7801 \u8f6c \u5b57\u7b26\u4e32 \u00b6 ## \u53d6\u51fa16\u8fdb\u5236\u8868\u793a\u7684\u5185\u5bb9 >>> b 'abc' . decode ( 'UTF-8' ) 'abc' >>> b 'Python3 \\xe7\\xbc\\x96\\xe7\\xa8\\x8b ' . decode ( 'UTF-8' ) 'Python3\u7f16\u7a0b' >>> b ' \\xaa\\xbb\\xcc\\xdd\\xee\\xff ' . hex () 'aabbccddeeff' >>> b '0' . hex () '30' ## \u5b57\u7b260\u5728ASCII\u7801\u4e0a\u7684\u6570\u5b57\uff08\u6570\u5b57\u662f16\u8fdb\u5236\u8868\u793a\uff09== 48\uff08\u5341\u8fdb\u5236\uff09 >>> b '1' . hex () '31' >>> b 'z' . hex () '7a' \u6570\u5b57 \u8f6c \u5b57\u8282\u7801\uff08\u662f\u4e8c\u8fdb\u5236\uff0c\u752816\u8fdb\u5236\u663e\u793a\uff09 \u00b6 # 10\u8fdb\u5236\u6570 \u8f6c \u5b57\u8282\u7801 import struct >>> struct . pack ( 'B' , 0 ) b ' \\x00 ' >>> struct . pack ( 'B' , 1 ) b ' \\x01 ' >>> struct . pack ( 'B' , 101 ) b 'e' ## 101 \u5bf9\u5e94 16\u8fdb\u5236\u7684 0x65\uff08\u6b64\u5904\u8fd4\u56de\u503c\u662f\u663e\u793a\u4e3a\u5f53\u524d\u6574\u6570 101 \u5bf9\u5e94\u7684 ASCII\u5b57\u7b26 e\uff09 >>> struct . pack ( 'B' , 255 ) b ' \\xff ' # \u65e0\u7b26\u53f7\u6700\u5927\u5355\u5b57\u7b26\u53ef\u4ee5\u8868\u793a\u7684\u6570\u5b57 >>> struct . pack ( '>i' , 255 ) b ' \\x00\\x00\\x00\\xff ' # 4\u5b57\u8282\u5927\u7aef\u8868\u793a\u7684\u6570\u5b57 >>> struct . pack ( '<i' , 255 ) b ' \\xff\\x00\\x00\\x00 ' # 4\u5b57\u8282\u5c0f\u7aef\u8868\u793a\u7684\u6570\u5b57 # 2\u8fdb\u5236\u6570 \u8f6c \u5b57\u8282\u7801 import struct >>> struct . pack ( 'B' , 0b11111111 ) b ' \\xff ' >>> struct . pack ( '>i' , 0b111 ) b ' \\x00\\x00\\x00\\x07 ' # 0b111 \u7b49\u4e8e 7\uff0810\u8fdb\u5236\uff09 >>> struct . pack ( '>i' , 0b1111 ) b ' \\x00\\x00\\x00\\x0f ' # 0b1111 \u7b49\u4e8e 15\uff0810\u8fdb\u5236\uff09 >>> struct . pack ( '>i' , 0b11111 ) b ' \\x00\\x00\\x00\\x1f ' # 0b11111 \u7b49\u4e8e 31\uff0810\u8fdb\u5236\uff09 # 16\u8fdb\u5236\u6570 \u8f6c \u5b57\u8282\u7801 import struct >>> struct . pack ( 'B' , 0xff ) b ' \\xff ' >>> struct . pack ( '>i' , 0xfff ) b ' \\x00\\x00\\x0f\\xff ' \u5b57\u8282\u7801 \u8f6c \u6570\u5b57 \u00b6 import struct 16 \u8fdb\u5236\u8868\u73b0 10 \u8fdb\u5236\u7b49\u503c >>> struct . unpack ( 'B' , b ' \\xff ' ) ( 255 ,) # \u5355\u5b57\u8282 >>> struct . unpack ( '>i' , b ' \\x00\\x00\\x00\\xff ' ) ( 255 ,) # 4\u5b57\u8282\uff0c\u5927\u7aef\u6a21\u5f0f >>> struct . unpack ( '<i' , b ' \\x00\\x00\\x00\\xff ' ) ( - 16777216 ,) # 4\u5b57\u8282\uff0c\u5c0f\u7aef\u6a21\u5f0f ## \u624b\u52a8 \u8f6c\u6362 \u5b57\u8282\u7801 -> \u5b57\u7b26\u4e32 >>> B = b ' \\xe9 ' >>> S = B . hex () >>> S # \u503c 'e9' \u5b57\u7b26\u4e32 \uff08 16 \u8fdb\u5236\u683c\u5f0f \uff09 -> \u6570\u5b57 \uff08 10 \u8fdb\u5236 \uff09 >>> int ( S , 16 ) # \u503c 233 ASCII \u5b57\u7b26 \u548c \u6570\u5b57 \u00b6 \u5b57\u8282 b'\\x05' \u5b57\u7b26\u4e32 '\\x05' \u5c06\u4e00\u4e2a\u6574\u6570 (0-1114111) \u8f6c\u6362\u4e3a \u4e00\u4e2a\u5b57\u7b26\uff08\u6574\u6570\u5bf9\u5e94\u7684 ASCII \u5b57\u7b26\uff09 ValueError: chr() arg not in range(0x110000) >>> chr ( 0 ) ' \\x00 ' >>> chr ( 1 ) ' \\x01 ' >>> chr ( 97 ) 'a' >>> chr ( 1114111 ) ' \\U0010ffff ' >>> len ( chr ( 101 )) 1 # \u957f\u5ea6\u4e3a 1\u4e2a\u5b57\u7b26 >>> len ( chr ( 1114111 )) 1 # \u957f\u5ea6\u4e3a 1\u4e2a\u5b57\u7b26 \u5c06\u4e00\u4e2a ASCII\u5b57\u7b26 \u8f6c\u6362\u4e3a \u4e00\u4e2a\u6574\u6570 \u00b6 >>> ord ( ' \\x00 ' ) 0 >>> ord ( ' \\x01 ' ) 1 >>> ord ( 'a' ) 97 >>> ord ( '0' ) 48 >>> ord ( '1' ) 49 >>> ord ( 'A' ) 65 >>> ord ( 'Z' ) 90 >>> ord ( ' \\U0010ffff ' ) 1114111 ASCII \u5b57\u7b26 \u548c bin(\u5b57\u8282) \u00b6 from binascii import b2a_hex , a2b_hex >>> a2b_hex ( 'ab' ) b ' \\xab ' >>> b2a_hex ( b 'ab' ) b '6162' >>> a2b_hex ( b '6162' ) b 'ab' \u603b\u7ed3 (\u6458\u81ea \u7f8b\u8679\u5149 ) \u00b6 int \u7c7b\u578b\u89e3\u6790 \u00b6 \u8f83\u5c0f\u7684\u6574\u6570\u4f1a\u5f88\u9891\u7e41\u7684\u88ab\u4f7f\u7528\uff0c\u6240\u4ee5python\u5c06\u8fd9\u4e9b\u5bf9\u8c61\u653e\u7f6e\u5230\u4e86\u4e00\u4e2a\u6c60\u5b50\u4e2d\uff0c\u6bcf\u6b21\u9700\u8981\u8fd9\u4e9b\u5bf9\u8c61\u7684\u65f6\u5019\u5c31\u5230\u6c60\u5b50\u4e2d\u83b7\u53d6\u8fd9\u4e2a\u503c\uff0c\u907f\u514d\u591a\u6b21\u7684\u91cd\u590d\u521b\u5efa\u5bf9\u8c61\u5f15\u8d77\u7684\u8bb8\u591a\u4e0d\u5fc5\u8981\u7684\u5f00\u9500\u3002\u8fd9\u4e2a\u6c60\u5b50\u5185\u7684\u6570\u5b57\u8303\u56f4\u662f[-5, 257), \u6240\u4ee5\u90fd\u662f\u4ece\u6c60\u5b50\u91cc\u9762\u53d6\u503c\uff0c\u81ea\u7136id\u4e0d\u53d8\u3002 float\u7c7b\u578b\u89e3\u6790 \u00b6 \u5bf9\u4e8efloat\u7c7b\u578b\u7684\u4f7f\u7528\u81ea\u7136\u6ca1\u6709int\u90a3\u4e48\u9891\u7e41\uff0c\u5e76\u4e14float\u7c7b\u578b\u4e5f\u4e0d\u597d\u5b9a\u4e49\u54ea\u4e9b\u5e38\u7528\uff0c\u4e5f\u5c31\u6ca1\u6709\u6c60\u5b50\u7ed9\u5230\u8fd9\u4e2a\u7c7b\u578b\uff0c\u6240\u4ee5\u6bcf\u6b21\u91cd\u65b0\u521b\u5efa\u5373\u53ef\u3002 tuple\u7c7b\u578b\u89e3\u6790 \u00b6 \u5bf9\u4e8etuple\u7c7b\u578b\uff0c\u4e0efloat\u7c7b\u578b\u7684\u601d\u7ef4\u76f8\u4f3c\uff0c\u6240\u4ee5\u4e5f\u662f\u6bcf\u6b21\u91cd\u65b0\u521b\u5efa\u3002 string\u7c7b\u578b\u89e3\u6790 \u00b6 \u5355\u8bcd\u7c7b\u578b\u7684str\u7531\u4e8e\u88ab\u91cd\u590d\u4f7f\u7528\u7684\u6982\u7387\u6bd4\u8f83\u5927\uff0c\u6240\u4ee5\u5728python\u4e2d\u4e3a\u5355\u8bcd\u7c7b\u578b\u7684str\u505a\u4e86\u4e00\u4e2a\u7f13\u5b58\uff0c\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u662f\u5355\u8bcd\u7c7b\u578b\u7684str\uff0c \u4f1a\u88ab\u5b58\u50a8\u5230\u4e00\u4e2a\u5b57\u5178(dict)\u4e2d\uff0c\u5b57\u5178\u7684\u5185\u5bb9\u662f\u5b57\u7b26\u4e32\u4e3akey\uff0c \u5730\u5740\u4e3avalue\u3002\u5f53\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32\u9700\u8981\u521b\u5efa\uff0c\u5c31\u5148\u53bb\u8bbf\u95ee\u8fd9\u4e2a\u5b57\u5178\uff0c\u5982\u679c\u5b58\u5728\u5219\u8fd4\u56de\u5b57\u5178\u4e2d\u5b57\u7b26\u4e32\u7684\u5730\u5740\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de\u65b0\u521b\u5efa\u7684\u5730\u5740\uff0c\u5e76\u5c06\u8fd9\u4e2a\u5b57\u7b26\u4e32\u6dfb\u52a0\u8fdb\u5165\u5b57\u5178\u3002\u8fd9\u662f\u5b57\u7b26\u4e32\u7684intern\u673a\u5236\u3002","title":"\u6570\u636e\u7c7b\u578b"},{"location":"Python/Basic/Python-No-4-Data-Type/#_1","text":"\u5185\u7f6e\u7c7b\u578b\uff1a None\uff08\u5168\u5c40\u53ea\u6709\u4e00\u4e2a\uff09 \u6570\u503c\u7c7b\u578b\uff1aint\u3001float\u3001complax\uff08\u590d\u6570\uff09\u3001bool \u8fed\u4ee3\u7c7b\u578b \u5e8f\u5217\u7c7b\u578b\uff1alist\u3001bytes\u3001range\u3001tuple\u3001string\u3001array \u6620\u5c04\u7c7b\u578b\uff1adict \u96c6\u5408\u7c7b\u578b\uff1aset\u3001frozenset \u4e0a\u4e0b\u6587\u7ba1\u7406\u7c7b\u578b\uff1awith \u53ef\u53d8\u7c7b\u578b\uff1alist\u3001set\u3001dict \u4e0d\u53ef\u53d8\u7c7b\u578b\uff1aint\u3001float\u3001string\u3001tuple","title":"\u5e38\u89c1\u5185\u7f6e\u7c7b\u578b"},{"location":"Python/Basic/Python-No-4-Data-Type/#_2","text":"","title":"\u57fa\u672c\u6570\u636e\u7c7b\u578b"},{"location":"Python/Basic/Python-No-4-Data-Type/#_3","text":"\u53ef\u4ee5\u662f\u4efb\u610f\u5927\u5c0f\u7684\u6574\u6570 \u4e0e\u6570\u5b66\u4e0a\u7684\u8868\u793a\u65b9\u6cd5\u4e00\u6837 \u5982\uff1a1\uff0c100\uff0c-800\uff0c0 \u53ef\u4ee5\u7528\u5341\u516d\u8fdb\u5236\u8868\u793a\u6cd5 \u5982\uff1a0xFF00, 0xab54f","title":"\u6574\u578b"},{"location":"Python/Basic/Python-No-4-Data-Type/#_4","text":"\u52a0\uff08+\uff09 \u51cf\uff08-\uff09 \u4e58\uff08*\uff09 \u9664\uff08/\uff09 \u6a21\uff08%\uff09 >>> 3 + 2 5 >>> 3 - 2 1 >>> 3 * 2 6 >>> 3 / 2 1.5 >>> 2 + 3 * 4 14 >>> ( 2 + 3 ) * 4 20 >>> 17 % 3 2 \u9664\u6cd5\u8fd0\u7b97 \uff08/\uff09\u6c38\u8fdc\u8fd4\u56de\u6d6e\u70b9\u578b >>> 9 / 3 3.0 \u4e58\u65b9\uff08**\uff09 \u622a\u65ad\u9664\u6cd5\u3001\u6574\u6570\u9664\uff08//\uff09 >>> 3 ** 2 9 >>> 3 ** 3 27 >>> 17 // 3 5 \u5305\u542b\u591a\u79cd\u6df7\u5408\u7c7b\u578b\u8fd0\u7b97\u6570\u7684\u8fd0\u7b97\u4f1a\u628a\u6574\u6570\u8f6c\u6362\u4e3a\u6d6e\u70b9\u6570 >>> 4 * 3.75 - 1 14.0","title":"\u5e38\u7528\u57fa\u672c\u8fd0\u7b97"},{"location":"Python/Basic/Python-No-4-Data-Type/#_5","text":"\u5373\u5c0f\u6570 \u5982\uff1a1.2\uff0c524.33\uff0c-9.11 \u5982\u679c\u662f\u5f88\u5927\u6216\u5f88\u5c0f\u7684\u6d6e\u70b9\u6570\uff0c\u5fc5\u987b\u7528\u79d1\u5b66\u8ba1\u6570\u6cd5\u8868\u793a\uff0c\u7528 e+\u6307\u6570 \u4ee3\u66ff\u5e95\u6570 10^\u6307\u6570 \uff0c\u5982\uff1a 1.23\u00d710^9 \u5c31\u662f 1.23e9 \u6216 12.3e8\uff0c 0.000012 \u5c31\u662f 1.2e-5 \u6d6e\u70b9\u6570\u8fd0\u7b97\u53ef\u80fd\u4f1a\u6709\u56db\u820d\u4e94\u5165\u7684\u8bef\u5dee","title":"\u6d6e\u70b9\u6570"},{"location":"Python/Basic/Python-No-4-Data-Type/#_6","text":"str1 = 'OK' # OK str2 = \"OK\" # OK str3 = \"I'm ok.\" # I'm ok. str4 = 'I \\' m ok.' # I'm ok. str5 = \"I \\\" m ok.\" # I\"m ok. str6 = 'I\"m ok.' # I\"m ok. str7 = '''\u8fd9\u662f\u4e00\u4e2a\u6bb5\u843d\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u6362\u884c\uff0c\u4e0d\u9700\u53cd\u659c\u6760\u6765\u58f0\u660e\u8bed\u53e5\u672a\u7ed3\u675f \u76f4\u5230\u9047\u5230\u4e0b\u4e00\u4e2a\u4e09\u5355\u5f15\u53f7\uff0c\u624d\u8ba4\u4e3a\u7ed3\u675f \u4f46\u662f\u6362\u884c\u4f1a\u8ddf\u7740\u6362\u884c\uff0c\u7a7a\u683c\u4f1a\u8ddf\u7740\u7a7a\u683c''' \"\"\" str7\u8f93\u51fa\u4e3a\uff1a \u8fd9\u662f\u4e00\u4e2a\u6bb5\u843d\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u6362\u884c\uff0c\u4e0d\u9700\u53cd\u659c\u6760\u6765\u58f0\u660e\u8bed\u53e5\u672a\u7ed3\u675f \u76f4\u5230\u9047\u5230\u4e0b\u4e00\u4e2a\u4e09\u5355\u5f15\u53f7\uff0c\u624d\u8ba4\u4e3a\u7ed3\u675f \u4f46\u662f\u6362\u884c\u4f1a\u8ddf\u7740\u6362\u884c\uff0c\u7a7a\u683c\u4f1a\u8ddf\u7740\u7a7a\u683c \"\"\" \\ n \u6362\u884c \\ t \u7f29\u8fdb # \u4f7f\u7528\u8f6c\u4e49\u5b57\u7b26 str8 = 'ab \\n cd' ''' str8\u8f93\u51fa\u4e3a\uff1a ab cd ''' r '\u5b57\u7b26\u4e32' \u8868\u793a\u4e0d\u8f6c\u4e49 # \u4e0d\u8f6c\u4e49 str9 = r 'ab\\ncd' # ab\\ncd \u8f6c\u4e49\u5b57\u7b26 \u8f6c\u4e49\u5b57\u7b26 \u63cf\u8ff0 \\ \u7eed\u884c\u7b26 \\ \u53cd\u659c\u6760 \\' \u5355\u5f15\u53f7 \\\" \u53cc\u5f15\u53f7 \\a \u54cd\u94c3 \\b \u9000\u683c \\e \u8f6c\u4e49 \\000 \u7a7a \\n \u6362\u884c \\v \u7eb5\u5411\u5236\u8868\u7b26 \\t \u6a2a\u5411\u5236\u8868\u7b26 \\r \u56de\u8f66 \\f \u6362\u9875 \\o \u516b\u8fdb\u5236 \\x \u5341\u516d\u8fdb\u5236","title":"\u5b57\u7b26\u4e32"},{"location":"Python/Basic/Python-No-4-Data-Type/#_7","text":"True False \u53ef\u4ee5\u7528 and , or , not \u8fd0\u7b97","title":"\u5e03\u5c14\u503c"},{"location":"Python/Basic/Python-No-4-Data-Type/#_8","text":"\u7a7a\u503c\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u503c\uff0c\u7528 None \u8868\u793a\u3002 None \u4e0d\u7b49\u4e8e 0 \uff0c 0 \u662f\u6709\u610f\u4e49\u7684. \u5168\u5c40\u53ea\u6709\u4e00\u4e2aNone","title":"\u7a7a\u503c"},{"location":"Python/Basic/Python-No-4-Data-Type/#_9","text":"","title":"\u590d\u5408\u6570\u636e\u7c7b\u578b"},{"location":"Python/Basic/Python-No-4-Data-Type/#list","text":"\u4e00\u79cd \u6709\u5e8f\u7684\u3001\u53ef\u53d8\u7684 \u5143\u7d20\u96c6\u5408 \u7528 [ ] \u6807\u8bc6 \u53ef\u968f\u673a\u6dfb\u52a0\u548c\u5220\u9664\u5176\u4e2d\u7684\u5143\u7d20 \u53ef\u7406\u89e3\u4e3a\u53ef\u53d8\u7684\u6570\u7ec4 \u662f\u4e00\u79cd\u590d\u5408\u6570\u636e\u7c7b\u578b List \u4e2d\u7684\u5143\u7d20\u53ef\u4ee5\u4e0d\u540c\u7c7b\u578b \u533a\u522b\u4e8e\u5143\u7ec4Tuple\uff1aList \u4e2d\u7684\u5143\u7d20\u53ef\u53d8 >>> name = [ 'Alice' , 'Boii' , 'Chen' , 'Dannie' , 'Eva' ] >>> print ( name ) [ 'Alice' , 'Boii' , 'Chen' , 'Dannie' , 'Eva' ]","title":"\u5217\u8868 List"},{"location":"Python/Basic/Python-No-4-Data-Type/#list_1","text":"| P | y | t | h | o | n | 0 1 2 3 4 5 # \u4ece\u5de6\u5f80\u53f3\uff0c\u4e0b\u6807\u4ece0\u5f00\u59cb - 6 - 5 - 4 - 3 - 2 - 1 # \u4ece\u53f3\u5f80\u5de6\uff0c\u4e0b\u6807\u4ece-1\u5f00\u59cb","title":"List\u7d22\u5f15"},{"location":"Python/Basic/Python-No-4-Data-Type/#list_2","text":"","title":"List\u7684\u589e\u5220\u6539\u67e5"},{"location":"Python/Basic/Python-No-4-Data-Type/#_10","text":"listName = [element1, element2, element3, ...]","title":"\u521d\u59cb\u5316"},{"location":"Python/Basic/Python-No-4-Data-Type/#_11","text":"","title":"\u589e"},{"location":"Python/Basic/Python-No-4-Data-Type/#append","text":"listName.append(value) >>> name = [ 'Alice' , 'Boii' , 'Chen' , 'Dannie' , 'Eva' ] >>> name . append ( 'Fit' ) >>> name [ 'Alice' , 'Boii' , 'Chen' , 'Dannie' , 'Eva' , 'Fit' ]","title":"\u8ffd\u52a0\u5230\u672b\u5c3e append"},{"location":"Python/Basic/Python-No-4-Data-Type/#insert","text":"listName.insert(index, value) >>> name = [ 'Alice' , 'Boii' , 'Chen' , 'Dannie' , 'Eva' ] >>> name . insert ( 3 , 'Fit' ) >>> name [ 'Alice' , 'Boii' , 'Chen' , 'Fit' , 'Dannie' , 'Eva' ]","title":"\u63d2\u5165\u5230\u6307\u5b9a\u4f4d\u7f6e insert"},{"location":"Python/Basic/Python-No-4-Data-Type/#_12","text":"","title":"\u5220"},{"location":"Python/Basic/Python-No-4-Data-Type/#pop","text":"listName.pop() >>> name = [ 'Alice' , 'Boii' , 'Chen' , 'Dannie' , 'Eva' ] >>> >>> name . pop () 'Eva' >>> name [ 'Alice' , 'Boii' , 'Chen' , 'Dannie' ]","title":"\u5220\u9664\u672b\u5c3e\u5143\u7d20 pop"},{"location":"Python/Basic/Python-No-4-Data-Type/#pop_1","text":"listName.pop(index) \u6216 del listName[index] >>> name = [ 'Alice' , 'Boii' , 'Chen' , 'Dannie' , 'Eva' ] >>> name . pop ( 3 ) 'Dannie' >>> name [ 'Alice' , 'Boii' , 'Chen' , 'Eva' ] >>> del name [ 2 ] [ 'Alice' , 'Boii' , 'Eva' ]","title":"\u5220\u9664\u6307\u5b9a\u4f4d\u7f6e\u5143\u7d20 pop"},{"location":"Python/Basic/Python-No-4-Data-Type/#_13","text":"\u4fee\u6539\u67d0\u4e2a\u5143\u7d20\uff0c\u76f4\u63a5\u7ed9\u8be5\u5143\u7d20\u8d4b\u65b0\u503c\u5373\u53ef listName[index] = value >>> name = [ 'Alice' , 'Boii' , 'Chen' , 'Dannie' , 'Eva' ] >>> >>> name [ 2 ] = 'Cai' >>> name [ 'Alice' , 'Boii' , 'Cai' , 'Dannie' , 'Eva' ]","title":"\u6539"},{"location":"Python/Basic/Python-No-4-Data-Type/#_14","text":"\u4f7f\u7528\u4e0b\u6807\u6765\u8bbf\u95eeList\u4e2d\u7684\u5143\u7d20 listName[index] name = [ 'Alice' , 'Boii' , 'Chen' , 'Dannie' , 'Eva' ] print ( name [ 0 ]) # 'Alice' \u8bbf\u95eeList\u7b2c\u4e00\u4e2a\u5143\u7d20 print ( name [ 1 ]) # 'Boii' \u8bbf\u95eeList\u7b2c\u4e8c\u4e2a\u5143\u7d20 print ( name [ - 1 ]) # 'Eva' \u8bbf\u95eeList\u6700\u540e\u4e00\u4e2a\u5143\u7d20","title":"\u67e5"},{"location":"Python/Basic/Python-No-4-Data-Type/#len","text":"len(List\u540d) >>> name = [ 'Alice' , 'Boii' , 'Chen' , 'Dannie' , 'Eva' ] >>> len ( name ) 5","title":"\u83b7\u5f97\u957f\u5ea6 len()"},{"location":"Python/Basic/Python-No-4-Data-Type/#list_3","text":">>> L = [ 'Boii' , 23 , True , 'https://tcp404.com' ] >>> L [ 'Boii' , 23 , True , 'https://tcp404.com' ]","title":"List\u4e2d\u5143\u7d20\u53ef\u4ee5\u4e0d\u540c\u7c7b\u578b"},{"location":"Python/Basic/Python-No-4-Data-Type/#listlist","text":"\u7c7b\u4f3c\u4e8e\u591a\u7ef4\u6570\u7ec4\u7684\u6982\u5ff5 >>> l_main = [ 'Boii' , 23 , [ 'https://' , 'tcp404' , '.com' ], 443 ] >>> len ( l_main ) 4 >>> len ( l_main [ 2 ]) 3 \u7b49\u4ef7\u4e8e >>> l_sub = [ 'https://' , 'tcp404' , '.com' ] >>> l_main = [ 'Boii' , 23 , l_sub , 443 ] #\u83b7\u53d6 tcp404\u53ef\u4ee5\u7528\u4e00\u4e0b\u65b9\u5f0f >>> l_main [ 2 ][ 1 ] 'tcp404'","title":"List\u5d4c\u5957List"},{"location":"Python/Basic/Python-No-4-Data-Type/#list_4","text":">>> L = [] >>> len ( L ) 0 >>> li = list () >>> len ( li ) 0","title":"\u7a7aList"},{"location":"Python/Basic/Python-No-4-Data-Type/#tuple","text":"\u4e00\u79cd \u6709\u5e8f\u7684\u3001\u4e0d\u53ef\u53d8\u7684 \u5143\u7d20\u96c6\u5408 \u7528 ( ) \u6807\u8bc6 Tuple\u4e2d\u7684\u5143\u7d20\u4e00\u65e6\u521d\u59cb\u5316\u5c31\u4e0d\u53ef\u53d8 \u53ef\u7406\u89e3\u4e3a\u4e0d\u53ef\u53d8\u7684\u6570\u7ec4 \u662f\u4e00\u79cd\u590d\u5408\u6570\u636e\u7c7b\u578b Tuple\u4e2d\u7684\u5143\u7d20\u53ef\u4ee5\u4e0d\u540c\u7c7b\u578b \u533a\u522b\u4e8eList\uff1aTuple \u4e2d\u7684\u5143\u7d20 \u4e0d\u53ef\u53d8","title":"\u5143\u7ec4 Tuple"},{"location":"Python/Basic/Python-No-4-Data-Type/#_15","text":"tupleName = (elem1, elem2, elem3, ...)","title":"\u521d\u59cb\u5316"},{"location":"Python/Basic/Python-No-4-Data-Type/#tuple_1","text":"| P | y | t | h | o | n | 0 1 2 3 4 5 # \u4ece\u5de6\u5f80\u53f3\uff0c\u4e0b\u6807\u4ece0\u5f00\u59cb - 6 - 5 - 4 - 3 - 2 - 1 # \u4ece\u53f3\u5f80\u5de6\uff0c\u4e0b\u6807\u4ece-1\u5f00\u59cb","title":"Tuple\u7d22\u5f15"},{"location":"Python/Basic/Python-No-4-Data-Type/#tuple_2","text":"Tuple\u4e0d\u53ef\u53d8\uff0c\u6240\u4ee5\u4e0d\u53ef\u4ee5 \u589e\u52a0\u3001\u5220\u9664\u3001\u4fee\u6539\uff0c\u53ea\u80fd\u67e5\u8be2 \u67e5\u8be2\u4e0eList\u76f8\u540c","title":"Tuple\u7684\u589e\u5220\u6539\u67e5"},{"location":"Python/Basic/Python-No-4-Data-Type/#_16","text":"tupleName[index] >>> T = ( 1 , 2 , 'Boii' ) >>> T [ 2 ] 'Boii' >>> T [ 0 ] 1 >>> T ( 1 , 2 , 'Boii' )","title":"\u67e5"},{"location":"Python/Basic/Python-No-4-Data-Type/#tuple_3","text":">>> tr = () >>> tr ()","title":"\u7a7aTuple ()"},{"location":"Python/Basic/Python-No-4-Data-Type/#tuple-element","text":"\u4e3a\u907f\u514d\u4e0e\u6570\u5b66\u7684\u62ec\u53f7\u6df7\u6dc6\uff0c\u5b9a\u4e49\u4e00\u4e2a\u5143\u7d20\u7684Tuple\u65f6\uff0c\u8981\u5728\u5143\u7d20\u540e\u52a0\u4e0a\u9017\u53f7 >>> tr = ( 'Boii' ,) >>> tr ( 'Boii' ,) \u4e14\u5728python\u89e3\u91ca\u4e2d\uff1a tr = (1) \u4f1a\u88ab\u8ba4\u4e3a\u662f tr = 1, tr \u5c31\u53d8\u6210\u4e00\u4e2a\u666e\u901a\u7684\u6574\u578b\u53d8\u91cf tr = ('Boii') \u4f1a\u88ab\u8ba4\u4e3a\u662f tr = 'Boii', tr \u5c31\u53d8\u6210\u4e00\u4e2a\u666e\u901a\u7684\u5b57\u7b26\u4e32\u53d8\u91cf >>> tr = ( 1 ) # \u7b49\u4ef7\u4e8e tr = 1 >>> tr 1 >>> tr = ( 'Boii' ) # \u7b49\u4ef7\u4e8e tr = 'Boii' >>> tr 'Boii' >>> >>> >>> tr = ( 'Boii' ,) # \u221a \u6b63\u786e\u5b9a\u4e49\u5355\u5143\u7d20Tuple >>> tr ( 'Boii' ,)","title":"\u5b9a\u4e49\u5355\u5143\u7d20\u7684Tuple (element\uff0c)"},{"location":"Python/Basic/Python-No-4-Data-Type/#tuple_4","text":"\u56e0\u4e3atuple\u4e0d\u53ef\u53d8\uff0c\u6240\u4ee5\u4ee3\u7801\u66f4\u5b89\u5168\u3002\u5982\u679c\u53ef\u80fd\uff0c\u80fd\u7528tuple\u4ee3\u66fflist\u5c31\u5c3d\u91cf\u7528tuple\u3002","title":"Tuple\u4e0d\u53ef\u53d8\u7684\u610f\u4e49"},{"location":"Python/Basic/Python-No-4-Data-Type/#tuple_5","text":"Tuple\u7684\u4e0d\u53ef\u53d8\u6307\u7684\u662fTuple\u6307\u5411\u7684\u5143\u7d20\u4e0d\u53ef\u53d8 \u5982\u679c\u5143\u7d20\u4e2d\u6709 \u53ef\u53d8\u7684Listlist \uff0c\u90a3\u4e48Tuple\u4f9d\u7136\u53ef\u4ee5\u4fee\u6539 >>> t = ( 'a' , 'b' , [ 'A' , 'B' ]) >>> t [ 2 ][ 0 ] = 'X' >>> t [ 2 ][ 1 ] = 'Y' >>> t ( 'a' , 'b' , [ 'X' , 'Y' ]) \u5b9a\u4e49Tuplet\u65f6 \u4fee\u6539Tuplet\u7684\u5143\u7d20\u540e","title":"\uff01\uff01\uff01\u4e0d\u53ef\u53d8Tuple\u4e2d\u7684\u53ef\u53d8\u5143\u7d20"},{"location":"Python/Basic/Python-No-4-Data-Type/#dict","text":"\u4e00\u79cd \u65e0\u5e8f\u7684\u3001\u53ef\u53d8\u7684 \u952e-\u503c\u5bf9\u96c6\u5408 \u7528 { } \u6807\u8bc6 \u952ekey \u5fc5\u987b\u662f\u4e0d\u53ef\u53d8\u5bf9\u8c61 \uff08\u5982\u5b57\u7b26\u4e32\u3001\u6574\u6570\u3002\u800clist\uff0ctuple\u8fd9\u4e9b\u4e0d\u53ef\u4ee5\u4f5c\u4e3akey\uff09 \u952ekey \u4e0d\u53ef\u4ee5\u91cd\u590d \u952ekey \u53ef\u4ee5\u4e0d\u540c\u7c7b\u578b\uff0c\u4f46\u4e0d\u5efa\u8bae \u952ekey \u53ef\u4ee5\u662f\u53d8\u91cf\uff0c\u4f46\u662f\u8fd9\u4e2a\u53d8\u91cf\u5fc5\u987b\u6307\u5411\u5b57\u7b26\u4e32\u3001\u6574\u6570\u8fd9\u7c7b\u4e0d\u53ef\u53d8\u5bf9\u8c61 Dictionary VS List 1. Dict \u67e5\u627e\u548c\u63d2\u5165\u7684\u901f\u5ea6\u6781\u5feb\uff0c\u4e0d\u4f1a\u968f\u7740key\u7684\u589e\u52a0\u800c\u53d8\u6162\uff1b 2. Dict \u9700\u8981\u5360\u7528\u5927\u91cf\u7684\u5185\u5b58\uff0c\u5185\u5b58\u6d6a\u8d39\u591a\u3002 3. List \u67e5\u627e\u548c\u63d2\u5165\u7684\u65f6\u95f4\u968f\u7740\u5143\u7d20\u7684\u589e\u52a0\u800c\u589e\u52a0\uff1b 4. List \u5360\u7528\u7a7a\u95f4\u5c0f\uff0c\u6d6a\u8d39\u5185\u5b58\u5f88\u5c11\u3002","title":"\u5b57\u5178 Dict"},{"location":"Python/Basic/Python-No-4-Data-Type/#_17","text":"dictName = { key1 : value1, key2 : value2, key3 : value3, ... } d = { 'a' : 1 , 'b' : 2 , 'c' : 3 , 'd' : 4 } # \u952e\u53ef\u4ee5\u4e0d\u540c\u7c7b\u578b dd = { 'a' : 'Alice' , 'b' : 'Boii' , 18 : 'Kk' }","title":"\u521d\u59cb\u5316"},{"location":"Python/Basic/Python-No-4-Data-Type/#dict_1","text":"Dict\u7684\u7d22\u5f15\u5c31\u662f \u952ekey\u3002","title":"Dict\u7d22\u5f15"},{"location":"Python/Basic/Python-No-4-Data-Type/#dict_2","text":"","title":"Dict\u7684\u589e\u5220\u6539\u67e5\u548c\u5224\u65ad"},{"location":"Python/Basic/Python-No-4-Data-Type/#_18","text":"dictName[key] = value >>> d = { 'a' : 1 , 'b' : 2 , 'c' : 3 , 'd' : 4 } >>> d [ 'AC' ] = 'diu' >>> d { 'a' : 1 , 'b' : 2 , 'c' : 3 , 'd' : 4 , 'AC' : 'diu' } # \u4f7f\u7528\u53d8\u91cf\u4f5c\u4e3akey >>> d = { 'a' : 1 , 'b' : 2 , 'c' : 3 , 'd' : 4 } >>> a = 'x' >>> d [ a ] = 'what' >>> d { 'a' : 1 , 'b' : 2 , 'c' : 3 , 'd' : 4 , 'x' : 'what' }","title":"\u589e"},{"location":"Python/Basic/Python-No-4-Data-Type/#popdel","text":"dictName.pop(key) del dictName[key] >>> d = { 'a' : 1 , 'b' : 2 , 'c' : 3 , 'd' : 4 } >>> d . pop ( 'a' ) { 'b' : 2 , 'c' : 3 , 'd' : 4 } >>> del d [ 'c' ] { 'b' : 2 , 'd' : 4 }","title":"\u5220 pop\u3001del"},{"location":"Python/Basic/Python-No-4-Data-Type/#_19","text":"dictName[key] = newValue \u56e0\u4e3akey\u4e0d\u80fd\u91cd\u590d\uff0c\u6240\u4ee5\u5982\u679ckey\u4e0d\u5b58\u5728\uff0c\u4f1a\u53d8\u6210\u6dfb\u52a0\uff0c\u5982\u679ckey\u5b58\u5728\uff0cnewValue\u4f1a\u8986\u76d6oldValue >>> d = { 'a' : 1 , 'b' : 2 , 'c' : 3 , 'd' : 4 } >>> d [ 'a' ] = 25 >>> d { 'a' : 25 , 'b' : 2 , 'c' : 3 , 'd' : 4 } >>> d [ 'e' ] = 15 >>> d { 'a' : 25 , 'b' : 2 , 'c' : 3 , 'd' : 4 , 'e' : 15 }","title":"\u6539"},{"location":"Python/Basic/Python-No-4-Data-Type/#get","text":"dictName.get(key) \u5982\u679ckey\u5b58\u5728\uff0c\u8fd4\u56de\u5bf9\u5e94\u7684value \u5982\u679ckey\u4e0d\u5b58\u5728\uff0c\u8fd4\u56deNone d = { 'a' : 1 , 'b' : 2 , 'c' : 3 , 'd' : 4 } d . get ( 'a' ) # 1 d . get ( 'z' ) # None dictName.get(key, return) \u5982\u679ckey\u5b58\u5728\uff0c\u8fd4\u56de\u5bf9\u5e94\u7684value \u5982\u679ckey\u4e0d\u5b58\u5728\uff0c\u8fd4\u56de\u6307\u5b9a\u7684\u8fd4\u56de\u503creturn\uff0creturn\u53ef\u4ee5\u662f\u6574\u578b\u3001\u5b57\u7b26\u4e32\uff0c\u751a\u81f3\u662fList\u7b49 >>> d = { 'a' : 1 , 'b' : 2 , 'c' : 3 , 'd' : 4 } >>> >>> d . get ( 'z' , 0 ) 0 >>> d . get ( 'z' , 'No This Key' ) 'No This Key' >>> d . get ( 'z' , [ 0 , 0 ]) [ 0 , 0 ] >>> d . get ( 'z' , { 1 : 'a' , 2 : 'b' }) { 1 : 'a' , 2 : 'b' }","title":"\u67e5 get"},{"location":"Python/Basic/Python-No-4-Data-Type/#innot-in","text":"key in dictName >>> d = { 'a' : 25 , 'b' : 2 , 'c' : 3 , 'd' : 4 } >>> 'b' in d True >>> 'z' in d False","title":"\u5224\u65ad in\u3001not in"},{"location":"Python/Basic/Python-No-4-Data-Type/#set","text":"\u4e00\u79cd \u65e0\u5e8f\u7684\u3001\u4e0d\u91cd\u590d\u7684\u3001\u53ef\u53d8\u7684 \u7684\u5143\u7d20\u7684\u96c6\u5408 \u7528 set([ ]) \u6216 {key, key, ...} \u6807\u8bc6 \u7c7b\u4f3c\u6570\u5b66\u6982\u5ff5\u4e2d\u7684\u96c6\u5408 \u53ef\u4ee5\u901a\u8fc7 Dict \u6765\u7406\u89e3\uff1aSet \u662f\u4e00\u79cd\u4e0d\u5b58\u50a8 value \u7684 Dict\uff08\u56e0\u4e3akey\u4e0d\u80fd\u91cd\u590d\uff09 \u662f\u4e00\u79cd\u590d\u5408\u6570\u636e\u7c7b\u578b Set \u4e2d\u7684\u5143\u7d20\u53ef\u4ee5\u4e0d\u540c\u7c7b\u578b","title":"\u96c6\u5408 Set"},{"location":"Python/Basic/Python-No-4-Data-Type/#set_1","text":"Set \u662f\u65e0\u5e8f\u7684\uff0c\u6240\u4ee5\u6ca1\u6709\u7d22\u5f15\uff0c\u53ea\u6709\u5143\u7d20\uff0c\u6216\u8005\u8bf4\u53ea\u6709key","title":"Set\u7d22\u5f15"},{"location":"Python/Basic/Python-No-4-Data-Type/#_20","text":"setName = set(key_list) setName = {key1, key2, key3, ...} >>> s1 = set ([ 1 , 2 , 3 , 'a' , ( 32 , 'a' , False ), 55 ]) >>> s1 { 1 , 2 , 3 , 55 , ( 32 , 'a' , False ), 'a' } >>> s2 = set ( 'abadfgaae' ) >>> s2 { 'g' , 'b' , 'e' , 'f' , 'd' , 'a' } >>> s3 = { 1 , 2 , 3 , 4 , 4 , 4 , 5 , 5 } >>> s3 { 1 , 2 , 3 , 4 , 5 }","title":"\u521d\u59cb\u5316"},{"location":"Python/Basic/Python-No-4-Data-Type/#set_2","text":"","title":"Set\u7684\u589e\u5220\u6539\u67e5"},{"location":"Python/Basic/Python-No-4-Data-Type/#addupdate","text":"setName.add(key) \u53ea\u80fd\u6dfb\u52a0\u57fa\u672c\u6570\u636e\u7c7b\u578b setName.update(key) \u53ef\u4ee5\u6dfb\u52a0\u57fa\u672c\u6570\u636e\u7c7b\u578b\u548c\u590d\u5408\u6570\u636e\u7c7b\u578b >>> s3 = set ([ 1 , 2 , 3 , 4 , 4 , 4 , 5 , 5 ]) >>> s3 . add ( 7 ) >>> s3 { 1 , 2 , 3 , 4 , 5 , 7 } >>> s3 . update ([ 'a' , 'b' ]) >>> s3 { 1 , 2 , 3 , 4 , 5 , 7 , 'a' , 'b' }","title":"\u589e add\u3001update"},{"location":"Python/Basic/Python-No-4-Data-Type/#removediscardpop","text":"setName.remove(key) \u5220\u9664\u6307\u5b9a\u5143\u7d20\uff0c\u5982\u679c\u5143\u7d20\u4e0d\u5b58\u5728\u4f1a\u5b58\u5728\u9519\u8bef setName.discard(key) \u5220\u9664\u6307\u5b9a\u5143\u7d20\uff0c\u5982\u679c\u5143\u7d20\u4e0d\u5b58\u5728\u4e0d\u4f1a\u5b58\u5728\u9519\u8bef setName.pop() \u968f\u673a\u5220\u9664\u4e00\u4e2a\u5143\u7d20 >>> s = set ([ 1 , 2 , 3 , 4 , 7 , 4 , 15 , 4 , 5 , 5 ]) >>> s { 1 , 2 , 3 , 4 , 5 , 7 , 15 } >>> s . remove ( 5 ) >>> s { 1 , 2 , 3 , 4 , 7 , 15 } >>> s . remove ( 20 ) Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > KeyError : 20 >>> s . discard ( 15 ) >>> s { 1 , 2 , 3 , 4 , 7 } >>> s . discard ( 20 ) >>> >>> s . pop () 4 >>> s { 2 , 3 , 1 , 7 } >>> s . pop () 3 >>> s { 2 , 1 , 7 } >>> s . pop () 2 >>> s { 1 , 7 }","title":"\u5220\u9664 remove\u3001discard\u3001pop"},{"location":"Python/Basic/Python-No-4-Data-Type/#remove-add","text":"Set \u4e2d\u6ca1\u6709\u6539\u7684\u529e\u6cd5\uff0c\u56e0\u4e3a\u96c6\u5408\u662f\u65e0\u5e8f\u7684\uff0c\u6539\u4e00\u4e2a\u5143\u7d20\u6ca1\u6709\u610f\u4e49 \u53ea\u80fd\u5220\u9664\u8981\u6539\u7684key\uff0c\u7136\u540e\u6dfb\u52a0\u65b0\u7684key setName.remove(key) setName.add(key)","title":"\u6539 remove + add"},{"location":"Python/Basic/Python-No-4-Data-Type/#_21","text":"","title":"\u67e5"},{"location":"Python/Basic/Python-No-4-Data-Type/#_22","text":"\u51fd\u6570 \u63cf\u8ff0 int(x [,base]) \u5c06x\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6574\u6570 long(x [,base] ) \u5c06x\u8f6c\u6362\u4e3a\u4e00\u4e2a\u957f\u6574\u6570 float(x) \u5c06x\u8f6c\u6362\u5230\u4e00\u4e2a\u6d6e\u70b9\u6570 complex(real [,imag]) \u521b\u5efa\u4e00\u4e2a\u590d\u6570 str(x) \u5c06\u5bf9\u8c61 x \u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32 repr(x) \u5c06\u5bf9\u8c61 x \u8f6c\u6362\u4e3a\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32 eval(str) \u7528\u6765\u8ba1\u7b97\u5728\u5b57\u7b26\u4e32\u4e2d\u7684\u6709\u6548Python\u8868\u8fbe\u5f0f,\u5e76\u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61 tuple(s) \u5c06\u5e8f\u5217 s \u8f6c\u6362\u4e3a\u4e00\u4e2aTuple list(s) \u5c06\u5e8f\u5217 s \u8f6c\u6362\u4e3a\u4e00\u4e2aList set(s) \u8f6c\u6362\u4e3a\u53ef\u53d8\u96c6\u5408 dict(d) \u521b\u5efa\u4e00\u4e2aDict\u3002d \u5fc5\u987b\u662f\u4e00\u4e2a\u5e8f\u5217 (key,value)Tuple\u3002 frozenset(s) \u8f6c\u6362\u4e3a\u4e0d\u53ef\u53d8\u96c6\u5408 chr(x) \u5c06\u4e00\u4e2a\u6574\u6570\u8f6c\u6362\u4e3a\u4e00\u4e2a\u5b57\u7b26 unichr(x) \u5c06\u4e00\u4e2a\u6574\u6570\u8f6c\u6362\u4e3aUnicode\u5b57\u7b26 ord(x) \u5c06\u4e00\u4e2a\u5b57\u7b26\u8f6c\u6362\u4e3a\u5b83\u7684ASCII\u5341\u8fdb\u5236\u6574\u6570\u503c hex(x) \u5c06\u4e00\u4e2a\u6574\u6570\u8f6c\u6362\u4e3a\u4e00\u4e2a\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32 oct(x) \u5c06\u4e00\u4e2a\u6574\u6570\u8f6c\u6362\u4e3a\u4e00\u4e2a\u516b\u8fdb\u5236\u5b57\u7b26\u4e32 \u6570\u5b57 \u6574\u6570 - 1 0 1 \u6d6e\u70b9 - 0.1 0.0 1.0 \u4e8c\u8fdb\u5236 0b11 \u7ed3\u679c 3 \u516b\u8fdb\u5236 0o77 \u7ed3\u679c 63 16 \u8fdb\u5236 0xFF \u7ed3\u679c 255 \u5b57\u7b26\u4e32 < class ' str '> \u7eaf\u5b57\u7b26\u4e32 'str' \"str\" '''str''' \"\"\"str\"\"\" \u5b57\u7b26\u4e32\u6570\u5b57 ( \u4e8c\u8fdb\u5236 0 b ) '0b0' \u8f6c\u6210\u5b57\u7b26 str ( 0b10 ) \u7ed3\u679c '2' ## \u53ef\u4ee5\u524d\u7f6e\u8865\u96f6str(0b00000010) \u5b57\u7b26\u4e32\u6570\u5b57 ( \u516b\u8fdb\u5236 0 o ) '0o0' \u8f6c\u6362\u5b57\u7b26 str ( 0o77 ) \u7ed3\u679c '63' ## \u53ef\u4ee5\u524d\u7f6e\u8865\u96f6str(0o0077) \u5b57\u7b26\u4e32\u6570\u5b57 ( \u5341\u8fdb\u5236 ) '0' \u8f6c\u6362\u5b57\u7b26 str ( 100 ) \u7ed3\u679c '100' ## \u4e0d\u80fd\u524d\u7f6e\u8865\u96f6 \u5b57\u7b26\u4e32\u6570\u5b57 ( 16 \u8fdb\u5236 0 x ) '0x0' \u8f6c\u6362\u5b57\u7b26 str ( 0xFF ) \u7ed3\u679c '255' ## \u53ef\u4ee5\u524d\u7f6e\u8865\u96f6str(0x00FF) \u4e8c\u8fdb\u5236 < class ' bytes '> \u4e8c\u8fdb\u5236\u5b57\u8282\u8868\u793a b '' # ASCII \u5b57\u7b26 0-9 a-z A-Z \u7b49","title":"\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362"},{"location":"Python/Basic/Python-No-4-Data-Type/#_23","text":"## 255(10\u8fdb\u5236) 0b11(2\u8fdb\u5236) 0xFF(16\u8fdb\u5236) ## (10\u8fdb\u5236\u6570) >>> bin ( 255 ) '0b11111111' >>> oct ( 255 ) '0o377' >>> hex ( 255 ) '0xff' ## (2\u8fdb\u5236\u6570) >>> bin ( 0b11 ) '0b11' >>> hex ( 0xFF ) '0xff' ## (16\u8fdb\u5236\u6570) >>> bin ( 0xFF ) '0b11111111' >>> hex ( 0xFF ) '0xff'","title":"\u6570\u5b57 \u8f6c \u5b57\u7b26\u4e32"},{"location":"Python/Basic/Python-No-4-Data-Type/#_24","text":"## '123'(\u4ee510\u8fdb\u5236\u89e3\u6790) '10'(\u4ee52\u8fdb\u5236\u89e3\u6790) 'a'(\u4ee516\u8fdb\u5236\u89e3\u6790) ## (10\u8fdb\u5236\u8868\u793a\u7684\u5b57\u7b26\u4e32) >>> int ( '123' ) 123 ## \u5341\u8fdb\u5236\u5b57\u7b26\u8f6c\u5341\u8fdb\u5236\u6570\u5b57 >>> int ( '123' , 10 ) 123 ## \u9ed8\u8ba4\u662f\u5341\u8fdb\u5236 ## (\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u5b57\u7b26\u4e32) >>> int ( '100' , 2 ) 4 ## \u4e8c\u8fdb\u5236\u7684 100 \u7b49\u4e8e \u5341\u8fdb\u5236\u7684 4\uff08\u53ef\u4ee5\u4e0d\u52a0\u524d\u7f6e 0b\uff09 >>> int ( '0b100' , 2 ) 4 ## \u4e8c\u8fdb\u5236\u7684 100 \u7b49\u4e8e \u5341\u8fdb\u5236\u7684 4 >>> int ( '0b0100' , 2 ) 4 ## \u53ef\u4ee5\u524d\u7f6e\u8865\u96f6 ## (16\u8fdb\u5236\u8868\u793a\u7684\u5b57\u7b26\u4e32) >>> int ( 'a' , 16 ) 10 ## 16\u8fdb\u5236\u7684 a \u7b49\u4e8e \u5341\u8fdb\u5236\u7684 10\uff08\u53ef\u4ee5\u4e0d\u52a0\u524d\u7f6e 0x\uff09 >>> int ( '0xa' , 16 ) 10 ## 16\u8fdb\u5236\u7684 a \u7b49\u4e8e \u5341\u8fdb\u5236\u7684 10 >>> int ( '0x0a' , 16 ) 10 ## 16\u8fdb\u5236\u7684 a \u7b49\u4e8e \u5341\u8fdb\u5236\u7684 10\uff08\u53ef\u4ee5\u524d\u7f6e\u8865\u96f6\uff09 >>> int ( '10' , 16 ) 16 ## 16\u8fdb\u5236\u768410 \u7b49\u4e8e \u5341\u8fdb\u5236\u7684 16\uff08\u53ef\u4ee5\u4e0d\u52a0\u524d\u7f6e 0x\uff09 >>> int ( '0x10' , 16 ) 16 ## 16\u8fdb\u5236\u768410 \u7b49\u4e8e \u5341\u8fdb\u5236\u7684 16 >>> int ( '0x0010' , 16 ) 16 ## 16\u8fdb\u5236\u768410 \u7b49\u4e8e \u5341\u8fdb\u5236\u7684 16\uff08\u53ef\u4ee5\u524d\u7f6e\u8865\u96f6\uff09","title":"\u5b57\u7b26\u4e32 \u8f6c \u6570\u5b57\uff08\u5341\u8fdb\u5236\u6570\uff09"},{"location":"Python/Basic/Python-No-4-Data-Type/#_25","text":"## 0b11 0xFF ## \u5341\u8fdb\u5236 \u8f6c \u5341\u8fdb\u5236 >>> int ( 255 ) 255 # \u65e0\u610f\u4e49\u64cd\u4f5c >>> 255 255 # \u65e0\u610f\u4e49\u64cd\u4f5c ## \u4e8c\u8fdb\u5236 \u8f6c \u5341\u8fdb\u5236 >>> int ( 0b11 ) 3 # \u53ef\u52a0\u524d\u7f6e\u96f6 int(0b0011) >>> 0b11111111 255 # \u7b49\u4ef7 ## 16\u8fdb\u5236 \u8f6c \u5341\u8fdb\u5236 >>> int ( 0xFF ) 255 >>> 0xff 255 # \u7b49\u4ef7 \u4e14 \u5ffd\u7565\u5927\u5c0f\u5199 >>> 0xFF 255 # \u7b49\u4ef7 \u4e14 \u5ffd\u7565\u5927\u5c0f\u5199 ## \u5341\u8fdb\u5236 \u8f6c \u4e8c\u8fdb\u5236\uff08\u4f7f\u7528 \u6570\u5b57 \u8f6c \u5b57\u8282\u7801/\u5b57\u7b26\uff09 255 \u7b49\u4ef7 0b11111111 ## \u5341\u8fdb\u5236 \u8f6c 16\u8fdb\u5236\uff08\u4f7f\u7528 \u6570\u5b57 \u8f6c \u5b57\u8282\u7801/\u5b57\u7b26\uff09 255 \u7b49\u4ef7 0xff","title":"\u6570\u5b57 \u8f6c \u6570\u5b57"},{"location":"Python/Basic/Python-No-4-Data-Type/#_26","text":">>> bytes ( 'abc' , 'utf-8' ) b 'abc' >>> bytes ( '\u7f16\u7a0b' , 'utf-8' ) b ' \\xe7\\xbc\\x96\\xe7\\xa8\\x8b ' >>> bytes ( 'Python3\u7f16\u7a0b' , 'utf-8' ) b 'Python3 \\xe7\\xbc\\x96\\xe7\\xa8\\x8b ' >>> 'Python3\u7f16\u7a0b' . encode ( 'UTF-8' ) b 'Python3 \\xe7\\xbc\\x96\\xe7\\xa8\\x8b ' >>> S = 'Python3\u7f16\u7a0b' 'Python3\u7f16\u7a0b' >>> B = bytes ( S , 'utf-8' ) b 'Python3 \\xe7\\xbc\\x96\\xe7\\xa8\\x8b ' >>> FMT = str ( len ( B )) + 's' '13s' >>> struct . pack ( FMT , B ) b 'Python3 \\xe7\\xbc\\x96\\xe7\\xa8\\x8b ' ## \u4ee516\u8fdb\u5236\u6570\u5b57\u5199\u7684\u5b57\u7b26\u4e32\uff0c\u76f4\u63a5\u8f6c\u6210\u4e00\u6837\u7684\u5b57\u8282\u7801\uff082\u4e2a16\u8fdb\u5236\u5b57\u7b26\u624d\u662f\u4e00\u4e2a\u5b57\u8282\uff09 >>> bytes . fromhex ( '01' ) b ' \\x01 ' # \u5355\u5b57\u8282 >>> bytes . fromhex ( '0001' ) b ' \\x00\\x01 ' # \u53cc\u5b57\u8282 >>> bytes . fromhex ( 'aabbccddeeff' ) b ' \\xaa\\xbb\\xcc\\xdd\\xee\\xff ' # \u591a\u5b57\u8282","title":"\u5b57\u7b26\u4e32 \u8f6c \u5b57\u8282\u7801"},{"location":"Python/Basic/Python-No-4-Data-Type/#_27","text":"## \u53d6\u51fa16\u8fdb\u5236\u8868\u793a\u7684\u5185\u5bb9 >>> b 'abc' . decode ( 'UTF-8' ) 'abc' >>> b 'Python3 \\xe7\\xbc\\x96\\xe7\\xa8\\x8b ' . decode ( 'UTF-8' ) 'Python3\u7f16\u7a0b' >>> b ' \\xaa\\xbb\\xcc\\xdd\\xee\\xff ' . hex () 'aabbccddeeff' >>> b '0' . hex () '30' ## \u5b57\u7b260\u5728ASCII\u7801\u4e0a\u7684\u6570\u5b57\uff08\u6570\u5b57\u662f16\u8fdb\u5236\u8868\u793a\uff09== 48\uff08\u5341\u8fdb\u5236\uff09 >>> b '1' . hex () '31' >>> b 'z' . hex () '7a'","title":"\u5b57\u8282\u7801 \u8f6c \u5b57\u7b26\u4e32"},{"location":"Python/Basic/Python-No-4-Data-Type/#16","text":"# 10\u8fdb\u5236\u6570 \u8f6c \u5b57\u8282\u7801 import struct >>> struct . pack ( 'B' , 0 ) b ' \\x00 ' >>> struct . pack ( 'B' , 1 ) b ' \\x01 ' >>> struct . pack ( 'B' , 101 ) b 'e' ## 101 \u5bf9\u5e94 16\u8fdb\u5236\u7684 0x65\uff08\u6b64\u5904\u8fd4\u56de\u503c\u662f\u663e\u793a\u4e3a\u5f53\u524d\u6574\u6570 101 \u5bf9\u5e94\u7684 ASCII\u5b57\u7b26 e\uff09 >>> struct . pack ( 'B' , 255 ) b ' \\xff ' # \u65e0\u7b26\u53f7\u6700\u5927\u5355\u5b57\u7b26\u53ef\u4ee5\u8868\u793a\u7684\u6570\u5b57 >>> struct . pack ( '>i' , 255 ) b ' \\x00\\x00\\x00\\xff ' # 4\u5b57\u8282\u5927\u7aef\u8868\u793a\u7684\u6570\u5b57 >>> struct . pack ( '<i' , 255 ) b ' \\xff\\x00\\x00\\x00 ' # 4\u5b57\u8282\u5c0f\u7aef\u8868\u793a\u7684\u6570\u5b57 # 2\u8fdb\u5236\u6570 \u8f6c \u5b57\u8282\u7801 import struct >>> struct . pack ( 'B' , 0b11111111 ) b ' \\xff ' >>> struct . pack ( '>i' , 0b111 ) b ' \\x00\\x00\\x00\\x07 ' # 0b111 \u7b49\u4e8e 7\uff0810\u8fdb\u5236\uff09 >>> struct . pack ( '>i' , 0b1111 ) b ' \\x00\\x00\\x00\\x0f ' # 0b1111 \u7b49\u4e8e 15\uff0810\u8fdb\u5236\uff09 >>> struct . pack ( '>i' , 0b11111 ) b ' \\x00\\x00\\x00\\x1f ' # 0b11111 \u7b49\u4e8e 31\uff0810\u8fdb\u5236\uff09 # 16\u8fdb\u5236\u6570 \u8f6c \u5b57\u8282\u7801 import struct >>> struct . pack ( 'B' , 0xff ) b ' \\xff ' >>> struct . pack ( '>i' , 0xfff ) b ' \\x00\\x00\\x0f\\xff '","title":"\u6570\u5b57 \u8f6c \u5b57\u8282\u7801\uff08\u662f\u4e8c\u8fdb\u5236\uff0c\u752816\u8fdb\u5236\u663e\u793a\uff09"},{"location":"Python/Basic/Python-No-4-Data-Type/#_28","text":"import struct 16 \u8fdb\u5236\u8868\u73b0 10 \u8fdb\u5236\u7b49\u503c >>> struct . unpack ( 'B' , b ' \\xff ' ) ( 255 ,) # \u5355\u5b57\u8282 >>> struct . unpack ( '>i' , b ' \\x00\\x00\\x00\\xff ' ) ( 255 ,) # 4\u5b57\u8282\uff0c\u5927\u7aef\u6a21\u5f0f >>> struct . unpack ( '<i' , b ' \\x00\\x00\\x00\\xff ' ) ( - 16777216 ,) # 4\u5b57\u8282\uff0c\u5c0f\u7aef\u6a21\u5f0f ## \u624b\u52a8 \u8f6c\u6362 \u5b57\u8282\u7801 -> \u5b57\u7b26\u4e32 >>> B = b ' \\xe9 ' >>> S = B . hex () >>> S # \u503c 'e9' \u5b57\u7b26\u4e32 \uff08 16 \u8fdb\u5236\u683c\u5f0f \uff09 -> \u6570\u5b57 \uff08 10 \u8fdb\u5236 \uff09 >>> int ( S , 16 ) # \u503c 233","title":"\u5b57\u8282\u7801 \u8f6c \u6570\u5b57"},{"location":"Python/Basic/Python-No-4-Data-Type/#ascii","text":"\u5b57\u8282 b'\\x05' \u5b57\u7b26\u4e32 '\\x05' \u5c06\u4e00\u4e2a\u6574\u6570 (0-1114111) \u8f6c\u6362\u4e3a \u4e00\u4e2a\u5b57\u7b26\uff08\u6574\u6570\u5bf9\u5e94\u7684 ASCII \u5b57\u7b26\uff09 ValueError: chr() arg not in range(0x110000) >>> chr ( 0 ) ' \\x00 ' >>> chr ( 1 ) ' \\x01 ' >>> chr ( 97 ) 'a' >>> chr ( 1114111 ) ' \\U0010ffff ' >>> len ( chr ( 101 )) 1 # \u957f\u5ea6\u4e3a 1\u4e2a\u5b57\u7b26 >>> len ( chr ( 1114111 )) 1 # \u957f\u5ea6\u4e3a 1\u4e2a\u5b57\u7b26","title":"ASCII \u5b57\u7b26 \u548c \u6570\u5b57"},{"location":"Python/Basic/Python-No-4-Data-Type/#ascii_1","text":">>> ord ( ' \\x00 ' ) 0 >>> ord ( ' \\x01 ' ) 1 >>> ord ( 'a' ) 97 >>> ord ( '0' ) 48 >>> ord ( '1' ) 49 >>> ord ( 'A' ) 65 >>> ord ( 'Z' ) 90 >>> ord ( ' \\U0010ffff ' ) 1114111","title":"\u5c06\u4e00\u4e2a ASCII\u5b57\u7b26 \u8f6c\u6362\u4e3a \u4e00\u4e2a\u6574\u6570"},{"location":"Python/Basic/Python-No-4-Data-Type/#ascii-bin","text":"from binascii import b2a_hex , a2b_hex >>> a2b_hex ( 'ab' ) b ' \\xab ' >>> b2a_hex ( b 'ab' ) b '6162' >>> a2b_hex ( b '6162' ) b 'ab'","title":"ASCII \u5b57\u7b26 \u548c bin(\u5b57\u8282)"},{"location":"Python/Basic/Python-No-4-Data-Type/#_29","text":"","title":"\u603b\u7ed3 (\u6458\u81ea \u7f8b\u8679\u5149)"},{"location":"Python/Basic/Python-No-4-Data-Type/#int","text":"\u8f83\u5c0f\u7684\u6574\u6570\u4f1a\u5f88\u9891\u7e41\u7684\u88ab\u4f7f\u7528\uff0c\u6240\u4ee5python\u5c06\u8fd9\u4e9b\u5bf9\u8c61\u653e\u7f6e\u5230\u4e86\u4e00\u4e2a\u6c60\u5b50\u4e2d\uff0c\u6bcf\u6b21\u9700\u8981\u8fd9\u4e9b\u5bf9\u8c61\u7684\u65f6\u5019\u5c31\u5230\u6c60\u5b50\u4e2d\u83b7\u53d6\u8fd9\u4e2a\u503c\uff0c\u907f\u514d\u591a\u6b21\u7684\u91cd\u590d\u521b\u5efa\u5bf9\u8c61\u5f15\u8d77\u7684\u8bb8\u591a\u4e0d\u5fc5\u8981\u7684\u5f00\u9500\u3002\u8fd9\u4e2a\u6c60\u5b50\u5185\u7684\u6570\u5b57\u8303\u56f4\u662f[-5, 257), \u6240\u4ee5\u90fd\u662f\u4ece\u6c60\u5b50\u91cc\u9762\u53d6\u503c\uff0c\u81ea\u7136id\u4e0d\u53d8\u3002","title":"int \u7c7b\u578b\u89e3\u6790"},{"location":"Python/Basic/Python-No-4-Data-Type/#float","text":"\u5bf9\u4e8efloat\u7c7b\u578b\u7684\u4f7f\u7528\u81ea\u7136\u6ca1\u6709int\u90a3\u4e48\u9891\u7e41\uff0c\u5e76\u4e14float\u7c7b\u578b\u4e5f\u4e0d\u597d\u5b9a\u4e49\u54ea\u4e9b\u5e38\u7528\uff0c\u4e5f\u5c31\u6ca1\u6709\u6c60\u5b50\u7ed9\u5230\u8fd9\u4e2a\u7c7b\u578b\uff0c\u6240\u4ee5\u6bcf\u6b21\u91cd\u65b0\u521b\u5efa\u5373\u53ef\u3002","title":"float\u7c7b\u578b\u89e3\u6790"},{"location":"Python/Basic/Python-No-4-Data-Type/#tuple_6","text":"\u5bf9\u4e8etuple\u7c7b\u578b\uff0c\u4e0efloat\u7c7b\u578b\u7684\u601d\u7ef4\u76f8\u4f3c\uff0c\u6240\u4ee5\u4e5f\u662f\u6bcf\u6b21\u91cd\u65b0\u521b\u5efa\u3002","title":"tuple\u7c7b\u578b\u89e3\u6790"},{"location":"Python/Basic/Python-No-4-Data-Type/#string","text":"\u5355\u8bcd\u7c7b\u578b\u7684str\u7531\u4e8e\u88ab\u91cd\u590d\u4f7f\u7528\u7684\u6982\u7387\u6bd4\u8f83\u5927\uff0c\u6240\u4ee5\u5728python\u4e2d\u4e3a\u5355\u8bcd\u7c7b\u578b\u7684str\u505a\u4e86\u4e00\u4e2a\u7f13\u5b58\uff0c\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u662f\u5355\u8bcd\u7c7b\u578b\u7684str\uff0c \u4f1a\u88ab\u5b58\u50a8\u5230\u4e00\u4e2a\u5b57\u5178(dict)\u4e2d\uff0c\u5b57\u5178\u7684\u5185\u5bb9\u662f\u5b57\u7b26\u4e32\u4e3akey\uff0c \u5730\u5740\u4e3avalue\u3002\u5f53\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32\u9700\u8981\u521b\u5efa\uff0c\u5c31\u5148\u53bb\u8bbf\u95ee\u8fd9\u4e2a\u5b57\u5178\uff0c\u5982\u679c\u5b58\u5728\u5219\u8fd4\u56de\u5b57\u5178\u4e2d\u5b57\u7b26\u4e32\u7684\u5730\u5740\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de\u65b0\u521b\u5efa\u7684\u5730\u5740\uff0c\u5e76\u5c06\u8fd9\u4e2a\u5b57\u7b26\u4e32\u6dfb\u52a0\u8fdb\u5165\u5b57\u5178\u3002\u8fd9\u662f\u5b57\u7b26\u4e32\u7684intern\u673a\u5236\u3002","title":"string\u7c7b\u578b\u89e3\u6790"},{"location":"Python/Basic/Python-No-5-Operator/","text":"\u57fa\u7840\u96be\u70b9\uff1a\u8fd0\u7b97\u7b26 \u7b97\u672f\u8fd0\u7b97\u7b26 \u00b6 \u4ee5\u4e0b\u5047\u8bbe\u53d8\u91cfa\u4e3a10\uff0c\u53d8\u91cfb\u4e3a21\uff1a \u8fd0\u7b97\u7b26 \u63cf\u8ff0 \u5b9e\u4f8b + \u52a0 \u4e24\u4e2a\u5bf9\u8c61\u76f8\u52a0 a + b \u8f93\u51fa\u7ed3\u679c 31 - \u51cf \u5f97\u5230\u8d1f\u6570\u6216\u662f\u4e00\u4e2a\u6570\u51cf\u53bb\u53e6\u4e00\u4e2a\u6570 a - b \u8f93\u51fa\u7ed3\u679c -11 * \u4e58 \u4e24\u4e2a\u6570\u76f8\u4e58\u6216\u662f\u8fd4\u56de\u4e00\u4e2a\u88ab\u91cd\u590d\u82e5\u5e72\u6b21\u7684\u5b57\u7b26\u4e32 a * b \u8f93\u51fa\u7ed3\u679c 210 / \u9664 x \u9664\u4ee5 y b / a \u8f93\u51fa\u7ed3\u679c 2.1 % \u53d6\u6a21 \u8fd4\u56de\u9664\u6cd5\u7684\u4f59\u6570 b % a \u8f93\u51fa\u7ed3\u679c 1 ** \u5e42 \u8fd4\u56dex\u7684y\u6b21\u5e42 a**b \u4e3a10\u768421\u6b21\u65b9 // \u53d6\u6574\u9664 \u5411\u4e0b\u53d6\u63a5\u8fd1\u5546\u7684\u6574\u6570 -9//2\u8f93\u51fa\u7ed3\u679c\u4e3a-5 \u6bd4\u8f83\u8fd0\u7b97\u7b26 \u00b6 \u4ee5\u4e0b\u5047\u8bbe\u53d8\u91cfa\u4e3a10\uff0c\u53d8\u91cfb\u4e3a20\uff1a \u8fd0\u7b97\u7b26 \u63cf\u8ff0 \u5b9e\u4f8b == \u7b49\u4e8e \u6bd4\u8f83\u5bf9\u8c61\u662f\u5426\u76f8\u7b49 (a == b) \u8fd4\u56de False\u3002 != \u4e0d\u7b49\u4e8e \u6bd4\u8f83\u4e24\u4e2a\u5bf9\u8c61\u662f\u5426\u4e0d\u76f8\u7b49 (a != b) \u8fd4\u56de True\u3002 > \u5927\u4e8e \u8fd4\u56dex\u662f\u5426\u5927\u4e8ey (a > b) \u8fd4\u56de False\u3002 < \u5c0f\u4e8e \u8fd4\u56dex\u662f\u5426\u5c0f\u4e8ey (a < b) \u8fd4\u56de True\u3002 >= \u5927\u4e8e\u7b49\u4e8e \u8fd4\u56dex\u662f\u5426\u5927\u4e8e\u7b49\u4e8ey\u3002 (a >= b) \u8fd4\u56de False\u3002 <= \u5c0f\u4e8e\u7b49\u4e8e \u8fd4\u56dex\u662f\u5426\u5c0f\u4e8e\u7b49\u4e8ey\u3002 (a <= b) \u8fd4\u56de True\u3002 \u6240\u6709\u6bd4\u8f83\u8fd0\u7b97\u7b26\u8fd4\u56de1\u8868\u793a\u771f\uff0c\u8fd4\u56de0\u8868\u793a\u5047\u3002 \u8fd9\u5206\u522b\u4e0e\u7279\u6b8a\u7684\u53d8\u91cfTrue\u548cFalse\u7b49\u4ef7\u3002\u6ce8\u610f\uff0c\u8fd9\u4e9b\u53d8\u91cf\u540d\u7684\u5927\u5199\u3002 \u8d4b\u503c\u8fd0\u7b97\u7b26 \u00b6 \u4ee5\u4e0b\u5047\u8bbe\u53d8\u91cfa\u4e3a10\uff0c\u53d8\u91cfb\u4e3a20\uff1a \u8fd0\u7b97\u7b26 \u63cf\u8ff0 \u5b9e\u4f8b = \u7b80\u5355\u7684\u8d4b\u503c\u8fd0\u7b97\u7b26 c = a + b \u5c06 a + b \u7684\u8fd0\u7b97\u7ed3\u679c\u8d4b\u503c\u4e3a c += \u52a0\u6cd5\u8d4b\u503c\u8fd0\u7b97\u7b26 c += a \u7b49\u6548\u4e8e c = c + a -= \u51cf\u6cd5\u8d4b\u503c\u8fd0\u7b97\u7b26 c -= a \u7b49\u6548\u4e8e c = c - a *= \u4e58\u6cd5\u8d4b\u503c\u8fd0\u7b97\u7b26 c *= a \u7b49\u6548\u4e8e c = c * a /= \u9664\u6cd5\u8d4b\u503c\u8fd0\u7b97\u7b26 c /= a \u7b49\u6548\u4e8e c = c / a %= \u53d6\u6a21\u8d4b\u503c\u8fd0\u7b97\u7b26 c %= a \u7b49\u6548\u4e8e c = c % a **= \u5e42\u8d4b\u503c\u8fd0\u7b97\u7b26 c **= a \u7b49\u6548\u4e8e c = c ** a //= \u53d6\u6574\u9664\u8d4b\u503c\u8fd0\u7b97\u7b26 c //= a \u7b49\u6548\u4e8e c = c // a := \u6d77\u8c61\u8fd0\u7b97\u7b26\uff0c\u53ef\u5728\u8868\u8fbe\u5f0f\u5185\u90e8\u4e3a\u53d8\u91cf\u8d4b\u503c\u3002 \u6d77\u8c61\u8fd0\u7b97\u7b26/\u6210\u4e3a\u8fd0\u7b97\u7b26/\u547d\u540d\u8868\u8fbe\u5f0f\u8fd0\u7b97\u7b26 \u00b6 \u4f8b1 age = 20 if age > 18 : print ( 'Adult' ) # \u4f7f\u7528\u6d77\u8c61 if ( age := 20 ) > 18 : print ( 'Adult' ) \u4f8b2 L = [ 1 , 2 , 3 ] n = len ( L ) if n > 2 : print ( 'Length of L is' , len ( L )) # \u4f7f\u7528\u6d77\u8c61 L = [ 1 , 2 , 3 ] if ( n := len ( L )) > 2 : print ( 'Length of L is' , n ) \u53ef\u4ee5\u7406\u89e3\u4e3a len(L) \u7684\u8fd4\u56de\u503c\u8d4b\u503c\u7ed9 n \uff0c\u7136\u540e\u5224\u65ad n>2 \u8fd9\u6837\u505a\u7684\u597d\u5904\u53ef\u4ee5\u63d0\u5347\u8fd0\u884c\u6548\u7387 \u56e0\u4e3a\u5728\u9700\u8981\u591a\u6b21\u8c03\u7528\u51fd\u6570\u8fd9\u79cd\u4f1a\u964d\u4f4e\u8fd0\u884c\u6548\u7387\u7684\u65f6\u5019 \u6211\u4eec\u901a\u5e38\u4f1a\u51cf\u5c11\u76f8\u540c\u7684\u51fd\u6570\u8c03\u7528\uff0c\u5c06\u51fd\u6570\u8c03\u7528\u540e\u7684\u8fd4\u56de\u503c\u4fdd\u5b58\u5728\u4e00\u4e2a\u53d8\u91cf\u91cc \u7136\u540e \u9891\u7e41\u8c03\u7528\u51fd\u6570 \u6362\u6210 \u9891\u7e41\u4f7f\u7528\u8fd9\u4e2a\u53d8\u91cf \u4f46\u662f\u8fd9\u6837\u5c31\u9700\u8981\u591a\u4e00\u884c\u4fdd\u5b58\u8fd4\u56de\u503c\u7684\u8868\u8fbe\u5f0f \u800c \u6d77\u8c61\u8fd0\u7b97\u7b26 \u6216\u8005\u8bf4 \u6210\u4e3a\u8fd0\u7b97\u7b26 \u5219\u517c\u987e\u4e86\u4e24\u8005\uff0c\u5373\u4f7f\u7528\u4e86\u53d8\u91cf\u4fdd\u5b58\u8fd4\u56de\u503c\uff0c\u53c8\u4e0d\u7528\u591a\u4e00\u884c\u4ee3\u7801\u3002 n = 0 while n < 3 : print ( n ) # 0,1,2 n += 1 # \u5f53\u8f6c\u6362\u4e3a\u6d77\u8c61\u8fd0\u7b97\u7b26\u65f6 w = 0 while ( w := w + 1 ) < 3 : print ( w ) # 1,2 while True : p = input ( \"Enter the password: \" ) if p == \"the password\" : break # \u5f53\u8f6c\u6362\u4e3a\u6d77\u8c61\u8fd0\u7b97\u7b26\u65f6 while ( p := input ( \"Enter the password: \" )) != \"the password\" : continue \u4f4d\u8fd0\u7b97\u7b26 \u00b6 \u6309\u4f4d\u8fd0\u7b97\u7b26\u662f\u628a\u6570\u5b57\u770b\u4f5c\u4e8c\u8fdb\u5236\u6765\u8fdb\u884c\u8ba1\u7b97\u7684\u3002Python\u4e2d\u7684\u6309\u4f4d\u8fd0\u7b97\u6cd5\u5219\u5982\u4e0b\uff1a \u4e0b\u8868\u4e2d\u53d8\u91cf a \u4e3a 60\uff0cb \u4e3a 13\u4e8c\u8fdb\u5236\u683c\u5f0f\u5982\u4e0b\uff1a a = 0011 1100 # 60 b = 0000 1101 # 13 ----------------- a & b = 0000 1100 # 12 a | b = 0011 1101 # 61 a ^ b = 0011 0001 # 49 ~ a = 1100 0011 # 195 \u8fd0\u7b97\u7b26 \u63cf\u8ff0 \u5b9e\u4f8b & \u6309\u4f4d\u4e0e\u8fd0\u7b97\u7b26\uff1a\u53c2\u4e0e\u8fd0\u7b97\u7684\u4e24\u4e2a\u503c,\u5982\u679c\u4e24\u4e2a\u76f8\u5e94\u4f4d\u90fd\u4e3a1,\u5219\u8be5\u4f4d\u7684\u7ed3\u679c\u4e3a1,\u5426\u5219\u4e3a0 (a & b) \u8f93\u51fa\u7ed3\u679c 12 \uff0c\u4e8c\u8fdb\u5236\u89e3\u91ca\uff1a 0000 1100 | \u6309\u4f4d\u6216\u8fd0\u7b97\u7b26\uff1a\u53ea\u8981\u5bf9\u5e94\u7684\u4e8c\u4e2a\u4e8c\u8fdb\u4f4d\u6709\u4e00\u4e2a\u4e3a1\u65f6\uff0c\u7ed3\u679c\u4f4d\u5c31\u4e3a1\u3002 (a| b) \u8f93\u51fa\u7ed3\u679c 61 \uff0c\u4e8c\u8fdb\u5236\u89e3\u91ca\uff1a 0011 1101 ^ \u6309\u4f4d\u5f02\u6216\u8fd0\u7b97\u7b26\uff1a\u5f53\u4e24\u5bf9\u5e94\u7684\u4e8c\u8fdb\u4f4d\u76f8\u5f02\u65f6\uff0c\u7ed3\u679c\u4e3a1 (a ^ b) \u8f93\u51fa\u7ed3\u679c 49 \uff0c\u4e8c\u8fdb\u5236\u89e3\u91ca\uff1a 0011 0001 ~ \u6309\u4f4d\u53d6\u53cd\u8fd0\u7b97\u7b26\uff1a\u5bf9\u6570\u636e\u7684\u6bcf\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u53d6\u53cd,\u5373\u628a1\u53d8\u4e3a0,\u628a0\u53d8\u4e3a1 (~a ) \u8f93\u51fa\u7ed3\u679c -61 \uff0c\u4e8c\u8fdb\u5236\u89e3\u91ca\uff1a 1100 0011\uff0c \u5728\u4e00\u4e2a\u6709\u7b26\u53f7\u4e8c\u8fdb\u5236\u6570\u7684\u8865\u7801\u5f62\u5f0f\u3002 << \u5de6\u79fb\u52a8\u8fd0\u7b97\u7b26\uff1a\u8fd0\u7b97\u6570\u7684\u5404\u4e8c\u8fdb\u4f4d\u5168\u90e8\u5de6\u79fbN\u4f4d.\u9ad8\u4f4d\u4e22\u5f03\uff0c\u4f4e\u4f4d\u88650\u3002 a << 2 \u8f93\u51fa\u7ed3\u679c 240 \uff0c\u4e8c\u8fdb\u5236\u89e3\u91ca\uff1a 1111 0000 >> \u53f3\u79fb\u52a8\u8fd0\u7b97\u7b26\uff1a\u8fd0\u7b97\u6570\u7684\u5404\u4e8c\u8fdb\u4f4d\u5168\u90e8\u53f3\u79fbN\u4f4d\uff0c a >> 2 \u8f93\u51fa\u7ed3\u679c 15 \uff0c\u4e8c\u8fdb\u5236\u89e3\u91ca\uff1a 0000 1111 a << 1 \u7b49\u4ef7\u4e8e a * 2 a << 2 \u7b49\u4ef7\u4e8e a * 2 * 2 a >> 1 \u7b49\u4ef7\u4e8e a / 2 a >> 2 \u7b49\u4ef7\u4e8e a / 2 / 2 a ^= a \u7b49\u4ef7\u4e8e a = a ^ a \u7b49\u4ef7\u4e8e\u7f6e\u96f6 a = 0 a = a ^ (~a) + 1 \u7b49\u4ef7\u4e8e\u7f6e\u96f6 a = 0 ~a + 1 \u4e3aa\u7684\u8865\u7801 \u903b\u8f91\u8fd0\u7b97\u7b26 \u00b6 Python\u8bed\u8a00\u652f\u6301\u903b\u8f91\u8fd0\u7b97\u7b26\uff0c\u4ee5\u4e0b\u5047\u8bbe\u53d8\u91cf a \u4e3a 10, b\u4e3a 20: \u8fd0\u7b97\u7b26 \u8868\u8fbe\u5f0f \u63cf\u8ff0 \u5b9e\u4f8b and x and y \u5e03\u5c14\"\u4e0e\" - \u5982\u679c x \u4e3a False\uff0cx and y \u8fd4\u56de False\uff0c\u5426\u5219\u5b83\u8fd4\u56de y \u7684\u8ba1\u7b97\u503c\u3002 (a and b) \u8fd4\u56de 20\u3002 or x or y \u5e03\u5c14\"\u6216\" - \u5982\u679c x \u662f True\uff0c\u5b83\u8fd4\u56de x \u7684\u503c\uff0c\u5426\u5219\u5b83\u8fd4\u56de y \u7684\u8ba1\u7b97\u503c\u3002 (a or b) \u8fd4\u56de 10\u3002 not not x \u5e03\u5c14\"\u975e\" - \u5982\u679c x \u4e3a True\uff0c\u8fd4\u56de False \u3002\u5982\u679c x \u4e3a False\uff0c\u5b83\u8fd4\u56de True\u3002 not(a and b) \u8fd4\u56de False \u6210\u5458\u8fd0\u7b97\u7b26 \u00b6 \u9664\u4e86\u4ee5\u4e0a\u7684\u4e00\u4e9b\u8fd0\u7b97\u7b26\u4e4b\u5916\uff0cPython\u8fd8\u652f\u6301\u6210\u5458\u8fd0\u7b97\u7b26\uff0c\u6d4b\u8bd5\u5b9e\u4f8b\u4e2d\u5305\u542b\u4e86\u4e00\u7cfb\u5217\u7684\u6210\u5458\uff0c\u5305\u62ec\u5b57\u7b26\u4e32\uff0c\u5217\u8868\u6216\u5143\u7ec4\u3002 \u8fd0\u7b97\u7b26 \u63cf\u8ff0 \u5b9e\u4f8b in \u5982\u679c\u5728\u6307\u5b9a\u7684\u5e8f\u5217\u4e2d\u627e\u5230\u503c\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\u3002 x \u5728 y \u5e8f\u5217\u4e2d , \u5982\u679c x \u5728 y \u5e8f\u5217\u4e2d\u8fd4\u56de True\u3002 not in \u5982\u679c\u5728\u6307\u5b9a\u7684\u5e8f\u5217\u4e2d\u6ca1\u6709\u627e\u5230\u503c\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\u3002 x \u4e0d\u5728 y \u5e8f\u5217\u4e2d , \u5982\u679c x \u4e0d\u5728 y \u5e8f\u5217\u4e2d\u8fd4\u56de True\u3002 \u8eab\u4efd\u8fd0\u7b97\u7b26 \u00b6 \u8eab\u4efd\u8fd0\u7b97\u7b26\u7528\u4e8e\u6bd4\u8f83\u4e24\u4e2a\u5bf9\u8c61\u7684\u5b58\u50a8\u5355\u5143 \u8fd0\u7b97\u7b26 \u63cf\u8ff0 \u5b9e\u4f8b is is \u662f\u5224\u65ad\u4e24\u4e2a\u6807\u8bc6\u7b26\u662f\u4e0d\u662f\u5f15\u7528\u81ea\u4e00\u4e2a\u5bf9\u8c61 x is y, \u7c7b\u4f3c id(x) == id(y) , \u5982\u679c\u5f15\u7528\u7684**\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61**\u5219\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False is not is not \u662f\u5224\u65ad\u4e24\u4e2a\u6807\u8bc6\u7b26\u662f\u4e0d\u662f\u5f15\u7528\u81ea\u4e0d\u540c\u5bf9\u8c61 x is not y \uff0c \u7c7b\u4f3c id(a) != id(b)\u3002\u5982\u679c\u5f15\u7528\u7684**\u4e0d\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61**\u5219\u8fd4\u56de\u7ed3\u679c True\uff0c\u5426\u5219\u8fd4\u56de False\u3002 id() id() \u51fd\u6570\u7528\u4e8e\u83b7\u53d6\u5bf9\u8c61\u5185\u5b58\u5730\u5740 #id() >>> a = 'runoob' >>> id ( a ) 4531887632 >>> b = 1 >>> id ( b ) 140588731085608 \u4e09\u76ee\u8fd0\u7b97\u7b26 \u00b6 true if expression else flase \u6ee1\u8db3\u8868\u8fbe\u5f0f\u65f6 if \u8868\u8fbe\u5f0f else \u4e0d\u6ee1\u8db3\u8868\u8fbe\u5f0f\u65f6 >>> a = 1 >>> b = 2 >>> h = a + b if a < b else a - b >>> h 3 >>> q = ( a + b ) if ( a < b ) else ( a - b ) >>> q 3 \u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7 \u00b6 \u4ee5\u4e0b\u8868\u683c\u5217\u51fa\u4e86\u4ece\u6700\u9ad8\u5230\u6700\u4f4e\u4f18\u5148\u7ea7\u7684\u6240\u6709\u8fd0\u7b97\u7b26\uff1a \u8fd0\u7b97\u7b26 \u63cf\u8ff0 ** \u6307\u6570 (\u6700\u9ad8\u4f18\u5148\u7ea7) ~\u3001+\u3001- \u6309\u4f4d\u53d6\u53cd\u3001\u6b63\u3001\u8d1f *\u3001/\u3001%\u3001// \u4e58\uff0c\u9664\uff0c\u6c42\u4f59\u6570\u548c\u53d6\u6574\u9664 +\u3001- \u52a0\u3001\u51cf <<\u3001>> \u5de6\u79fb\u3001\u53f3\u79fb & \u6309\u4f4d\u4e0e ^\u3001| \u6309\u4f4d\u5f02\u6216\u3001\u6309\u4f4d\u6216 <=\u3001<\u3001>\u3001>= \u6bd4\u8f83\u8fd0\u7b97\u7b26 ==\u3001!= \u7b49\u4e8e\u8fd0\u7b97\u7b26 =\u3001%=\u3001/=\u3001//=\u3001-=\u3001+=\u3001*=\u3001**= \u8d4b\u503c\u8fd0\u7b97\u7b26 is\u3001is not \u8eab\u4efd\u8fd0\u7b97\u7b26 in\u3001not in \u6210\u5458\u8fd0\u7b97\u7b26 and\u3001or\u3001not \u903b\u8f91\u8fd0\u7b97\u7b26","title":"\u8fd0\u7b97\u7b26"},{"location":"Python/Basic/Python-No-5-Operator/#_1","text":"\u4ee5\u4e0b\u5047\u8bbe\u53d8\u91cfa\u4e3a10\uff0c\u53d8\u91cfb\u4e3a21\uff1a \u8fd0\u7b97\u7b26 \u63cf\u8ff0 \u5b9e\u4f8b + \u52a0 \u4e24\u4e2a\u5bf9\u8c61\u76f8\u52a0 a + b \u8f93\u51fa\u7ed3\u679c 31 - \u51cf \u5f97\u5230\u8d1f\u6570\u6216\u662f\u4e00\u4e2a\u6570\u51cf\u53bb\u53e6\u4e00\u4e2a\u6570 a - b \u8f93\u51fa\u7ed3\u679c -11 * \u4e58 \u4e24\u4e2a\u6570\u76f8\u4e58\u6216\u662f\u8fd4\u56de\u4e00\u4e2a\u88ab\u91cd\u590d\u82e5\u5e72\u6b21\u7684\u5b57\u7b26\u4e32 a * b \u8f93\u51fa\u7ed3\u679c 210 / \u9664 x \u9664\u4ee5 y b / a \u8f93\u51fa\u7ed3\u679c 2.1 % \u53d6\u6a21 \u8fd4\u56de\u9664\u6cd5\u7684\u4f59\u6570 b % a \u8f93\u51fa\u7ed3\u679c 1 ** \u5e42 \u8fd4\u56dex\u7684y\u6b21\u5e42 a**b \u4e3a10\u768421\u6b21\u65b9 // \u53d6\u6574\u9664 \u5411\u4e0b\u53d6\u63a5\u8fd1\u5546\u7684\u6574\u6570 -9//2\u8f93\u51fa\u7ed3\u679c\u4e3a-5","title":"\u7b97\u672f\u8fd0\u7b97\u7b26"},{"location":"Python/Basic/Python-No-5-Operator/#_2","text":"\u4ee5\u4e0b\u5047\u8bbe\u53d8\u91cfa\u4e3a10\uff0c\u53d8\u91cfb\u4e3a20\uff1a \u8fd0\u7b97\u7b26 \u63cf\u8ff0 \u5b9e\u4f8b == \u7b49\u4e8e \u6bd4\u8f83\u5bf9\u8c61\u662f\u5426\u76f8\u7b49 (a == b) \u8fd4\u56de False\u3002 != \u4e0d\u7b49\u4e8e \u6bd4\u8f83\u4e24\u4e2a\u5bf9\u8c61\u662f\u5426\u4e0d\u76f8\u7b49 (a != b) \u8fd4\u56de True\u3002 > \u5927\u4e8e \u8fd4\u56dex\u662f\u5426\u5927\u4e8ey (a > b) \u8fd4\u56de False\u3002 < \u5c0f\u4e8e \u8fd4\u56dex\u662f\u5426\u5c0f\u4e8ey (a < b) \u8fd4\u56de True\u3002 >= \u5927\u4e8e\u7b49\u4e8e \u8fd4\u56dex\u662f\u5426\u5927\u4e8e\u7b49\u4e8ey\u3002 (a >= b) \u8fd4\u56de False\u3002 <= \u5c0f\u4e8e\u7b49\u4e8e \u8fd4\u56dex\u662f\u5426\u5c0f\u4e8e\u7b49\u4e8ey\u3002 (a <= b) \u8fd4\u56de True\u3002 \u6240\u6709\u6bd4\u8f83\u8fd0\u7b97\u7b26\u8fd4\u56de1\u8868\u793a\u771f\uff0c\u8fd4\u56de0\u8868\u793a\u5047\u3002 \u8fd9\u5206\u522b\u4e0e\u7279\u6b8a\u7684\u53d8\u91cfTrue\u548cFalse\u7b49\u4ef7\u3002\u6ce8\u610f\uff0c\u8fd9\u4e9b\u53d8\u91cf\u540d\u7684\u5927\u5199\u3002","title":"\u6bd4\u8f83\u8fd0\u7b97\u7b26"},{"location":"Python/Basic/Python-No-5-Operator/#_3","text":"\u4ee5\u4e0b\u5047\u8bbe\u53d8\u91cfa\u4e3a10\uff0c\u53d8\u91cfb\u4e3a20\uff1a \u8fd0\u7b97\u7b26 \u63cf\u8ff0 \u5b9e\u4f8b = \u7b80\u5355\u7684\u8d4b\u503c\u8fd0\u7b97\u7b26 c = a + b \u5c06 a + b \u7684\u8fd0\u7b97\u7ed3\u679c\u8d4b\u503c\u4e3a c += \u52a0\u6cd5\u8d4b\u503c\u8fd0\u7b97\u7b26 c += a \u7b49\u6548\u4e8e c = c + a -= \u51cf\u6cd5\u8d4b\u503c\u8fd0\u7b97\u7b26 c -= a \u7b49\u6548\u4e8e c = c - a *= \u4e58\u6cd5\u8d4b\u503c\u8fd0\u7b97\u7b26 c *= a \u7b49\u6548\u4e8e c = c * a /= \u9664\u6cd5\u8d4b\u503c\u8fd0\u7b97\u7b26 c /= a \u7b49\u6548\u4e8e c = c / a %= \u53d6\u6a21\u8d4b\u503c\u8fd0\u7b97\u7b26 c %= a \u7b49\u6548\u4e8e c = c % a **= \u5e42\u8d4b\u503c\u8fd0\u7b97\u7b26 c **= a \u7b49\u6548\u4e8e c = c ** a //= \u53d6\u6574\u9664\u8d4b\u503c\u8fd0\u7b97\u7b26 c //= a \u7b49\u6548\u4e8e c = c // a := \u6d77\u8c61\u8fd0\u7b97\u7b26\uff0c\u53ef\u5728\u8868\u8fbe\u5f0f\u5185\u90e8\u4e3a\u53d8\u91cf\u8d4b\u503c\u3002","title":"\u8d4b\u503c\u8fd0\u7b97\u7b26"},{"location":"Python/Basic/Python-No-5-Operator/#_4","text":"\u4f8b1 age = 20 if age > 18 : print ( 'Adult' ) # \u4f7f\u7528\u6d77\u8c61 if ( age := 20 ) > 18 : print ( 'Adult' ) \u4f8b2 L = [ 1 , 2 , 3 ] n = len ( L ) if n > 2 : print ( 'Length of L is' , len ( L )) # \u4f7f\u7528\u6d77\u8c61 L = [ 1 , 2 , 3 ] if ( n := len ( L )) > 2 : print ( 'Length of L is' , n ) \u53ef\u4ee5\u7406\u89e3\u4e3a len(L) \u7684\u8fd4\u56de\u503c\u8d4b\u503c\u7ed9 n \uff0c\u7136\u540e\u5224\u65ad n>2 \u8fd9\u6837\u505a\u7684\u597d\u5904\u53ef\u4ee5\u63d0\u5347\u8fd0\u884c\u6548\u7387 \u56e0\u4e3a\u5728\u9700\u8981\u591a\u6b21\u8c03\u7528\u51fd\u6570\u8fd9\u79cd\u4f1a\u964d\u4f4e\u8fd0\u884c\u6548\u7387\u7684\u65f6\u5019 \u6211\u4eec\u901a\u5e38\u4f1a\u51cf\u5c11\u76f8\u540c\u7684\u51fd\u6570\u8c03\u7528\uff0c\u5c06\u51fd\u6570\u8c03\u7528\u540e\u7684\u8fd4\u56de\u503c\u4fdd\u5b58\u5728\u4e00\u4e2a\u53d8\u91cf\u91cc \u7136\u540e \u9891\u7e41\u8c03\u7528\u51fd\u6570 \u6362\u6210 \u9891\u7e41\u4f7f\u7528\u8fd9\u4e2a\u53d8\u91cf \u4f46\u662f\u8fd9\u6837\u5c31\u9700\u8981\u591a\u4e00\u884c\u4fdd\u5b58\u8fd4\u56de\u503c\u7684\u8868\u8fbe\u5f0f \u800c \u6d77\u8c61\u8fd0\u7b97\u7b26 \u6216\u8005\u8bf4 \u6210\u4e3a\u8fd0\u7b97\u7b26 \u5219\u517c\u987e\u4e86\u4e24\u8005\uff0c\u5373\u4f7f\u7528\u4e86\u53d8\u91cf\u4fdd\u5b58\u8fd4\u56de\u503c\uff0c\u53c8\u4e0d\u7528\u591a\u4e00\u884c\u4ee3\u7801\u3002 n = 0 while n < 3 : print ( n ) # 0,1,2 n += 1 # \u5f53\u8f6c\u6362\u4e3a\u6d77\u8c61\u8fd0\u7b97\u7b26\u65f6 w = 0 while ( w := w + 1 ) < 3 : print ( w ) # 1,2 while True : p = input ( \"Enter the password: \" ) if p == \"the password\" : break # \u5f53\u8f6c\u6362\u4e3a\u6d77\u8c61\u8fd0\u7b97\u7b26\u65f6 while ( p := input ( \"Enter the password: \" )) != \"the password\" : continue","title":"\u6d77\u8c61\u8fd0\u7b97\u7b26/\u6210\u4e3a\u8fd0\u7b97\u7b26/\u547d\u540d\u8868\u8fbe\u5f0f\u8fd0\u7b97\u7b26"},{"location":"Python/Basic/Python-No-5-Operator/#_5","text":"\u6309\u4f4d\u8fd0\u7b97\u7b26\u662f\u628a\u6570\u5b57\u770b\u4f5c\u4e8c\u8fdb\u5236\u6765\u8fdb\u884c\u8ba1\u7b97\u7684\u3002Python\u4e2d\u7684\u6309\u4f4d\u8fd0\u7b97\u6cd5\u5219\u5982\u4e0b\uff1a \u4e0b\u8868\u4e2d\u53d8\u91cf a \u4e3a 60\uff0cb \u4e3a 13\u4e8c\u8fdb\u5236\u683c\u5f0f\u5982\u4e0b\uff1a a = 0011 1100 # 60 b = 0000 1101 # 13 ----------------- a & b = 0000 1100 # 12 a | b = 0011 1101 # 61 a ^ b = 0011 0001 # 49 ~ a = 1100 0011 # 195 \u8fd0\u7b97\u7b26 \u63cf\u8ff0 \u5b9e\u4f8b & \u6309\u4f4d\u4e0e\u8fd0\u7b97\u7b26\uff1a\u53c2\u4e0e\u8fd0\u7b97\u7684\u4e24\u4e2a\u503c,\u5982\u679c\u4e24\u4e2a\u76f8\u5e94\u4f4d\u90fd\u4e3a1,\u5219\u8be5\u4f4d\u7684\u7ed3\u679c\u4e3a1,\u5426\u5219\u4e3a0 (a & b) \u8f93\u51fa\u7ed3\u679c 12 \uff0c\u4e8c\u8fdb\u5236\u89e3\u91ca\uff1a 0000 1100 | \u6309\u4f4d\u6216\u8fd0\u7b97\u7b26\uff1a\u53ea\u8981\u5bf9\u5e94\u7684\u4e8c\u4e2a\u4e8c\u8fdb\u4f4d\u6709\u4e00\u4e2a\u4e3a1\u65f6\uff0c\u7ed3\u679c\u4f4d\u5c31\u4e3a1\u3002 (a| b) \u8f93\u51fa\u7ed3\u679c 61 \uff0c\u4e8c\u8fdb\u5236\u89e3\u91ca\uff1a 0011 1101 ^ \u6309\u4f4d\u5f02\u6216\u8fd0\u7b97\u7b26\uff1a\u5f53\u4e24\u5bf9\u5e94\u7684\u4e8c\u8fdb\u4f4d\u76f8\u5f02\u65f6\uff0c\u7ed3\u679c\u4e3a1 (a ^ b) \u8f93\u51fa\u7ed3\u679c 49 \uff0c\u4e8c\u8fdb\u5236\u89e3\u91ca\uff1a 0011 0001 ~ \u6309\u4f4d\u53d6\u53cd\u8fd0\u7b97\u7b26\uff1a\u5bf9\u6570\u636e\u7684\u6bcf\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u53d6\u53cd,\u5373\u628a1\u53d8\u4e3a0,\u628a0\u53d8\u4e3a1 (~a ) \u8f93\u51fa\u7ed3\u679c -61 \uff0c\u4e8c\u8fdb\u5236\u89e3\u91ca\uff1a 1100 0011\uff0c \u5728\u4e00\u4e2a\u6709\u7b26\u53f7\u4e8c\u8fdb\u5236\u6570\u7684\u8865\u7801\u5f62\u5f0f\u3002 << \u5de6\u79fb\u52a8\u8fd0\u7b97\u7b26\uff1a\u8fd0\u7b97\u6570\u7684\u5404\u4e8c\u8fdb\u4f4d\u5168\u90e8\u5de6\u79fbN\u4f4d.\u9ad8\u4f4d\u4e22\u5f03\uff0c\u4f4e\u4f4d\u88650\u3002 a << 2 \u8f93\u51fa\u7ed3\u679c 240 \uff0c\u4e8c\u8fdb\u5236\u89e3\u91ca\uff1a 1111 0000 >> \u53f3\u79fb\u52a8\u8fd0\u7b97\u7b26\uff1a\u8fd0\u7b97\u6570\u7684\u5404\u4e8c\u8fdb\u4f4d\u5168\u90e8\u53f3\u79fbN\u4f4d\uff0c a >> 2 \u8f93\u51fa\u7ed3\u679c 15 \uff0c\u4e8c\u8fdb\u5236\u89e3\u91ca\uff1a 0000 1111 a << 1 \u7b49\u4ef7\u4e8e a * 2 a << 2 \u7b49\u4ef7\u4e8e a * 2 * 2 a >> 1 \u7b49\u4ef7\u4e8e a / 2 a >> 2 \u7b49\u4ef7\u4e8e a / 2 / 2 a ^= a \u7b49\u4ef7\u4e8e a = a ^ a \u7b49\u4ef7\u4e8e\u7f6e\u96f6 a = 0 a = a ^ (~a) + 1 \u7b49\u4ef7\u4e8e\u7f6e\u96f6 a = 0 ~a + 1 \u4e3aa\u7684\u8865\u7801","title":"\u4f4d\u8fd0\u7b97\u7b26"},{"location":"Python/Basic/Python-No-5-Operator/#_6","text":"Python\u8bed\u8a00\u652f\u6301\u903b\u8f91\u8fd0\u7b97\u7b26\uff0c\u4ee5\u4e0b\u5047\u8bbe\u53d8\u91cf a \u4e3a 10, b\u4e3a 20: \u8fd0\u7b97\u7b26 \u8868\u8fbe\u5f0f \u63cf\u8ff0 \u5b9e\u4f8b and x and y \u5e03\u5c14\"\u4e0e\" - \u5982\u679c x \u4e3a False\uff0cx and y \u8fd4\u56de False\uff0c\u5426\u5219\u5b83\u8fd4\u56de y \u7684\u8ba1\u7b97\u503c\u3002 (a and b) \u8fd4\u56de 20\u3002 or x or y \u5e03\u5c14\"\u6216\" - \u5982\u679c x \u662f True\uff0c\u5b83\u8fd4\u56de x \u7684\u503c\uff0c\u5426\u5219\u5b83\u8fd4\u56de y \u7684\u8ba1\u7b97\u503c\u3002 (a or b) \u8fd4\u56de 10\u3002 not not x \u5e03\u5c14\"\u975e\" - \u5982\u679c x \u4e3a True\uff0c\u8fd4\u56de False \u3002\u5982\u679c x \u4e3a False\uff0c\u5b83\u8fd4\u56de True\u3002 not(a and b) \u8fd4\u56de False","title":"\u903b\u8f91\u8fd0\u7b97\u7b26"},{"location":"Python/Basic/Python-No-5-Operator/#_7","text":"\u9664\u4e86\u4ee5\u4e0a\u7684\u4e00\u4e9b\u8fd0\u7b97\u7b26\u4e4b\u5916\uff0cPython\u8fd8\u652f\u6301\u6210\u5458\u8fd0\u7b97\u7b26\uff0c\u6d4b\u8bd5\u5b9e\u4f8b\u4e2d\u5305\u542b\u4e86\u4e00\u7cfb\u5217\u7684\u6210\u5458\uff0c\u5305\u62ec\u5b57\u7b26\u4e32\uff0c\u5217\u8868\u6216\u5143\u7ec4\u3002 \u8fd0\u7b97\u7b26 \u63cf\u8ff0 \u5b9e\u4f8b in \u5982\u679c\u5728\u6307\u5b9a\u7684\u5e8f\u5217\u4e2d\u627e\u5230\u503c\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\u3002 x \u5728 y \u5e8f\u5217\u4e2d , \u5982\u679c x \u5728 y \u5e8f\u5217\u4e2d\u8fd4\u56de True\u3002 not in \u5982\u679c\u5728\u6307\u5b9a\u7684\u5e8f\u5217\u4e2d\u6ca1\u6709\u627e\u5230\u503c\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\u3002 x \u4e0d\u5728 y \u5e8f\u5217\u4e2d , \u5982\u679c x \u4e0d\u5728 y \u5e8f\u5217\u4e2d\u8fd4\u56de True\u3002","title":"\u6210\u5458\u8fd0\u7b97\u7b26"},{"location":"Python/Basic/Python-No-5-Operator/#_8","text":"\u8eab\u4efd\u8fd0\u7b97\u7b26\u7528\u4e8e\u6bd4\u8f83\u4e24\u4e2a\u5bf9\u8c61\u7684\u5b58\u50a8\u5355\u5143 \u8fd0\u7b97\u7b26 \u63cf\u8ff0 \u5b9e\u4f8b is is \u662f\u5224\u65ad\u4e24\u4e2a\u6807\u8bc6\u7b26\u662f\u4e0d\u662f\u5f15\u7528\u81ea\u4e00\u4e2a\u5bf9\u8c61 x is y, \u7c7b\u4f3c id(x) == id(y) , \u5982\u679c\u5f15\u7528\u7684**\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61**\u5219\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False is not is not \u662f\u5224\u65ad\u4e24\u4e2a\u6807\u8bc6\u7b26\u662f\u4e0d\u662f\u5f15\u7528\u81ea\u4e0d\u540c\u5bf9\u8c61 x is not y \uff0c \u7c7b\u4f3c id(a) != id(b)\u3002\u5982\u679c\u5f15\u7528\u7684**\u4e0d\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61**\u5219\u8fd4\u56de\u7ed3\u679c True\uff0c\u5426\u5219\u8fd4\u56de False\u3002 id() id() \u51fd\u6570\u7528\u4e8e\u83b7\u53d6\u5bf9\u8c61\u5185\u5b58\u5730\u5740 #id() >>> a = 'runoob' >>> id ( a ) 4531887632 >>> b = 1 >>> id ( b ) 140588731085608","title":"\u8eab\u4efd\u8fd0\u7b97\u7b26"},{"location":"Python/Basic/Python-No-5-Operator/#_9","text":"true if expression else flase \u6ee1\u8db3\u8868\u8fbe\u5f0f\u65f6 if \u8868\u8fbe\u5f0f else \u4e0d\u6ee1\u8db3\u8868\u8fbe\u5f0f\u65f6 >>> a = 1 >>> b = 2 >>> h = a + b if a < b else a - b >>> h 3 >>> q = ( a + b ) if ( a < b ) else ( a - b ) >>> q 3","title":"\u4e09\u76ee\u8fd0\u7b97\u7b26"},{"location":"Python/Basic/Python-No-5-Operator/#_10","text":"\u4ee5\u4e0b\u8868\u683c\u5217\u51fa\u4e86\u4ece\u6700\u9ad8\u5230\u6700\u4f4e\u4f18\u5148\u7ea7\u7684\u6240\u6709\u8fd0\u7b97\u7b26\uff1a \u8fd0\u7b97\u7b26 \u63cf\u8ff0 ** \u6307\u6570 (\u6700\u9ad8\u4f18\u5148\u7ea7) ~\u3001+\u3001- \u6309\u4f4d\u53d6\u53cd\u3001\u6b63\u3001\u8d1f *\u3001/\u3001%\u3001// \u4e58\uff0c\u9664\uff0c\u6c42\u4f59\u6570\u548c\u53d6\u6574\u9664 +\u3001- \u52a0\u3001\u51cf <<\u3001>> \u5de6\u79fb\u3001\u53f3\u79fb & \u6309\u4f4d\u4e0e ^\u3001| \u6309\u4f4d\u5f02\u6216\u3001\u6309\u4f4d\u6216 <=\u3001<\u3001>\u3001>= \u6bd4\u8f83\u8fd0\u7b97\u7b26 ==\u3001!= \u7b49\u4e8e\u8fd0\u7b97\u7b26 =\u3001%=\u3001/=\u3001//=\u3001-=\u3001+=\u3001*=\u3001**= \u8d4b\u503c\u8fd0\u7b97\u7b26 is\u3001is not \u8eab\u4efd\u8fd0\u7b97\u7b26 in\u3001not in \u6210\u5458\u8fd0\u7b97\u7b26 and\u3001or\u3001not \u903b\u8f91\u8fd0\u7b97\u7b26","title":"\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7"},{"location":"Python/Basic/Python-No-6-Function/","text":"\u4e00\u7b49\u516c\u6c11\uff1a\u51fd\u6570 \u5b9a\u4e49\u51fd\u6570 \u00b6 def functionName ( paramters ): function body [ return ] \u8c03\u7528\u51fd\u6570 \u00b6 funcName ([ paras ]) \u8fd4\u56de\u503c \u00b6 \u4e0d\u7ba1\u6709\u6ca1\u6709 return \u51fd\u6570\u90fd\u4f1a\u8fd4\u56de \u6709 return \u65f6\u51fd\u6570\u8fd4\u56de\u76f8\u5e94\u7684\u503c \u6ca1\u6709 return \u65f6\u51fd\u6570\u8fd4\u56de None return None \u53ef\u4ee5\u7b80\u5199\u4e3a return \u8fd4\u56de\u591a\u4e2a\u503c \u00b6 python \u51fd\u6570\u53ef\u4ee5\u8fd4\u56de\u591a\u4e2a\u503c \u4f46\u5176\u672c\u8d28\u5176\u5b9e\u662f\u8fd4\u56de\u4e00\u4e2a\u591a\u5143\u7d20\u7684Tuple\uff0c\u56e0\u4e3a\u8bed\u6cd5\u4e0atuple\u53ef\u4ee5\u7701\u7565\u62ec\u53f7\uff0c\u6240\u4ee5\u770b\u8d77\u6765\u50cf\u8fd4\u56de\u591a\u4e2a\u503c \u5982\u679c\u663e\u5f0f\u7684\u8fd4\u56de\u4e00\u4e2alist\uff0cdict\uff0ctuple\uff0cset\uff0c\u5219\u662f\u8fd4\u56de\u503c\u672c\u8eab import math def move ( x , y , step , angle = 0 ): nx = x + step * math . cos ( angle ) ny = y - step * math . sin ( angle ) return nx , ny >>> x , y = move ( 100 , 100 , 60 , math . pi / 6 ) >>> print ( x , y ) 151.96152422706632 70.0 >>> r = move ( 100 , 100 , 60 , math . pi / 6 ) >>> print ( r ) ( 151.96152422706632 , 70.0 ) \u7a7a\u51fd\u6570 \u00b6 \u7a7a\u51fd\u6570\u53ef\u4ee5\u4f5c\u4e3a\u5360\u4f4d\u7b26\uff0c\u6bd4\u5982\u73b0\u5728\u8fd8\u6ca1\u60f3\u597d\u600e\u4e48\u5199\u51fd\u6570\u7684\u4ee3\u7801\uff0c\u5c31\u53ef\u4ee5\u5148\u653e\u4e00\u4e2apass\uff0c\u8ba9\u4ee3\u7801\u80fd\u8fd0\u884c\u8d77\u6765\u3002 def func (): pass \u53c2\u6570 \u00b6 \u53c2\u6570\u68c0\u67e5 \u00b6 python\u89e3\u91ca\u5668\u4f1a\u68c0\u67e5\u53c2\u6570 \u4e2a\u6570 \uff0c\u4f46\u4e0d\u4f1a\u68c0\u67e5\u53c2\u6570 \u7c7b\u578b \u7c7b\u578b\u68c0\u67e5\u9700\u8981\u81ea\u5df1\u505a \u53ef\u4ee5\u4f7f\u7528\u5185\u7f6e\u51fd\u6570 isinstance(obj,class_of_tuple) \u5e76\u629b\u51fa\u9519\u8bef def my_abs ( x ): return x if x >= 0 else - x # \u6dfb\u52a0\u68c0\u67e5\u7c7b\u578b def my_abs ( x ): if not isinstance ( x , ( int , float )): # \u68c0\u67e5\u7c7b\u578b raise TypeError ( 'bad operand type' ) # \u629b\u51fa\u9519\u8bef return x if x >= 0 else - x isinstance() \u00b6 isinstance(\u88ab\u68c0\u67e5\u5bf9\u8c61,\u68c0\u67e5\u7c7b\u578b\u5143\u7ec4) isinstance() \u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2a\u662f\u88ab\u68c0\u67e5\u5bf9\u8c61\uff0c\u7b2c\u4e8c\u4e2a\u662f\u8981\u6c42\u7684\u7c7b\u578b\u5143\u7ec4 \u7c7b\u578b\u5143\u7ec4\u4e2d\u53ea\u8981\u6709\u4e00\u4e2a\u88ab\u6ee1\u8db3\uff0c\u5219\u8fd4\u56deTrue\uff0c\u53cd\u4e4b\u8fd4\u56deFalse \u9ed8\u8ba4\u53c2\u6570\u3001\u53ef\u53d8\u53c2\u6570\u548c\u5173\u952e\u5b57\u53c2\u6570 \u00b6 \u9ed8\u8ba4\u53c2\u6570 = \u00b6 def funcName( [para1 ... ,] paraN = defaultValue) \u5f53\u53c2\u6570\u7684\u503c\u4e0d\u786e\u5b9a\u7684\u65f6\u5019\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u9ed8\u8ba4\u53c2\u6570 \u9ed8\u8ba4\u53c2\u6570 para1 = defaultValue \u5fc5\u987b\u653e\u5728\u6700\u540e\u9762 \u5f53\u6709\u591a\u4e2a\u9ed8\u8ba4\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\uff0c\u60f3\u6307\u5b9a\u67d0\u4e2a\u9ed8\u8ba4\u53c2\u6570\u4e0d\u4f7f\u7528\u9ed8\u8ba4\uff0c\u53ef\u4ee5\u5c06\u9ed8\u8ba4\u53c2\u6570\u7684\u5f62\u53c2\u540d\u5e26\u4e0a \u9ed8\u8ba4\u53c2\u6570\u5fc5\u987b\u6307\u5411**\u4e0d\u53d8\u5bf9\u8c61\uff01** def power ( x , n = 2 ): s = 1 while n > 0 : s *= x n -= 1 return s >>> power ( 5 ) 25 >>> power ( 5 , 2 ) 25 >>> power ( 5 , 3 ) 125 \u5f53\u6709\u591a\u4e2a\u9ed8\u8ba4\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\uff0c\u60f3\u6307\u5b9a\u67d0\u4e2a\u9ed8\u8ba4\u53c2\u6570\u4e0d\u4f7f\u7528\u9ed8\u8ba4\uff0c\u53ef\u4ee5\u5c06\u9ed8\u8ba4\u53c2\u6570\u7684\u5f62\u53c2\u540d\u5e26\u4e0a def enroll ( name , gender , age = 6 , city = 'SWA' ): print ( name ) print ( gender ) print ( age ) print ( city ) >>> enroll ( 'Boii' , 'M' , 23 , 'BJ' ) Boii M 23 BJ >>> enroll ( 'Boii' , 'M' , 23 ) Boii M 23 SWA >>> enroll ( 'Boii' , 'M' , city = 'NJ' ) Boii M 6 NJ >>> enroll ( 'Boii' , 'M' ) Boii M 6 SWA \u9ed8\u8ba4\u53c2\u6570\u5fc5\u987b\u6307\u5411**\u4e0d\u53d8\u5bf9\u8c61\uff01** def add_end ( L = []): L . append ( 'END' ) return L >>> add_end ([ 1 , 2 , 3 ]) [ 1 , 2 , 3 , 'END' ] >>> add_end ([ 'x' , 'y' , 'z' ]) [ 'x' , 'y' , 'z' , 'END' ] # \u5751\u6765\u4e86 >>> add_end () [ 'END' ] # \u8fd9\u91cc\u8fd8\u662f\u6b63\u5e38\u7684 >>> add_end () [ 'END' , 'END' ] # \u8fd9\u91cc\u5c31\u4e0d\u6b63\u5e38\u4e86 \u731c\u6d4b\u53ef\u80fd\u662fpython\u5185\u90e8\u5728\u4f7f\u7528\u9ed8\u8ba4\u53c2\u6570\u7684\u65f6\u5019\u4f1a\u521b\u5efa\u5bf9\u8c61\uff0c\u6bd4\u5982\u8fd9\u4e2alist\uff0c\u4f46\u662f\u8fd9\u4e2a\u5bf9\u8c61\u4e0d\u4f1a\u88ab\u9500\u6bc1\u5bfc\u81f4\u7684 \u6539\u8fdb\uff1a def add_end ( L = None ) if L is None : L = [] L . append ( 'END' ) return L >>> add_end () [ 'END' ] >>> add_end () [ 'END' ] \u53ef\u53d8\u53c2\u6570 * \u00b6 \u53ef\u53d8\u53c2\u6570\u53ef\u4ee5\u63a5\u6536 0~N\u4e2a\u53c2\u6570 def funcName( [para1 ... ,] *paraN) \u5f53\u53c2\u6570\u7684\u4e2a\u6570\u4e0d\u786e\u5b9a\u7684\u65f6\u5019\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u53ef\u53d8\u53c2\u6570 *paraN \u5f62\u53c2\u548c\u5b9e\u53c2\u90fd\u53ef\u4ee5\u4f7f\u7528\u53ef\u53d8\u53c2\u6570\u3002 \u5f62\u53c2 \u4f7f\u7528\u53ef\u53d8\u53c2\u6570\uff0c\u5219\u662f\u544a\u8bc9\u8c03\u7528\u8005\u6211\u53ef\u4ee5\u63a5\u53d70~N\u4e2a\u53c2\u6570\uff0c \u5b9e\u53c2 \u4f7f\u7528\u53ef\u53d8\u53c2\u6570\uff0c\u5219\u662f\u544a\u8bc9\u51fd\u6570\u6211\u5df2\u7ecf\u6253\u5305\u597d\u4e86\u3002 \u53ef\u53d8\u53c2\u6570\u7684 \u5b9e\u9645\u539f\u7406 \uff1a \u5176\u5b9e\u53ef\u53d8\u53c2\u6570\u5728\u51fd\u6570\u88ab\u8c03\u7528\u65f6\uff0c\u5c06\u6240\u6709\u53c2\u6570\u81ea\u52a8\u6253\u5305\u6210\u4e00\u4e2atuple\uff0c\u7136\u540e\u4f20\u9012\u7ed9\u51fd\u6570 \u51fd\u6570\u63a5\u6536\u5230\u4e4b\u540e\u518d\u89e3\u6784\u8fd9\u4e2atuple\uff0c\u6216\u8005\u901a\u8fc7 for \u8fed\u4ee3 \u904d\u5386\u8fd9\u4e2atuple\u6765\u4f7f\u7528\u91cc\u9762\u7684\u5143\u7d20 def calc ( * numbers ): # \u5f62\u53c2 \u4f7f\u7528\u53ef\u53d8\u53c2\u6570\uff0c\u5219\u662f\u544a\u8bc9\u8c03\u7528\u8005\u6211\u53ef\u4ee5\u63a5\u53d70~N\u4e2a\u53c2\u6570 sum = 0 for n in numbers : sum += n * n return sum >>> calc ( 1 , 2 ) 5 >>> calc () 0 >>> nums = [ 1 , 2 , 3 ] >>> calc ( nums [ 0 ], nums [ 1 ], nums [ 2 ]) # \u8fd9\u79cd\u5206\u6563\u4e00\u4e2a\u4e2a\u7684\u53c2\u6570\u5728\u4f20\u9012\u4e4b\u524d\u4e5f\u662f\u88ab\u81ea\u52a8\u6253\u5305\u6210\u4e00\u4e2atuple\u7684 14 >>> calc ( * nums ) # \u5b9e\u53c2 \u4f7f\u7528\u53ef\u53d8\u53c2\u6570\uff0c\u5219\u662f\u544a\u8bc9\u51fd\u6570\u6211\u5df2\u7ecf\u6253\u5305\u597d\u4e86 14 \u5173\u952e\u5b57\u53c2\u6570 ** \u00b6 \u8fd9\u79cd\u65b9\u5f0f\uff0c\u8c03\u7528\u8005\u53ef\u4ee5\u4f20\u5165 0~N \u4e2a\u5173\u952e\u5b57\u53c2\u6570\uff0c\u5173\u952e\u5b57 key \u968f\u610f def funcName( [para1 ... ,] **key_paraN) \u5373\u901a\u8fc7 \u5173\u952e\u5b57 \u6765\u6307\u5b9a\u53c2\u6570\uff0c\u6216\u8005\u8bf4\u901a\u8fc7 \u952e-\u503c\u5bf9 \u7684\u65b9\u5f0f\u6765\u4f20\u5b9e\u53c2 \u800c\u5728\u51fd\u6570\u91cc\uff0c\u5f62\u53c2 \u5173\u952e\u5b57\u53c2\u6570 **paraN \u5c06\u4f20\u8fc7\u6765\u7684\u8fd9\u4e9b\u952e-\u503c\u5bf9\u6253\u5305\u6210\u4e00\u4e2adict \u5176\u539f\u7406\u8ddf\u53ef\u53d8\u53c2\u6570\u7c7b\u4f3c - \u53ef\u53d8\u53c2\u6570 *paraN \u662f\u628a \u9664\u4e86\u5fc5\u9009\u53c2\u6570\u5916\u7684\u6240\u6709\u53c2\u6570 \u6253\u5305\u6210\u4e00\u4e2atuple\u4f20\u7ed9\u51fd\u6570 - \u5173\u952e\u5b57\u53c2\u6570 **paraN \u662f\u628a \u9664\u4e86\u5fc5\u9009\u53c2\u6570\u5916\u7684\u6240\u6709\u53c2\u6570 \u6253\u5305\u6210\u4e00\u4e2adict\u4f20\u7ed9\u51fd\u6570 \u4e4b\u540e\u51fd\u6570\u5185\u90e8\u53ef\u4ee5\u901a\u8fc7 for \u8fed\u4ee3 \u904d\u5386\u8fd9\u4e2adict\u6765\u4f7f\u7528\u91cc\u9762\u7684\u952e-\u503c\u5bf9 \u56e0\u4e3a\u662f\u4f7f\u7528\u952e-\u503c\u5bf9\u7684\u65b9\u5f0f\uff0c\u6240\u4ee5\u4f20\u53c2\u65f6\u7684 \u4f20\u7ed9\u5173\u952e\u5b57\u53c2\u6570\u7684 \u53c2\u6570\u987a\u5e8f\u662f\u65e0\u6240\u8c13\u7684 def person ( name , age , ** kv ): print ( 'name:' , name , '--' , 'age:' , age , '--' , 'other:' kv ) # \u53ea\u586b\u5fc5\u9009\u53c2\u6570\u7684\u8c03\u7528\u65b9\u6cd5 >>> person ( 'Boii' , 23 ) name : Boii -- age : 23 -- other : {} # \u586b\u4e86\u5fc5\u9009\u53c2\u6570\u548c\u81ea\u5b9a\u4e49\u53c2\u6570\u7684\u8c03\u7528\u65b9\u6cd5 >>> person ( 'Boii' , 23 , city = 'SWA' ) name : Boii -- age : 23 -- other : { 'city' : 'SWA' } >>> person ( 'Adam' , 45 , gender = 'M' , job = 'Engineer' ) name : Adam -- age : 45 -- other : { 'gender' : 'M' , 'job' : 'Engineer' } # \u5173\u952e\u5b57\u5b9e\u53c2\u7684\u987a\u5e8f\u65e0\u6240\u8c13 >>> person ( 'Adam' , 45 , job = 'Engineer' , gender = 'M' ) name : Adam -- age : 45 -- other : { 'job' : 'Engineer' , 'gender' : 'M' } # \u8fd8\u53ef\u4ee5\u81ea\u5df1\u628a\u53c2\u6570\u6253\u5305\u6210dict\uff0c\u7136\u540e\u4f20\u7ed9\u51fd\u6570, \u539f\u7406\u548c\u53ef\u53d8\u53c2\u6570\u7c7b\u4f3c >>> d = { 'job' : 'Engineer' , 'gender' : 'M' } >>> person ( 'Adam' , 45 , ** d ) name : Adam -- age : 45 -- other : { 'job' : 'Engineer' , 'gender' : 'M' } \u547d\u540d\u5173\u952e\u5b57\u53c2\u6570 *\uff0c \u00b6 def funcName( [para1 ... ,] *, key_paraN) \u5bf9\u6bd4\u5173\u952e\u5b57\u53c2\u6570 \u2193 def funcName( [para1 ... ,] **key_paraN) \u533a\u522b\u4e8e\u5173\u952e\u5b57\u53c2\u6570\uff1a - \u5982\u679c\u60f3\u8981\u6c42\u8c03\u7528\u8005\u5728\u8c03\u7528\u7684\u65f6\u5019\u5fc5\u987b\u7528\u4f60\u7ed9\u7684 key\uff0c\u5219\u53ef\u4ee5\u7528 \u547d\u540d\u5173\u952e\u5b57\u53c2\u6570 *, key_paraN - \u8fd9\u79cd\u65b9\u5f0f\uff0c\u8c03\u7528\u8005\u5fc5\u987b \u9075\u5faa\u4e2a\u6570 \u548c \u5173\u952e\u5b57 def person ( * , city , nationality ): print ( 'city:' , city ) print ( 'nationality:' , nationality ) >>> person ( city = 'SWA' , nationality = 'China' ) city : SWA nationality : China >>> person ( nationality = 'China' , city = 'SWA' ) city : SWA nationality : China # \u9519\u8bef\u793a\u4f8b >>> person () TypeError : person () missing 2 required keyword - only arguments : 'city' and 'nationality' >>> person ( 'SWA' , 'China' ) TypeError : person () takes 0 positional arguments but 2 were given def person ( name , age , * , city , nationality ): print ( 'name:' , name ) print ( 'age:' , age ) print ( 'city:' , city ) print ( 'nationality:' , nationality ) >>> person ( 'Boii' , 23 , city = 'SWA' , nationality = 'China' ) name : Boii age : 23 city : SWA nationality : China >>> person ( 'Boii' , 23 , nationality = 'China' , city = 'SWA' ) name : Boii age : 23 city : SWA nationality : China # \u9519\u8bef\u793a\u4f8b >>> person ( city = 'SWA' , nationality = 'China' ) TypeError : person () missing 2 required positional arguments : 'name' and 'age' \u53c2\u6570\u7ec4\u5408 \u00b6 \u5728Python\u4e2d\u5b9a\u4e49\u51fd\u6570\uff0c\u53ef\u4ee5\u7528\u5fc5\u9009\u53c2\u6570\u3001\u9ed8\u8ba4\u53c2\u6570\u3001\u53ef\u53d8\u53c2\u6570\u3001\u5173\u952e\u5b57\u53c2\u6570\u548c\u547d\u540d\u5173\u952e\u5b57\u53c2\u6570 \u8fd95\u79cd\u53c2\u6570\u90fd\u53ef\u4ee5\u7ec4\u5408\u4f7f\u7528\u3002 \u4f46\u662f\u8bf7\u6ce8\u610f\uff0c\u53c2\u6570\u5b9a\u4e49\u7684\u987a\u5e8f\u5fc5\u987b\u662f\uff1a \u5fc5\u9009\u53c2\u6570 \u3001 \u9ed8\u8ba4\u53c2\u6570 \u3001 \u53ef\u53d8\u53c2\u6570 \u3001 \u547d\u540d\u5173\u952e\u5b57\u53c2\u6570 \u548c \u5173\u952e\u5b57\u53c2\u6570 \u3002 def f1 ( a , b , c = 0 , * args , ** kw ): print ( 'a =' , a , 'b =' , b , 'c =' , c , 'args =' , args , 'kw =' , kw ) def f2 ( a , b , c = 0 , * , d , ** kw ): print ( 'a =' , a , 'b =' , b , 'c =' , c , 'd =' , d , 'kw =' , kw ) >>> f1 ( 1 , 2 ) a = 1 b = 2 c = 0 args = () kw = {} >>> f1 ( 1 , 2 , c = 3 ) a = 1 b = 2 c = 3 args = () kw = {} >>> f1 ( 1 , 2 , 3 , 'a' , 'b' ) a = 1 b = 2 c = 3 args = ( 'a' , 'b' ) kw = {} >>> f1 ( 1 , 2 , 3 , 'a' , 'b' , x = 99 ) a = 1 b = 2 c = 3 args = ( 'a' , 'b' ) kw = { 'x' : 99 } >>> f2 ( 1 , 2 , d = 99 , ext = None ) a = 1 b = 2 c = 0 d = 99 kw = { 'ext' : None } \u6700\u795e\u5947\u7684\u662f\u901a\u8fc7\u4e00\u4e2atuple\u548cdict\uff0c\u4f60\u4e5f\u53ef\u4ee5\u8c03\u7528\u4e0a\u8ff0\u51fd\u6570\uff1a def f1 ( a , b , c = 0 , * args , ** kw ): print ( 'a =' , a , 'b =' , b , 'c =' , c , 'args =' , args , 'kw =' , kw ) def f2 ( a , b , c = 0 , * , d , ** kw ): print ( 'a =' , a , 'b =' , b , 'c =' , c , 'd =' , d , 'kw =' , kw ) >>> args = ( 1 , 2 , 3 , 4 ) >>> kw = { 'd' : 99 , 'x' : '#' } >>> f1 ( * args , ** kw ) a = 1 b = 2 c = 3 args = ( 4 ,) kw = { 'd' : 99 , 'x' : '#' } >>> args = ( 1 , 2 , 3 ) >>> kw = { 'd' : 88 , 'x' : '#' } >>> f2 ( * args , ** kw ) a = 1 b = 2 c = 3 d = 88 kw = { 'x' : '#' } \u6240\u4ee5\uff0c\u5bf9\u4e8e\u4efb\u610f\u51fd\u6570\uff0c\u90fd\u53ef\u4ee5\u901a\u8fc7\u7c7b\u4f3c func(*args, **kw) \u7684\u5f62\u5f0f\u8c03\u7528\u5b83\uff0c\u65e0\u8bba\u5b83\u7684\u53c2\u6570\u662f\u5982\u4f55\u5b9a\u4e49\u7684\u3002 \uff01\uff01\u867d\u7136\u53ef\u4ee5\u7ec4\u5408\u591a\u8fbe5\u79cd\u53c2\u6570\uff0c\u4f46\u4e0d\u8981\u540c\u65f6\u4f7f\u7528\u592a\u591a\u7684\u7ec4\u5408\uff0c\u5426\u5219\u51fd\u6570\u63a5\u53e3\u7684\u53ef\u7406\u89e3\u6027\u5f88\u5dee\u3002 \u9012\u5f52\u51fd\u6570 \u00b6 \u81ea\u5df1\u8c03\u7528\u81ea\u5df1 \u9012\u5f52\u8981\u7d20\uff1a 1. \u81ea\u5df1\u8c03\u7528\u81ea\u5df1 2. \u6709\u5224\u65ad\u6761\u4ef6 \uff08\u6ca1\u5224\u65ad\u5c31\u6b7b\u5faa\u73af\u4e86\uff0c\u4f1a\u5bfc\u81f4\u6ea2\u51fa\uff09 3. \u6709\u53d8\u91cf\u8fed\u4ee3 \uff08\u6ca1\u53d8\u91cf\u8fed\u4ee3\u5c31\u6b7b\u5faa\u73af\u4e86\uff09 def fact ( n ): return 1 if n == 1 else n * fact ( n - 1 ) >>> fact ( 5 ) 120 >>> fact ( 10 ) 3628800 \u8ba1\u7b97 fact(5) \u7684\u65f6\u5019 ===> fact(5) ===> 5 * fact(4) ===> 5 * (4 * fact(3)) ===> 5 * (4 * (3 * fact(2))) ===> 5 * (4 * (3 * (2 * fact(1)))) ===> 5 * (4 * (3 * (2 * 1))) ===> 5 * (4 * (3 * 2)) ===> 5 * (4 * 6) ===> 5 * 24 ===> 120","title":"\u51fd\u6570"},{"location":"Python/Basic/Python-No-6-Function/#_1","text":"def functionName ( paramters ): function body [ return ]","title":"\u5b9a\u4e49\u51fd\u6570"},{"location":"Python/Basic/Python-No-6-Function/#_2","text":"funcName ([ paras ])","title":"\u8c03\u7528\u51fd\u6570"},{"location":"Python/Basic/Python-No-6-Function/#_3","text":"\u4e0d\u7ba1\u6709\u6ca1\u6709 return \u51fd\u6570\u90fd\u4f1a\u8fd4\u56de \u6709 return \u65f6\u51fd\u6570\u8fd4\u56de\u76f8\u5e94\u7684\u503c \u6ca1\u6709 return \u65f6\u51fd\u6570\u8fd4\u56de None return None \u53ef\u4ee5\u7b80\u5199\u4e3a return","title":"\u8fd4\u56de\u503c"},{"location":"Python/Basic/Python-No-6-Function/#_4","text":"python \u51fd\u6570\u53ef\u4ee5\u8fd4\u56de\u591a\u4e2a\u503c \u4f46\u5176\u672c\u8d28\u5176\u5b9e\u662f\u8fd4\u56de\u4e00\u4e2a\u591a\u5143\u7d20\u7684Tuple\uff0c\u56e0\u4e3a\u8bed\u6cd5\u4e0atuple\u53ef\u4ee5\u7701\u7565\u62ec\u53f7\uff0c\u6240\u4ee5\u770b\u8d77\u6765\u50cf\u8fd4\u56de\u591a\u4e2a\u503c \u5982\u679c\u663e\u5f0f\u7684\u8fd4\u56de\u4e00\u4e2alist\uff0cdict\uff0ctuple\uff0cset\uff0c\u5219\u662f\u8fd4\u56de\u503c\u672c\u8eab import math def move ( x , y , step , angle = 0 ): nx = x + step * math . cos ( angle ) ny = y - step * math . sin ( angle ) return nx , ny >>> x , y = move ( 100 , 100 , 60 , math . pi / 6 ) >>> print ( x , y ) 151.96152422706632 70.0 >>> r = move ( 100 , 100 , 60 , math . pi / 6 ) >>> print ( r ) ( 151.96152422706632 , 70.0 )","title":"\u8fd4\u56de\u591a\u4e2a\u503c"},{"location":"Python/Basic/Python-No-6-Function/#_5","text":"\u7a7a\u51fd\u6570\u53ef\u4ee5\u4f5c\u4e3a\u5360\u4f4d\u7b26\uff0c\u6bd4\u5982\u73b0\u5728\u8fd8\u6ca1\u60f3\u597d\u600e\u4e48\u5199\u51fd\u6570\u7684\u4ee3\u7801\uff0c\u5c31\u53ef\u4ee5\u5148\u653e\u4e00\u4e2apass\uff0c\u8ba9\u4ee3\u7801\u80fd\u8fd0\u884c\u8d77\u6765\u3002 def func (): pass","title":"\u7a7a\u51fd\u6570"},{"location":"Python/Basic/Python-No-6-Function/#_6","text":"","title":"\u53c2\u6570"},{"location":"Python/Basic/Python-No-6-Function/#_7","text":"python\u89e3\u91ca\u5668\u4f1a\u68c0\u67e5\u53c2\u6570 \u4e2a\u6570 \uff0c\u4f46\u4e0d\u4f1a\u68c0\u67e5\u53c2\u6570 \u7c7b\u578b \u7c7b\u578b\u68c0\u67e5\u9700\u8981\u81ea\u5df1\u505a \u53ef\u4ee5\u4f7f\u7528\u5185\u7f6e\u51fd\u6570 isinstance(obj,class_of_tuple) \u5e76\u629b\u51fa\u9519\u8bef def my_abs ( x ): return x if x >= 0 else - x # \u6dfb\u52a0\u68c0\u67e5\u7c7b\u578b def my_abs ( x ): if not isinstance ( x , ( int , float )): # \u68c0\u67e5\u7c7b\u578b raise TypeError ( 'bad operand type' ) # \u629b\u51fa\u9519\u8bef return x if x >= 0 else - x","title":"\u53c2\u6570\u68c0\u67e5"},{"location":"Python/Basic/Python-No-6-Function/#isinstance","text":"isinstance(\u88ab\u68c0\u67e5\u5bf9\u8c61,\u68c0\u67e5\u7c7b\u578b\u5143\u7ec4) isinstance() \u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2a\u662f\u88ab\u68c0\u67e5\u5bf9\u8c61\uff0c\u7b2c\u4e8c\u4e2a\u662f\u8981\u6c42\u7684\u7c7b\u578b\u5143\u7ec4 \u7c7b\u578b\u5143\u7ec4\u4e2d\u53ea\u8981\u6709\u4e00\u4e2a\u88ab\u6ee1\u8db3\uff0c\u5219\u8fd4\u56deTrue\uff0c\u53cd\u4e4b\u8fd4\u56deFalse","title":"isinstance()"},{"location":"Python/Basic/Python-No-6-Function/#_8","text":"","title":"\u9ed8\u8ba4\u53c2\u6570\u3001\u53ef\u53d8\u53c2\u6570\u548c\u5173\u952e\u5b57\u53c2\u6570"},{"location":"Python/Basic/Python-No-6-Function/#_9","text":"def funcName( [para1 ... ,] paraN = defaultValue) \u5f53\u53c2\u6570\u7684\u503c\u4e0d\u786e\u5b9a\u7684\u65f6\u5019\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u9ed8\u8ba4\u53c2\u6570 \u9ed8\u8ba4\u53c2\u6570 para1 = defaultValue \u5fc5\u987b\u653e\u5728\u6700\u540e\u9762 \u5f53\u6709\u591a\u4e2a\u9ed8\u8ba4\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\uff0c\u60f3\u6307\u5b9a\u67d0\u4e2a\u9ed8\u8ba4\u53c2\u6570\u4e0d\u4f7f\u7528\u9ed8\u8ba4\uff0c\u53ef\u4ee5\u5c06\u9ed8\u8ba4\u53c2\u6570\u7684\u5f62\u53c2\u540d\u5e26\u4e0a \u9ed8\u8ba4\u53c2\u6570\u5fc5\u987b\u6307\u5411**\u4e0d\u53d8\u5bf9\u8c61\uff01** def power ( x , n = 2 ): s = 1 while n > 0 : s *= x n -= 1 return s >>> power ( 5 ) 25 >>> power ( 5 , 2 ) 25 >>> power ( 5 , 3 ) 125 \u5f53\u6709\u591a\u4e2a\u9ed8\u8ba4\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\uff0c\u60f3\u6307\u5b9a\u67d0\u4e2a\u9ed8\u8ba4\u53c2\u6570\u4e0d\u4f7f\u7528\u9ed8\u8ba4\uff0c\u53ef\u4ee5\u5c06\u9ed8\u8ba4\u53c2\u6570\u7684\u5f62\u53c2\u540d\u5e26\u4e0a def enroll ( name , gender , age = 6 , city = 'SWA' ): print ( name ) print ( gender ) print ( age ) print ( city ) >>> enroll ( 'Boii' , 'M' , 23 , 'BJ' ) Boii M 23 BJ >>> enroll ( 'Boii' , 'M' , 23 ) Boii M 23 SWA >>> enroll ( 'Boii' , 'M' , city = 'NJ' ) Boii M 6 NJ >>> enroll ( 'Boii' , 'M' ) Boii M 6 SWA \u9ed8\u8ba4\u53c2\u6570\u5fc5\u987b\u6307\u5411**\u4e0d\u53d8\u5bf9\u8c61\uff01** def add_end ( L = []): L . append ( 'END' ) return L >>> add_end ([ 1 , 2 , 3 ]) [ 1 , 2 , 3 , 'END' ] >>> add_end ([ 'x' , 'y' , 'z' ]) [ 'x' , 'y' , 'z' , 'END' ] # \u5751\u6765\u4e86 >>> add_end () [ 'END' ] # \u8fd9\u91cc\u8fd8\u662f\u6b63\u5e38\u7684 >>> add_end () [ 'END' , 'END' ] # \u8fd9\u91cc\u5c31\u4e0d\u6b63\u5e38\u4e86 \u731c\u6d4b\u53ef\u80fd\u662fpython\u5185\u90e8\u5728\u4f7f\u7528\u9ed8\u8ba4\u53c2\u6570\u7684\u65f6\u5019\u4f1a\u521b\u5efa\u5bf9\u8c61\uff0c\u6bd4\u5982\u8fd9\u4e2alist\uff0c\u4f46\u662f\u8fd9\u4e2a\u5bf9\u8c61\u4e0d\u4f1a\u88ab\u9500\u6bc1\u5bfc\u81f4\u7684 \u6539\u8fdb\uff1a def add_end ( L = None ) if L is None : L = [] L . append ( 'END' ) return L >>> add_end () [ 'END' ] >>> add_end () [ 'END' ]","title":"\u9ed8\u8ba4\u53c2\u6570 ="},{"location":"Python/Basic/Python-No-6-Function/#_10","text":"\u53ef\u53d8\u53c2\u6570\u53ef\u4ee5\u63a5\u6536 0~N\u4e2a\u53c2\u6570 def funcName( [para1 ... ,] *paraN) \u5f53\u53c2\u6570\u7684\u4e2a\u6570\u4e0d\u786e\u5b9a\u7684\u65f6\u5019\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u53ef\u53d8\u53c2\u6570 *paraN \u5f62\u53c2\u548c\u5b9e\u53c2\u90fd\u53ef\u4ee5\u4f7f\u7528\u53ef\u53d8\u53c2\u6570\u3002 \u5f62\u53c2 \u4f7f\u7528\u53ef\u53d8\u53c2\u6570\uff0c\u5219\u662f\u544a\u8bc9\u8c03\u7528\u8005\u6211\u53ef\u4ee5\u63a5\u53d70~N\u4e2a\u53c2\u6570\uff0c \u5b9e\u53c2 \u4f7f\u7528\u53ef\u53d8\u53c2\u6570\uff0c\u5219\u662f\u544a\u8bc9\u51fd\u6570\u6211\u5df2\u7ecf\u6253\u5305\u597d\u4e86\u3002 \u53ef\u53d8\u53c2\u6570\u7684 \u5b9e\u9645\u539f\u7406 \uff1a \u5176\u5b9e\u53ef\u53d8\u53c2\u6570\u5728\u51fd\u6570\u88ab\u8c03\u7528\u65f6\uff0c\u5c06\u6240\u6709\u53c2\u6570\u81ea\u52a8\u6253\u5305\u6210\u4e00\u4e2atuple\uff0c\u7136\u540e\u4f20\u9012\u7ed9\u51fd\u6570 \u51fd\u6570\u63a5\u6536\u5230\u4e4b\u540e\u518d\u89e3\u6784\u8fd9\u4e2atuple\uff0c\u6216\u8005\u901a\u8fc7 for \u8fed\u4ee3 \u904d\u5386\u8fd9\u4e2atuple\u6765\u4f7f\u7528\u91cc\u9762\u7684\u5143\u7d20 def calc ( * numbers ): # \u5f62\u53c2 \u4f7f\u7528\u53ef\u53d8\u53c2\u6570\uff0c\u5219\u662f\u544a\u8bc9\u8c03\u7528\u8005\u6211\u53ef\u4ee5\u63a5\u53d70~N\u4e2a\u53c2\u6570 sum = 0 for n in numbers : sum += n * n return sum >>> calc ( 1 , 2 ) 5 >>> calc () 0 >>> nums = [ 1 , 2 , 3 ] >>> calc ( nums [ 0 ], nums [ 1 ], nums [ 2 ]) # \u8fd9\u79cd\u5206\u6563\u4e00\u4e2a\u4e2a\u7684\u53c2\u6570\u5728\u4f20\u9012\u4e4b\u524d\u4e5f\u662f\u88ab\u81ea\u52a8\u6253\u5305\u6210\u4e00\u4e2atuple\u7684 14 >>> calc ( * nums ) # \u5b9e\u53c2 \u4f7f\u7528\u53ef\u53d8\u53c2\u6570\uff0c\u5219\u662f\u544a\u8bc9\u51fd\u6570\u6211\u5df2\u7ecf\u6253\u5305\u597d\u4e86 14","title":"\u53ef\u53d8\u53c2\u6570 *"},{"location":"Python/Basic/Python-No-6-Function/#_11","text":"\u8fd9\u79cd\u65b9\u5f0f\uff0c\u8c03\u7528\u8005\u53ef\u4ee5\u4f20\u5165 0~N \u4e2a\u5173\u952e\u5b57\u53c2\u6570\uff0c\u5173\u952e\u5b57 key \u968f\u610f def funcName( [para1 ... ,] **key_paraN) \u5373\u901a\u8fc7 \u5173\u952e\u5b57 \u6765\u6307\u5b9a\u53c2\u6570\uff0c\u6216\u8005\u8bf4\u901a\u8fc7 \u952e-\u503c\u5bf9 \u7684\u65b9\u5f0f\u6765\u4f20\u5b9e\u53c2 \u800c\u5728\u51fd\u6570\u91cc\uff0c\u5f62\u53c2 \u5173\u952e\u5b57\u53c2\u6570 **paraN \u5c06\u4f20\u8fc7\u6765\u7684\u8fd9\u4e9b\u952e-\u503c\u5bf9\u6253\u5305\u6210\u4e00\u4e2adict \u5176\u539f\u7406\u8ddf\u53ef\u53d8\u53c2\u6570\u7c7b\u4f3c - \u53ef\u53d8\u53c2\u6570 *paraN \u662f\u628a \u9664\u4e86\u5fc5\u9009\u53c2\u6570\u5916\u7684\u6240\u6709\u53c2\u6570 \u6253\u5305\u6210\u4e00\u4e2atuple\u4f20\u7ed9\u51fd\u6570 - \u5173\u952e\u5b57\u53c2\u6570 **paraN \u662f\u628a \u9664\u4e86\u5fc5\u9009\u53c2\u6570\u5916\u7684\u6240\u6709\u53c2\u6570 \u6253\u5305\u6210\u4e00\u4e2adict\u4f20\u7ed9\u51fd\u6570 \u4e4b\u540e\u51fd\u6570\u5185\u90e8\u53ef\u4ee5\u901a\u8fc7 for \u8fed\u4ee3 \u904d\u5386\u8fd9\u4e2adict\u6765\u4f7f\u7528\u91cc\u9762\u7684\u952e-\u503c\u5bf9 \u56e0\u4e3a\u662f\u4f7f\u7528\u952e-\u503c\u5bf9\u7684\u65b9\u5f0f\uff0c\u6240\u4ee5\u4f20\u53c2\u65f6\u7684 \u4f20\u7ed9\u5173\u952e\u5b57\u53c2\u6570\u7684 \u53c2\u6570\u987a\u5e8f\u662f\u65e0\u6240\u8c13\u7684 def person ( name , age , ** kv ): print ( 'name:' , name , '--' , 'age:' , age , '--' , 'other:' kv ) # \u53ea\u586b\u5fc5\u9009\u53c2\u6570\u7684\u8c03\u7528\u65b9\u6cd5 >>> person ( 'Boii' , 23 ) name : Boii -- age : 23 -- other : {} # \u586b\u4e86\u5fc5\u9009\u53c2\u6570\u548c\u81ea\u5b9a\u4e49\u53c2\u6570\u7684\u8c03\u7528\u65b9\u6cd5 >>> person ( 'Boii' , 23 , city = 'SWA' ) name : Boii -- age : 23 -- other : { 'city' : 'SWA' } >>> person ( 'Adam' , 45 , gender = 'M' , job = 'Engineer' ) name : Adam -- age : 45 -- other : { 'gender' : 'M' , 'job' : 'Engineer' } # \u5173\u952e\u5b57\u5b9e\u53c2\u7684\u987a\u5e8f\u65e0\u6240\u8c13 >>> person ( 'Adam' , 45 , job = 'Engineer' , gender = 'M' ) name : Adam -- age : 45 -- other : { 'job' : 'Engineer' , 'gender' : 'M' } # \u8fd8\u53ef\u4ee5\u81ea\u5df1\u628a\u53c2\u6570\u6253\u5305\u6210dict\uff0c\u7136\u540e\u4f20\u7ed9\u51fd\u6570, \u539f\u7406\u548c\u53ef\u53d8\u53c2\u6570\u7c7b\u4f3c >>> d = { 'job' : 'Engineer' , 'gender' : 'M' } >>> person ( 'Adam' , 45 , ** d ) name : Adam -- age : 45 -- other : { 'job' : 'Engineer' , 'gender' : 'M' }","title":"\u5173\u952e\u5b57\u53c2\u6570 **"},{"location":"Python/Basic/Python-No-6-Function/#_12","text":"def funcName( [para1 ... ,] *, key_paraN) \u5bf9\u6bd4\u5173\u952e\u5b57\u53c2\u6570 \u2193 def funcName( [para1 ... ,] **key_paraN) \u533a\u522b\u4e8e\u5173\u952e\u5b57\u53c2\u6570\uff1a - \u5982\u679c\u60f3\u8981\u6c42\u8c03\u7528\u8005\u5728\u8c03\u7528\u7684\u65f6\u5019\u5fc5\u987b\u7528\u4f60\u7ed9\u7684 key\uff0c\u5219\u53ef\u4ee5\u7528 \u547d\u540d\u5173\u952e\u5b57\u53c2\u6570 *, key_paraN - \u8fd9\u79cd\u65b9\u5f0f\uff0c\u8c03\u7528\u8005\u5fc5\u987b \u9075\u5faa\u4e2a\u6570 \u548c \u5173\u952e\u5b57 def person ( * , city , nationality ): print ( 'city:' , city ) print ( 'nationality:' , nationality ) >>> person ( city = 'SWA' , nationality = 'China' ) city : SWA nationality : China >>> person ( nationality = 'China' , city = 'SWA' ) city : SWA nationality : China # \u9519\u8bef\u793a\u4f8b >>> person () TypeError : person () missing 2 required keyword - only arguments : 'city' and 'nationality' >>> person ( 'SWA' , 'China' ) TypeError : person () takes 0 positional arguments but 2 were given def person ( name , age , * , city , nationality ): print ( 'name:' , name ) print ( 'age:' , age ) print ( 'city:' , city ) print ( 'nationality:' , nationality ) >>> person ( 'Boii' , 23 , city = 'SWA' , nationality = 'China' ) name : Boii age : 23 city : SWA nationality : China >>> person ( 'Boii' , 23 , nationality = 'China' , city = 'SWA' ) name : Boii age : 23 city : SWA nationality : China # \u9519\u8bef\u793a\u4f8b >>> person ( city = 'SWA' , nationality = 'China' ) TypeError : person () missing 2 required positional arguments : 'name' and 'age'","title":"\u547d\u540d\u5173\u952e\u5b57\u53c2\u6570 *\uff0c"},{"location":"Python/Basic/Python-No-6-Function/#_13","text":"\u5728Python\u4e2d\u5b9a\u4e49\u51fd\u6570\uff0c\u53ef\u4ee5\u7528\u5fc5\u9009\u53c2\u6570\u3001\u9ed8\u8ba4\u53c2\u6570\u3001\u53ef\u53d8\u53c2\u6570\u3001\u5173\u952e\u5b57\u53c2\u6570\u548c\u547d\u540d\u5173\u952e\u5b57\u53c2\u6570 \u8fd95\u79cd\u53c2\u6570\u90fd\u53ef\u4ee5\u7ec4\u5408\u4f7f\u7528\u3002 \u4f46\u662f\u8bf7\u6ce8\u610f\uff0c\u53c2\u6570\u5b9a\u4e49\u7684\u987a\u5e8f\u5fc5\u987b\u662f\uff1a \u5fc5\u9009\u53c2\u6570 \u3001 \u9ed8\u8ba4\u53c2\u6570 \u3001 \u53ef\u53d8\u53c2\u6570 \u3001 \u547d\u540d\u5173\u952e\u5b57\u53c2\u6570 \u548c \u5173\u952e\u5b57\u53c2\u6570 \u3002 def f1 ( a , b , c = 0 , * args , ** kw ): print ( 'a =' , a , 'b =' , b , 'c =' , c , 'args =' , args , 'kw =' , kw ) def f2 ( a , b , c = 0 , * , d , ** kw ): print ( 'a =' , a , 'b =' , b , 'c =' , c , 'd =' , d , 'kw =' , kw ) >>> f1 ( 1 , 2 ) a = 1 b = 2 c = 0 args = () kw = {} >>> f1 ( 1 , 2 , c = 3 ) a = 1 b = 2 c = 3 args = () kw = {} >>> f1 ( 1 , 2 , 3 , 'a' , 'b' ) a = 1 b = 2 c = 3 args = ( 'a' , 'b' ) kw = {} >>> f1 ( 1 , 2 , 3 , 'a' , 'b' , x = 99 ) a = 1 b = 2 c = 3 args = ( 'a' , 'b' ) kw = { 'x' : 99 } >>> f2 ( 1 , 2 , d = 99 , ext = None ) a = 1 b = 2 c = 0 d = 99 kw = { 'ext' : None } \u6700\u795e\u5947\u7684\u662f\u901a\u8fc7\u4e00\u4e2atuple\u548cdict\uff0c\u4f60\u4e5f\u53ef\u4ee5\u8c03\u7528\u4e0a\u8ff0\u51fd\u6570\uff1a def f1 ( a , b , c = 0 , * args , ** kw ): print ( 'a =' , a , 'b =' , b , 'c =' , c , 'args =' , args , 'kw =' , kw ) def f2 ( a , b , c = 0 , * , d , ** kw ): print ( 'a =' , a , 'b =' , b , 'c =' , c , 'd =' , d , 'kw =' , kw ) >>> args = ( 1 , 2 , 3 , 4 ) >>> kw = { 'd' : 99 , 'x' : '#' } >>> f1 ( * args , ** kw ) a = 1 b = 2 c = 3 args = ( 4 ,) kw = { 'd' : 99 , 'x' : '#' } >>> args = ( 1 , 2 , 3 ) >>> kw = { 'd' : 88 , 'x' : '#' } >>> f2 ( * args , ** kw ) a = 1 b = 2 c = 3 d = 88 kw = { 'x' : '#' } \u6240\u4ee5\uff0c\u5bf9\u4e8e\u4efb\u610f\u51fd\u6570\uff0c\u90fd\u53ef\u4ee5\u901a\u8fc7\u7c7b\u4f3c func(*args, **kw) \u7684\u5f62\u5f0f\u8c03\u7528\u5b83\uff0c\u65e0\u8bba\u5b83\u7684\u53c2\u6570\u662f\u5982\u4f55\u5b9a\u4e49\u7684\u3002 \uff01\uff01\u867d\u7136\u53ef\u4ee5\u7ec4\u5408\u591a\u8fbe5\u79cd\u53c2\u6570\uff0c\u4f46\u4e0d\u8981\u540c\u65f6\u4f7f\u7528\u592a\u591a\u7684\u7ec4\u5408\uff0c\u5426\u5219\u51fd\u6570\u63a5\u53e3\u7684\u53ef\u7406\u89e3\u6027\u5f88\u5dee\u3002","title":"\u53c2\u6570\u7ec4\u5408"},{"location":"Python/Basic/Python-No-6-Function/#_14","text":"\u81ea\u5df1\u8c03\u7528\u81ea\u5df1 \u9012\u5f52\u8981\u7d20\uff1a 1. \u81ea\u5df1\u8c03\u7528\u81ea\u5df1 2. \u6709\u5224\u65ad\u6761\u4ef6 \uff08\u6ca1\u5224\u65ad\u5c31\u6b7b\u5faa\u73af\u4e86\uff0c\u4f1a\u5bfc\u81f4\u6ea2\u51fa\uff09 3. \u6709\u53d8\u91cf\u8fed\u4ee3 \uff08\u6ca1\u53d8\u91cf\u8fed\u4ee3\u5c31\u6b7b\u5faa\u73af\u4e86\uff09 def fact ( n ): return 1 if n == 1 else n * fact ( n - 1 ) >>> fact ( 5 ) 120 >>> fact ( 10 ) 3628800 \u8ba1\u7b97 fact(5) \u7684\u65f6\u5019 ===> fact(5) ===> 5 * fact(4) ===> 5 * (4 * fact(3)) ===> 5 * (4 * (3 * fact(2))) ===> 5 * (4 * (3 * (2 * fact(1)))) ===> 5 * (4 * (3 * (2 * 1))) ===> 5 * (4 * (3 * 2)) ===> 5 * (4 * 6) ===> 5 * 24 ===> 120","title":"\u9012\u5f52\u51fd\u6570"},{"location":"Python/Basic/Python-No-7-Error-Handle/","text":"\u8bed\u8a00\u5fc5\u4fee\u8bfe\uff1a\u9519\u8bef\u5904\u7406 \u9519\u8bef\u5904\u7406 \u00b6 try...except1...[exceptN...[finally...] try : \u53ef\u80fd\u4f1a\u51fa\u73b0\u5f02\u5e38\u7684\u4ee3\u7801 except \u5f02\u5e38\u7c7b\u578b [ as \u522b\u540d ] \uff1a \u51fa\u73b0\u5f02\u5e38\u540e\u7684\u5904\u7406 finally : \u4e0d\u7ba1\u662f\u5426\u51fa\u73b0\u5f02\u5e38\u6700\u540e\u90fd\u4f1a\u6267\u884c\u7684\u4ee3\u7801 \u793a\u4f8b\uff1a # \u51fa\u73b0 \u9664\u96f6\u7684\u5f02\u5e38 \u793a\u4f8b try : print ( \"Try---------\" ) r = 10 / 0 print ( \"result: \" , r ) except ZeroDivisionError as e : print ( \"Except------\" , e ) finally : print ( \"Finally-----\" ) print ( \"END\" ) -------------------------------------------------- # Output: Try --------- Except ------ division by zero Finally ----- END try \u8bed\u53e5\u5757\u4e2d\u7684\u4ee3\u7801\u9047\u5230\u5f02\u5e38\u540e\u4f1a\u8df3\u8f6c\u5230 except \u8bed\u53e5\u5757\u6267\u884c \u800c finally \u8bed\u53e5\u5757\u4e0d\u7ba1\u6709\u6ca1\u6709\u5f02\u5e38\u6700\u540e\u90fd\u4f1a\u6267\u884c\u3002\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u6ca1\u6709 finally \u8bed\u53e5 # \u6ca1\u6709\u5f02\u5e38\u7684\u793a\u4f8b try : print ( \"Try---------\" ) r = 10 / 2 print ( \"result: \" , r ) except ZeroDivisionError as e : print ( \"Except------\" , e ) finally : print ( \"Finally-----\" ) print ( \"END\" ) -------------------------------------------------- # Output: Try --------- result : 5 Finally ----- END \u6355\u83b7\u591a\u4e2a\u5f02\u5e38 \u00b6 \u6355\u83b7\u5f02\u5e38\u4e0d\u6b62\u53ef\u4ee5\u6355\u83b7\u4e00\u4e2a\uff0c\u8fd8\u53ef\u4ee5 \u6355\u83b7\u591a\u4e2a try : print ( \"Try---------\" ) r = 10 / int ( 'a' ) print ( \"result: \" , r ) except ValueError as e : print ( 'ValueError: ' , e ) except ZeroDivisionError as e : print ( \"ZeroDivisionError: \" , e ) finally : print ( \"Finally-----\" ) print ( \"END\" ) -------------------------------------------------- # Output: Try --------- ValueError : invalid literal for int () with base 10 : 'a' Finally ----- END else \u8bed\u53e5 \u00b6 \u5728 except \u540e\u9762\u8fd8\u53ef\u4ee5\u52a0\u4e00\u4e2a else \u8bed\u53e5\u5757 # else \u8bed\u53e5\u5728\u6ca1\u6709\u5f02\u5e38\u7684\u60c5\u51b5\u4e0b \u793a\u4f8b try : print ( \"Try---------\" ) r = 10 / int ( '2' ) print ( \"result: \" , r ) except ValueError as e : print ( 'ValueError: ' , e ) except ZeroDivisionError as e : print ( \"ZeroDivisionError: \" , e ) else : print ( \"Else--------No Error!\" ) finally : print ( \"Finally-----\" ) print ( \"END\" ) -------------------------------------------------- # Output: Try --------- result : 5.0 Else -------- No Error ! Finally ----- END else \u8bed\u53e5\u4e0d\u540c\u4e8efinally \u8bed\u53e5\u3002finally \u8bed\u53e5\u662f\u6709\u65e0\u5f02\u5e38\u90fd\u4f1a\u6267\u884c\uff0celse \u8bed\u53e5\u4f1a\u5728\u6ca1\u6709\u5f02\u5e38\u7684\u60c5\u51b5\u4e0b\u6267\u884c # else \u8bed\u53e5\u5728\u6709\u5f02\u5e38\u7684\u60c5\u51b5\u4e0b \u793a\u4f8b try : print ( \"Try---------\" ) r = 10 / int ( 'a' ) print ( \"result: \" , r ) except ValueError as e : print ( 'ValueError: ' , e ) except ZeroDivisionError as e : print ( \"ZeroDivisionError: \" , e ) else : print ( \"Else--------No Error!\" ) finally : print ( \"Finally-----\" ) print ( \"END\" ) -------------------------------------------------- # Output: Try --------- ValueError : invalid literal for int () with base 10 : 'a' Finally ----- END \u4f18\u70b9\uff1a\u8de8\u8d8a\u591a\u5c42\u8c03\u7528 \u00b6 \u4f8b\u5982\u73b0\u5728 A() \u8c03\u7528 B() \uff0c B() \u8c03\u7528 C() \uff0c\u5728 C() \u51fa\u9519\u4e86\uff0c\u53ea\u8981 A() \u6355\u83b7\u5230\u4e86\uff0c\u5c31\u53ef\u4ee5\u5904\u7406\u3002 def C ( s ): return 10 / int ( s ) def B ( s ): return C ( s ) * 2 def A (): try : B ( '0' ) except Exception as e : print ( \"Error:\" , e ) finally : print ( \"Finally------\" ) A () -------------------------------------------------- # Output: Error : division by zero Finally ------ \u867d\u7136\u9519\u8bef\u662f\u5728 C() \u51fa\u73b0\uff0c\u4f46\u662f\u5728 A() \u4e5f\u80fd\u6355\u83b7\u3002 \u5982\u679c\u9519\u8bef\u6ca1\u6709\u88ab\u6355\u83b7\uff0c\u5b83\u5c31\u4f1a\u4e00\u76f4\u5f80\u4e0a\u629b\uff0c\u6700\u540e\u88abPython\u89e3\u91ca\u5668\u6355\u83b7\uff0c\u6253\u5370\u4e00\u4e2a\u9519\u8bef\u4fe1\u606f\uff0c\u7136\u540e\u7a0b\u5e8f\u9000\u51fa\u3002 \u9519\u8bef\u662f\u4e2aclass \u00b6 \u6240\u6709\u7684\u9519\u8bef\u7c7b\u578b\u90fd\u7ee7\u627f\u81ea BaseException \uff0c\u5982\u679c\u6355\u83b7\u5230\u4e86\u4e00\u4e2a\u7236\u7c7b\u9519\u8bef\uff0c\u5176\u5b50\u7c7b\u9519\u8bef\u4e0d\u4f1a\u88ab\u6355\u83b7\u3002 \u4f8b\u5982\uff1a try : foo () except ValueError as e : print ( 'ValueError' ) except UnicodeError as e : print ( 'UnicodeError' ) \u7b2c\u4e8c\u4e2aexcept\u6c38\u8fdc\u6355\u83b7\u4e0d\u5230 UnicodeError \uff0c\u56e0\u4e3a UnicodeError \u662f ValueError \u7684\u5b50\u7c7b\u3002 \u5373\u4f7f\u6709 UnicodeError \uff0c\u4e5f\u88ab\u7b2c\u4e00\u4e2aexcept\u6355\u83b7\u4e86\u3002 \u9519\u8bef\u7c7b\u7ee7\u627f\u5173\u7cfb \u00b6 BaseException +-- SystemExit +-- KeyboardInterrupt +-- GeneratorExit +-- Exception +-- StopIteration +-- StopAsyncIteration +-- AttributeError \u5c5e\u6027\u9519\u8bef +-- AssertionError \u65ad\u8a00\u9519\u8bef +-- BufferError \u7f13\u51b2\u9519\u8bef +-- EOFError \u6587\u4ef6\u7ed3\u675f\u7b26\u9519\u8bef +-- MemoryError \u5185\u5b58\u9519\u8bef +-- ReferenceError +-- SystemError \u7cfb\u7edf\u9519\u8bef +-- TypeError \u7c7b\u578b\u9519\u8bef +-- ArithmeticError \u7b97\u672f\u9519\u8bef | +-- FloatingPointError | +-- OverflowError | +-- ZeroDivisionError +-- ImportError \u5bfc\u5165\u9519\u8bef | +-- ModuleNotFoundError +-- LookupError | +-- IndexError | +-- KeyError +-- NameError \u547d\u540d\u9519\u8bef | +-- UnboundLocalError +-- OSError \u64cd\u4f5c\u7cfb\u7edf\u9519\u8bef | +-- BlockingIOError IO\u963b\u585e\u9519\u8bef | +-- ChildProcessError \u5b50\u8fdb\u7a0b\u9519\u8bef | +-- ConnectionError | | +-- BrokenPipeError | | +-- ConnectionAbortedError | | +-- ConnectionRefusedError | | +-- ConnectionResetError | +-- FileExistsError | +-- FileNotFoundError | +-- InterruptedError | +-- IsADirectoryError | +-- NotADirectoryError | +-- PermissionError | +-- ProcessLookupError | +-- TimeoutError +-- RuntimeError \u8fd0\u884c\u65f6\u9519\u8bef | +-- NotImplementedError | +-- RecursionError +-- SyntaxError \u540c\u6b65\u9519\u8bef | +-- IndentationError | +-- TabError +-- ValueError \u503c\u9519\u8bef | +-- UnicodeError | +-- UnicodeDecodeError | +-- UnicodeEncodeError | +-- UnicodeTranslateError +-- Warning \u8b66\u544a +-- DeprecationWarning +-- PendingDeprecationWarning +-- RuntimeWarning +-- SyntaxWarning +-- UserWarning +-- FutureWarning +-- ImportWarning +-- UnicodeWarning +-- BytesWarning +-- ResourceWarning \u629b\u51fa\u9519\u8bef \u00b6 \u9519\u8bef\u662f class\uff0c \u6355\u83b7\u9519\u8bef\u5b9e\u8d28\u4e0a\u5c31\u662f\u6355\u83b7\u5230\u8be5 class \u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002\u56e0\u6b64\uff0c\u9519\u8bef\u662f\u53ef\u4ee5\u6709\u610f\u521b\u5efa\u5e76\u629b\u51fa\u7684\u3002 try...except... \u662f\u627f\u63a5\u9519\u8bef\uff0c\u800c raise \u662f\u629b\u51fa\u9519\u8bef def register (): username = input ( \"\u8bf7\u8f93\u5165\u7528\u6237\u540d\uff1a\" ) if len ( username ) < 6 : raise Exception ( \"\u7528\u6237\u540d\u957f\u5ea6\u5fc5\u987b6\u4f4d\u4ee5\u4e0a\" ) else : print ( \"\u8f93\u5165\u7684\u7528\u6237\u540d\u662f:\" , username ) register () -------------------------------------------------- # Output1: \u8bf7\u8f93\u5165\u7528\u6237\u540d \uff1a admin Traceback ( most recent call last ): File \"d:/---Programming---/Python/Project/mo2.py\" , line 9 , in < module > register () File \"d:/---Programming---/Python/Project/mo2.py\" , line 4 , in register raise Exception ( \"\u7528\u6237\u540d\u957f\u5ea6\u5fc5\u987b6\u4f4d\u4ee5\u4e0a\" ) Exception : \u7528\u6237\u540d\u957f\u5ea6\u5fc5\u987b6\u4f4d\u4ee5\u4e0a # Output2: \u8bf7\u8f93\u5165\u7528\u6237\u540d \uff1a administor \u8f93\u5165\u7684\u7528\u6237\u540d\u662f : administor \u5728 if \u4e2d\u4e3b\u52a8 raise \u629b\u51fa\u9519\u8bef\uff0c\u4f46\u662f\u8c03\u7528 register() \u7684\u5730\u65b9\u6ca1\u6709 try...except \u6765\u6355\u83b7\u9519\u8bef\uff0c\u6240\u4ee5\u6700\u540e\u7531\u89e3\u91ca\u5668\u5904\u7406\uff0c\u6253\u5370\u51fa\u4e86\u9519\u8bef\u4fe1\u606f def register (): username = input ( \"\u8bf7\u8f93\u5165\u7528\u6237\u540d\uff1a\" ) if len ( username ) < 6 : raise Exception ( \"\u7528\u6237\u540d\u957f\u5ea6\u5fc5\u987b6\u4f4d\u4ee5\u4e0a\" ) else : print ( \"\u8f93\u5165\u7684\u7528\u6237\u540d\u662f\uff1a\" , username ) try : register () except Exception as e : print ( e ) print ( \"\u6ce8\u518c\u5931\u8d25\" ) else : print ( \"\u6ce8\u518c\u6210\u529f\" ) -------------------------------------------------- # Output1: \u8bf7\u8f93\u5165\u7528\u6237\u540d \uff1a admin \u7528\u6237\u540d\u957f\u5ea6\u5fc5\u987b6\u4f4d\u4ee5\u4e0a \u6ce8\u518c\u5931\u8d25 # Output2: \u8bf7\u8f93\u5165\u7528\u6237\u540d \uff1a administor \u8f93\u5165\u7684\u7528\u6237\u540d\u662f : administor \u6ce8\u518c\u6210\u529f \u5728 if \u5904 raise \u629b\u51fa\u9519\u8bef\uff0c\u5728 register() \u4f7f\u7528\u4e86 try...except \u6355\u83b7\u9519\u8bef\uff0c\u7136\u540e\u8fdb\u884c\u4e86\u5904\u7406\u3002 \u81ea\u5b9a\u4e49\u9519\u8bef \u00b6 \u4e3b\u52a8\u629b\u51fa\u9519\u8bef\uff0c\u8fd9\u4e2a\u9519\u8bef\u53ef\u4ee5\u662f\u81ea\u5df1\u5b9a\u4e49\u7684 class\uff0c\u56e0\u4e3a\u9519\u8bef\u4e5f\u662f class\u3002 class NameUndercutting ( Exception ): pass def register (): username = input ( \"\u8bf7\u8f93\u5165\u7528\u6237\u540d\uff1a\" ) if len ( username ) < 6 : raise Exception ( \"\u7528\u6237\u540d\u957f\u5ea6\u5fc5\u987b6\u4f4d\u4ee5\u4e0a\" ) else : print ( \"\u8f93\u5165\u7684\u7528\u6237\u540d\u662f\uff1a\" , username ) try : register () except NameUndercutting as e : print ( e ) print ( \"\u6ce8\u518c\u5931\u8d25\" ) else : print ( \"\u6ce8\u518c\u6210\u529f\" ) -------------------------------------------------- # Output1: \u8bf7\u8f93\u5165\u7528\u6237\u540d \uff1a admin \u7528\u6237\u540d\u957f\u5ea6\u5fc5\u987b6\u4f4d\u4ee5\u4e0a \u6ce8\u518c\u5931\u8d25 # Output2: \u8bf7\u8f93\u5165\u7528\u6237\u540d \uff1a administor \u8f93\u5165\u7684\u7528\u6237\u540d\u662f : administor \u6ce8\u518c\u6210\u529f","title":"\u9519\u8bef\u5904\u7406"},{"location":"Python/Basic/Python-No-7-Error-Handle/#_1","text":"try...except1...[exceptN...[finally...] try : \u53ef\u80fd\u4f1a\u51fa\u73b0\u5f02\u5e38\u7684\u4ee3\u7801 except \u5f02\u5e38\u7c7b\u578b [ as \u522b\u540d ] \uff1a \u51fa\u73b0\u5f02\u5e38\u540e\u7684\u5904\u7406 finally : \u4e0d\u7ba1\u662f\u5426\u51fa\u73b0\u5f02\u5e38\u6700\u540e\u90fd\u4f1a\u6267\u884c\u7684\u4ee3\u7801 \u793a\u4f8b\uff1a # \u51fa\u73b0 \u9664\u96f6\u7684\u5f02\u5e38 \u793a\u4f8b try : print ( \"Try---------\" ) r = 10 / 0 print ( \"result: \" , r ) except ZeroDivisionError as e : print ( \"Except------\" , e ) finally : print ( \"Finally-----\" ) print ( \"END\" ) -------------------------------------------------- # Output: Try --------- Except ------ division by zero Finally ----- END try \u8bed\u53e5\u5757\u4e2d\u7684\u4ee3\u7801\u9047\u5230\u5f02\u5e38\u540e\u4f1a\u8df3\u8f6c\u5230 except \u8bed\u53e5\u5757\u6267\u884c \u800c finally \u8bed\u53e5\u5757\u4e0d\u7ba1\u6709\u6ca1\u6709\u5f02\u5e38\u6700\u540e\u90fd\u4f1a\u6267\u884c\u3002\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u6ca1\u6709 finally \u8bed\u53e5 # \u6ca1\u6709\u5f02\u5e38\u7684\u793a\u4f8b try : print ( \"Try---------\" ) r = 10 / 2 print ( \"result: \" , r ) except ZeroDivisionError as e : print ( \"Except------\" , e ) finally : print ( \"Finally-----\" ) print ( \"END\" ) -------------------------------------------------- # Output: Try --------- result : 5 Finally ----- END","title":"\u9519\u8bef\u5904\u7406"},{"location":"Python/Basic/Python-No-7-Error-Handle/#_2","text":"\u6355\u83b7\u5f02\u5e38\u4e0d\u6b62\u53ef\u4ee5\u6355\u83b7\u4e00\u4e2a\uff0c\u8fd8\u53ef\u4ee5 \u6355\u83b7\u591a\u4e2a try : print ( \"Try---------\" ) r = 10 / int ( 'a' ) print ( \"result: \" , r ) except ValueError as e : print ( 'ValueError: ' , e ) except ZeroDivisionError as e : print ( \"ZeroDivisionError: \" , e ) finally : print ( \"Finally-----\" ) print ( \"END\" ) -------------------------------------------------- # Output: Try --------- ValueError : invalid literal for int () with base 10 : 'a' Finally ----- END","title":"\u6355\u83b7\u591a\u4e2a\u5f02\u5e38"},{"location":"Python/Basic/Python-No-7-Error-Handle/#else","text":"\u5728 except \u540e\u9762\u8fd8\u53ef\u4ee5\u52a0\u4e00\u4e2a else \u8bed\u53e5\u5757 # else \u8bed\u53e5\u5728\u6ca1\u6709\u5f02\u5e38\u7684\u60c5\u51b5\u4e0b \u793a\u4f8b try : print ( \"Try---------\" ) r = 10 / int ( '2' ) print ( \"result: \" , r ) except ValueError as e : print ( 'ValueError: ' , e ) except ZeroDivisionError as e : print ( \"ZeroDivisionError: \" , e ) else : print ( \"Else--------No Error!\" ) finally : print ( \"Finally-----\" ) print ( \"END\" ) -------------------------------------------------- # Output: Try --------- result : 5.0 Else -------- No Error ! Finally ----- END else \u8bed\u53e5\u4e0d\u540c\u4e8efinally \u8bed\u53e5\u3002finally \u8bed\u53e5\u662f\u6709\u65e0\u5f02\u5e38\u90fd\u4f1a\u6267\u884c\uff0celse \u8bed\u53e5\u4f1a\u5728\u6ca1\u6709\u5f02\u5e38\u7684\u60c5\u51b5\u4e0b\u6267\u884c # else \u8bed\u53e5\u5728\u6709\u5f02\u5e38\u7684\u60c5\u51b5\u4e0b \u793a\u4f8b try : print ( \"Try---------\" ) r = 10 / int ( 'a' ) print ( \"result: \" , r ) except ValueError as e : print ( 'ValueError: ' , e ) except ZeroDivisionError as e : print ( \"ZeroDivisionError: \" , e ) else : print ( \"Else--------No Error!\" ) finally : print ( \"Finally-----\" ) print ( \"END\" ) -------------------------------------------------- # Output: Try --------- ValueError : invalid literal for int () with base 10 : 'a' Finally ----- END","title":"else \u8bed\u53e5"},{"location":"Python/Basic/Python-No-7-Error-Handle/#_3","text":"\u4f8b\u5982\u73b0\u5728 A() \u8c03\u7528 B() \uff0c B() \u8c03\u7528 C() \uff0c\u5728 C() \u51fa\u9519\u4e86\uff0c\u53ea\u8981 A() \u6355\u83b7\u5230\u4e86\uff0c\u5c31\u53ef\u4ee5\u5904\u7406\u3002 def C ( s ): return 10 / int ( s ) def B ( s ): return C ( s ) * 2 def A (): try : B ( '0' ) except Exception as e : print ( \"Error:\" , e ) finally : print ( \"Finally------\" ) A () -------------------------------------------------- # Output: Error : division by zero Finally ------ \u867d\u7136\u9519\u8bef\u662f\u5728 C() \u51fa\u73b0\uff0c\u4f46\u662f\u5728 A() \u4e5f\u80fd\u6355\u83b7\u3002 \u5982\u679c\u9519\u8bef\u6ca1\u6709\u88ab\u6355\u83b7\uff0c\u5b83\u5c31\u4f1a\u4e00\u76f4\u5f80\u4e0a\u629b\uff0c\u6700\u540e\u88abPython\u89e3\u91ca\u5668\u6355\u83b7\uff0c\u6253\u5370\u4e00\u4e2a\u9519\u8bef\u4fe1\u606f\uff0c\u7136\u540e\u7a0b\u5e8f\u9000\u51fa\u3002","title":"\u4f18\u70b9\uff1a\u8de8\u8d8a\u591a\u5c42\u8c03\u7528"},{"location":"Python/Basic/Python-No-7-Error-Handle/#class","text":"\u6240\u6709\u7684\u9519\u8bef\u7c7b\u578b\u90fd\u7ee7\u627f\u81ea BaseException \uff0c\u5982\u679c\u6355\u83b7\u5230\u4e86\u4e00\u4e2a\u7236\u7c7b\u9519\u8bef\uff0c\u5176\u5b50\u7c7b\u9519\u8bef\u4e0d\u4f1a\u88ab\u6355\u83b7\u3002 \u4f8b\u5982\uff1a try : foo () except ValueError as e : print ( 'ValueError' ) except UnicodeError as e : print ( 'UnicodeError' ) \u7b2c\u4e8c\u4e2aexcept\u6c38\u8fdc\u6355\u83b7\u4e0d\u5230 UnicodeError \uff0c\u56e0\u4e3a UnicodeError \u662f ValueError \u7684\u5b50\u7c7b\u3002 \u5373\u4f7f\u6709 UnicodeError \uff0c\u4e5f\u88ab\u7b2c\u4e00\u4e2aexcept\u6355\u83b7\u4e86\u3002","title":"\u9519\u8bef\u662f\u4e2aclass"},{"location":"Python/Basic/Python-No-7-Error-Handle/#_4","text":"BaseException +-- SystemExit +-- KeyboardInterrupt +-- GeneratorExit +-- Exception +-- StopIteration +-- StopAsyncIteration +-- AttributeError \u5c5e\u6027\u9519\u8bef +-- AssertionError \u65ad\u8a00\u9519\u8bef +-- BufferError \u7f13\u51b2\u9519\u8bef +-- EOFError \u6587\u4ef6\u7ed3\u675f\u7b26\u9519\u8bef +-- MemoryError \u5185\u5b58\u9519\u8bef +-- ReferenceError +-- SystemError \u7cfb\u7edf\u9519\u8bef +-- TypeError \u7c7b\u578b\u9519\u8bef +-- ArithmeticError \u7b97\u672f\u9519\u8bef | +-- FloatingPointError | +-- OverflowError | +-- ZeroDivisionError +-- ImportError \u5bfc\u5165\u9519\u8bef | +-- ModuleNotFoundError +-- LookupError | +-- IndexError | +-- KeyError +-- NameError \u547d\u540d\u9519\u8bef | +-- UnboundLocalError +-- OSError \u64cd\u4f5c\u7cfb\u7edf\u9519\u8bef | +-- BlockingIOError IO\u963b\u585e\u9519\u8bef | +-- ChildProcessError \u5b50\u8fdb\u7a0b\u9519\u8bef | +-- ConnectionError | | +-- BrokenPipeError | | +-- ConnectionAbortedError | | +-- ConnectionRefusedError | | +-- ConnectionResetError | +-- FileExistsError | +-- FileNotFoundError | +-- InterruptedError | +-- IsADirectoryError | +-- NotADirectoryError | +-- PermissionError | +-- ProcessLookupError | +-- TimeoutError +-- RuntimeError \u8fd0\u884c\u65f6\u9519\u8bef | +-- NotImplementedError | +-- RecursionError +-- SyntaxError \u540c\u6b65\u9519\u8bef | +-- IndentationError | +-- TabError +-- ValueError \u503c\u9519\u8bef | +-- UnicodeError | +-- UnicodeDecodeError | +-- UnicodeEncodeError | +-- UnicodeTranslateError +-- Warning \u8b66\u544a +-- DeprecationWarning +-- PendingDeprecationWarning +-- RuntimeWarning +-- SyntaxWarning +-- UserWarning +-- FutureWarning +-- ImportWarning +-- UnicodeWarning +-- BytesWarning +-- ResourceWarning","title":"\u9519\u8bef\u7c7b\u7ee7\u627f\u5173\u7cfb"},{"location":"Python/Basic/Python-No-7-Error-Handle/#_5","text":"\u9519\u8bef\u662f class\uff0c \u6355\u83b7\u9519\u8bef\u5b9e\u8d28\u4e0a\u5c31\u662f\u6355\u83b7\u5230\u8be5 class \u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002\u56e0\u6b64\uff0c\u9519\u8bef\u662f\u53ef\u4ee5\u6709\u610f\u521b\u5efa\u5e76\u629b\u51fa\u7684\u3002 try...except... \u662f\u627f\u63a5\u9519\u8bef\uff0c\u800c raise \u662f\u629b\u51fa\u9519\u8bef def register (): username = input ( \"\u8bf7\u8f93\u5165\u7528\u6237\u540d\uff1a\" ) if len ( username ) < 6 : raise Exception ( \"\u7528\u6237\u540d\u957f\u5ea6\u5fc5\u987b6\u4f4d\u4ee5\u4e0a\" ) else : print ( \"\u8f93\u5165\u7684\u7528\u6237\u540d\u662f:\" , username ) register () -------------------------------------------------- # Output1: \u8bf7\u8f93\u5165\u7528\u6237\u540d \uff1a admin Traceback ( most recent call last ): File \"d:/---Programming---/Python/Project/mo2.py\" , line 9 , in < module > register () File \"d:/---Programming---/Python/Project/mo2.py\" , line 4 , in register raise Exception ( \"\u7528\u6237\u540d\u957f\u5ea6\u5fc5\u987b6\u4f4d\u4ee5\u4e0a\" ) Exception : \u7528\u6237\u540d\u957f\u5ea6\u5fc5\u987b6\u4f4d\u4ee5\u4e0a # Output2: \u8bf7\u8f93\u5165\u7528\u6237\u540d \uff1a administor \u8f93\u5165\u7684\u7528\u6237\u540d\u662f : administor \u5728 if \u4e2d\u4e3b\u52a8 raise \u629b\u51fa\u9519\u8bef\uff0c\u4f46\u662f\u8c03\u7528 register() \u7684\u5730\u65b9\u6ca1\u6709 try...except \u6765\u6355\u83b7\u9519\u8bef\uff0c\u6240\u4ee5\u6700\u540e\u7531\u89e3\u91ca\u5668\u5904\u7406\uff0c\u6253\u5370\u51fa\u4e86\u9519\u8bef\u4fe1\u606f def register (): username = input ( \"\u8bf7\u8f93\u5165\u7528\u6237\u540d\uff1a\" ) if len ( username ) < 6 : raise Exception ( \"\u7528\u6237\u540d\u957f\u5ea6\u5fc5\u987b6\u4f4d\u4ee5\u4e0a\" ) else : print ( \"\u8f93\u5165\u7684\u7528\u6237\u540d\u662f\uff1a\" , username ) try : register () except Exception as e : print ( e ) print ( \"\u6ce8\u518c\u5931\u8d25\" ) else : print ( \"\u6ce8\u518c\u6210\u529f\" ) -------------------------------------------------- # Output1: \u8bf7\u8f93\u5165\u7528\u6237\u540d \uff1a admin \u7528\u6237\u540d\u957f\u5ea6\u5fc5\u987b6\u4f4d\u4ee5\u4e0a \u6ce8\u518c\u5931\u8d25 # Output2: \u8bf7\u8f93\u5165\u7528\u6237\u540d \uff1a administor \u8f93\u5165\u7684\u7528\u6237\u540d\u662f : administor \u6ce8\u518c\u6210\u529f \u5728 if \u5904 raise \u629b\u51fa\u9519\u8bef\uff0c\u5728 register() \u4f7f\u7528\u4e86 try...except \u6355\u83b7\u9519\u8bef\uff0c\u7136\u540e\u8fdb\u884c\u4e86\u5904\u7406\u3002","title":"\u629b\u51fa\u9519\u8bef"},{"location":"Python/Basic/Python-No-7-Error-Handle/#_6","text":"\u4e3b\u52a8\u629b\u51fa\u9519\u8bef\uff0c\u8fd9\u4e2a\u9519\u8bef\u53ef\u4ee5\u662f\u81ea\u5df1\u5b9a\u4e49\u7684 class\uff0c\u56e0\u4e3a\u9519\u8bef\u4e5f\u662f class\u3002 class NameUndercutting ( Exception ): pass def register (): username = input ( \"\u8bf7\u8f93\u5165\u7528\u6237\u540d\uff1a\" ) if len ( username ) < 6 : raise Exception ( \"\u7528\u6237\u540d\u957f\u5ea6\u5fc5\u987b6\u4f4d\u4ee5\u4e0a\" ) else : print ( \"\u8f93\u5165\u7684\u7528\u6237\u540d\u662f\uff1a\" , username ) try : register () except NameUndercutting as e : print ( e ) print ( \"\u6ce8\u518c\u5931\u8d25\" ) else : print ( \"\u6ce8\u518c\u6210\u529f\" ) -------------------------------------------------- # Output1: \u8bf7\u8f93\u5165\u7528\u6237\u540d \uff1a admin \u7528\u6237\u540d\u957f\u5ea6\u5fc5\u987b6\u4f4d\u4ee5\u4e0a \u6ce8\u518c\u5931\u8d25 # Output2: \u8bf7\u8f93\u5165\u7528\u6237\u540d \uff1a administor \u8f93\u5165\u7684\u7528\u6237\u540d\u662f : administor \u6ce8\u518c\u6210\u529f","title":"\u81ea\u5b9a\u4e49\u9519\u8bef"},{"location":"Python/Basic/Python-No-8-Debug/","text":"\u5f00\u53d1\u7684\u5fc5\u7ecf\u4e4b\u8def\uff1a\u8c03\u8bd5 \u5927\u578b\u9879\u76ee\u4e2d\uff0c\u4e00\u822c\u90fd\u662f\u4f7f\u7528\u65e5\u5fd7\u6765\u8c03\u8bd5\u7a0b\u5e8f\u3002\u4e0d\u8fc7\u6709\u65f6\u5019\u6709\u4e00\u5c0f\u5757\u4ee3\u7801\u60f3\u505a\u8c03\u8bd5\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u7528 print \u548c assert \u3002 print & assert \u00b6 print() \u5c31\u662f\u5e38\u89c1\u7684\u6253\u5370\u51fd\u6570\u3002 \u51e1\u662f\u7528 print() \u7684\u5730\u65b9\u90fd\u53ef\u4ee5\u7528 \u65ad\u8a00assert\u8bed\u53e5 \u4ee3\u66ff # \u7528print def foo ( s ): n = int ( s ) if n == 0 : print ( \"n is zero!\" ) else : return 10 / n foo ( '0' ) -------------------------------------------------- # Output: Traceback ( most recent call last ): ... ZeroDivisionError : division by zero # \u7528assert def foo ( s ): n = int ( s ) assert n == 0 , \"n is zero!\" return 10 / n foo ( '0' ) -------------------------------------------------- # Output: Traceback ( most recent call last ): ... AssertionError : n is zero ! \u5f53assert\u540e\u9762\u7684\u8868\u8fbe\u5f0f\u4e3a False \u65f6\uff0c\u5219\u629b\u51fa AssertionError \u9519\u8bef assert expression \u7b49\u4ef7\u4e8e if not expression : raise AssertionError assert expression [,arguments] \u7b49\u4ef7\u4e8e if not expression : rasise AssertionError ( arguments ) \u4f8b\u5982\uff1a\u65ad\u8a00\u5f53\u524d\u7cfb\u7edf\u4e3a linux import sys assert ( linux in sys . platform ), \"\u8be5\u4ee3\u7801\u53ea\u80fd\u5728 linux \u7cfb\u7edf\u4e0b\u6267\u884c\" \u65e5\u5fd7\u6a21\u5757 logging \u00b6 Python \u6807\u51c6\u5e93\u4e2d\u6709\u4e00\u4e2a\u65e5\u5fd7\u6a21\u5757 logging \uff0c\u76f8\u5f53\u4e8e java \u4e2d\u7684 log4j \u5728**\u8f6f\u4ef6\u5f00\u53d1\u9636\u6bb5**\u6216**\u90e8\u7f72\u5f00\u53d1\u73af\u5883**\u65f6\uff0c \u4e3a\u4e86\u5c3d\u53ef\u80fd\u8be6\u7ec6\u7684\u67e5\u770b\u5e94\u7528\u7a0b\u5e8f\u7684\u8fd0\u884c\u72b6\u6001\u6765\u4fdd\u8bc1\u4e0a\u7ebf\u540e\u7684\u7a33\u5b9a\u6027\uff0c \u6211\u4eec\u53ef\u80fd\u9700\u8981\u628a\u8be5\u5e94\u7528\u7a0b\u5e8f\u6240\u6709\u7684\u8fd0\u884c\u65e5\u5fd7\u5168\u90e8\u8bb0\u5f55\u4e0b\u6765\u8fdb\u884c\u5206\u6790\uff0c\u8fd9\u662f\u975e\u5e38\u8017\u8d39\u673a\u5668\u6027\u80fd\u7684\u3002 \u5f53**\u5e94\u7528\u7a0b\u5e8f\u6b63\u5f0f\u53d1\u5e03**\u6216**\u5728\u751f\u4ea7\u73af\u5883\u90e8\u7f72\u5e94\u7528\u7a0b\u5e8f**\u65f6\uff0c \u6211\u4eec\u901a\u5e38\u53ea\u9700\u8981\u8bb0\u5f55\u5e94\u7528\u7a0b\u5e8f\u7684 \u5f02\u5e38\u4fe1\u606f \u3001 \u9519\u8bef\u4fe1\u606f \u7b49\uff0c \u8fd9\u6837\u65e2\u53ef\u4ee5\u51cf\u5c0f\u670d\u52a1\u5668\u7684I/O\u538b\u529b\uff0c\u4e5f\u53ef\u4ee5\u907f\u514d\u6211\u4eec\u5728\u6392\u67e5\u6545\u969c\u65f6\u88ab\u6df9\u6ca1\u5728\u65e5\u5fd7\u7684\u6d77\u6d0b\u91cc\u3002 logging \u65e5\u5fd7\u7b49\u7ea7 \u00b6 \u628a\u65e5\u5fd7\u5206\u4e3a6\u4e2a\u7b49\u7ea7 Level value Description NOTEST 0 DEBUG 10 \u6700\u8be6\u7ec6\u7684\u65e5\u5fd7\u4fe1\u606f\uff0c\u5178\u578b\u5e94\u7528\u573a\u666f\u662f \u95ee\u9898\u8bca\u65ad INFO 20 \u901a\u5e38\u53ea\u8bb0\u5f55\u5173\u952e\u8282\u70b9\u4fe1\u606f\uff0c\u7528\u4e8e\u786e\u8ba4\u4e00\u5207\u90fd\u662f\u6309\u7167\u6211\u4eec\u9884\u671f\u7684\u90a3\u6837\u8fdb\u884c\u5de5\u4f5c WARNING 30 \u5f53\u67d0\u4e9b\u4e0d\u671f\u671b\u7684\u4e8b\u60c5\u53d1\u751f\u65f6\u8bb0\u5f55\u7684\u4fe1\u606f\uff0c\u4f46\u662f\u6b64\u65f6\u5e94\u7528\u7a0b\u5e8f\u8fd8\u662f\u6b63\u5e38\u8fd0\u884c\u7684 ERROR 40 \u7531\u4e8e\u4e00\u4e2a\u66f4\u4e25\u91cd\u7684\u95ee\u9898\u5bfc\u81f4\u67d0\u4e9b\u529f\u80fd\u4e0d\u80fd\u6b63\u5e38\u8fd0\u884c\u65f6\u8bb0\u5f55\u7684\u4fe1\u606f CRITICAL 50 \u5f53\u53d1\u751f\u4e25\u91cd\u9519\u8bef\uff0c\u5bfc\u81f4\u5e94\u7528\u7a0b\u5e8f\u4e0d\u80fd\u7ee7\u7eed\u8fd0\u884c\u65f6\u8bb0\u5f55\u7684\u4fe1\u606f \u65e5\u5fd7\u7b49\u7ea7\u662f\u4ece\u4e0b\u5230\u4e0a\u4f9d\u6b21\u5347\u9ad8\u7684\uff08\u503c\u8d8a\u5927\u7b49\u7ea7\u8d8a\u9ad8\uff09 \u5373\uff1aNOTEST < DEBUG < INFO < WARNING < ERROR < CRITICAL\uff0c \u800c\u65e5\u5fd7\u7684\u4fe1\u606f\u91cf\u662f\u4f9d\u6b21\u51cf\u5c11\u7684\uff1b \u5f00\u53d1\u5e94\u7528\u7a0b\u5e8f\u6216\u90e8\u7f72\u5f00\u53d1\u73af\u5883\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 DEBUG \u6216 INFO \u7ea7\u522b\u7684\u65e5\u5fd7\u83b7\u53d6\u5c3d\u53ef\u80fd\u8be6\u7ec6\u7684\u65e5\u5fd7\u4fe1\u606f\u6765\u8fdb\u884c\u5f00\u53d1\u6216\u90e8\u7f72\u8c03\u8bd5\uff1b \u5e94\u7528\u4e0a\u7ebf\u6216\u90e8\u7f72\u751f\u4ea7\u73af\u5883\u65f6\uff0c\u5e94\u8be5\u4f7f\u7528 WARNING \u6216 ERROR \u6216 CRITICAL \u7ea7\u522b\u7684\u65e5\u5fd7\u6765\u964d\u4f4e\u673a\u5668\u7684I/O\u538b\u529b\u548c\u63d0\u9ad8\u83b7\u53d6\u9519\u8bef\u65e5\u5fd7\u4fe1\u606f\u7684\u6548\u7387\u3002 \u65e5\u5fd7\u7ea7\u522b\u7684\u6307\u5b9a\u901a\u5e38\u90fd\u662f\u5728 \u5e94\u7528\u7a0b\u5e8f\u7684\u914d\u7f6e\u6587\u4ef6 \u4e2d\u8fdb\u884c\u6307\u5b9a\u7684\u3002 logging \u914d\u7f6e \u00b6 loggong.basicConfig(**kwargs) **kwargs \u53ef\u4ee5\u63a5\u6536\u5173\u952e\u5b57\u53c2\u6570\u5982\u4e0b\uff1a \u53c2\u6570\u540d\u79f0 \u63cf\u8ff0 \u53d6\u503c\u8303\u56f4 filename \u6307\u5b9a\u65e5\u5fd7\u8f93\u51fa\u76ee\u6807\u6587\u4ef6\u7684\u6587\u4ef6\u540d\uff0c\u6307\u5b9a\u8be5\u8bbe\u7f6e\u9879\u540e\u65e5\u5fd7\u4fe1\u606f\u5c31\u4e0d\u4f1a\u88ab\u8f93\u51fa\u5230\u63a7\u5236\u53f0\u4e86 string filemode \u6307\u5b9a\u65e5\u5fd7\u6587\u4ef6\u7684\u6253\u5f00\u6a21\u5f0f\uff0c\u9ed8\u8ba4\u4e3a'a'\u3002\u8be5\u9009\u9879\u8981\u5728filename\u6307\u5b9a\u65f6\u624d\u6709\u6548 a\u3001w format \u6307\u5b9a\u65e5\u5fd7\u683c\u5f0f\u5b57\u7b26\u4e32\uff0c\u5373\u6307\u5b9a\u65e5\u5fd7\u8f93\u51fa\u65f6\u6240\u5305\u542b\u7684\u5b57\u6bb5\u4fe1\u606f\u4ee5\u53ca\u5b83\u4eec\u7684\u987a\u5e8f \u8be6\u89c1\u4e0b\u8868 datefmt \u6307\u5b9a\u65e5\u671f/\u65f6\u95f4\u683c\u5f0f\uff0c\u8be5\u9009\u9879\u8981\u5728format\u4e2d\u5305\u542b\u65f6\u95f4\u5b57\u6bb5%(asctime)s\u65f6\u624d\u6709\u6548 datefmt level \u6307\u5b9a\u65e5\u5fd7\u5668\u7684\u65e5\u5fd7\u7ea7\u522b logging.DEBUG\u3001logging.INFO... stream \u6307\u5b9a\u65e5\u5fd7\u8f93\u51fa\u76ee\u6807stream\u3002 sys.stdout\u3001sys.stderr\u4ee5\u53ca\u7f51\u7edcstream style \u6307\u5b9aformat\u683c\u5f0f\u5b57\u7b26\u4e32\u7684\u98ce\u683c\uff0c\u53ef\u53d6\u503c\u4e3a\uff0c\u9ed8\u8ba4\u4e3a'%' %\u3001{\u3001$ handlers \u8be5\u9009\u9879\u5982\u679c\u88ab\u6307\u5b9a\uff0c\u5b83\u5e94\u8be5\u662f\u4e00\u4e2a\u521b\u5efa\u4e86\u591a\u4e2aHandler\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u8fd9\u4e9bhandler\u5c06\u4f1a\u88ab\u6dfb\u52a0\u5230root logger\u3002 \u4e00\u4e2a\u521b\u5efa\u4e86\u591a\u4e2aHandler\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61 filename \u3001 stream \u548c handlers \u8fd9\u4e09\u4e2a\u914d\u7f6e\u9879\u53ea\u80fd\u6709\u4e00\u4e2a\u5b58\u5728\uff0c\u4e0d\u80fd\u540c\u65f6\u51fa\u73b02\u4e2a\u62163\u4e2a\uff0c\u5426\u5219\u4f1a\u5f15\u53d1ValueError\u5f02\u5e38\u3002 format \u53c2\u6570\u7684\u53d6\u503c\u8868 \u540d\u79f0 \u4f7f\u7528\u683c\u5f0f \u63cf\u8ff0 asctime %(asctime)s \u65e5\u5fd7\u4e8b\u4ef6\u53d1\u751f\u7684\u65f6\u95f4-- \u4eba\u7c7b\u53ef\u8bfb\u65f6\u95f4 \uff0c\u5982\uff1a2003-07-08 16:49:45,896 created %(created)f \u65e5\u5fd7\u4e8b\u4ef6\u53d1\u751f\u7684\u65f6\u95f4-- \u65f6\u95f4\u6233 \uff0c\u5c31\u662f\u5f53\u65f6\u8c03\u7528time.time()\u51fd\u6570\u8fd4\u56de\u7684\u503c relativeCreated %(relativeCreated)d \u65e5\u5fd7\u4e8b\u4ef6\u53d1\u751f\u7684\u65f6\u95f4\u76f8\u5bf9\u4e8elogging\u6a21\u5757\u52a0\u8f7d\u65f6\u95f4\u7684**\u76f8\u5bf9\u6beb\u79d2\u6570**\uff08\u76ee\u524d\u8fd8\u4e0d\u77e5\u9053\u5e72\u561b\u7528\u7684\uff09 msecs %(msecs)d \u65e5\u5fd7\u4e8b\u4ef6\u53d1\u751f\u7684\u65f6\u95f4\u7684**\u6beb\u79d2\u90e8\u5206** --------------- ------------------- ---------------------------------------------------------------------------- levelname %(levelname)s \u8be5\u65e5\u5fd7\u8bb0\u5f55\u7684\u6587\u5b57\u5f62\u5f0f\u7684**\u65e5\u5fd7\u7ea7\u522b**\uff08'DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'\uff09 levelno %(levelno)s \u8be5\u65e5\u5fd7\u8bb0\u5f55\u7684\u6570\u5b57\u5f62\u5f0f\u7684**\u65e5\u5fd7\u7ea7\u522b**\uff0810,20,30,40,50\uff09 lineno %(lineno)d \u8c03\u7528\u65e5\u5fd7\u8bb0\u5f55\u51fd\u6570\u7684**\u6e90\u4ee3\u7801\u6240\u5728\u7684\u884c\u53f7** funcName %(funcName)s \u8c03\u7528\u65e5\u5fd7\u8bb0\u5f55\u51fd\u6570\u7684**\u51fd\u6570\u540d** name %(name)s \u6240\u4f7f\u7528\u7684**\u65e5\u5fd7\u5668\u540d\u79f0**\uff0c\u9ed8\u8ba4\u662f'root'\uff0c message %(message)s \u65e5\u5fd7\u8bb0\u5f55\u7684**\u6587\u672c\u5185\u5bb9**\uff0c\u901a\u8fc7 msg % args\u8ba1\u7b97\u5f97\u5230\u7684 --------------- ------------------- ---------------------------------------------------------------------------- pathname %(pathname)s \u8c03\u7528\u65e5\u5fd7\u8bb0\u5f55\u51fd\u6570\u7684\u6e90\u7801\u6587\u4ef6\u7684**\u5168\u8def\u5f84** filename %(filename)s pathname\u7684\u6587\u4ef6\u540d\u90e8\u5206\uff0c\u5305\u542b\u6587\u4ef6\u540e\u7f00 module %(module)s filename\u7684\u540d\u79f0\u90e8\u5206\uff0c\u4e0d\u5305\u542b\u540e\u7f00 --------------- ------------------- ---------------------------------------------------------------------------- process %(process)d \u8fdb\u7a0bID processName %(processName)s \u8fdb\u7a0b\u540d\u79f0\uff0cPython 3.1\u65b0\u589e thread %(thread)d \u7ebf\u7a0bID threadname %(thread)s \u7ebf\u7a0b\u540d\u79f0 import logging LOG_FORMAT = \" %(asctime)s - %(levelname)s - %(message)s \" # \u65e5\u5fd7\u6253\u5370\u683c\u5f0f DATE_FORMAT = \"%Y-%m- %d %H:%M:%S\" # \u65f6\u95f4\u6253\u5370\u683c\u5f0f # \u914d\u7f6e\u65e5\u5fd7 logging . basicConfig ( filename = 'my.log' , level = logging . DEBUG , format = LOG_FORMAT , datefmt = DATE_FORMAT ) logging . debug ( \"This is a debug log.\" ) logging . info ( \"This is a info log.\" ) logging . warning ( \"This is a warning log.\" ) logging . error ( \"This is a error log.\" ) logging . critical ( \"This is a critical log.\" ) \u4ee5\u4e0a\u4ee3\u7801 \u914d\u7f6e\u4e86\u65e5\u5fd7\u6587\u4ef6\uff0c\u7ea7\u522b\u8bbe\u7f6e\u4e3a DEBUG\uff0c\u8f93\u51fa\u683c\u5f0f\u4e3a \u65e5\u5fd7\u53d1\u751f\u65f6\u95f4 - \u65e5\u5fd7\u7b49\u7ea7 - \u65e5\u5fd7\u4fe1\u606f \u6267\u884c\u540e\u7ed3\u679c\u5982\u4e0b\uff1a \u6267\u884c\u7b2c\u4e8c\u6b21\u540e\u7ed3\u679c\u5982\u4e0b\uff1a \u5982\u679c\u8981\u8ba9\u65e5\u5fd7\u683c\u5f0f\u597d\u770b\u70b9\uff0c\u8fd8\u53ef\u4ee5\u6307\u5b9a\u5bbd\u5ea6\u3002 \u6bd4\u5982\u6267\u884c \u65e5\u5fd7\u7b49\u7ea7 \u7684\u6253\u5370\u5bbd\u5ea6\u4e3a 8\uff0c\u5728 s \u524d\u9762\u52a0\u4e0a\u5bbd\u5ea6\u5373\u53ef\uff1a %(levelname)8s \u5982\u679c\u8981\u5de6\u5bf9\u9f50\uff0c\u5219\u5199\u4e0a\u51cf\u53f7 -\uff1a %(levelname)-8s # \u5bfc\u5165\u6a21\u5757 import logging LOG_FORMAT = \" %(asctime)s - %(levelname)-8s - %(message)s \" # \u65e5\u5fd7\u6253\u5370\u683c\u5f0f DATE_FORMAT = \"%Y-%m- %d %H:%M:%S\" # \u65f6\u95f4\u6253\u5370\u683c\u5f0f # \u914d\u7f6e\u65e5\u5fd7 logging . basicConfig ( filename = 'my.log' , level = logging . DEBUG , format = LOG_FORMAT , datefmt = DATE_FORMAT ) # \u6253\u65e5\u5fd7 logging . debug ( \"This is a debug log.\" ) logging . info ( \"This is a info log.\" ) logging . warning ( \"This is a warning log.\" ) logging . error ( \"This is a error log.\" ) logging . critical ( \"This is a critical log.\" ) \u5de6\u5bf9\u9f50\uff1a%(levelname)-8s \u53f3\u5bf9\u9f50\uff1a%(levelname)8s logging \u6a21\u5757\u4f7f\u7528 \u00b6 \u7528\u6cd5\uff1a 1. \u5bfc\u5165 logging 2. \u914d\u7f6e(\u53ef\u9009) 3. \u6253\u65e5\u5fd7 logging \u6a21\u5757\u63d0\u4f9b\u4e86\u4e24\u79cd\u8bb0\u5f55\u65e5\u5fd7\u7684\u65b9\u5f0f\uff1a - \u4f7f\u7528 logging \u63d0\u4f9b\u7684 \u6a21\u5757\u7ea7\u522b \u7684\u51fd\u6570 - \u4f7f\u7528 logging \u65e5\u5fd7\u7cfb\u7edf\u7684 \u56db\u5927\u7ec4\u4ef6 logging\u6240\u63d0\u4f9b\u7684 \u6a21\u5757\u7ea7\u522b \u7684\u65e5\u5fd7\u8bb0\u5f55\u51fd\u6570\u4e5f\u662f\u5bf9logging \u65e5\u5fd7\u7cfb\u7edf\u76f8\u5173\u7c7b \u7684\u5c01\u88c5\u800c\u5df2\u3002 \u51fd\u6570\u7528\u6cd5 \u00b6 \u5e38\u7528\u6a21\u5757\u7ea7\u522b\u51fd\u6570 Function Description logging.debug(msg, *args, **kwargs) \u521b\u5efa\u4e00\u6761\u4e25\u91cd\u7ea7\u522b\u4e3a DEBUG \u7684\u65e5\u5fd7\u8bb0\u5f55 logging.info(msg, *args, **kwargs) \u521b\u5efa\u4e00\u6761\u4e25\u91cd\u7ea7\u522b\u4e3a INFO \u7684\u65e5\u5fd7\u8bb0\u5f55 logging.warning(msg, *args, **kwargs) \u521b\u5efa\u4e00\u6761\u4e25\u91cd\u7ea7\u522b\u4e3a WARNNING \u7684\u65e5\u5fd7\u8bb0\u5f55 logging.error(msg, *args, **kwargs) \u521b\u5efa\u4e00\u6761\u4e25\u91cd\u7ea7\u522b\u4e3a ERROR \u7684\u65e5\u5fd7\u8bb0\u5f55 logging.critical(msg, *args, **kwargs) \u521b\u5efa\u4e00\u6761\u4e25\u91cd\u7ea7\u522b\u4e3a CRITICAL \u7684\u65e5\u5fd7\u8bb0\u5f55 logging.log(msg, *args, **kwargs) \u521b\u5efa\u4e00\u6761\u4e25\u91cd\u7ea7\u522b\u4e3a LOG \u7684\u65e5\u5fd7\u8bb0\u5f55 logging.basicConfig(**kwargs) \u5bf9root logger\u8fdb\u884c\u4e00\u6b21\u6027\u914d\u7f6e import logging # \u5bfc\u5165\u6a21\u5757 # \u6253\u65e5\u5fd7 logging . debug ( \"This is a debug log.\" ) logging . info ( \"This is a info log.\" ) logging . warning ( \"This is a warning log.\" ) logging . error ( \"This is a error log.\" ) logging . critical ( \"This is a critical log.\" ) \u6216 import logging #\u5bfc\u5165\u6a21\u5757 # \u6253\u65e5\u5fd7 logging . log ( logging . DEBUG , \"This is a debug log.\" ) logging . log ( logging . INFO , \"This is a info log.\" ) logging . log ( logging . WARNING , \"This is a warning log.\" ) logging . log ( logging . ERROR , \"This is a error log.\" ) logging . log ( logging . CRITICAL , \"This is a critical log.\" ) -------------------------------------------------- # Output: WARNING : root : This is a warning log . ERROR : root : This is a error log . CRITICAL : root : This is a critical log . \u8fd9\u91cc\u53ea\u8f93\u51fa warning \u7ea7\u522b\u4ee5\u4e0a\u7684\u4fe1\u606f\u3002\u8fd9\u662f\u56e0\u4e3a\u9ed8\u8ba4\u7684\u65e5\u5fd7\u7b49\u7ea7\u662f warning \uff0c\u6240\u4ee5 debug \u548c info \u7ea7\u522b\u7684\u4fe1\u606f\u5c31\u88ab\u5ffd\u7565\u4e86\u3002 logging \u53ea\u8f93\u51fa \u5927\u4e8e\u7b49\u4e8e \u6240\u8bbe\u7f6e\u7ea7\u522b\u4ee5\u4e0a\u7684\u65e5\u5fd7\u4fe1\u606f\u3002 \u8fd9\u70b9\u53ef\u4ee5\u5728 logging.basicConfig() \u4e2d\u8bbe\u7f6e","title":"\u8c03\u8bd5"},{"location":"Python/Basic/Python-No-8-Debug/#print-assert","text":"print() \u5c31\u662f\u5e38\u89c1\u7684\u6253\u5370\u51fd\u6570\u3002 \u51e1\u662f\u7528 print() \u7684\u5730\u65b9\u90fd\u53ef\u4ee5\u7528 \u65ad\u8a00assert\u8bed\u53e5 \u4ee3\u66ff # \u7528print def foo ( s ): n = int ( s ) if n == 0 : print ( \"n is zero!\" ) else : return 10 / n foo ( '0' ) -------------------------------------------------- # Output: Traceback ( most recent call last ): ... ZeroDivisionError : division by zero # \u7528assert def foo ( s ): n = int ( s ) assert n == 0 , \"n is zero!\" return 10 / n foo ( '0' ) -------------------------------------------------- # Output: Traceback ( most recent call last ): ... AssertionError : n is zero ! \u5f53assert\u540e\u9762\u7684\u8868\u8fbe\u5f0f\u4e3a False \u65f6\uff0c\u5219\u629b\u51fa AssertionError \u9519\u8bef assert expression \u7b49\u4ef7\u4e8e if not expression : raise AssertionError assert expression [,arguments] \u7b49\u4ef7\u4e8e if not expression : rasise AssertionError ( arguments ) \u4f8b\u5982\uff1a\u65ad\u8a00\u5f53\u524d\u7cfb\u7edf\u4e3a linux import sys assert ( linux in sys . platform ), \"\u8be5\u4ee3\u7801\u53ea\u80fd\u5728 linux \u7cfb\u7edf\u4e0b\u6267\u884c\"","title":"print &amp; assert"},{"location":"Python/Basic/Python-No-8-Debug/#logging","text":"Python \u6807\u51c6\u5e93\u4e2d\u6709\u4e00\u4e2a\u65e5\u5fd7\u6a21\u5757 logging \uff0c\u76f8\u5f53\u4e8e java \u4e2d\u7684 log4j \u5728**\u8f6f\u4ef6\u5f00\u53d1\u9636\u6bb5**\u6216**\u90e8\u7f72\u5f00\u53d1\u73af\u5883**\u65f6\uff0c \u4e3a\u4e86\u5c3d\u53ef\u80fd\u8be6\u7ec6\u7684\u67e5\u770b\u5e94\u7528\u7a0b\u5e8f\u7684\u8fd0\u884c\u72b6\u6001\u6765\u4fdd\u8bc1\u4e0a\u7ebf\u540e\u7684\u7a33\u5b9a\u6027\uff0c \u6211\u4eec\u53ef\u80fd\u9700\u8981\u628a\u8be5\u5e94\u7528\u7a0b\u5e8f\u6240\u6709\u7684\u8fd0\u884c\u65e5\u5fd7\u5168\u90e8\u8bb0\u5f55\u4e0b\u6765\u8fdb\u884c\u5206\u6790\uff0c\u8fd9\u662f\u975e\u5e38\u8017\u8d39\u673a\u5668\u6027\u80fd\u7684\u3002 \u5f53**\u5e94\u7528\u7a0b\u5e8f\u6b63\u5f0f\u53d1\u5e03**\u6216**\u5728\u751f\u4ea7\u73af\u5883\u90e8\u7f72\u5e94\u7528\u7a0b\u5e8f**\u65f6\uff0c \u6211\u4eec\u901a\u5e38\u53ea\u9700\u8981\u8bb0\u5f55\u5e94\u7528\u7a0b\u5e8f\u7684 \u5f02\u5e38\u4fe1\u606f \u3001 \u9519\u8bef\u4fe1\u606f \u7b49\uff0c \u8fd9\u6837\u65e2\u53ef\u4ee5\u51cf\u5c0f\u670d\u52a1\u5668\u7684I/O\u538b\u529b\uff0c\u4e5f\u53ef\u4ee5\u907f\u514d\u6211\u4eec\u5728\u6392\u67e5\u6545\u969c\u65f6\u88ab\u6df9\u6ca1\u5728\u65e5\u5fd7\u7684\u6d77\u6d0b\u91cc\u3002","title":"\u65e5\u5fd7\u6a21\u5757 logging"},{"location":"Python/Basic/Python-No-8-Debug/#logging_1","text":"\u628a\u65e5\u5fd7\u5206\u4e3a6\u4e2a\u7b49\u7ea7 Level value Description NOTEST 0 DEBUG 10 \u6700\u8be6\u7ec6\u7684\u65e5\u5fd7\u4fe1\u606f\uff0c\u5178\u578b\u5e94\u7528\u573a\u666f\u662f \u95ee\u9898\u8bca\u65ad INFO 20 \u901a\u5e38\u53ea\u8bb0\u5f55\u5173\u952e\u8282\u70b9\u4fe1\u606f\uff0c\u7528\u4e8e\u786e\u8ba4\u4e00\u5207\u90fd\u662f\u6309\u7167\u6211\u4eec\u9884\u671f\u7684\u90a3\u6837\u8fdb\u884c\u5de5\u4f5c WARNING 30 \u5f53\u67d0\u4e9b\u4e0d\u671f\u671b\u7684\u4e8b\u60c5\u53d1\u751f\u65f6\u8bb0\u5f55\u7684\u4fe1\u606f\uff0c\u4f46\u662f\u6b64\u65f6\u5e94\u7528\u7a0b\u5e8f\u8fd8\u662f\u6b63\u5e38\u8fd0\u884c\u7684 ERROR 40 \u7531\u4e8e\u4e00\u4e2a\u66f4\u4e25\u91cd\u7684\u95ee\u9898\u5bfc\u81f4\u67d0\u4e9b\u529f\u80fd\u4e0d\u80fd\u6b63\u5e38\u8fd0\u884c\u65f6\u8bb0\u5f55\u7684\u4fe1\u606f CRITICAL 50 \u5f53\u53d1\u751f\u4e25\u91cd\u9519\u8bef\uff0c\u5bfc\u81f4\u5e94\u7528\u7a0b\u5e8f\u4e0d\u80fd\u7ee7\u7eed\u8fd0\u884c\u65f6\u8bb0\u5f55\u7684\u4fe1\u606f \u65e5\u5fd7\u7b49\u7ea7\u662f\u4ece\u4e0b\u5230\u4e0a\u4f9d\u6b21\u5347\u9ad8\u7684\uff08\u503c\u8d8a\u5927\u7b49\u7ea7\u8d8a\u9ad8\uff09 \u5373\uff1aNOTEST < DEBUG < INFO < WARNING < ERROR < CRITICAL\uff0c \u800c\u65e5\u5fd7\u7684\u4fe1\u606f\u91cf\u662f\u4f9d\u6b21\u51cf\u5c11\u7684\uff1b \u5f00\u53d1\u5e94\u7528\u7a0b\u5e8f\u6216\u90e8\u7f72\u5f00\u53d1\u73af\u5883\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 DEBUG \u6216 INFO \u7ea7\u522b\u7684\u65e5\u5fd7\u83b7\u53d6\u5c3d\u53ef\u80fd\u8be6\u7ec6\u7684\u65e5\u5fd7\u4fe1\u606f\u6765\u8fdb\u884c\u5f00\u53d1\u6216\u90e8\u7f72\u8c03\u8bd5\uff1b \u5e94\u7528\u4e0a\u7ebf\u6216\u90e8\u7f72\u751f\u4ea7\u73af\u5883\u65f6\uff0c\u5e94\u8be5\u4f7f\u7528 WARNING \u6216 ERROR \u6216 CRITICAL \u7ea7\u522b\u7684\u65e5\u5fd7\u6765\u964d\u4f4e\u673a\u5668\u7684I/O\u538b\u529b\u548c\u63d0\u9ad8\u83b7\u53d6\u9519\u8bef\u65e5\u5fd7\u4fe1\u606f\u7684\u6548\u7387\u3002 \u65e5\u5fd7\u7ea7\u522b\u7684\u6307\u5b9a\u901a\u5e38\u90fd\u662f\u5728 \u5e94\u7528\u7a0b\u5e8f\u7684\u914d\u7f6e\u6587\u4ef6 \u4e2d\u8fdb\u884c\u6307\u5b9a\u7684\u3002","title":"logging \u65e5\u5fd7\u7b49\u7ea7"},{"location":"Python/Basic/Python-No-8-Debug/#logging_2","text":"loggong.basicConfig(**kwargs) **kwargs \u53ef\u4ee5\u63a5\u6536\u5173\u952e\u5b57\u53c2\u6570\u5982\u4e0b\uff1a \u53c2\u6570\u540d\u79f0 \u63cf\u8ff0 \u53d6\u503c\u8303\u56f4 filename \u6307\u5b9a\u65e5\u5fd7\u8f93\u51fa\u76ee\u6807\u6587\u4ef6\u7684\u6587\u4ef6\u540d\uff0c\u6307\u5b9a\u8be5\u8bbe\u7f6e\u9879\u540e\u65e5\u5fd7\u4fe1\u606f\u5c31\u4e0d\u4f1a\u88ab\u8f93\u51fa\u5230\u63a7\u5236\u53f0\u4e86 string filemode \u6307\u5b9a\u65e5\u5fd7\u6587\u4ef6\u7684\u6253\u5f00\u6a21\u5f0f\uff0c\u9ed8\u8ba4\u4e3a'a'\u3002\u8be5\u9009\u9879\u8981\u5728filename\u6307\u5b9a\u65f6\u624d\u6709\u6548 a\u3001w format \u6307\u5b9a\u65e5\u5fd7\u683c\u5f0f\u5b57\u7b26\u4e32\uff0c\u5373\u6307\u5b9a\u65e5\u5fd7\u8f93\u51fa\u65f6\u6240\u5305\u542b\u7684\u5b57\u6bb5\u4fe1\u606f\u4ee5\u53ca\u5b83\u4eec\u7684\u987a\u5e8f \u8be6\u89c1\u4e0b\u8868 datefmt \u6307\u5b9a\u65e5\u671f/\u65f6\u95f4\u683c\u5f0f\uff0c\u8be5\u9009\u9879\u8981\u5728format\u4e2d\u5305\u542b\u65f6\u95f4\u5b57\u6bb5%(asctime)s\u65f6\u624d\u6709\u6548 datefmt level \u6307\u5b9a\u65e5\u5fd7\u5668\u7684\u65e5\u5fd7\u7ea7\u522b logging.DEBUG\u3001logging.INFO... stream \u6307\u5b9a\u65e5\u5fd7\u8f93\u51fa\u76ee\u6807stream\u3002 sys.stdout\u3001sys.stderr\u4ee5\u53ca\u7f51\u7edcstream style \u6307\u5b9aformat\u683c\u5f0f\u5b57\u7b26\u4e32\u7684\u98ce\u683c\uff0c\u53ef\u53d6\u503c\u4e3a\uff0c\u9ed8\u8ba4\u4e3a'%' %\u3001{\u3001$ handlers \u8be5\u9009\u9879\u5982\u679c\u88ab\u6307\u5b9a\uff0c\u5b83\u5e94\u8be5\u662f\u4e00\u4e2a\u521b\u5efa\u4e86\u591a\u4e2aHandler\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u8fd9\u4e9bhandler\u5c06\u4f1a\u88ab\u6dfb\u52a0\u5230root logger\u3002 \u4e00\u4e2a\u521b\u5efa\u4e86\u591a\u4e2aHandler\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61 filename \u3001 stream \u548c handlers \u8fd9\u4e09\u4e2a\u914d\u7f6e\u9879\u53ea\u80fd\u6709\u4e00\u4e2a\u5b58\u5728\uff0c\u4e0d\u80fd\u540c\u65f6\u51fa\u73b02\u4e2a\u62163\u4e2a\uff0c\u5426\u5219\u4f1a\u5f15\u53d1ValueError\u5f02\u5e38\u3002 format \u53c2\u6570\u7684\u53d6\u503c\u8868 \u540d\u79f0 \u4f7f\u7528\u683c\u5f0f \u63cf\u8ff0 asctime %(asctime)s \u65e5\u5fd7\u4e8b\u4ef6\u53d1\u751f\u7684\u65f6\u95f4-- \u4eba\u7c7b\u53ef\u8bfb\u65f6\u95f4 \uff0c\u5982\uff1a2003-07-08 16:49:45,896 created %(created)f \u65e5\u5fd7\u4e8b\u4ef6\u53d1\u751f\u7684\u65f6\u95f4-- \u65f6\u95f4\u6233 \uff0c\u5c31\u662f\u5f53\u65f6\u8c03\u7528time.time()\u51fd\u6570\u8fd4\u56de\u7684\u503c relativeCreated %(relativeCreated)d \u65e5\u5fd7\u4e8b\u4ef6\u53d1\u751f\u7684\u65f6\u95f4\u76f8\u5bf9\u4e8elogging\u6a21\u5757\u52a0\u8f7d\u65f6\u95f4\u7684**\u76f8\u5bf9\u6beb\u79d2\u6570**\uff08\u76ee\u524d\u8fd8\u4e0d\u77e5\u9053\u5e72\u561b\u7528\u7684\uff09 msecs %(msecs)d \u65e5\u5fd7\u4e8b\u4ef6\u53d1\u751f\u7684\u65f6\u95f4\u7684**\u6beb\u79d2\u90e8\u5206** --------------- ------------------- ---------------------------------------------------------------------------- levelname %(levelname)s \u8be5\u65e5\u5fd7\u8bb0\u5f55\u7684\u6587\u5b57\u5f62\u5f0f\u7684**\u65e5\u5fd7\u7ea7\u522b**\uff08'DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'\uff09 levelno %(levelno)s \u8be5\u65e5\u5fd7\u8bb0\u5f55\u7684\u6570\u5b57\u5f62\u5f0f\u7684**\u65e5\u5fd7\u7ea7\u522b**\uff0810,20,30,40,50\uff09 lineno %(lineno)d \u8c03\u7528\u65e5\u5fd7\u8bb0\u5f55\u51fd\u6570\u7684**\u6e90\u4ee3\u7801\u6240\u5728\u7684\u884c\u53f7** funcName %(funcName)s \u8c03\u7528\u65e5\u5fd7\u8bb0\u5f55\u51fd\u6570\u7684**\u51fd\u6570\u540d** name %(name)s \u6240\u4f7f\u7528\u7684**\u65e5\u5fd7\u5668\u540d\u79f0**\uff0c\u9ed8\u8ba4\u662f'root'\uff0c message %(message)s \u65e5\u5fd7\u8bb0\u5f55\u7684**\u6587\u672c\u5185\u5bb9**\uff0c\u901a\u8fc7 msg % args\u8ba1\u7b97\u5f97\u5230\u7684 --------------- ------------------- ---------------------------------------------------------------------------- pathname %(pathname)s \u8c03\u7528\u65e5\u5fd7\u8bb0\u5f55\u51fd\u6570\u7684\u6e90\u7801\u6587\u4ef6\u7684**\u5168\u8def\u5f84** filename %(filename)s pathname\u7684\u6587\u4ef6\u540d\u90e8\u5206\uff0c\u5305\u542b\u6587\u4ef6\u540e\u7f00 module %(module)s filename\u7684\u540d\u79f0\u90e8\u5206\uff0c\u4e0d\u5305\u542b\u540e\u7f00 --------------- ------------------- ---------------------------------------------------------------------------- process %(process)d \u8fdb\u7a0bID processName %(processName)s \u8fdb\u7a0b\u540d\u79f0\uff0cPython 3.1\u65b0\u589e thread %(thread)d \u7ebf\u7a0bID threadname %(thread)s \u7ebf\u7a0b\u540d\u79f0 import logging LOG_FORMAT = \" %(asctime)s - %(levelname)s - %(message)s \" # \u65e5\u5fd7\u6253\u5370\u683c\u5f0f DATE_FORMAT = \"%Y-%m- %d %H:%M:%S\" # \u65f6\u95f4\u6253\u5370\u683c\u5f0f # \u914d\u7f6e\u65e5\u5fd7 logging . basicConfig ( filename = 'my.log' , level = logging . DEBUG , format = LOG_FORMAT , datefmt = DATE_FORMAT ) logging . debug ( \"This is a debug log.\" ) logging . info ( \"This is a info log.\" ) logging . warning ( \"This is a warning log.\" ) logging . error ( \"This is a error log.\" ) logging . critical ( \"This is a critical log.\" ) \u4ee5\u4e0a\u4ee3\u7801 \u914d\u7f6e\u4e86\u65e5\u5fd7\u6587\u4ef6\uff0c\u7ea7\u522b\u8bbe\u7f6e\u4e3a DEBUG\uff0c\u8f93\u51fa\u683c\u5f0f\u4e3a \u65e5\u5fd7\u53d1\u751f\u65f6\u95f4 - \u65e5\u5fd7\u7b49\u7ea7 - \u65e5\u5fd7\u4fe1\u606f \u6267\u884c\u540e\u7ed3\u679c\u5982\u4e0b\uff1a \u6267\u884c\u7b2c\u4e8c\u6b21\u540e\u7ed3\u679c\u5982\u4e0b\uff1a \u5982\u679c\u8981\u8ba9\u65e5\u5fd7\u683c\u5f0f\u597d\u770b\u70b9\uff0c\u8fd8\u53ef\u4ee5\u6307\u5b9a\u5bbd\u5ea6\u3002 \u6bd4\u5982\u6267\u884c \u65e5\u5fd7\u7b49\u7ea7 \u7684\u6253\u5370\u5bbd\u5ea6\u4e3a 8\uff0c\u5728 s \u524d\u9762\u52a0\u4e0a\u5bbd\u5ea6\u5373\u53ef\uff1a %(levelname)8s \u5982\u679c\u8981\u5de6\u5bf9\u9f50\uff0c\u5219\u5199\u4e0a\u51cf\u53f7 -\uff1a %(levelname)-8s # \u5bfc\u5165\u6a21\u5757 import logging LOG_FORMAT = \" %(asctime)s - %(levelname)-8s - %(message)s \" # \u65e5\u5fd7\u6253\u5370\u683c\u5f0f DATE_FORMAT = \"%Y-%m- %d %H:%M:%S\" # \u65f6\u95f4\u6253\u5370\u683c\u5f0f # \u914d\u7f6e\u65e5\u5fd7 logging . basicConfig ( filename = 'my.log' , level = logging . DEBUG , format = LOG_FORMAT , datefmt = DATE_FORMAT ) # \u6253\u65e5\u5fd7 logging . debug ( \"This is a debug log.\" ) logging . info ( \"This is a info log.\" ) logging . warning ( \"This is a warning log.\" ) logging . error ( \"This is a error log.\" ) logging . critical ( \"This is a critical log.\" ) \u5de6\u5bf9\u9f50\uff1a%(levelname)-8s \u53f3\u5bf9\u9f50\uff1a%(levelname)8s","title":"logging \u914d\u7f6e"},{"location":"Python/Basic/Python-No-8-Debug/#logging_3","text":"\u7528\u6cd5\uff1a 1. \u5bfc\u5165 logging 2. \u914d\u7f6e(\u53ef\u9009) 3. \u6253\u65e5\u5fd7 logging \u6a21\u5757\u63d0\u4f9b\u4e86\u4e24\u79cd\u8bb0\u5f55\u65e5\u5fd7\u7684\u65b9\u5f0f\uff1a - \u4f7f\u7528 logging \u63d0\u4f9b\u7684 \u6a21\u5757\u7ea7\u522b \u7684\u51fd\u6570 - \u4f7f\u7528 logging \u65e5\u5fd7\u7cfb\u7edf\u7684 \u56db\u5927\u7ec4\u4ef6 logging\u6240\u63d0\u4f9b\u7684 \u6a21\u5757\u7ea7\u522b \u7684\u65e5\u5fd7\u8bb0\u5f55\u51fd\u6570\u4e5f\u662f\u5bf9logging \u65e5\u5fd7\u7cfb\u7edf\u76f8\u5173\u7c7b \u7684\u5c01\u88c5\u800c\u5df2\u3002","title":"logging \u6a21\u5757\u4f7f\u7528"},{"location":"Python/Basic/Python-No-8-Debug/#_1","text":"\u5e38\u7528\u6a21\u5757\u7ea7\u522b\u51fd\u6570 Function Description logging.debug(msg, *args, **kwargs) \u521b\u5efa\u4e00\u6761\u4e25\u91cd\u7ea7\u522b\u4e3a DEBUG \u7684\u65e5\u5fd7\u8bb0\u5f55 logging.info(msg, *args, **kwargs) \u521b\u5efa\u4e00\u6761\u4e25\u91cd\u7ea7\u522b\u4e3a INFO \u7684\u65e5\u5fd7\u8bb0\u5f55 logging.warning(msg, *args, **kwargs) \u521b\u5efa\u4e00\u6761\u4e25\u91cd\u7ea7\u522b\u4e3a WARNNING \u7684\u65e5\u5fd7\u8bb0\u5f55 logging.error(msg, *args, **kwargs) \u521b\u5efa\u4e00\u6761\u4e25\u91cd\u7ea7\u522b\u4e3a ERROR \u7684\u65e5\u5fd7\u8bb0\u5f55 logging.critical(msg, *args, **kwargs) \u521b\u5efa\u4e00\u6761\u4e25\u91cd\u7ea7\u522b\u4e3a CRITICAL \u7684\u65e5\u5fd7\u8bb0\u5f55 logging.log(msg, *args, **kwargs) \u521b\u5efa\u4e00\u6761\u4e25\u91cd\u7ea7\u522b\u4e3a LOG \u7684\u65e5\u5fd7\u8bb0\u5f55 logging.basicConfig(**kwargs) \u5bf9root logger\u8fdb\u884c\u4e00\u6b21\u6027\u914d\u7f6e import logging # \u5bfc\u5165\u6a21\u5757 # \u6253\u65e5\u5fd7 logging . debug ( \"This is a debug log.\" ) logging . info ( \"This is a info log.\" ) logging . warning ( \"This is a warning log.\" ) logging . error ( \"This is a error log.\" ) logging . critical ( \"This is a critical log.\" ) \u6216 import logging #\u5bfc\u5165\u6a21\u5757 # \u6253\u65e5\u5fd7 logging . log ( logging . DEBUG , \"This is a debug log.\" ) logging . log ( logging . INFO , \"This is a info log.\" ) logging . log ( logging . WARNING , \"This is a warning log.\" ) logging . log ( logging . ERROR , \"This is a error log.\" ) logging . log ( logging . CRITICAL , \"This is a critical log.\" ) -------------------------------------------------- # Output: WARNING : root : This is a warning log . ERROR : root : This is a error log . CRITICAL : root : This is a critical log . \u8fd9\u91cc\u53ea\u8f93\u51fa warning \u7ea7\u522b\u4ee5\u4e0a\u7684\u4fe1\u606f\u3002\u8fd9\u662f\u56e0\u4e3a\u9ed8\u8ba4\u7684\u65e5\u5fd7\u7b49\u7ea7\u662f warning \uff0c\u6240\u4ee5 debug \u548c info \u7ea7\u522b\u7684\u4fe1\u606f\u5c31\u88ab\u5ffd\u7565\u4e86\u3002 logging \u53ea\u8f93\u51fa \u5927\u4e8e\u7b49\u4e8e \u6240\u8bbe\u7f6e\u7ea7\u522b\u4ee5\u4e0a\u7684\u65e5\u5fd7\u4fe1\u606f\u3002 \u8fd9\u70b9\u53ef\u4ee5\u5728 logging.basicConfig() \u4e2d\u8bbe\u7f6e","title":"\u51fd\u6570\u7528\u6cd5"},{"location":"Python/Basic/Python-No-9-Test/","text":"\u7a0b\u5e8f\u7684\u5fc5\u7ecf\u4e4b\u8def\uff1a\u6d4b\u8bd5 \u6d4b\u8bd5\u5206\u4e3a \u5355\u5143\u6d4b\u8bd5 \u3001 \u7ec4\u4ef6\u6d4b\u8bd5 \u3001 \u7cfb\u7edf\u6d4b\u8bd5 \u3001 \u6027\u80fd\u6d4b\u8bd5 \uff0c\u9010\u7ea7\u4e0a\u5347\u3002 \u6240\u8c13\u7684 \u6d4b\u8bd5\u9a71\u52a8\u5f00\u53d1(TDD\uff1aTest-Driven Development) \uff0c\u5c31\u662f\u8bf4\u6bcf\u5199\u5b8c\u4e00\u4e2a\u5c0f\u529f\u80fd\uff0c\u5c31\u8981\u505a\u4e00\u4e2a\u5b8c\u6574\u7684\u5355\u5143\u6d4b\u8bd5\uff0c\u6bcf\u6b21\u8fdb\u884c\u6539\u52a8\u4ee5\u540e\u90fd\u8981\u8fdb\u884c\u4e00\u6b21\u5355\u5143\u6d4b\u8bd5\uff0c\u4ee5\u786e\u4fdd\u529f\u80fd\u6b63\u5e38\u3002 \u6bcf\u4e2a\u5355\u5143\u6d4b\u8bd5\u90fd\u901a\u8fc7\u4ee5\u540e\u5c31\u53ef\u4ee5\u8fdb\u884c\u7ec4\u4ef6\u6d4b\u8bd5\uff0c\u6240\u6709\u7ec4\u4ef6\u6d4b\u8bd5\u90fd\u901a\u8fc7\u5c31\u53ef\u4ee5\u8fdb\u884c\u7cfb\u7edf\u6d4b\u8bd5\uff0c\u7cfb\u7edf\u6d4b\u8bd5\u901a\u8fc7\u5c31\u53ef\u4ee5\u8fdb\u884c\u6027\u80fd\u6d4b\u8bd5\uff0c\u6027\u80fd\u6d4b\u8bd5\u7c7b\u4f3c\u4e8e\u201c\u70e4\u673a\u201d\uff0c\u6d4b\u8bd5\u7cfb\u7edf\u7684\u6700\u5927\u627f\u53d7\u80fd\u529b\uff0c\u627f\u53d7\u5cf0\u503c\u7b49\u7b49\u3002 \u5355\u5143\u6d4b\u8bd5 \u00b6 \u5355\u5143\u6d4b\u8bd5\u5c31\u662f\u5bf9\u4e00\u4e2a\u6a21\u5757\u3001\u4e00\u4e2a\u51fd\u6570\u6216\u8005\u4e00\u4e2a\u7c7b\u8fdb\u884c\u6b63\u786e\u6027\u68c0\u9a8c\u7684\u68c0\u6d4b\u5de5\u4f5c \u4e3e\u4e2a\u6817\u5b50\uff1a \u5bf9\u4e00\u4e2a\u6c42\u7edd\u5bf9\u503c\u51fd\u6570 abs(num) \uff0c\u53ef\u4ee5\u7f16\u5199\u4e00\u4e0b\u51e0\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff1a \u8f93\u5165\u6b63\u6570 \u5982 1 \u3001 4.1 \u3001 5.9 \uff0c\u671f\u5f85\u8fd4\u56de\u6b63\u6574\u6570 1 \u3001 4.1 \u3001 5.9 \u8f93\u5165\u8d1f\u6570 \u5982 -1.5 \u3001 -3.7 \u3001 20 \uff0c\u671f\u5f85\u8fd4\u56de\u6b63\u6574\u6570 1.5 \u3001 3.7 \u3001 20 \u8f93\u5165 0 \uff0c\u671f\u5f85\u8fd4\u56de 0 \u8f93\u5165\u975e\u6570\u503c\u7c7b\u578b \u5982 None \u3001 [] \u3001 {} \uff0c\u671f\u5f85\u629b\u51fa TypeError \u3002 \u5c06\u4e0a\u97624\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u653e\u5230\u4e00\u4e2a\u6d4b\u8bd5\u6a21\u5757\u91cc\uff0c\u5c31\u662f\u4e00\u4e2a\u5b8c\u6574\u5355\u5143\u6d4b\u8bd5\u3002 \u5355\u5143\u6d4b\u8bd5\u80fd\u901a\u8fc7\u4e86\uff0c\u8bf4\u660e\u8fd9\u4e2a\u51fd\u6570\u529f\u80fd\u6b63\u5e38\uff0c\u5982\u679c\u4e0d\u901a\u8fc7\uff0c\u8981\u4e48\u51fd\u6570\u6709\u95ee\u9898\uff0c\u8981\u4e48\u6d4b\u8bd5\u7528\u4f8b\u6709\u95ee\u9898\u3002 \u6240\u4ee5\u8981\u4fee\u590d\u76f4\u5230\u5355\u5143\u6d4b\u8bd5\u80fd\u591f\u901a\u8fc7\u3002 \u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\uff0c\u5982\u679c\u6211\u4eec\u5bf9 abs() \u505a\u4e86\u4fee\u6539\uff0c\u53ea\u8981\u518d\u8fdb\u884c\u4e00\u6b21\u5355\u5143\u6d4b\u8bd5\uff0c\u53ef\u4ee5\u901a\u8fc7\uff0c\u5c31\u8bf4\u660e\u4fee\u6539\u6ca1\u6709\u5f71\u54cd\u51fd\u6570\u7684\u529f\u80fd\u3002\u5982\u679c\u4e0d\u901a\u8fc7\u5219\u8981\u627e\u51fa\u95ee\u9898\uff0c\u4fee\u6539\u5230\u901a\u8fc7\u5355\u5143\u6d4b\u8bd5\u4e3a\u6b62\u3002\u6781\u5927\u7a0b\u5ea6\u4e0a\u786e\u4fdd\u8be5\u6a21\u5757\u884c\u4e3a\u4ecd\u7136\u662f\u6b63\u786e\u7684\u3002 \u6587\u6863\u6d4b\u8bd5 \u00b6 \u4e00\u4e2a\u51fd\u6570\u3001\u6a21\u5757\u3001\u7c7b\u7684\u7b2c\u4e00\u4e2a\u533f\u540d\u5b57\u7b26\u4e32\uff0c\u5c31\u662f\u6587\u6863\u3002\u5982 def func (): ''' \u8fd9\u91cc\u662f\u6587\u6863 ''' pass class cls : ''' \u8fd9\u91cc\u662f\u6587\u6863 ''' pass \u6587\u6863\u7684\u5185\u5bb9\u53ef\u4ee5\u4f5c\u4e3a\u6d4b\u8bd5\u96c6\u6765\u8fdb\u884c\u6d4b\u8bd5\u3002 \u7b2c\u4e00\u6b65\uff1a\u7f16\u5199\u6587\u6863\u3002\u6587\u6863\u4e2d >>> \u7684\u884c\u4f1a\u88ab\u6267\u884c\uff0c\u8fd9\u4e0e\u5728\u4ea4\u4e92\u6a21\u5f0f\u4e0b\u6267\u884c\u8bed\u53e5\u7684\u76f8\u540c\u7684\u3002 \u7b2c\u4e8c\u6b65\uff1a if __name__ == '__main__': import doctest; doctest.testmod() \u7b2c\u4e09\u6b65\uff1a\u8fd0\u884c\u6587\u4ef6 \u4f8b\u5982\u4e0a\u9762\u7684\u7edd\u5bf9\u503c\u51fd\u6570 abs() \u53ef\u4ee5\u8fd9\u6837\u5199 def abs ( num ): ''' The function will return the absolute value of num. >>> abs(11) 11 >>> abs(-41) 41 >>> abs(0) 0 >>> abs('a') Traceback (most recent call last): ... TypeError: '>=' not supported between instances of 'str' and 'int' ''' return n if n >= 0 else ( - n ) if __name__ == '__main__' : import doctest doctest . testmod () \u6587\u6863\u4e2d\u4ee5 >>> \u8868\u793a\u6d4b\u8bd5\u7528\u4f8b\uff0c\u5e76\u5728\u4e0b\u884c\u5199\u51fa\u7ed3\u679c\u3002\u5982\u679c\u6d4b\u8bd5\u7ed3\u679c\u6b63\u786e\uff0c\u5219\u4ec0\u4e48\u4e5f\u4e0d\u4f1a\u8f93\u51fa\u3002 \u5c0f\u7ed3 \u00b6 doctest\u975e\u5e38\u6709\u7528\uff0c\u4e0d\u4f46\u53ef\u4ee5\u7528\u6765\u6d4b\u8bd5\uff0c\u8fd8\u53ef\u4ee5\u76f4\u63a5\u4f5c\u4e3a\u793a\u4f8b\u4ee3\u7801\u3002\u901a\u8fc7\u67d0\u4e9b\u6587\u6863\u751f\u6210\u5de5\u5177\uff0c\u5c31\u53ef\u4ee5\u81ea\u52a8\u628a\u5305\u542bdoctest\u7684\u6ce8\u91ca\u63d0\u53d6\u51fa\u6765\u3002\u7528\u6237\u770b\u6587\u6863\u7684\u65f6\u5019\uff0c\u540c\u65f6\u4e5f\u770b\u5230\u4e86doctest\u3002 Unittest \u00b6 \u73af\u5883\u642d\u5efa\uff1aPython\u5df2\u5185\u7f6eUnittest\u6846\u67b6\uff0c\u76f4\u63a5 import unittest \u56db\u5927\u7ec4\u4ef6\uff1a test fixture\uff1a setUp \uff08\u524d\u7f6e\u6761\u4ef6\uff09\u3001 tearDown \uff08\u540e\u7f6e\u6761\u4ef6\uff09\uff0c\u7528\u4e8e\u521d\u59cb\u5316\u6d4b\u8bd5\u7528\u4f8b\u53ca\u6e05\u7406\u548c\u91ca\u653e\u8d44\u6e90 test case\uff1a\u6d4b\u8bd5\u7528\u4f8b\uff0c\u901a\u8fc7\u7ee7\u627f unittest.TestCase \u5b9e\u73b0\u7528\u4f8b\u7684\u7ee7\u627f\u3002\u5728Unittest\u4e2d\uff0c\u6d4b\u8bd5\u7528\u4f8b\u90fd\u662f\u901a\u8fc7test\u524d\u7f00\u6216\u540e\u7f00\u6765\u8bc6\u522b\u7684\u3002 def test_xxx(self) \u3001 def xxx_test(self) test suite\uff1a\u6d4b\u8bd5\u5957\u4ef6\uff0c\u5373\u6d4b\u8bd5\u7528\u4f8b\u7684\u96c6\u5408\u3002 test runner\uff1a\u8fd0\u884c\u5668\uff0c\u4e00\u822c\u901a\u8fc7 runner \u6765\u8c03\u7528 suite \u53bb\u6267\u884c\u6d4b\u8bd5\u3002 \u8fd0\u884c\u673a\u5236\uff1a\u901a\u8fc7\u5728main\u51fd\u6570\u4e2d\uff0c\u8c03\u7528 unittest.main() \u8fd0\u884c\u6240\u6709\u5185\u5bb9 import unittest class forTest ( unittest . TestCase ): # \u521d\u59cb\u5316 def setUp ( self ) -> None : print ( 'setUp' ) # \u91ca\u653e def tearDown ( self ) -> None : print ( 'tearDown' ) # \u6d4b\u8bd5\u7528\u4f8b1 def test_a ( self ): print ( 'a' ) # \u6d4b\u8bd5\u7528\u4f8b2 def test_b ( self ): print ( 'b' ) if __name__ == '__main__' \uff1b unittest . main () -------------------------------------------------- # Output: setUp a tearDown setUp b tearDown","title":"\u6d4b\u8bd5"},{"location":"Python/Basic/Python-No-9-Test/#_1","text":"\u5355\u5143\u6d4b\u8bd5\u5c31\u662f\u5bf9\u4e00\u4e2a\u6a21\u5757\u3001\u4e00\u4e2a\u51fd\u6570\u6216\u8005\u4e00\u4e2a\u7c7b\u8fdb\u884c\u6b63\u786e\u6027\u68c0\u9a8c\u7684\u68c0\u6d4b\u5de5\u4f5c \u4e3e\u4e2a\u6817\u5b50\uff1a \u5bf9\u4e00\u4e2a\u6c42\u7edd\u5bf9\u503c\u51fd\u6570 abs(num) \uff0c\u53ef\u4ee5\u7f16\u5199\u4e00\u4e0b\u51e0\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff1a \u8f93\u5165\u6b63\u6570 \u5982 1 \u3001 4.1 \u3001 5.9 \uff0c\u671f\u5f85\u8fd4\u56de\u6b63\u6574\u6570 1 \u3001 4.1 \u3001 5.9 \u8f93\u5165\u8d1f\u6570 \u5982 -1.5 \u3001 -3.7 \u3001 20 \uff0c\u671f\u5f85\u8fd4\u56de\u6b63\u6574\u6570 1.5 \u3001 3.7 \u3001 20 \u8f93\u5165 0 \uff0c\u671f\u5f85\u8fd4\u56de 0 \u8f93\u5165\u975e\u6570\u503c\u7c7b\u578b \u5982 None \u3001 [] \u3001 {} \uff0c\u671f\u5f85\u629b\u51fa TypeError \u3002 \u5c06\u4e0a\u97624\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u653e\u5230\u4e00\u4e2a\u6d4b\u8bd5\u6a21\u5757\u91cc\uff0c\u5c31\u662f\u4e00\u4e2a\u5b8c\u6574\u5355\u5143\u6d4b\u8bd5\u3002 \u5355\u5143\u6d4b\u8bd5\u80fd\u901a\u8fc7\u4e86\uff0c\u8bf4\u660e\u8fd9\u4e2a\u51fd\u6570\u529f\u80fd\u6b63\u5e38\uff0c\u5982\u679c\u4e0d\u901a\u8fc7\uff0c\u8981\u4e48\u51fd\u6570\u6709\u95ee\u9898\uff0c\u8981\u4e48\u6d4b\u8bd5\u7528\u4f8b\u6709\u95ee\u9898\u3002 \u6240\u4ee5\u8981\u4fee\u590d\u76f4\u5230\u5355\u5143\u6d4b\u8bd5\u80fd\u591f\u901a\u8fc7\u3002 \u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\uff0c\u5982\u679c\u6211\u4eec\u5bf9 abs() \u505a\u4e86\u4fee\u6539\uff0c\u53ea\u8981\u518d\u8fdb\u884c\u4e00\u6b21\u5355\u5143\u6d4b\u8bd5\uff0c\u53ef\u4ee5\u901a\u8fc7\uff0c\u5c31\u8bf4\u660e\u4fee\u6539\u6ca1\u6709\u5f71\u54cd\u51fd\u6570\u7684\u529f\u80fd\u3002\u5982\u679c\u4e0d\u901a\u8fc7\u5219\u8981\u627e\u51fa\u95ee\u9898\uff0c\u4fee\u6539\u5230\u901a\u8fc7\u5355\u5143\u6d4b\u8bd5\u4e3a\u6b62\u3002\u6781\u5927\u7a0b\u5ea6\u4e0a\u786e\u4fdd\u8be5\u6a21\u5757\u884c\u4e3a\u4ecd\u7136\u662f\u6b63\u786e\u7684\u3002","title":"\u5355\u5143\u6d4b\u8bd5"},{"location":"Python/Basic/Python-No-9-Test/#_2","text":"\u4e00\u4e2a\u51fd\u6570\u3001\u6a21\u5757\u3001\u7c7b\u7684\u7b2c\u4e00\u4e2a\u533f\u540d\u5b57\u7b26\u4e32\uff0c\u5c31\u662f\u6587\u6863\u3002\u5982 def func (): ''' \u8fd9\u91cc\u662f\u6587\u6863 ''' pass class cls : ''' \u8fd9\u91cc\u662f\u6587\u6863 ''' pass \u6587\u6863\u7684\u5185\u5bb9\u53ef\u4ee5\u4f5c\u4e3a\u6d4b\u8bd5\u96c6\u6765\u8fdb\u884c\u6d4b\u8bd5\u3002 \u7b2c\u4e00\u6b65\uff1a\u7f16\u5199\u6587\u6863\u3002\u6587\u6863\u4e2d >>> \u7684\u884c\u4f1a\u88ab\u6267\u884c\uff0c\u8fd9\u4e0e\u5728\u4ea4\u4e92\u6a21\u5f0f\u4e0b\u6267\u884c\u8bed\u53e5\u7684\u76f8\u540c\u7684\u3002 \u7b2c\u4e8c\u6b65\uff1a if __name__ == '__main__': import doctest; doctest.testmod() \u7b2c\u4e09\u6b65\uff1a\u8fd0\u884c\u6587\u4ef6 \u4f8b\u5982\u4e0a\u9762\u7684\u7edd\u5bf9\u503c\u51fd\u6570 abs() \u53ef\u4ee5\u8fd9\u6837\u5199 def abs ( num ): ''' The function will return the absolute value of num. >>> abs(11) 11 >>> abs(-41) 41 >>> abs(0) 0 >>> abs('a') Traceback (most recent call last): ... TypeError: '>=' not supported between instances of 'str' and 'int' ''' return n if n >= 0 else ( - n ) if __name__ == '__main__' : import doctest doctest . testmod () \u6587\u6863\u4e2d\u4ee5 >>> \u8868\u793a\u6d4b\u8bd5\u7528\u4f8b\uff0c\u5e76\u5728\u4e0b\u884c\u5199\u51fa\u7ed3\u679c\u3002\u5982\u679c\u6d4b\u8bd5\u7ed3\u679c\u6b63\u786e\uff0c\u5219\u4ec0\u4e48\u4e5f\u4e0d\u4f1a\u8f93\u51fa\u3002","title":"\u6587\u6863\u6d4b\u8bd5"},{"location":"Python/Basic/Python-No-9-Test/#_3","text":"doctest\u975e\u5e38\u6709\u7528\uff0c\u4e0d\u4f46\u53ef\u4ee5\u7528\u6765\u6d4b\u8bd5\uff0c\u8fd8\u53ef\u4ee5\u76f4\u63a5\u4f5c\u4e3a\u793a\u4f8b\u4ee3\u7801\u3002\u901a\u8fc7\u67d0\u4e9b\u6587\u6863\u751f\u6210\u5de5\u5177\uff0c\u5c31\u53ef\u4ee5\u81ea\u52a8\u628a\u5305\u542bdoctest\u7684\u6ce8\u91ca\u63d0\u53d6\u51fa\u6765\u3002\u7528\u6237\u770b\u6587\u6863\u7684\u65f6\u5019\uff0c\u540c\u65f6\u4e5f\u770b\u5230\u4e86doctest\u3002","title":"\u5c0f\u7ed3"},{"location":"Python/Basic/Python-No-9-Test/#unittest","text":"\u73af\u5883\u642d\u5efa\uff1aPython\u5df2\u5185\u7f6eUnittest\u6846\u67b6\uff0c\u76f4\u63a5 import unittest \u56db\u5927\u7ec4\u4ef6\uff1a test fixture\uff1a setUp \uff08\u524d\u7f6e\u6761\u4ef6\uff09\u3001 tearDown \uff08\u540e\u7f6e\u6761\u4ef6\uff09\uff0c\u7528\u4e8e\u521d\u59cb\u5316\u6d4b\u8bd5\u7528\u4f8b\u53ca\u6e05\u7406\u548c\u91ca\u653e\u8d44\u6e90 test case\uff1a\u6d4b\u8bd5\u7528\u4f8b\uff0c\u901a\u8fc7\u7ee7\u627f unittest.TestCase \u5b9e\u73b0\u7528\u4f8b\u7684\u7ee7\u627f\u3002\u5728Unittest\u4e2d\uff0c\u6d4b\u8bd5\u7528\u4f8b\u90fd\u662f\u901a\u8fc7test\u524d\u7f00\u6216\u540e\u7f00\u6765\u8bc6\u522b\u7684\u3002 def test_xxx(self) \u3001 def xxx_test(self) test suite\uff1a\u6d4b\u8bd5\u5957\u4ef6\uff0c\u5373\u6d4b\u8bd5\u7528\u4f8b\u7684\u96c6\u5408\u3002 test runner\uff1a\u8fd0\u884c\u5668\uff0c\u4e00\u822c\u901a\u8fc7 runner \u6765\u8c03\u7528 suite \u53bb\u6267\u884c\u6d4b\u8bd5\u3002 \u8fd0\u884c\u673a\u5236\uff1a\u901a\u8fc7\u5728main\u51fd\u6570\u4e2d\uff0c\u8c03\u7528 unittest.main() \u8fd0\u884c\u6240\u6709\u5185\u5bb9 import unittest class forTest ( unittest . TestCase ): # \u521d\u59cb\u5316 def setUp ( self ) -> None : print ( 'setUp' ) # \u91ca\u653e def tearDown ( self ) -> None : print ( 'tearDown' ) # \u6d4b\u8bd5\u7528\u4f8b1 def test_a ( self ): print ( 'a' ) # \u6d4b\u8bd5\u7528\u4f8b2 def test_b ( self ): print ( 'b' ) if __name__ == '__main__' \uff1b unittest . main () -------------------------------------------------- # Output: setUp a tearDown setUp b tearDown","title":"Unittest"},{"location":"Python/Buildints/Python-No-Buildins-json/","text":"Python\u7684\u5185\u7f6e\u5e93\u2014\u2014json\u5904\u7406 {\"firstName\":\"John\", \"lastName\":\"Doe\"} \u5bf9\u4e8edictionaries\uff0ckeys\u9700\u8981\u662f\u5b57\u7b26\u4e32\u7c7b\u578b(\u5b57\u5178\u4e2d\u4efb\u4f55\u975e\u5b57\u7b26\u4e32\u7c7b\u578b\u7684key\u5728\u7f16\u7801\u65f6\u4f1a\u5148\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32)\u3002\u800c\u4e14\uff0c\u5728web\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u9876\u5c42\u5bf9\u8c61\u88ab\u7f16\u7801\u4e3a\u4e00\u4e2a\u5b57\u5178\u662f\u4e00\u4e2a\u6807\u51c6\u505a\u6cd5\u3002 \u8fd9\u53e5\u8bdd\u5927\u6982\u610f\u601d\u662f\uff1a \u7528 {} \u5f00\u5934\u548c\u7ed3\u5c3e \u7528 str \u8868\u793a key \u7528 str, int, list, dict \u8868\u793a value list\u7528 [index] \u8bbf\u95ee dict\u7528 .key \u8bbf\u95ee json \u5b57\u7b26\u4e32\u751f\u6210 python \u5bf9\u8c61\uff1a json.load() python \u5bf9\u8c61\u683c\u5f0f\u5316\u4e3a json \u5b57\u7b26\u4e32\uff1a json.dump() \u6570\u636e\u7c7b\u578b \u00b6 \u8f6c\u6362\u5bf9\u5e94\u8868\uff08python -> json\uff09 Python JSON dict object list, tuple array str string int, float number True true False false None null \u8f6c\u6362\u5bf9\u5e94\u8868\uff08json -> python\uff09 JSON Python object dict array list string str number(int) int number(real) float true True false False null None \u5e38\u7528\u65b9\u6cd5 \u00b6 \u65b9\u6cd5 \u529f\u80fd \u603b\u7ed3 json.dump(obj,fp) \u5c06python\u6570\u636e\u7c7b\u578b\u8f6c\u6362\u5e76\u4fdd\u5b58\u5230json\u683c\u5f0f\u6587\u4ef6\u5185 p -> j,\u5199\u5165\u6587\u4ef6 json.dumps(obj) \u5c06python\u6570\u636e\u7c7b\u578b\u8f6c\u6362\u4e3ajson\u683c\u5f0f\u7684\u5b57\u7b26\u4e32 p -> j json.load(fp) \u4ecejson\u683c\u5f0f\u7684\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\u5e76\u8f6c\u6362\u4e3apython\u7684\u7c7b\u578b \u4ece\u6587\u4ef6\u8bfb, j -> p json.loads(str) \u5c06json\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3apython\u7684\u7c7b\u578b j -> p \u5e26s\u7684\u662f\u5904\u7406\u5b57\u7b26\u4e32 \u4e0d\u5e26s\u7684\u662f\u4ece\u6587\u4ef6\u91cc\u5904\u7406 Python -> JSON \u00b6 json.dump(obj, fp, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw) json.dumps(obj, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw) obj \uff1a\u9700\u8981\u88ab\u8f6c\u6362\u7684Python\u5bf9\u8c61 fp \uff1a\u6587\u4ef6\u5bf9\u8c61\uff0c\u8981\u5199\u5165\u7684\u6587\u4ef6 skipkeys \uff1a Fasle\u65f6\uff1a\u4e0d\u662f\u57fa\u672c\u5bf9\u8c61(int\u3001str\u3001bool\u3001float)\u7684\u952e\u4e0d\u4f1a\u88ab\u8df3\u8fc7 True\u65f6\uff1a\u4e0d\u662f\u57fa\u672c\u5bf9\u8c61(int\u3001str\u3001bool\u3001float)\u7684\u952e\u4f1a\u88ab\u8df3\u8fc7 ensure_ascii \uff1a True\uff1a\u5c06\u975eASCII\u5b57\u7b26\u8f6c\u4e49\uff0c\u4f8b\u5982\u4e2d\u6587 False\uff1a\u5c06\u975eASCII\u5b57\u7b26\u539f\u6837\u8f93\u51fa allow_nan \uff1a True\uff1a\u5bf9json\u89c4\u683c\u8303\u56f4\u5916\u7684float\u7c7b\u578b(nan\u3001inf\u3001-inf)\u5e8f\u5217\u5316\u65f6\u4f1a\u5f15\u53d1 ValueError False\uff1a\u5bf9json\u89c4\u683c\u8303\u56f4\u5916\u7684float\u7c7b\u578b(nan\u3001inf\u3001-inf)\u5e8f\u5217\u5316\u65f6\u4f7f\u7528\u7b49\u4ef7\u5f62\u5f0f(NaN\u3001Infinity\u3001-Infinity) indent \uff1a\u6307\u5b9a\u7f29\u8fdb\u7b49\u7ea7\uff08\u975e\u8d1f\u6574\u6570/\u5b57\u7b26\u4e32\uff09 0\u3001\u8d1f\u6570\u3001\"\"\uff1a\u53ea\u6dfb\u52a0\u6362\u884c\u7b26 None\uff1a\u4e0d\u7f29\u8fdb \u6b63\u6574\u6570\uff1a\u6bcf\u5c42\u7f29\u8fdb\u540c\u6837\u6570\u91cf\u7684\u7a7a\u683c \u5b57\u7b26\u4e32\uff1a\u5982 \\t \uff0c\u8be5\u5b57\u7b26\u4e32\u5c06\u88ab\u7528\u4e8e\u7f29\u8fdb\u6bcf\u4e00\u5c42 sort_keys \uff1a\u6309\u5b57\u5178\u7684\u952e\u6392\u5e8f default \uff1a\u5176\u5e94\u8be5\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u6bcf\u5f53\u67d0\u4e2a\u5bf9\u8c61\u65e0\u6cd5\u88ab\u5e8f\u5217\u5316\u65f6\u5b83\u4f1a\u88ab\u8c03\u7528\u3002\u5b83\u5e94\u8be5\u8fd4\u56de\u8be5\u5bf9\u8c61\u7684\u4e00\u4e2a\u53ef\u4ee5\u88ab JSON \u7f16\u7801\u7684\u7248\u672c\u6216\u8005\u5f15\u53d1\u4e00\u4e2a TypeError \u3002 \u4f7f\u7528 dumps() import json # \u8fd9\u662f\u4e00\u4e2a python \u5b57\u5178\u5bf9\u8c61 py_dic = { 'firstName' : 'Boii' , 'j' : { 'x' : 1 , 'y' : \"2\" , 'z' : 3 }, \"lastName\" : \"Pro\" , 'li' : [ \"A\" , 'b' , 3 ] } print ( 'Python\u5bf9\u8c61\uff1a' , end = \"\" ) print ( py_dic , end = \" \\t \" ) print ( type ( py_dic )) # \u5c06\u4e00\u4e2a Python \u5bf9\u8c61\u8f6c\u6362\u6210 json \u5b57\u7b26\u4e32 json_str = json . dumps ( py_dic , sort_keys = True ) print ( 'JSON\u5b57\u7b26\u4e32\uff1a' , end = \"\" ) print ( json_str , end = \" \\t \" ) print ( type ( json_str )) -------------------------------------------------- # Output: Python\u5bf9\u8c61 \uff1a { 'firstName' : 'Boii' , 'j' : { 'x' : 1 , 'y' : '2' , 'z' : 3 }, 'lastName' : 'Pro' , 'li' : [ 'A' , 'b' , 3 ]} < class ' dict '> JSON\u5b57\u7b26\u4e32 \uff1a { \"firstName\" : \"Boii\" , \"j\" : { \"x\" : 1 , \"y\" : \"2\" , \"z\" : 3 }, \"lastName\" : \"Pro\" , \"li\" : [ \"A\" , \"b\" , 3 ]} < class ' str '> \u53ef\u4ee5\u53d1\u73b0\uff0cPython\u4e2d\u90fd\u662f\u4f7f\u7528\u5355\u5f15\u53f7 ' \uff0cJSON\u4e2d\u90fd\u662f\u4f7f\u7528\u53cc\u5f15\u53f7 \" import json # \u8fd9\u662f\u4e00\u4e2apython \u5217\u8868\u5bf9\u8c61 py_list = [ 1 , 2 , 3 ] print ( 'Python\u5bf9\u8c61\uff1a' , end = \"\" ) print ( py_list , end = \" \\t \" ) print ( type ( py_list )) # \u5c06\u4e00\u4e2a Python \u5bf9\u8c61\u8f6c\u6362\u6210 json \u5b57\u7b26\u4e32 json_str = json . dumps ( py_list , sort_keys = True ) print ( 'JSON\u5b57\u7b26\u4e32\uff1a' , end = \"\" ) print ( json_str , end = \" \\t \" ) print ( type ( json_str )) -------------------------------------------------- # Output: Python\u5bf9\u8c61 \uff1a [ 1 , 2 , 3 ] < class ' list '> JSON\u5b57\u7b26\u4e32 \uff1a [ 1 , 2 , 3 ] < class ' str '> \u4f7f\u7528 dump() import json py_dic = { 'firstName' : 'Boii' , 'j' : { 'x' : 1 , 'y' : \"2\" , 'z' : 3 }, \"lastName\" : \"Pro\" , 'li' : [ \"A\" , 'b' , 3 ] } # \u5c06\u4e00\u4e2a Python \u5bf9\u8c61\u8f6c\u6362\u6210 json \u5b57\u7b26\u4e32\uff0c\u7136\u540e\u5199\u5165\u6587\u4ef6 with open ( './py_dic.json' , 'w' , encoding = 'utf-8' ) as f : json . dump ( py_dic , f , sort_keys = True ) -------------------------------------------------- # Output: \u6ca1\u6709\u8f93\u51fa \uff0c \u56e0\u4e3a\u8f93\u51fa\u5230\u6587\u4ef6\u4e2d\u4e86 # py_dic.json { \"firstName\" : \"Boii\" , \"j\" : { \"x\" : 1 , \"y\" : \"2\" , \"z\" : 3 }, \"lastName\" : \"Pro\" , \"li\" : [ \"A\" , \"b\" , 3 ]} \u6709\u4e9b\u6559\u7a0b\u4e2d\u76f4\u63a5\u4f7f\u7528 open() \u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u5bf9\u8c61\uff0c\u7136\u540e\u5c06\u6587\u4ef6\u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165 dump() \uff0c\u5374\u6ca1\u6709\u4f7f\u7528 close() \u5173\u95ed\u6587\u4ef6\u5bf9\u8c61\u3002\u8fd9\u662f\u9519\u8bef\u7684\uff0c\u4f1a\u9020\u6210\u6587\u4ef6\u5bf9\u8c61\u4e00\u76f4\u6ca1\u6709\u5173\u95ed\u800c\u6301\u7eed\u5360\u7528\u8ba1\u7b97\u673a\u8d44\u6e90\u3002 \u89e3\u51b3\u65b9\u6cd5 \uff1a\u8981\u4e48\u624b\u52a8\u8c03\u7528 close() \u65b9\u6cd5\uff0c\u8981\u4e48\u7528 with\u8bed\u53e5 f = open ( './py_dic.json' , 'w' , encoding = 'utf-8' ) json . dump ( py_dic , f , sort_keys = True ) f . close () \u6216 with open ( './py_dic.json' , 'w' , encoding = 'utf-8' ) as f : json . dump ( py_dic , f , sort_keys = True ) JSON -> Python \u00b6 json.load(fp, *, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw) json.loads(s, *, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw) fp \uff1a\u6587\u4ef6\u5bf9\u8c61\uff0c\u8981\u5199\u5165\u7684\u6587\u4ef6 object_hook \uff1a\u662f\u4e00\u4e2a\u53ef\u9009\u7684\u51fd\u6570\uff0c\u5b83\u4f1a\u88ab\u8c03\u7528\u4e8e\u6bcf\u4e00\u4e2a\u89e3\u7801\u51fa\u7684\u5bf9\u8c61\u5b57\u9762\u91cf\uff08\u5373\u4e00\u4e2a dict\uff09\u3002object_hook \u7684\u8fd4\u56de\u503c\u4f1a\u53d6\u4ee3\u539f\u672c\u7684 dict\u3002\u8fd9\u4e00\u7279\u6027\u80fd\u591f\u88ab\u7528\u4e8e\u5b9e\u73b0\u81ea\u5b9a\u4e49\u89e3\u7801\u5668\uff08\u5982 JSON-RPC \u7684\u7c7b\u578b\u63d0\u793a)\u3002 parse_float \u3001 parse_int \u3001 parse_constant \u3001 object_pairs_hook \uff1a\u90fd\u662f\u7f16\u7801\u89e3\u7801\u5668\u9700\u8981\u7684\u53c2\u6570 \u4f7f\u7528 loads() import json Str = '{\"name\": \"Boii\", \"age\": 30, \"tel\":[\"13800000000\", \"13100880088\"], \"isonly\":true}' print ( 'JSON\u5b57\u7b26\u4e32\uff1a' , end = \"\" ) print ( Str , end = ' \\t ' ) print ( type ( Str )) # \u5c06\u4e00\u4e2a json \u5b57\u7b26\u4e32 \u8f6c\u6362\u6210 Python \u5bf9\u8c61 pythonObj = json . loads ( Str ) print ( 'Python\u5bf9\u8c61\uff1a' , end = \"\" ) print ( pythonObj , end = ' \\t ' ) print ( type ( pythonObj )) -------------------------------------------------- # Output: JSON\u5b57\u7b26\u4e32 \uff1a { \"name\" : \"Boii\" , \"age\" : 30 , \"tel\" :[ \"13800000000\" , \"13100880088\" ], \"isonly\" : true } < class ' str '> Python\u5bf9\u8c61 \uff1a { 'name' : 'Boii' , 'age' : 30 , 'tel' : [ '13800000000' , '13100880088' ], 'isonly' : True } < class ' dict '> \u53ef\u4ee5\u53d1\u73b0\uff0cPython\u4e2d\u90fd\u662f\u4f7f\u7528\u5355\u5f15\u53f7 ' \uff0cJSON\u4e2d\u90fd\u662f\u4f7f\u7528\u53cc\u5f15\u53f7 \" \u4f7f\u7528 load() \u4ecejson\u6587\u4ef6\u4e2d\u8bfb\u53d6\u8f6c\u6362\u6210Python\u5bf9\u8c61 # py.json { \"firstName\" : \"Boii\" , \"j\" : { \"x\" : 2 , \"y\" : \"2\" , \"z\" : 3 }, \"lastName\" : \"Pro\" , \"li\" : [ \"A\" , \"b\" , 3 ]} # j2p.py import json with open ( './j2p.py' , 'r' , encoding = 'utf-8' ) as f : pythonObj = json . load ( f ) print ( 'Python\u5bf9\u8c61\uff1a' , end = \"\" ) print ( pythonObj ) print ( type ( pythonObj )) -------------------------------------------------- # Output: Python\u5bf9\u8c61 \uff1a { 'firstName' : 'Boii' , 'j' : { 'x' : 1 , 'y' : '2' , 'z' : 3 }, 'lastName' : 'Pro' , 'li' : [ 'A' , 'b' , 3 ]} < class ' dict '> \u603b\u7ed3 \u00b6 # Writing JSON data with open ( 'data.json' , 'w' ) as f : json . dump ( data , f ) # Reading data back with open ( 'data.json' , 'r' ) as f : data = json . load ( f )","title":"Python\u3010Buildins\u3011json"},{"location":"Python/Buildints/Python-No-Buildins-json/#_1","text":"\u8f6c\u6362\u5bf9\u5e94\u8868\uff08python -> json\uff09 Python JSON dict object list, tuple array str string int, float number True true False false None null \u8f6c\u6362\u5bf9\u5e94\u8868\uff08json -> python\uff09 JSON Python object dict array list string str number(int) int number(real) float true True false False null None","title":"\u6570\u636e\u7c7b\u578b"},{"location":"Python/Buildints/Python-No-Buildins-json/#_2","text":"\u65b9\u6cd5 \u529f\u80fd \u603b\u7ed3 json.dump(obj,fp) \u5c06python\u6570\u636e\u7c7b\u578b\u8f6c\u6362\u5e76\u4fdd\u5b58\u5230json\u683c\u5f0f\u6587\u4ef6\u5185 p -> j,\u5199\u5165\u6587\u4ef6 json.dumps(obj) \u5c06python\u6570\u636e\u7c7b\u578b\u8f6c\u6362\u4e3ajson\u683c\u5f0f\u7684\u5b57\u7b26\u4e32 p -> j json.load(fp) \u4ecejson\u683c\u5f0f\u7684\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\u5e76\u8f6c\u6362\u4e3apython\u7684\u7c7b\u578b \u4ece\u6587\u4ef6\u8bfb, j -> p json.loads(str) \u5c06json\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3apython\u7684\u7c7b\u578b j -> p \u5e26s\u7684\u662f\u5904\u7406\u5b57\u7b26\u4e32 \u4e0d\u5e26s\u7684\u662f\u4ece\u6587\u4ef6\u91cc\u5904\u7406","title":"\u5e38\u7528\u65b9\u6cd5"},{"location":"Python/Buildints/Python-No-Buildins-json/#python-json","text":"json.dump(obj, fp, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw) json.dumps(obj, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw) obj \uff1a\u9700\u8981\u88ab\u8f6c\u6362\u7684Python\u5bf9\u8c61 fp \uff1a\u6587\u4ef6\u5bf9\u8c61\uff0c\u8981\u5199\u5165\u7684\u6587\u4ef6 skipkeys \uff1a Fasle\u65f6\uff1a\u4e0d\u662f\u57fa\u672c\u5bf9\u8c61(int\u3001str\u3001bool\u3001float)\u7684\u952e\u4e0d\u4f1a\u88ab\u8df3\u8fc7 True\u65f6\uff1a\u4e0d\u662f\u57fa\u672c\u5bf9\u8c61(int\u3001str\u3001bool\u3001float)\u7684\u952e\u4f1a\u88ab\u8df3\u8fc7 ensure_ascii \uff1a True\uff1a\u5c06\u975eASCII\u5b57\u7b26\u8f6c\u4e49\uff0c\u4f8b\u5982\u4e2d\u6587 False\uff1a\u5c06\u975eASCII\u5b57\u7b26\u539f\u6837\u8f93\u51fa allow_nan \uff1a True\uff1a\u5bf9json\u89c4\u683c\u8303\u56f4\u5916\u7684float\u7c7b\u578b(nan\u3001inf\u3001-inf)\u5e8f\u5217\u5316\u65f6\u4f1a\u5f15\u53d1 ValueError False\uff1a\u5bf9json\u89c4\u683c\u8303\u56f4\u5916\u7684float\u7c7b\u578b(nan\u3001inf\u3001-inf)\u5e8f\u5217\u5316\u65f6\u4f7f\u7528\u7b49\u4ef7\u5f62\u5f0f(NaN\u3001Infinity\u3001-Infinity) indent \uff1a\u6307\u5b9a\u7f29\u8fdb\u7b49\u7ea7\uff08\u975e\u8d1f\u6574\u6570/\u5b57\u7b26\u4e32\uff09 0\u3001\u8d1f\u6570\u3001\"\"\uff1a\u53ea\u6dfb\u52a0\u6362\u884c\u7b26 None\uff1a\u4e0d\u7f29\u8fdb \u6b63\u6574\u6570\uff1a\u6bcf\u5c42\u7f29\u8fdb\u540c\u6837\u6570\u91cf\u7684\u7a7a\u683c \u5b57\u7b26\u4e32\uff1a\u5982 \\t \uff0c\u8be5\u5b57\u7b26\u4e32\u5c06\u88ab\u7528\u4e8e\u7f29\u8fdb\u6bcf\u4e00\u5c42 sort_keys \uff1a\u6309\u5b57\u5178\u7684\u952e\u6392\u5e8f default \uff1a\u5176\u5e94\u8be5\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u6bcf\u5f53\u67d0\u4e2a\u5bf9\u8c61\u65e0\u6cd5\u88ab\u5e8f\u5217\u5316\u65f6\u5b83\u4f1a\u88ab\u8c03\u7528\u3002\u5b83\u5e94\u8be5\u8fd4\u56de\u8be5\u5bf9\u8c61\u7684\u4e00\u4e2a\u53ef\u4ee5\u88ab JSON \u7f16\u7801\u7684\u7248\u672c\u6216\u8005\u5f15\u53d1\u4e00\u4e2a TypeError \u3002 \u4f7f\u7528 dumps() import json # \u8fd9\u662f\u4e00\u4e2a python \u5b57\u5178\u5bf9\u8c61 py_dic = { 'firstName' : 'Boii' , 'j' : { 'x' : 1 , 'y' : \"2\" , 'z' : 3 }, \"lastName\" : \"Pro\" , 'li' : [ \"A\" , 'b' , 3 ] } print ( 'Python\u5bf9\u8c61\uff1a' , end = \"\" ) print ( py_dic , end = \" \\t \" ) print ( type ( py_dic )) # \u5c06\u4e00\u4e2a Python \u5bf9\u8c61\u8f6c\u6362\u6210 json \u5b57\u7b26\u4e32 json_str = json . dumps ( py_dic , sort_keys = True ) print ( 'JSON\u5b57\u7b26\u4e32\uff1a' , end = \"\" ) print ( json_str , end = \" \\t \" ) print ( type ( json_str )) -------------------------------------------------- # Output: Python\u5bf9\u8c61 \uff1a { 'firstName' : 'Boii' , 'j' : { 'x' : 1 , 'y' : '2' , 'z' : 3 }, 'lastName' : 'Pro' , 'li' : [ 'A' , 'b' , 3 ]} < class ' dict '> JSON\u5b57\u7b26\u4e32 \uff1a { \"firstName\" : \"Boii\" , \"j\" : { \"x\" : 1 , \"y\" : \"2\" , \"z\" : 3 }, \"lastName\" : \"Pro\" , \"li\" : [ \"A\" , \"b\" , 3 ]} < class ' str '> \u53ef\u4ee5\u53d1\u73b0\uff0cPython\u4e2d\u90fd\u662f\u4f7f\u7528\u5355\u5f15\u53f7 ' \uff0cJSON\u4e2d\u90fd\u662f\u4f7f\u7528\u53cc\u5f15\u53f7 \" import json # \u8fd9\u662f\u4e00\u4e2apython \u5217\u8868\u5bf9\u8c61 py_list = [ 1 , 2 , 3 ] print ( 'Python\u5bf9\u8c61\uff1a' , end = \"\" ) print ( py_list , end = \" \\t \" ) print ( type ( py_list )) # \u5c06\u4e00\u4e2a Python \u5bf9\u8c61\u8f6c\u6362\u6210 json \u5b57\u7b26\u4e32 json_str = json . dumps ( py_list , sort_keys = True ) print ( 'JSON\u5b57\u7b26\u4e32\uff1a' , end = \"\" ) print ( json_str , end = \" \\t \" ) print ( type ( json_str )) -------------------------------------------------- # Output: Python\u5bf9\u8c61 \uff1a [ 1 , 2 , 3 ] < class ' list '> JSON\u5b57\u7b26\u4e32 \uff1a [ 1 , 2 , 3 ] < class ' str '> \u4f7f\u7528 dump() import json py_dic = { 'firstName' : 'Boii' , 'j' : { 'x' : 1 , 'y' : \"2\" , 'z' : 3 }, \"lastName\" : \"Pro\" , 'li' : [ \"A\" , 'b' , 3 ] } # \u5c06\u4e00\u4e2a Python \u5bf9\u8c61\u8f6c\u6362\u6210 json \u5b57\u7b26\u4e32\uff0c\u7136\u540e\u5199\u5165\u6587\u4ef6 with open ( './py_dic.json' , 'w' , encoding = 'utf-8' ) as f : json . dump ( py_dic , f , sort_keys = True ) -------------------------------------------------- # Output: \u6ca1\u6709\u8f93\u51fa \uff0c \u56e0\u4e3a\u8f93\u51fa\u5230\u6587\u4ef6\u4e2d\u4e86 # py_dic.json { \"firstName\" : \"Boii\" , \"j\" : { \"x\" : 1 , \"y\" : \"2\" , \"z\" : 3 }, \"lastName\" : \"Pro\" , \"li\" : [ \"A\" , \"b\" , 3 ]} \u6709\u4e9b\u6559\u7a0b\u4e2d\u76f4\u63a5\u4f7f\u7528 open() \u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u5bf9\u8c61\uff0c\u7136\u540e\u5c06\u6587\u4ef6\u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165 dump() \uff0c\u5374\u6ca1\u6709\u4f7f\u7528 close() \u5173\u95ed\u6587\u4ef6\u5bf9\u8c61\u3002\u8fd9\u662f\u9519\u8bef\u7684\uff0c\u4f1a\u9020\u6210\u6587\u4ef6\u5bf9\u8c61\u4e00\u76f4\u6ca1\u6709\u5173\u95ed\u800c\u6301\u7eed\u5360\u7528\u8ba1\u7b97\u673a\u8d44\u6e90\u3002 \u89e3\u51b3\u65b9\u6cd5 \uff1a\u8981\u4e48\u624b\u52a8\u8c03\u7528 close() \u65b9\u6cd5\uff0c\u8981\u4e48\u7528 with\u8bed\u53e5 f = open ( './py_dic.json' , 'w' , encoding = 'utf-8' ) json . dump ( py_dic , f , sort_keys = True ) f . close () \u6216 with open ( './py_dic.json' , 'w' , encoding = 'utf-8' ) as f : json . dump ( py_dic , f , sort_keys = True )","title":"Python -&gt; JSON"},{"location":"Python/Buildints/Python-No-Buildins-json/#json-python","text":"json.load(fp, *, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw) json.loads(s, *, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw) fp \uff1a\u6587\u4ef6\u5bf9\u8c61\uff0c\u8981\u5199\u5165\u7684\u6587\u4ef6 object_hook \uff1a\u662f\u4e00\u4e2a\u53ef\u9009\u7684\u51fd\u6570\uff0c\u5b83\u4f1a\u88ab\u8c03\u7528\u4e8e\u6bcf\u4e00\u4e2a\u89e3\u7801\u51fa\u7684\u5bf9\u8c61\u5b57\u9762\u91cf\uff08\u5373\u4e00\u4e2a dict\uff09\u3002object_hook \u7684\u8fd4\u56de\u503c\u4f1a\u53d6\u4ee3\u539f\u672c\u7684 dict\u3002\u8fd9\u4e00\u7279\u6027\u80fd\u591f\u88ab\u7528\u4e8e\u5b9e\u73b0\u81ea\u5b9a\u4e49\u89e3\u7801\u5668\uff08\u5982 JSON-RPC \u7684\u7c7b\u578b\u63d0\u793a)\u3002 parse_float \u3001 parse_int \u3001 parse_constant \u3001 object_pairs_hook \uff1a\u90fd\u662f\u7f16\u7801\u89e3\u7801\u5668\u9700\u8981\u7684\u53c2\u6570 \u4f7f\u7528 loads() import json Str = '{\"name\": \"Boii\", \"age\": 30, \"tel\":[\"13800000000\", \"13100880088\"], \"isonly\":true}' print ( 'JSON\u5b57\u7b26\u4e32\uff1a' , end = \"\" ) print ( Str , end = ' \\t ' ) print ( type ( Str )) # \u5c06\u4e00\u4e2a json \u5b57\u7b26\u4e32 \u8f6c\u6362\u6210 Python \u5bf9\u8c61 pythonObj = json . loads ( Str ) print ( 'Python\u5bf9\u8c61\uff1a' , end = \"\" ) print ( pythonObj , end = ' \\t ' ) print ( type ( pythonObj )) -------------------------------------------------- # Output: JSON\u5b57\u7b26\u4e32 \uff1a { \"name\" : \"Boii\" , \"age\" : 30 , \"tel\" :[ \"13800000000\" , \"13100880088\" ], \"isonly\" : true } < class ' str '> Python\u5bf9\u8c61 \uff1a { 'name' : 'Boii' , 'age' : 30 , 'tel' : [ '13800000000' , '13100880088' ], 'isonly' : True } < class ' dict '> \u53ef\u4ee5\u53d1\u73b0\uff0cPython\u4e2d\u90fd\u662f\u4f7f\u7528\u5355\u5f15\u53f7 ' \uff0cJSON\u4e2d\u90fd\u662f\u4f7f\u7528\u53cc\u5f15\u53f7 \" \u4f7f\u7528 load() \u4ecejson\u6587\u4ef6\u4e2d\u8bfb\u53d6\u8f6c\u6362\u6210Python\u5bf9\u8c61 # py.json { \"firstName\" : \"Boii\" , \"j\" : { \"x\" : 2 , \"y\" : \"2\" , \"z\" : 3 }, \"lastName\" : \"Pro\" , \"li\" : [ \"A\" , \"b\" , 3 ]} # j2p.py import json with open ( './j2p.py' , 'r' , encoding = 'utf-8' ) as f : pythonObj = json . load ( f ) print ( 'Python\u5bf9\u8c61\uff1a' , end = \"\" ) print ( pythonObj ) print ( type ( pythonObj )) -------------------------------------------------- # Output: Python\u5bf9\u8c61 \uff1a { 'firstName' : 'Boii' , 'j' : { 'x' : 1 , 'y' : '2' , 'z' : 3 }, 'lastName' : 'Pro' , 'li' : [ 'A' , 'b' , 3 ]} < class ' dict '>","title":"JSON -&gt; Python"},{"location":"Python/Buildints/Python-No-Buildins-json/#_3","text":"# Writing JSON data with open ( 'data.json' , 'w' ) as f : json . dump ( data , f ) # Reading data back with open ( 'data.json' , 'r' ) as f : data = json . load ( f )","title":"\u603b\u7ed3"},{"location":"Python/Buildints/Python-No-Buildins-re/","text":"Python\u7684\u5185\u7f6e\u5e93\u2014\u2014\u6b63\u5219\u8868\u8fbe\u5f0f \u6b63\u5219\u8868\u8fbe\u5f0f\u662f\u7528\u6765**\u5904\u7406\u5b57\u7b26\u4e32**\u7684\uff0c\u91cd\u5728\u5904\u7406**\u89c4\u5219** \u5e38\u7528\u6b63\u5219 \u5e74\u4efd\u5339\u914d\uff1a ^((19|20)\\d{2})$ \u624b\u673a\u53f7\u7801\uff1a ^1[3456789]\\d{9}$ E-mail\u5730\u5740\uff1a ^[\\w-]+(\\.[\\w-]+)*@[\\w-]+(\\.[\\w-]+)+$ \u7f51\u5740URL\uff1a http://(/[\\w-]+\\.)+[\\w-]+(/[\\w-./?%&=]) re.findall(goal, source) \u5339\u914d\u6210\u529f \u8fd4\u56de\u4e00\u4e2a\u5217\u8868\uff0c\u5217\u8868\u4e2d\u6709 goal \u7684\u5b57\u7b26\u4e32\uff0c \u627e\u5230n\u6b21\u5c31\u6709n\u4e2a \u5339\u914d\u5931\u8d25 \u8fd4\u56de\u4e00\u4e2a\u7a7a\u5217\u8868 >>> # \u666e\u901a\u5b57\u7b26\u6b63\u5219\u7684\u5339\u914d >>> >>> import re >>> print ( re . findall ( 'p' , 'python' )) [ 'p' ] >>> print ( re . findall ( 'python' , 'I like python' )) [ 'python' ] >>> print ( re . findall ( 'o' , 'I love python' )) [ 'o' , 'o' ] >>> print ( re . findall ( '2' , '1234567890abcdefg' )) [ '2' ] \u9884\u5b9a\u4e49\u5b57\u7b26 \u00b6 \\d \u3001 \\D \u3001 \\s \u3001 \\S \u3001 \\w \u3001 \\W \\d \uff1a\u5339\u914d\u6240\u6709**\u6570\u5b57**\uff0c 0~9 \\w \uff1a\u5339\u914d\u5305\u542b\u4e0b\u5212\u7ebf**\u5b57\u7b26** [a-z|A-Z|0-9|_] \\s \uff1a\u5339\u914d**\u7a7a\u767d\u7b26\u3001\u5236\u8868\u7b26\u3001\u6362\u884c\u7b26** [\\n \\t] \\D \uff1a\u5339\u914d\u6240\u6709**\u975e\u6570\u5b57**\uff0c ^[0-9] \\W \uff1a\u5339\u914d**\u975e\u6b63\u5e38\u5b57\u7b26** ^[a-z|A-Z|0-9|_] \\S \uff1a\u5339\u914d**\u975e\u7a7a\u767d\u7b26\u3001\u5236\u8868\u7b26\u3001\u6362\u884c\u7b26** ^[\\n \\t] . \uff1a\u9664\u4e86\u6362\u884c\u7b26\u4e4b\u5916\u6240\u6709\u5b57\u7b26 >>> print ( re . findall ( r \"\\d\" , \"1234657890abcdefg\" )) [ '1' , '2' , '3' , '4' , '6' , '5' , '7' , '8' , '9' , '0' ] >>> print ( re . findall ( r \"\\D\" , \"1234657890abcdefg\" )) [ 'a' , 'b' , 'c' , 'd' , 'e' , 'f' , 'g' ] >>> print ( re . findall ( r \"\\w\" , \"1234657890abcd_%$#efg\" )) [ '1' , '2' , '3' , '4' , '6' , '5' , '7' , '8' , '9' , '0' , 'a' , 'b' , 'c' , 'd' , '_' , 'e' , 'f' , 'g' ] >>> print ( re . findall ( r \"\\W\" , \"1234657890abcd_%$#efg\" )) [ '%' , '$' , '#' ] >>> print ( re . findall ( r \"\\s\" , \"1234 657 \\n 890ab \\t cd_%$#efg\" )) [ ' ' , ' \\n ' , ' \\t ' ] >>> print ( re . findall ( r \"\\S\" , \"1234 657 \\n 890ab \\t cd_%$#efg\" )) [ '1' , '2' , '3' , '4' , '6' , '5' , '7' , '8' , '9' , '0' , 'a' , 'b' , 'c' , 'd' , '_' , '%' , '$' , '#' , 'e' , 'f' , 'g' ] \u5143\u5b57\u7b26 \u00b6 [] \u3001 {n} \u3001 ^ \u3001 - [] \uff1a\u5339\u914d\u4e00\u4e2a\u5b57\u7b26\uff0c\u62ec\u53f7\u5185\u662f**\u6216\u8005**\u7684\u5173\u7cfb ^ \uff1a\u53d6\u53cd (\u548c\u8fd9\u4e9b\u5143\u5b57\u7b26\u6216\\d\u8fd9\u4e9b\u9884\u5b9a\u4e49\u5b57\u7b26\u4e00\u8d77\u7528\u624d\u662f\u53d6\u53cd\uff0c\u5426\u5219\u548c$\u4e00\u8d77\u505a\u4f4d\u7f6e\u5339\u914d) - \uff1a\u533a\u95f4 () \uff1a\u5206\u7ec4\uff0c\u5339\u914d\u62ec\u53f7\u5185\u7684\u5185\u5bb9\uff0c\u4e0d\u8981\u62ec\u53f7\u4e24\u8fb9\u7684\u5185\u5bb9 # \u533a\u95f4 >>> # \u5339\u914d123\u4efb\u610f\u5355\u4e2a\u5b57\u7b26 >>> print ( re . findall ( r \"[123]\" , \"1234 657 \\n 890ab \\t cd_%$#efg\" )) [ '1' , '2' , '3' ] >>> # \u5339\u914d\u5355\u4e2a\u6570\u5b57\uff08\\d\uff09\u6216 \u7a7a\u683c\u6362\u884c\u5236\u8868\u7b26\uff08\\s\uff09 >>> print ( re . findall ( r \"[\\d\\s]\" , \"1234 657 \\n 890ab \\t cd_%$#efg\" )) [ '1' , '2' , '3' , '4' , ' ' , '6' , '5' , '7' , ' \\n ' , '8' , '9' , '0' , ' \\t ' ] # \u53d6\u53cd >>> # \u5339\u914d\u5355\u4e2a\u975e\u6570\u5b57\u3001\u975e\u7a7a\u683c\u6362\u884c\u5236\u8868\u7b26 >>> print ( re . findall ( r \"[^\\d\\s]\" , \"1234 657 \\n 890ab \\t cd_%$#efg\" )) [ 'a' , 'b' , 'c' , 'd' , '_' , '%' , '$' , '#' , 'e' , 'f' , 'g' ] # \u8303\u56f4 >>> # \u5339\u914d\u5355\u4e2a1-7\u4e4b\u95f4\u7684\u6570\u5b57 >>> print ( re . findall ( r \"[1-7]\" , \"1234 657 \\n 890ab \\t cd_%$#efg\" )) >>> # \u5339\u914d\u5355\u4e2aa-d\u4e4b\u95f4\u7684\u5b57\u6bcd >>> print ( re . findall ( r \"[a-d]\" , \"1234 657 \\n 890ab \\t cd_%$#efg\" )) >>> # \u5339\u914d\u5355\u4e2a 1-7 \u6216 a-d \u7684\u5b57\u7b26 >>> print ( re . findall ( r \"[1-7a-d]\" , \"1234 657 \\n 890ab \\t cd_%$#efg\" )) # \u5206\u7ec4 >>> # \u5339\u914d \u5de6\u8fb9a\u53f3\u8fb9\u662fa\u6216b\u6216c\u7684\u4e24\u4e2a\u5b57\u7b26 >>> print ( re . findall ( r \"a[abc]\" , \"aaabacad\" )) [ 'aa' , 'ab' , 'ac' ] >>> # \u7b2c\u4e00\u6b65\uff0c\u5339\u914d\u5230['aa', 'ab', 'ac'] >>> # \u7b2c\u4e8c\u6b65\uff0c\u4e0d\u8981\u62ec\u53f7\u4e24\u8fb9\u7684\u5b57\u7b26\uff0c\u4e5f\u5c31\u662f\u4e0d\u8981a\uff0c\u5f97\u5230['a', 'b', 'c'] >>> print ( re . findall ( r \"a([abc])\" , \"aaabacad\" )) [ 'a' , 'b' , 'c' ] \u91cd\u590d\u5339\u914d \u00b6 \u91cd\u590d\u5339\u914d\u9ed8\u8ba4\u662f\u8d2a\u5a6a\u5339\u914d\u7684\uff0c\u4f1a\u5c3d\u91cf\u5339\u914d\u591a\u4f4d {n} \uff1a\u8868\u793a\u524d\u9762\u7684\u5b57\u7b26\u91cd\u590dn\u6b21\u624d\u88ab\u5339\u914d\u6210\u529f\u3002 a{3} \u5c31\u5339\u914d\u51fa\uff1aaaa {n,m} \uff1a\u8868\u793a\u524d\u9762\u7684\u5b57\u7b26\u81f3\u5c11\u51fa\u73b0n\u6b21\uff0c\u81f3\u591a\u51fa\u73b0m\u6b21\uff0c \u9017\u53f7\u5de6\u53f3\u4e0d\u80fd\u6709\u7a7a\u683c \uff0c\u8d2a\u5a6a\u5339\u914d {n,m}? \uff1a\u8868\u793a\u524d\u9762\u7684\u5b57\u7b26\u81f3\u5c11\u51fa\u73b0n\u6b21\uff0c\u81f3\u591a\u51fa\u73b0m\u6b21\uff0c \u9017\u53f7\u5de6\u53f3\u4e0d\u80fd\u6709\u7a7a\u683c \uff0c**\u975e**\u8d2a\u5a6a\u5339\u914d {n,} \uff1a\u8868\u793a\u524d\u9762\u7684\u5b57\u7b26\u81f3\u5c11\u51fa\u73b0n\u6b21\uff0c\u81f3\u591a\u51fa\u73b0\u65e0\u7a77\u6b21 ? \uff1a\u76f8\u5f53\u4e8e {0,1} \uff0c\u8868\u793a\u524d\u9762\u7684\u5b57\u7b26\u51fa\u73b00\u6b21\u62161\u6b21 + \uff1a\u76f8\u5f53\u4e8e {1,} \uff0c\u8868\u793a\u524d\u9762\u7684\u5b57\u7b26\u81f3\u5c11\u51fa\u73b01\u6b21 * \uff1a\u76f8\u5f53\u4e8e {0,} \uff0c\u8868\u793a\u524d\u9762\u7684\u5b57\u7b26\u51fa\u73b00\u6b21\u6216\u65e0\u7a77\u6b21\uff0c\u8d2a\u5a6a\u5339\u914d +? \uff1a\u76f8\u5f53\u4e8e {1,}? \u3001 {1} \uff0c\u8868\u793a\u524d\u9762\u7684\u5b57\u7b26\u81f3\u5c11\u51fa\u73b01\u6b21\uff0c\u975e\u8d2a\u5a6a\u5339\u914d *? \uff1a\u76f8\u5f53\u4e8e {0,}? \u3001 {0} \uff0c\u8868\u793a\u524d\u9762\u7684\u5b57\u7b26\u81f3\u5c11\u51fa\u73b00\u6b21\uff0c\u975e\u8d2a\u5a6a\u5339\u914d \\ \uff1a\u8f6c\u4e49\u7b26\uff0c\u5728\u9700\u8981\u5339\u914d\u4e0a\u9762 ?+* \u51e0\u4e2a\u7b26\u53f7\u7684\u65f6\u5019\u9700\u8981\u52a0\u4e0a\u659c\u6760 \\ # {n} >>> # \u8d2a\u5a6a\u5339\u914d\u8fde\u7eed3\u4f4d\u90fd\u662f\u6570\u5b57 >>> print ( re . findall ( r \"\\d {3} \" , \"1234567890abcdefg\" )) [ '123' , '456' , '789' ] >>> # \u8d2a\u5a6a\u5339\u914d\u8fde\u7eed2\u4f4d\u90fd\u662f\u6b63\u5e38\u5b57\u7b26 >>> print ( re . findall ( r \"\\w {2} \" , \"12a3456789b0abcdefg\" )) [ '12' , 'a3' , '45' , '67' , '89' , 'b0' , 'ab' , 'cd' , 'ef' ] >>> # \u8d2a\u5a6a\u5339\u914d\u81f3\u5c112\u4f4d\u81f3\u591a4\u4f4d\u7684\u6570\u5b57 >>> print ( re . findall ( r \"\\d{2,4}\" , \"1234567890abcdefg\" )) [ '1234' , '5678' ] >>> print ( re . findall ( r \"\\d{2,4}\" , \"12a3456789b0abcdefg\" )) [ '12' , '3456' , '789' ] >>> # \u975e\u8d2a\u5a6a\u5339\u914d\u81f3\u5c112\u4f4d\u81f3\u591a4\u4f4d\u7684\u6570\u5b57 >>> print ( re . findall ( r \"\\d{2,4}?\" , \"12a3456789b0abcdefg\" )) [ '12' , '34' , '56' , '78' ] >>> # \u8d2a\u5a6a\u5339\u914d\u51fa\u73b0\u81f3\u5c112\u4f4d\u7684\u6570\u5b57 >>> print ( re . findall ( r \"\\d{2,}\" , \"12a3456789b0abcdefg165465165\" )) [ '12' , '3456789' , '165465165' ] # ? + * >>> # \u8d2a\u5a6a\u5339\u914d0\u62161\u4e2a\u6570\u5b57\uff0c0\u4e2a\u4e5f\u5728\u5339\u914d\u8303\u56f4\u5185\uff0c\u6240\u4ee5\u5339\u914d\u5230\u975e\u6570\u5b57\u7684\u65f6\u5019\u662f\u7a7a\u5b57\u7b26\u4e32 >>> print ( re . findall ( r \"\\d?\" , \"12a3456789b0abcde_%\" )) [ '1' , '2' , '' , '3' , '4' , '5' , '6' , '7' , '8' , '9' , '' , '0' , '' , '' , '' , '' , '' , '' , '' , '' ] >>> # \u8d2a\u5a6a\u5339\u914d1\u6216n\u4e2a\u6570\u5b57 >>> print ( re . findall ( r \"\\d+\" , \"12a3456789b0abcde_%\" )) [ '12' , '3456789' , '0' ] >>> # \u975e\u8d2a\u5339\u914d1\u6216n\u4e2a\u6570\u5b57 >>> print ( re . findall ( r \"\\d+?\" , \"12a3456789b0abcde_%\" )) [ '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' , '0' ] >>> # \u8d2a\u5a6a\u5339\u914d1\u6216n\u4e2a\u6570\u5b57 >>> print ( re . findall ( r \"\\d*\" , \"1234567890abcdefg\" )) [ '1234567890' , '' , '' , '' , '' , '' , '' , '' ] >>> # \u975e\u8d2a\u5339\u914d1\u6216n\u4e2a\u6570\u5b57 >>> print ( re . findall ( r \"\\d*?\" , \"1234567890abcdefg\" )) [ '' , '1' , '' , '2' , '' , '3' , '' , '4' , '' , '5' , '' , '6' , '' , '7' , '' , '8' , '' , '9' , '' , '0' , '' , '' , '' , '' , '' , '' , '' , '' ] # \u8f6c\u4e49\u7b26 >>> # \u5339\u914da*b >>> print ( re . findall ( r \"a\\*b\" , \"aab*ab*aaa*ba*b*a\" )) [ 'a*b' , 'a*b' ] >>> # \u5339\u914db\u524d\u9762\u81f3\u5c11\u51fa\u73b00\u6b21a >>> print ( re . findall ( r \"a*b\" , \"aab*ab*aaa*ba*b*a\" )) [ 'aab' , 'ab' , 'b' , 'b' , 'b' , 'b' ] >>> # \u5339\u914da+b >>> print ( re . findall ( r \"a\\+b\" , \"\" )) [ 'a+b' ] >>> # \u5339\u914db\u524d\u9762\u81f3\u5c11\u51fa\u73b01\u6b21a print ( re . findall ( r \"a+b\" , \"aab*ab*aa?ba*ba*b*a+b\" )) [ 'aab' , 'ab' ] >>> # \u5339\u914da?b print ( re . findall ( r \"a\\?b\" , \"aab*ab*aa?ba*ba*b*a+b\" )) [ 'a?b' ] >>> # \u5339\u914db\u524d\u9762\u81f3\u5c11\u51fa\u73b00\u6b21\u81f3\u591a\u51fa\u73b01\u6b21a print ( re . findall ( r \"a?b\" , \"aab*ab*aa?ba*ba*b*a+b\" )) [ 'ab' , 'ab' , 'b' , 'b' , 'b' , 'b' ] \u8d2a\u5a6a\u548c\u975e\u8d2a \u00b6 >>> # \u8d2a\u5a6a\u5339\u914d d\u5f00\u5934d\u7ed3\u5c3e\uff0c\u4e2d\u95f4\u81f3\u5c11\u51fa\u73b01\u4f4d\u6b63\u5e38\u5b57\u7b26 >>> print ( re . findall ( r \"d\\w+d\" , \"dxxxxxxdxxxxxxd\" )) [ 'dxxxxxxdxxxxxxd' ] >>> # \u975e\u8d2a\u5339\u914d d\u5f00\u5934d\u7ed3\u5c3e\uff0c\u4e2d\u95f4\u81f3\u5c11\u51fa\u73b01\u4f4d\u6b63\u5e38\u5b57\u7b26 >>> print ( re . findall ( r \"d\\w+?d\" , \"dxxxxxxdxxxxxxd\" )) [ 'dxxxxd' ] >>> html = \"<li>Boii</li><li>$18</li><li>\u7537</li><li>i@tcp404.com</li>\" >>> # .\u662f\u9664\u4e86\u6362\u884c\u7b26\u4ee5\u5916\u6240\u6709\u5b57\u7b26 >>> # \u8d2a\u5a6a\u5339\u914d <li>\u5f00\u5934\uff0c</li>\u7ed3\u5c3e\uff0c\u4e2d\u95f4\u81f3\u5c11\u4e00\u4e2a\u975e\u6362\u884c\u7b26\u7684\u5b57\u7b26\uff0c\u51711\u4e2a >>> print ( re . findall ( r \"<li>.+</li>\" , html )) [ '<li>Boii</li><li>$18</li><li>\u7537</li><li>i@tcp404.com</li>' ] >>> # \u975e\u8d2a\u5339\u914d <li>\u5f00\u5934\uff0c</li>\u7ed3\u5c3e\uff0c\u4e2d\u95f4\u81f3\u5c11\u4e00\u4e2a\u975e\u6362\u884c\u7b26\u7684\u5b57\u7b26\uff0c\u51713\u4e2a >>> print ( re . findall ( r \"<li>.+?</li>\" , html )) [ '<li>Boii</li>' , '<li>$18</li>' , '<li>\u7537</li>' , '<li>i@tcp404.com</li>' ] >>> # \u975e\u8d2a\u5339\u914d <li>\u5f00\u5934\uff0c</li>\u7ed3\u5c3e\uff0c\u4e2d\u95f4\u81f3\u5c11\u4e00\u4e2a\u975e\u6362\u884c\u7b26\u7684\u5b57\u7b26\uff0c\u4e14\u820d\u53bb\u5f00\u5934\u7ed3\u5c3e\uff0c >>> # \u5373\u53ea\u53d6<li></li>\u4e2d\u7684\u5185\u5bb9\uff0c\u51713\u4e2a >>> print ( re . findall ( r \"<li>(.+?)</li>\" , html )) [ 'Boii' , '$18' , '\u7537' , 'i@tcp404.com' ] \u53cd\u5411\u5f15\u7528 \u00b6 >>> wordstr = \"\"\" 'hello', \"python\", 'love\", \"haha' \"\"\" # \u5339\u914d \u5f00\u5934\u548c\u7ed3\u5c3e\u90fd\u662f\u5355\u5f15\u53f7\u6216\u53cc\u5f15\u53f7\uff0c\u4e2d\u95f4\u81f3\u5c11\u4e00\u4e2a\u6b63\u5e38\u5b57\u7b26 >>> print ( re . findall ( r \"['| \\\" ]\\w+['| \\\" ]\" , wordstr )) [ \"'hello'\" , '\"python\"' , ' \\' love\"' , '\"haha \\' ' ] # \u5339\u914d \u5f00\u5934\u548c\u7ed3\u5c3e\u90fd\u662f\u5355\u5f15\u53f7\u6216\u53cc\u5f15\u53f7\uff0c\u4e2d\u95f4\u81f3\u5c11\u4e00\u4e2a\u6b63\u5e38\u5b57\u7b26\uff0c\u820d\u5f03\u4e2d\u95f4 # \u5373 \u5f00\u5934\u548c\u7ed3\u5c3e\u90fd\u662f\u5355\u6216\u53cc\u5f15\u53f7\uff0c\u4e2d\u95f4\u81f3\u5c11\u4e00\u4e2a\u6b63\u5e38\u5b57\u7b26\uff0c\u7136\u540e\u628a\u5f00\u5934\u5206\u4e00\u7ec4\uff0c\u7ed3\u5c3e\u5206\u4e00\u7ec4\uff0c\u4e2d\u95f4\u65e0\u5206\u7ec4\u88ab\u820d\u5f03 >>> print ( re . findall ( r \"('| \\\" )\\w+('| \\\" )\" , wordstr )) [( \"'\" , \"'\" ), ( '\"' , '\"' ), ( \"'\" , '\"' ), ( '\"' , \"'\" )] # \u5339\u914d \u5f00\u5934\u548c\u7ed3\u5c3e\u90fd\u662f\u5355\u5f15\u53f7\u6216\u53cc\u5f15\u53f7\uff0c\u4e2d\u95f4\u81f3\u5c11\u4e00\u4e2a\u6b63\u5e38\u5b57\u7b26\uff0c\u5f00\u5934\u4e00\u7ec4\uff0c\u4e2d\u95f4\u4e00\u7ec4\uff0c\u7ed3\u5c3e\u4e00\u7ec4\uff0c\u627e\u5230\u4e00\u4efd\u5219\u7ec4\u5408\u6210\u4e00\u4e2a\u5143\u7ec4 >>> print ( re . findall ( r \"('| \\\" )(\\w+)('| \\\" )\" , wordstr )) [( \"'\" , 'hello' , \"'\" ), ( '\"' , 'python' , '\"' ), ( \"'\" , 'love' , '\"' ), ( '\"' , 'haha' , \"'\" )] # \u5339\u914d \u5f00\u5934\u662f\u5355\u53cc\u5f15\u53f7\uff0c\u4e2d\u95f4\u81f3\u5c11\u4e00\u4e2a\u6b63\u5e38\u5b57\u7b26\uff0c\u7ed3\u5c3e\u8981\u4e0e\u5f00\u5934\u5bf9\u5e94\u5f00\u5934\u4e00\u7ec4\u90a3\u4e2a\u7ec4\u76f8\u540c # \u5f00\u5934\u4e00\u7ec4\uff0c\u4e2d\u95f4\u4e00\u7ec4\uff0c\u7ed3\u5c3e\u4e00\u7ec4\uff0c\u627e\u5230\u4e00\u4efd\u5219\u7ec4\u5408\u6210\u4e00\u4e2a\u5143\u7ec4 >>> print ( re . findall ( r \"('| \\\" )(\\w+)(\\1)\" , wordstr )) [( \"'\" , 'hello' , \"'\" ), ( '\"' , 'python' , '\"' )] # \u7528\u5217\u8868\u751f\u6210\u5f0f\u53d6\u51fa\u6bcf\u4efd\u76841\u53f7\u5143\u7d20\uff0c\u5c31\u5f97\u5230\u4e86\u5185\u5bb9\u3002 >>> res = re . findall ( r \"('| \\\" )(\\w+)(\\1)\" , wordstr ) >>> li = [ x [ 1 ] for x in res ] >>> print ( li ) [ 'hello' , 'python' ] # \u6821\u9a8c\u5bc6\u7801\uff0c\u540c\u6837\u7684\u5b57\u7b26\u4e0d\u80fd\u8fde\u7eed\u51fa\u73b03\u6b21 >>> print ( re . findall ( r \"(\\w)(\\1{2,})\" , \"44888813abgggs\" )) [( '8' , '888' ), ( 'g' , 'gg' )] # \u7b2c\u4e00\u4e2a\u5206\u7ec4(\\w)\u5339\u914d\u5230\u662f4\uff0c\u8fdb\u5165\u4e0b\u4e00\u4e2a\u5143\u7ec4\uff0c\u770b\u5230\\1\u66ff\u6362\u62104\uff0c\u5f00\u59cb\u5339\u914d\u91cd\u590d\uff1a4\u51fa\u73b0\u81f3\u5c112\u6b21\u5219\u5339\u914d\u6210\u529f\uff0c\u540e\u9762\u7d27\u8ddf\u7740\u53ea\u6709\u4e00\u4e2a4\uff0c\u6240\u4ee5\u5339\u914d\u5931\u8d25 # \u63a5\u7740\u5339\u914d\u5230(\\w)\u662f8\uff0c\u8fdb\u5165\u4e0b\u4e00\u4e2a\u5206\u7ec4\uff0c\u770b\u5230\\1\u66ff\u6362\u62108\uff0c\u4ece\u7b2c2\u4e2a8\u5f00\u59cb\u5339\u914d\u91cd\u590d\uff1a8\u81f3\u5c11\u51fa\u73b02\u6b21\u5219\u5339\u914d\u6210\u529f\uff0c\u9664\u53bb\u7b2c\u4e00\u4e2a8\u88ab\u7b2c\u4e00\u4e2a\u5206\u7ec4\u53d6\u8d70\uff0c\u8fd8\u52693\u4e2a8\uff0c\u5339\u914d\u6210\u529f\uff0c\u8fd9\u662f\u8d2a\u5a6a\u5339\u914d\uff0c\u6240\u4ee5\u4f1a\u4e00\u76f4\u5403\u4e0b\u53bb\u5403\u5230\u9047\u89c1\u4e0d\u662f8\u505c\u6b62\uff0c\u6253\u5305\u6210\u5143\u7ec4 # \u63a5\u77401\u5339\u914d\u5931\u8d25\uff0c3\u5339\u914d\u5931\u8d25\uff0cab\u90fd\u5339\u914d\u5931\u8d25 # \u63a5\u7740\u5339\u914d\u5230(\\w)\u662fg\uff0c\u8fdb\u5165\u4e0b\u4e00\u4e2a\u5206\u7ec4\uff0c\u770b\u5230\\1\u66ff\u6362\u6210g\uff0c\u4ece\u7b2c2\u4e2ag\u5f00\u59cb\u5339\u914d\u91cd\u590d\uff1ag\u81f3\u5c11\u51fa\u73b02\u6b21\u5219\u5339\u914d\u6210\u529f\uff0c\u9664\u53bb\u7b2c\u4e00\u4e2ag\u88ab\u7b2c\u4e00\u4e2a\u5206\u7ec4\u53d6\u8d70\uff0c\u8fd8\u52692\u4e2ag\uff0c\u5339\u914d\u6210\u529f\uff0c\u8fd9\u662f\u8d2a\u5a6a\u5339\u914d\uff0c\u6240\u4ee5\u4f1a\u4e00\u76f4\u5403\u4e0b\u53bb\u5403\u5230\u9047\u89c1\u4e0d\u662fg\u505c\u6b62\uff0c\u6253\u5305\u6210\u5143\u7ec4... res = re . findall ( r \"(\\w)(\\1{2,})\" , \"44888813abgggs\" ) li = [ x [ 0 ] + x [ 1 ] for x in res ] print ( li ) # ['8888', 'ggg'] \u4f4d\u7f6e\u5339\u914d \u00b6 ^ \uff1a\u5f00\u5934 $ \uff1a\u7ed3\u5c3e \u8fd9\u4e24\u4e2a\u7ecf\u5e38\u4e00\u8d77\u4f7f\u7528\uff0c\u7528\u6765\u9650\u5b9a\u4f4d\u7f6e \u5e38\u7528\u4e8e\u68c0\u9a8c\u624b\u673a\u53f7\u3001\u7528\u6237\u540d\u3001email\u5730\u5740\u7b49 \u4f8b\u5982\u5339\u914d\u624b\u673a\u53f7 # \u624b\u673a\u4f4d\u6570\u6b63\u5e38\u7684\u65f6\u5019\u53ef\u4ee5\u5339\u914d\u6210\u529f >>> print ( re . findall ( r \"\\d {11} \" , \"13700001111\" )) [ '13700001111' ] # \u4f46\u662f\u624b\u673a\u4f4d\u6570\u4e0d\u6b63\u5e38\u7684\u65f6\u5019\u4e5f\u5339\u914d\u6210\u529f\u4e86\uff0c\u6240\u4ee5\u8981\u52a0\u4ee5\u4f4d\u7f6e\u9650\u5236 >>> print ( re . findall ( r \"\\d {11} \" , \"137000011112233445\" )) [ '13700001111' ] >>> print ( re . findall ( r \"^\\d {11} $\" , \"13700001111\" )) [ '13700001111' ] >>> print ( re . findall ( r \"^\\d {11} $\" , \"137000011112233445\" )) []","title":"Python\u3010Buildins\u3011re"},{"location":"Python/Buildints/Python-No-Buildins-re/#_1","text":"\\d \u3001 \\D \u3001 \\s \u3001 \\S \u3001 \\w \u3001 \\W \\d \uff1a\u5339\u914d\u6240\u6709**\u6570\u5b57**\uff0c 0~9 \\w \uff1a\u5339\u914d\u5305\u542b\u4e0b\u5212\u7ebf**\u5b57\u7b26** [a-z|A-Z|0-9|_] \\s \uff1a\u5339\u914d**\u7a7a\u767d\u7b26\u3001\u5236\u8868\u7b26\u3001\u6362\u884c\u7b26** [\\n \\t] \\D \uff1a\u5339\u914d\u6240\u6709**\u975e\u6570\u5b57**\uff0c ^[0-9] \\W \uff1a\u5339\u914d**\u975e\u6b63\u5e38\u5b57\u7b26** ^[a-z|A-Z|0-9|_] \\S \uff1a\u5339\u914d**\u975e\u7a7a\u767d\u7b26\u3001\u5236\u8868\u7b26\u3001\u6362\u884c\u7b26** ^[\\n \\t] . \uff1a\u9664\u4e86\u6362\u884c\u7b26\u4e4b\u5916\u6240\u6709\u5b57\u7b26 >>> print ( re . findall ( r \"\\d\" , \"1234657890abcdefg\" )) [ '1' , '2' , '3' , '4' , '6' , '5' , '7' , '8' , '9' , '0' ] >>> print ( re . findall ( r \"\\D\" , \"1234657890abcdefg\" )) [ 'a' , 'b' , 'c' , 'd' , 'e' , 'f' , 'g' ] >>> print ( re . findall ( r \"\\w\" , \"1234657890abcd_%$#efg\" )) [ '1' , '2' , '3' , '4' , '6' , '5' , '7' , '8' , '9' , '0' , 'a' , 'b' , 'c' , 'd' , '_' , 'e' , 'f' , 'g' ] >>> print ( re . findall ( r \"\\W\" , \"1234657890abcd_%$#efg\" )) [ '%' , '$' , '#' ] >>> print ( re . findall ( r \"\\s\" , \"1234 657 \\n 890ab \\t cd_%$#efg\" )) [ ' ' , ' \\n ' , ' \\t ' ] >>> print ( re . findall ( r \"\\S\" , \"1234 657 \\n 890ab \\t cd_%$#efg\" )) [ '1' , '2' , '3' , '4' , '6' , '5' , '7' , '8' , '9' , '0' , 'a' , 'b' , 'c' , 'd' , '_' , '%' , '$' , '#' , 'e' , 'f' , 'g' ]","title":"\u9884\u5b9a\u4e49\u5b57\u7b26"},{"location":"Python/Buildints/Python-No-Buildins-re/#_2","text":"[] \u3001 {n} \u3001 ^ \u3001 - [] \uff1a\u5339\u914d\u4e00\u4e2a\u5b57\u7b26\uff0c\u62ec\u53f7\u5185\u662f**\u6216\u8005**\u7684\u5173\u7cfb ^ \uff1a\u53d6\u53cd (\u548c\u8fd9\u4e9b\u5143\u5b57\u7b26\u6216\\d\u8fd9\u4e9b\u9884\u5b9a\u4e49\u5b57\u7b26\u4e00\u8d77\u7528\u624d\u662f\u53d6\u53cd\uff0c\u5426\u5219\u548c$\u4e00\u8d77\u505a\u4f4d\u7f6e\u5339\u914d) - \uff1a\u533a\u95f4 () \uff1a\u5206\u7ec4\uff0c\u5339\u914d\u62ec\u53f7\u5185\u7684\u5185\u5bb9\uff0c\u4e0d\u8981\u62ec\u53f7\u4e24\u8fb9\u7684\u5185\u5bb9 # \u533a\u95f4 >>> # \u5339\u914d123\u4efb\u610f\u5355\u4e2a\u5b57\u7b26 >>> print ( re . findall ( r \"[123]\" , \"1234 657 \\n 890ab \\t cd_%$#efg\" )) [ '1' , '2' , '3' ] >>> # \u5339\u914d\u5355\u4e2a\u6570\u5b57\uff08\\d\uff09\u6216 \u7a7a\u683c\u6362\u884c\u5236\u8868\u7b26\uff08\\s\uff09 >>> print ( re . findall ( r \"[\\d\\s]\" , \"1234 657 \\n 890ab \\t cd_%$#efg\" )) [ '1' , '2' , '3' , '4' , ' ' , '6' , '5' , '7' , ' \\n ' , '8' , '9' , '0' , ' \\t ' ] # \u53d6\u53cd >>> # \u5339\u914d\u5355\u4e2a\u975e\u6570\u5b57\u3001\u975e\u7a7a\u683c\u6362\u884c\u5236\u8868\u7b26 >>> print ( re . findall ( r \"[^\\d\\s]\" , \"1234 657 \\n 890ab \\t cd_%$#efg\" )) [ 'a' , 'b' , 'c' , 'd' , '_' , '%' , '$' , '#' , 'e' , 'f' , 'g' ] # \u8303\u56f4 >>> # \u5339\u914d\u5355\u4e2a1-7\u4e4b\u95f4\u7684\u6570\u5b57 >>> print ( re . findall ( r \"[1-7]\" , \"1234 657 \\n 890ab \\t cd_%$#efg\" )) >>> # \u5339\u914d\u5355\u4e2aa-d\u4e4b\u95f4\u7684\u5b57\u6bcd >>> print ( re . findall ( r \"[a-d]\" , \"1234 657 \\n 890ab \\t cd_%$#efg\" )) >>> # \u5339\u914d\u5355\u4e2a 1-7 \u6216 a-d \u7684\u5b57\u7b26 >>> print ( re . findall ( r \"[1-7a-d]\" , \"1234 657 \\n 890ab \\t cd_%$#efg\" )) # \u5206\u7ec4 >>> # \u5339\u914d \u5de6\u8fb9a\u53f3\u8fb9\u662fa\u6216b\u6216c\u7684\u4e24\u4e2a\u5b57\u7b26 >>> print ( re . findall ( r \"a[abc]\" , \"aaabacad\" )) [ 'aa' , 'ab' , 'ac' ] >>> # \u7b2c\u4e00\u6b65\uff0c\u5339\u914d\u5230['aa', 'ab', 'ac'] >>> # \u7b2c\u4e8c\u6b65\uff0c\u4e0d\u8981\u62ec\u53f7\u4e24\u8fb9\u7684\u5b57\u7b26\uff0c\u4e5f\u5c31\u662f\u4e0d\u8981a\uff0c\u5f97\u5230['a', 'b', 'c'] >>> print ( re . findall ( r \"a([abc])\" , \"aaabacad\" )) [ 'a' , 'b' , 'c' ]","title":"\u5143\u5b57\u7b26"},{"location":"Python/Buildints/Python-No-Buildins-re/#_3","text":"\u91cd\u590d\u5339\u914d\u9ed8\u8ba4\u662f\u8d2a\u5a6a\u5339\u914d\u7684\uff0c\u4f1a\u5c3d\u91cf\u5339\u914d\u591a\u4f4d {n} \uff1a\u8868\u793a\u524d\u9762\u7684\u5b57\u7b26\u91cd\u590dn\u6b21\u624d\u88ab\u5339\u914d\u6210\u529f\u3002 a{3} \u5c31\u5339\u914d\u51fa\uff1aaaa {n,m} \uff1a\u8868\u793a\u524d\u9762\u7684\u5b57\u7b26\u81f3\u5c11\u51fa\u73b0n\u6b21\uff0c\u81f3\u591a\u51fa\u73b0m\u6b21\uff0c \u9017\u53f7\u5de6\u53f3\u4e0d\u80fd\u6709\u7a7a\u683c \uff0c\u8d2a\u5a6a\u5339\u914d {n,m}? \uff1a\u8868\u793a\u524d\u9762\u7684\u5b57\u7b26\u81f3\u5c11\u51fa\u73b0n\u6b21\uff0c\u81f3\u591a\u51fa\u73b0m\u6b21\uff0c \u9017\u53f7\u5de6\u53f3\u4e0d\u80fd\u6709\u7a7a\u683c \uff0c**\u975e**\u8d2a\u5a6a\u5339\u914d {n,} \uff1a\u8868\u793a\u524d\u9762\u7684\u5b57\u7b26\u81f3\u5c11\u51fa\u73b0n\u6b21\uff0c\u81f3\u591a\u51fa\u73b0\u65e0\u7a77\u6b21 ? \uff1a\u76f8\u5f53\u4e8e {0,1} \uff0c\u8868\u793a\u524d\u9762\u7684\u5b57\u7b26\u51fa\u73b00\u6b21\u62161\u6b21 + \uff1a\u76f8\u5f53\u4e8e {1,} \uff0c\u8868\u793a\u524d\u9762\u7684\u5b57\u7b26\u81f3\u5c11\u51fa\u73b01\u6b21 * \uff1a\u76f8\u5f53\u4e8e {0,} \uff0c\u8868\u793a\u524d\u9762\u7684\u5b57\u7b26\u51fa\u73b00\u6b21\u6216\u65e0\u7a77\u6b21\uff0c\u8d2a\u5a6a\u5339\u914d +? \uff1a\u76f8\u5f53\u4e8e {1,}? \u3001 {1} \uff0c\u8868\u793a\u524d\u9762\u7684\u5b57\u7b26\u81f3\u5c11\u51fa\u73b01\u6b21\uff0c\u975e\u8d2a\u5a6a\u5339\u914d *? \uff1a\u76f8\u5f53\u4e8e {0,}? \u3001 {0} \uff0c\u8868\u793a\u524d\u9762\u7684\u5b57\u7b26\u81f3\u5c11\u51fa\u73b00\u6b21\uff0c\u975e\u8d2a\u5a6a\u5339\u914d \\ \uff1a\u8f6c\u4e49\u7b26\uff0c\u5728\u9700\u8981\u5339\u914d\u4e0a\u9762 ?+* \u51e0\u4e2a\u7b26\u53f7\u7684\u65f6\u5019\u9700\u8981\u52a0\u4e0a\u659c\u6760 \\ # {n} >>> # \u8d2a\u5a6a\u5339\u914d\u8fde\u7eed3\u4f4d\u90fd\u662f\u6570\u5b57 >>> print ( re . findall ( r \"\\d {3} \" , \"1234567890abcdefg\" )) [ '123' , '456' , '789' ] >>> # \u8d2a\u5a6a\u5339\u914d\u8fde\u7eed2\u4f4d\u90fd\u662f\u6b63\u5e38\u5b57\u7b26 >>> print ( re . findall ( r \"\\w {2} \" , \"12a3456789b0abcdefg\" )) [ '12' , 'a3' , '45' , '67' , '89' , 'b0' , 'ab' , 'cd' , 'ef' ] >>> # \u8d2a\u5a6a\u5339\u914d\u81f3\u5c112\u4f4d\u81f3\u591a4\u4f4d\u7684\u6570\u5b57 >>> print ( re . findall ( r \"\\d{2,4}\" , \"1234567890abcdefg\" )) [ '1234' , '5678' ] >>> print ( re . findall ( r \"\\d{2,4}\" , \"12a3456789b0abcdefg\" )) [ '12' , '3456' , '789' ] >>> # \u975e\u8d2a\u5a6a\u5339\u914d\u81f3\u5c112\u4f4d\u81f3\u591a4\u4f4d\u7684\u6570\u5b57 >>> print ( re . findall ( r \"\\d{2,4}?\" , \"12a3456789b0abcdefg\" )) [ '12' , '34' , '56' , '78' ] >>> # \u8d2a\u5a6a\u5339\u914d\u51fa\u73b0\u81f3\u5c112\u4f4d\u7684\u6570\u5b57 >>> print ( re . findall ( r \"\\d{2,}\" , \"12a3456789b0abcdefg165465165\" )) [ '12' , '3456789' , '165465165' ] # ? + * >>> # \u8d2a\u5a6a\u5339\u914d0\u62161\u4e2a\u6570\u5b57\uff0c0\u4e2a\u4e5f\u5728\u5339\u914d\u8303\u56f4\u5185\uff0c\u6240\u4ee5\u5339\u914d\u5230\u975e\u6570\u5b57\u7684\u65f6\u5019\u662f\u7a7a\u5b57\u7b26\u4e32 >>> print ( re . findall ( r \"\\d?\" , \"12a3456789b0abcde_%\" )) [ '1' , '2' , '' , '3' , '4' , '5' , '6' , '7' , '8' , '9' , '' , '0' , '' , '' , '' , '' , '' , '' , '' , '' ] >>> # \u8d2a\u5a6a\u5339\u914d1\u6216n\u4e2a\u6570\u5b57 >>> print ( re . findall ( r \"\\d+\" , \"12a3456789b0abcde_%\" )) [ '12' , '3456789' , '0' ] >>> # \u975e\u8d2a\u5339\u914d1\u6216n\u4e2a\u6570\u5b57 >>> print ( re . findall ( r \"\\d+?\" , \"12a3456789b0abcde_%\" )) [ '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' , '0' ] >>> # \u8d2a\u5a6a\u5339\u914d1\u6216n\u4e2a\u6570\u5b57 >>> print ( re . findall ( r \"\\d*\" , \"1234567890abcdefg\" )) [ '1234567890' , '' , '' , '' , '' , '' , '' , '' ] >>> # \u975e\u8d2a\u5339\u914d1\u6216n\u4e2a\u6570\u5b57 >>> print ( re . findall ( r \"\\d*?\" , \"1234567890abcdefg\" )) [ '' , '1' , '' , '2' , '' , '3' , '' , '4' , '' , '5' , '' , '6' , '' , '7' , '' , '8' , '' , '9' , '' , '0' , '' , '' , '' , '' , '' , '' , '' , '' ] # \u8f6c\u4e49\u7b26 >>> # \u5339\u914da*b >>> print ( re . findall ( r \"a\\*b\" , \"aab*ab*aaa*ba*b*a\" )) [ 'a*b' , 'a*b' ] >>> # \u5339\u914db\u524d\u9762\u81f3\u5c11\u51fa\u73b00\u6b21a >>> print ( re . findall ( r \"a*b\" , \"aab*ab*aaa*ba*b*a\" )) [ 'aab' , 'ab' , 'b' , 'b' , 'b' , 'b' ] >>> # \u5339\u914da+b >>> print ( re . findall ( r \"a\\+b\" , \"\" )) [ 'a+b' ] >>> # \u5339\u914db\u524d\u9762\u81f3\u5c11\u51fa\u73b01\u6b21a print ( re . findall ( r \"a+b\" , \"aab*ab*aa?ba*ba*b*a+b\" )) [ 'aab' , 'ab' ] >>> # \u5339\u914da?b print ( re . findall ( r \"a\\?b\" , \"aab*ab*aa?ba*ba*b*a+b\" )) [ 'a?b' ] >>> # \u5339\u914db\u524d\u9762\u81f3\u5c11\u51fa\u73b00\u6b21\u81f3\u591a\u51fa\u73b01\u6b21a print ( re . findall ( r \"a?b\" , \"aab*ab*aa?ba*ba*b*a+b\" )) [ 'ab' , 'ab' , 'b' , 'b' , 'b' , 'b' ]","title":"\u91cd\u590d\u5339\u914d"},{"location":"Python/Buildints/Python-No-Buildins-re/#_4","text":">>> # \u8d2a\u5a6a\u5339\u914d d\u5f00\u5934d\u7ed3\u5c3e\uff0c\u4e2d\u95f4\u81f3\u5c11\u51fa\u73b01\u4f4d\u6b63\u5e38\u5b57\u7b26 >>> print ( re . findall ( r \"d\\w+d\" , \"dxxxxxxdxxxxxxd\" )) [ 'dxxxxxxdxxxxxxd' ] >>> # \u975e\u8d2a\u5339\u914d d\u5f00\u5934d\u7ed3\u5c3e\uff0c\u4e2d\u95f4\u81f3\u5c11\u51fa\u73b01\u4f4d\u6b63\u5e38\u5b57\u7b26 >>> print ( re . findall ( r \"d\\w+?d\" , \"dxxxxxxdxxxxxxd\" )) [ 'dxxxxd' ] >>> html = \"<li>Boii</li><li>$18</li><li>\u7537</li><li>i@tcp404.com</li>\" >>> # .\u662f\u9664\u4e86\u6362\u884c\u7b26\u4ee5\u5916\u6240\u6709\u5b57\u7b26 >>> # \u8d2a\u5a6a\u5339\u914d <li>\u5f00\u5934\uff0c</li>\u7ed3\u5c3e\uff0c\u4e2d\u95f4\u81f3\u5c11\u4e00\u4e2a\u975e\u6362\u884c\u7b26\u7684\u5b57\u7b26\uff0c\u51711\u4e2a >>> print ( re . findall ( r \"<li>.+</li>\" , html )) [ '<li>Boii</li><li>$18</li><li>\u7537</li><li>i@tcp404.com</li>' ] >>> # \u975e\u8d2a\u5339\u914d <li>\u5f00\u5934\uff0c</li>\u7ed3\u5c3e\uff0c\u4e2d\u95f4\u81f3\u5c11\u4e00\u4e2a\u975e\u6362\u884c\u7b26\u7684\u5b57\u7b26\uff0c\u51713\u4e2a >>> print ( re . findall ( r \"<li>.+?</li>\" , html )) [ '<li>Boii</li>' , '<li>$18</li>' , '<li>\u7537</li>' , '<li>i@tcp404.com</li>' ] >>> # \u975e\u8d2a\u5339\u914d <li>\u5f00\u5934\uff0c</li>\u7ed3\u5c3e\uff0c\u4e2d\u95f4\u81f3\u5c11\u4e00\u4e2a\u975e\u6362\u884c\u7b26\u7684\u5b57\u7b26\uff0c\u4e14\u820d\u53bb\u5f00\u5934\u7ed3\u5c3e\uff0c >>> # \u5373\u53ea\u53d6<li></li>\u4e2d\u7684\u5185\u5bb9\uff0c\u51713\u4e2a >>> print ( re . findall ( r \"<li>(.+?)</li>\" , html )) [ 'Boii' , '$18' , '\u7537' , 'i@tcp404.com' ]","title":"\u8d2a\u5a6a\u548c\u975e\u8d2a"},{"location":"Python/Buildints/Python-No-Buildins-re/#_5","text":">>> wordstr = \"\"\" 'hello', \"python\", 'love\", \"haha' \"\"\" # \u5339\u914d \u5f00\u5934\u548c\u7ed3\u5c3e\u90fd\u662f\u5355\u5f15\u53f7\u6216\u53cc\u5f15\u53f7\uff0c\u4e2d\u95f4\u81f3\u5c11\u4e00\u4e2a\u6b63\u5e38\u5b57\u7b26 >>> print ( re . findall ( r \"['| \\\" ]\\w+['| \\\" ]\" , wordstr )) [ \"'hello'\" , '\"python\"' , ' \\' love\"' , '\"haha \\' ' ] # \u5339\u914d \u5f00\u5934\u548c\u7ed3\u5c3e\u90fd\u662f\u5355\u5f15\u53f7\u6216\u53cc\u5f15\u53f7\uff0c\u4e2d\u95f4\u81f3\u5c11\u4e00\u4e2a\u6b63\u5e38\u5b57\u7b26\uff0c\u820d\u5f03\u4e2d\u95f4 # \u5373 \u5f00\u5934\u548c\u7ed3\u5c3e\u90fd\u662f\u5355\u6216\u53cc\u5f15\u53f7\uff0c\u4e2d\u95f4\u81f3\u5c11\u4e00\u4e2a\u6b63\u5e38\u5b57\u7b26\uff0c\u7136\u540e\u628a\u5f00\u5934\u5206\u4e00\u7ec4\uff0c\u7ed3\u5c3e\u5206\u4e00\u7ec4\uff0c\u4e2d\u95f4\u65e0\u5206\u7ec4\u88ab\u820d\u5f03 >>> print ( re . findall ( r \"('| \\\" )\\w+('| \\\" )\" , wordstr )) [( \"'\" , \"'\" ), ( '\"' , '\"' ), ( \"'\" , '\"' ), ( '\"' , \"'\" )] # \u5339\u914d \u5f00\u5934\u548c\u7ed3\u5c3e\u90fd\u662f\u5355\u5f15\u53f7\u6216\u53cc\u5f15\u53f7\uff0c\u4e2d\u95f4\u81f3\u5c11\u4e00\u4e2a\u6b63\u5e38\u5b57\u7b26\uff0c\u5f00\u5934\u4e00\u7ec4\uff0c\u4e2d\u95f4\u4e00\u7ec4\uff0c\u7ed3\u5c3e\u4e00\u7ec4\uff0c\u627e\u5230\u4e00\u4efd\u5219\u7ec4\u5408\u6210\u4e00\u4e2a\u5143\u7ec4 >>> print ( re . findall ( r \"('| \\\" )(\\w+)('| \\\" )\" , wordstr )) [( \"'\" , 'hello' , \"'\" ), ( '\"' , 'python' , '\"' ), ( \"'\" , 'love' , '\"' ), ( '\"' , 'haha' , \"'\" )] # \u5339\u914d \u5f00\u5934\u662f\u5355\u53cc\u5f15\u53f7\uff0c\u4e2d\u95f4\u81f3\u5c11\u4e00\u4e2a\u6b63\u5e38\u5b57\u7b26\uff0c\u7ed3\u5c3e\u8981\u4e0e\u5f00\u5934\u5bf9\u5e94\u5f00\u5934\u4e00\u7ec4\u90a3\u4e2a\u7ec4\u76f8\u540c # \u5f00\u5934\u4e00\u7ec4\uff0c\u4e2d\u95f4\u4e00\u7ec4\uff0c\u7ed3\u5c3e\u4e00\u7ec4\uff0c\u627e\u5230\u4e00\u4efd\u5219\u7ec4\u5408\u6210\u4e00\u4e2a\u5143\u7ec4 >>> print ( re . findall ( r \"('| \\\" )(\\w+)(\\1)\" , wordstr )) [( \"'\" , 'hello' , \"'\" ), ( '\"' , 'python' , '\"' )] # \u7528\u5217\u8868\u751f\u6210\u5f0f\u53d6\u51fa\u6bcf\u4efd\u76841\u53f7\u5143\u7d20\uff0c\u5c31\u5f97\u5230\u4e86\u5185\u5bb9\u3002 >>> res = re . findall ( r \"('| \\\" )(\\w+)(\\1)\" , wordstr ) >>> li = [ x [ 1 ] for x in res ] >>> print ( li ) [ 'hello' , 'python' ] # \u6821\u9a8c\u5bc6\u7801\uff0c\u540c\u6837\u7684\u5b57\u7b26\u4e0d\u80fd\u8fde\u7eed\u51fa\u73b03\u6b21 >>> print ( re . findall ( r \"(\\w)(\\1{2,})\" , \"44888813abgggs\" )) [( '8' , '888' ), ( 'g' , 'gg' )] # \u7b2c\u4e00\u4e2a\u5206\u7ec4(\\w)\u5339\u914d\u5230\u662f4\uff0c\u8fdb\u5165\u4e0b\u4e00\u4e2a\u5143\u7ec4\uff0c\u770b\u5230\\1\u66ff\u6362\u62104\uff0c\u5f00\u59cb\u5339\u914d\u91cd\u590d\uff1a4\u51fa\u73b0\u81f3\u5c112\u6b21\u5219\u5339\u914d\u6210\u529f\uff0c\u540e\u9762\u7d27\u8ddf\u7740\u53ea\u6709\u4e00\u4e2a4\uff0c\u6240\u4ee5\u5339\u914d\u5931\u8d25 # \u63a5\u7740\u5339\u914d\u5230(\\w)\u662f8\uff0c\u8fdb\u5165\u4e0b\u4e00\u4e2a\u5206\u7ec4\uff0c\u770b\u5230\\1\u66ff\u6362\u62108\uff0c\u4ece\u7b2c2\u4e2a8\u5f00\u59cb\u5339\u914d\u91cd\u590d\uff1a8\u81f3\u5c11\u51fa\u73b02\u6b21\u5219\u5339\u914d\u6210\u529f\uff0c\u9664\u53bb\u7b2c\u4e00\u4e2a8\u88ab\u7b2c\u4e00\u4e2a\u5206\u7ec4\u53d6\u8d70\uff0c\u8fd8\u52693\u4e2a8\uff0c\u5339\u914d\u6210\u529f\uff0c\u8fd9\u662f\u8d2a\u5a6a\u5339\u914d\uff0c\u6240\u4ee5\u4f1a\u4e00\u76f4\u5403\u4e0b\u53bb\u5403\u5230\u9047\u89c1\u4e0d\u662f8\u505c\u6b62\uff0c\u6253\u5305\u6210\u5143\u7ec4 # \u63a5\u77401\u5339\u914d\u5931\u8d25\uff0c3\u5339\u914d\u5931\u8d25\uff0cab\u90fd\u5339\u914d\u5931\u8d25 # \u63a5\u7740\u5339\u914d\u5230(\\w)\u662fg\uff0c\u8fdb\u5165\u4e0b\u4e00\u4e2a\u5206\u7ec4\uff0c\u770b\u5230\\1\u66ff\u6362\u6210g\uff0c\u4ece\u7b2c2\u4e2ag\u5f00\u59cb\u5339\u914d\u91cd\u590d\uff1ag\u81f3\u5c11\u51fa\u73b02\u6b21\u5219\u5339\u914d\u6210\u529f\uff0c\u9664\u53bb\u7b2c\u4e00\u4e2ag\u88ab\u7b2c\u4e00\u4e2a\u5206\u7ec4\u53d6\u8d70\uff0c\u8fd8\u52692\u4e2ag\uff0c\u5339\u914d\u6210\u529f\uff0c\u8fd9\u662f\u8d2a\u5a6a\u5339\u914d\uff0c\u6240\u4ee5\u4f1a\u4e00\u76f4\u5403\u4e0b\u53bb\u5403\u5230\u9047\u89c1\u4e0d\u662fg\u505c\u6b62\uff0c\u6253\u5305\u6210\u5143\u7ec4... res = re . findall ( r \"(\\w)(\\1{2,})\" , \"44888813abgggs\" ) li = [ x [ 0 ] + x [ 1 ] for x in res ] print ( li ) # ['8888', 'ggg']","title":"\u53cd\u5411\u5f15\u7528"},{"location":"Python/Buildints/Python-No-Buildins-re/#_6","text":"^ \uff1a\u5f00\u5934 $ \uff1a\u7ed3\u5c3e \u8fd9\u4e24\u4e2a\u7ecf\u5e38\u4e00\u8d77\u4f7f\u7528\uff0c\u7528\u6765\u9650\u5b9a\u4f4d\u7f6e \u5e38\u7528\u4e8e\u68c0\u9a8c\u624b\u673a\u53f7\u3001\u7528\u6237\u540d\u3001email\u5730\u5740\u7b49 \u4f8b\u5982\u5339\u914d\u624b\u673a\u53f7 # \u624b\u673a\u4f4d\u6570\u6b63\u5e38\u7684\u65f6\u5019\u53ef\u4ee5\u5339\u914d\u6210\u529f >>> print ( re . findall ( r \"\\d {11} \" , \"13700001111\" )) [ '13700001111' ] # \u4f46\u662f\u624b\u673a\u4f4d\u6570\u4e0d\u6b63\u5e38\u7684\u65f6\u5019\u4e5f\u5339\u914d\u6210\u529f\u4e86\uff0c\u6240\u4ee5\u8981\u52a0\u4ee5\u4f4d\u7f6e\u9650\u5236 >>> print ( re . findall ( r \"\\d {11} \" , \"137000011112233445\" )) [ '13700001111' ] >>> print ( re . findall ( r \"^\\d {11} $\" , \"13700001111\" )) [ '13700001111' ] >>> print ( re . findall ( r \"^\\d {11} $\" , \"137000011112233445\" )) []","title":"\u4f4d\u7f6e\u5339\u914d"},{"location":"Python/Crawler/Python-Crawler-0-Crawler-Abstract/","text":"\u5de5\u5177\u4eba\uff0c\u554a\u4e0d\uff0c\u5de5\u5177\u8718\u86db\u3002 \u4f7f\u7528\u573a\u666f \u00b6 \u901a\u7528\u722c\u866b \uff1a\u6293\u53d6\u7cfb\u7edf\u91cd\u8981\u7ec4\u6210\u90e8\u5206\uff0c\u6293\u53d6\u7684\u662f**\u4e00\u6574\u5f20\u9875\u9762\u6570\u636e**\u3002 \u805a\u7126\u722c\u866b \uff1a\u5efa\u7acb\u5728\u901a\u7528\u722c\u866b\u4e4b\u4e0a\uff0c\u6293\u53d6\u7684\u662f\u9875\u9762\u4e2d**\u7279\u5b9a\u7684\u5c40\u90e8\u5185\u5bb9**\u3002 \u589e\u91cf\u722c\u866b \uff1a\u68c0\u6d4b\u7f51\u7ad9\u4e2d\u6570\u636e\u66f4\u65b0\u7684\u60c5\u51b5\uff0c\u53ea\u4f1a\u6293\u53d6\u7f51\u7ad9\u4e2d**\u6700\u65b0\u7684\u6570\u636e**\u3002 \u77db\u4e0e\u76fe \u00b6 \u53cd\u722c\u673a\u5236\uff1a\u95e8\u6237\u7f51\u7ad9\uff0c\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u76f8\u5e94\u7684\u7b56\u7565\u6216\u6280\u672f\u624b\u6bb5\uff0c\u9632\u6b62\u722c\u866b\u7a0b\u5e8f\u8fdb\u884c\u722c\u53d6 \u68c0\u67e5User-Agent IP\u5c4f\u853d \u6297\u53cd\u722c\u7b56\u7565\uff1a\u901a\u8fc7\u5236\u5b9a\u76f8\u5173\u7b56\u7565\u6216\u6280\u672f\u624b\u6bb5\u7834\u89e3\u95e8\u6237\u7f51\u7ad9\u7684\u53cd\u722c\u673a\u5236\u3002 UA\u4f2a\u88c5 IP\u4ee3\u7406 robots.txt \u534f\u8bae \u2014\u2014 \u541b\u5b50\u534f\u8bae\uff1a\u89c4\u5b9a\u4e86\u7f51\u7ad9\u4e2d\u54ea\u4e9b\u6570\u636e\u53ef\u4ee5\u88ab\u722c\u866b\u722c\u53d6\uff0c\u54ea\u4e9b\u6570\u636e\u4e0d\u53ef\u4ee5\u88ab\u722c\u53d6 http \u6982\u5ff5\uff1a\u670d\u52a1\u5668\u4e0e\u5ba2\u6237\u7aef\u6570\u636e\u4ea4\u4e92\u7684\u4e00\u79cd\u5f62\u5f0f \u5e38\u7528\u8bf7\u6c42\u5934\u4fe1\u606f\uff1a User-Agent\uff1a\u8bf7\u6c42\u8f7d\u4f53\u7684\u8eab\u4efd\u8f7d\u4f53 Connection\uff1a\u8bf7\u6c42\u5b8c\u6bd5\u540e\uff0c\u662f\u5426\u65ad\u5f00\u8fde\u63a5 \u5e38\u7528\u54cd\u5e94\u5934\u4fe1\u606f\uff1a Content-Type\uff1a\u670d\u52a1\u5668\u54cd\u5e94\u56de\u5ba2\u6237\u7aef\u7684\u6570\u636e\u7c7b\u578b https \u5b89\u5168\u7684http\u534f\u8bae","title":"\u603b\u53d9"},{"location":"Python/Crawler/Python-Crawler-0-Crawler-Abstract/#_1","text":"\u901a\u7528\u722c\u866b \uff1a\u6293\u53d6\u7cfb\u7edf\u91cd\u8981\u7ec4\u6210\u90e8\u5206\uff0c\u6293\u53d6\u7684\u662f**\u4e00\u6574\u5f20\u9875\u9762\u6570\u636e**\u3002 \u805a\u7126\u722c\u866b \uff1a\u5efa\u7acb\u5728\u901a\u7528\u722c\u866b\u4e4b\u4e0a\uff0c\u6293\u53d6\u7684\u662f\u9875\u9762\u4e2d**\u7279\u5b9a\u7684\u5c40\u90e8\u5185\u5bb9**\u3002 \u589e\u91cf\u722c\u866b \uff1a\u68c0\u6d4b\u7f51\u7ad9\u4e2d\u6570\u636e\u66f4\u65b0\u7684\u60c5\u51b5\uff0c\u53ea\u4f1a\u6293\u53d6\u7f51\u7ad9\u4e2d**\u6700\u65b0\u7684\u6570\u636e**\u3002","title":"\u4f7f\u7528\u573a\u666f"},{"location":"Python/Crawler/Python-Crawler-0-Crawler-Abstract/#_2","text":"\u53cd\u722c\u673a\u5236\uff1a\u95e8\u6237\u7f51\u7ad9\uff0c\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u76f8\u5e94\u7684\u7b56\u7565\u6216\u6280\u672f\u624b\u6bb5\uff0c\u9632\u6b62\u722c\u866b\u7a0b\u5e8f\u8fdb\u884c\u722c\u53d6 \u68c0\u67e5User-Agent IP\u5c4f\u853d \u6297\u53cd\u722c\u7b56\u7565\uff1a\u901a\u8fc7\u5236\u5b9a\u76f8\u5173\u7b56\u7565\u6216\u6280\u672f\u624b\u6bb5\u7834\u89e3\u95e8\u6237\u7f51\u7ad9\u7684\u53cd\u722c\u673a\u5236\u3002 UA\u4f2a\u88c5 IP\u4ee3\u7406 robots.txt \u534f\u8bae \u2014\u2014 \u541b\u5b50\u534f\u8bae\uff1a\u89c4\u5b9a\u4e86\u7f51\u7ad9\u4e2d\u54ea\u4e9b\u6570\u636e\u53ef\u4ee5\u88ab\u722c\u866b\u722c\u53d6\uff0c\u54ea\u4e9b\u6570\u636e\u4e0d\u53ef\u4ee5\u88ab\u722c\u53d6 http \u6982\u5ff5\uff1a\u670d\u52a1\u5668\u4e0e\u5ba2\u6237\u7aef\u6570\u636e\u4ea4\u4e92\u7684\u4e00\u79cd\u5f62\u5f0f \u5e38\u7528\u8bf7\u6c42\u5934\u4fe1\u606f\uff1a User-Agent\uff1a\u8bf7\u6c42\u8f7d\u4f53\u7684\u8eab\u4efd\u8f7d\u4f53 Connection\uff1a\u8bf7\u6c42\u5b8c\u6bd5\u540e\uff0c\u662f\u5426\u65ad\u5f00\u8fde\u63a5 \u5e38\u7528\u54cd\u5e94\u5934\u4fe1\u606f\uff1a Content-Type\uff1a\u670d\u52a1\u5668\u54cd\u5e94\u56de\u5ba2\u6237\u7aef\u7684\u6570\u636e\u7c7b\u578b https \u5b89\u5168\u7684http\u534f\u8bae","title":"\u77db\u4e0e\u76fe"},{"location":"Python/Crawler/Python-Crawler-1-General-Crawler/","text":"\u722c\u866b\u7684\u57fa\u672c\u7528\u6cd5 Python \u4e2d\u539f\u751f\u7684\u4e00\u6b3e\u57fa\u4e8e\u7f51\u7edc\u8bf7\u6c42\u7684\u6a21\u5757\uff0c\u529f\u80fd\u5f3a\u5927\uff0c\u7b80\u5355\u4fbf\u6377\uff0c\u6548\u7387\u6781\u9ad8\u3002 >_: pip install requests \u57fa\u672c\u4f7f\u7528 \u00b6 \u6307\u5b9aURL UA\u4f2a\u88c5 \u53d1\u8d77\u8bf7\u6c42 \u2014\u2014 requests.get() \u6216 requests.post() \u83b7\u53d6\u54cd\u5e94\u6570\u636e \u2014\u2014 .json() \u6216 .text \u6301\u4e45\u5316\u5b58\u50a8 \u2014\u2014 f.write() \u6216 json.dump() import requests def main (): # 1. \u6307\u5b9aurl url = \"https://www.sou.com\" # 2. UA\u4f2a\u88c5 header = { \"User-Agent\" : \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Safari/537.36 Edg/84.0.522.44\" } # 3. \u53d1\u8d77\u8bf7\u6c42 response = requests . get ( url = url , headers = header ) # 4. \u83b7\u53d6\u54cd\u5e94\u6570\u636e page_text = response . text # 5. \u6301\u4e45\u5316\u5b58\u50a8 with open ( \"sogou.html\" , \"w\" , \"utf-8\" ) as f : f . wirte ( page_text ) print ( \"END\" ) if __naim__ == '__main__' : main () \u8fd9\u79cd\u5c31\u662f\u6700\u57fa\u672c\u7684\u6a21\u62df\u6d4f\u89c8\u5668\u8fdb\u884c\u722c\u53d6\u3002 \u901a\u8fc7 requests \u5c31\u53ef\u4ee5\u8fdb\u884c\u7f51\u7edc\u8bf7\u6c42\uff0c\u4ece\u8fd4\u56de\u5bf9\u8c61\u4e2d\u5f97\u5230\u6570\u636e\u3002 url\u7684\u83b7\u53d6\u65b9\u5f0f\u4e3b\u8981\u901a\u8fc7\u81ea\u5df1\u67e5\u627e\u5206\u6790 \u5982\u679c\u53ea\u662f\u666e\u901a\u7684\u6d4f\u89c8\u7f51\u9875\uff0c\u4e00\u822c\u4f7f\u7528\u7684\u662f get\u65b9\u5f0f \u5982\u679c\u643a\u5e26\u53c2\u6570\uff0c\u9700\u8981\u89c2\u5bdfurl\u4e2d \uff1f \u540e\u9762\u7684\u5b57\u6bb5\u3002 \u643a\u5e26\u53c2\u6570 \u00b6 http\u534f\u8bae\u4e2d\u7684\u8bf7\u6c42\u65b9\u5f0f\u5206\u4e3a get \u3001 post \u3001 put \u3001 patch \u3001 head \u3001 delete \u3002 \u6700\u5e38\u7528\u7684\u8bf7\u6c42\u4e3a get() \u548c post() \uff0c\u8fd9\u4e24\u79cd\u8bf7\u6c42\u65b9\u5f0f\u90fd\u53ef\u4ee5\u643a\u5e26\u53c2\u6570\u3002 \u5728\u6d4f\u89c8\u5668\u4e2d\u5206\u6790\u7684\u65f6\u5019\u53ef\u4ee5\u89c2\u5bdf ? \u540e\u9762\u7684\u5b57\u6bb5\uff0c\u6709\u7684\u662f query \uff0c\u6709\u7684\u662f q \uff0c\u53ef\u4ee5\u901a\u8fc7\u6d4f\u89c8\u5668\u4e2d\u6293\u5305\u5de5\u5177\u8fdb\u884c\u5206\u6790 \u7531\u6b64\u5c31\u53ef\u4ee5\u786e\u5b9a ? \u524d\u9762\u662f\u6211\u4eec\u8981\u7684url\uff1a https://www.sogou.com/web? \uff1burl\u4e2d\u7684\u95ee\u53f7 ? \u53ef\u5199\u53ef\u4e0d\u5199 \u63a5\u7740\u53ef\u4ee5\u786e\u5b9a\u67e5\u8be2\u5b57\u6bb5\u662f query \uff0c\u7528\u4e2a\u5b57\u5178\u5305\u88c5\u8d77\u6765\uff1a param = {'query': 'python'} \u540c\u65f6\u5728\u8bf7\u6c42url\u4e0b\u9762\u53ef\u4ee5\u770b\u5230\u8bf7\u6c42\u65b9\u5f0f\u662fget\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528get\u65b9\u6cd5\u8fdb\u884c\u8bf7\u6c42\uff1a res = requests.get(url, param, headers=header) \u89c2\u5bdf\u54cd\u5e94\u6807\u5934\u7684 Content-Type \u53d1\u73b0\uff0c\u8fd4\u56de\u683c\u5f0f\u4e3atext\uff0c\u5219\u8c03\u7528res.text\u83b7\u5f97\u8fd4\u56de\u5185\u5bb9\uff1a res_text = res.text \u5c06\u8fd4\u56de\u7684\u5185\u5bb9\u5b58\u50a8\u8d77\u6765\u3002\u641e\u5b9a\u3002 \u5b8c\u6574\u4ee3\u7801 import requests header = { 'User-Agent' : \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Safari/537.36 Edg/84.0.522.44\" } def main (): # 1. \u6307\u5b9aurl url = \"https://www.sogou.com/web?\" # 2. \u83b7\u53d6\u67e5\u8be2\u5185\u5bb9 q = input ( 'Enter the contend you want to search: ' ) # 3. \u8bbe\u7f6e\u597d\u4f20\u8f93\u53c2\u6570 param = { 'query' : q } # 4. \u53d1\u9001\u8bf7\u6c42 res = requests . get ( url = url , params = param , headers = header ) # 5. \u83b7\u53d6\u8fd4\u56de\u5185\u5bb9 res_text = res . text # 6. \u5199\u5165\u6587\u4ef6 with open ( './sogou.html' , 'w' , encoding = 'utf-8' ) as f : f . write ( res_text ) if __name__ == '__main__' : main () -------------------------------------------------- # Output: Enter the contend you want to search : Python # sogou.html <!DOCTYPE html> < html data-vtype = \"default\" > < head > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=Edge\" > < meta http-equiv = \"x-dns-prefetch-control\" content = \"on\" > < meta charset = \"utf-8\" > < meta name = \"referrer\" content = \"always\" > ...... </ script > <!-- BottomViewEnd opt --> < script crossorigin = \"anonymous\" src = \"//dlweb.sogoucdn.com/hhytrace/trace_2020072915.js\" async ></ script > </ body > <!-- bodyViewEnd --> </ html > <!-- 1596006531756 --> <!--STATUS total 14 time 1596006531756 page 0 maxEnd 1000 totalItems 8955--> <!--real_pageno:1--> <!--nodeserverinfo:rsync.doc04.web.1.gd.ted--> <!--searchhubserverinfo:doc09.web.1.gd.ted:5555--> <!--zly--> requests\u6a21\u5757\u4e2d\u7684 get() \u3001 post() \u3001 put() \u7b49\u8bf7\u6c42\u65b9\u6cd5\u5176\u5b9e\u90fd\u662f\u8c03\u7528\u4e86 request() \u65b9\u6cd5\u3002 request(method, url, **kwargs) get(url, params=None, **kwargs) post(url, data=None, json=None, **kwargs) \u8fd9\u91cc\u6ce8\u610f\u533a\u5206\uff0cget\u7684\u53c2\u6570\u662f params \uff0cpost\u7684\u53c2\u6570\u7684 data \u6293\u53d6\u52a8\u6001\u5185\u5bb9 \u00b6 \u7f51\u9875\u4e2d\u6709\u4e9b\u6570\u636e\u4e0d\u662f\u9759\u6001\u7684\uff0c\u800c\u662f\u52a8\u6001\u83b7\u53d6\uff0c\u901a\u8fc7Ajax\u5c40\u90e8\u5237\u65b0\u3002 \u4f8b\u5982\u767e\u5ea6\u7ffb\u8bd1 \u7ea2\u6846\u4e2d\u7684\u5185\u5bb9\u4f1a\u6839\u636e\u8f93\u5165\u6846\u4e2d\u5185\u5bb9\u7684\u53d8\u5316\u800c\u53d8\u5316\uff0c\u8fd9\u5c31\u662f**\u52a8\u6001\u83b7\u53d6** \u5f53\u5185\u5bb9\u6539\u53d8\u7684\u65f6\u5019\uff0c\u8fd4\u56de\u6765\u7684\u7ed3\u679c\u53ea\u4f1a\u6539\u53d8\u9875\u9762\u4e2d\u7ea2\u6846\u7684\u90e8\u5206\uff0c\u8fd9\u5c31\u662f**\u5c40\u90e8\u5237\u65b0** \u8fd9\u79cd\u6570\u636e\u76f4\u63a5\u6293\u53d6\u9875\u9762\u662f\u65e0\u6548\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u901a\u8fc7\u6d4f\u89c8\u5668\u6293\u5305\u5de5\u5177\u8fdb\u884c\u89c2\u5bdf \u53ef\u4ee5\u628a\u7b5b\u9009\u5668\u8bbe\u7f6e\u5230 XHR \uff0c\u8fd9\u6837\u53ef\u4ee5\u53ea\u67e5\u770b\u5237\u65b0\u65f6\u8fd4\u56de\u7684\u6570\u636e \u901a\u8fc7\u89c2\u5bdf\u53ef\u4ee5\u53d1\u73b0\u6bcf\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u5c31\u4f1a\u53d1\u9001\u4e00\u4e2asug\uff0c\u6240\u4ee5\u8bf7\u6c42url\u5e94\u8be5\u662f https://fanyi.baidu.com/sug \u624d\u5bf9 \u8bf7\u6c42\u65b9\u5f0f\u662f post \uff0c\u643a\u5e26\u53c2\u6570\u662fkw\uff0c\u6240\u4ee5\u53c2\u6570\u90e8\u5206\u5e94\u8be5\u8fd9\u6837\u5199\uff1a data = {kw: 'document'} \u63a5\u7740\u770b\u5230 Content-Type \uff0c\u8fd4\u56de\u6570\u636e\u683c\u5f0f\u662f json\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u7528 json \u6a21\u5757\u6765\u5904\u7406\u3002 res_json = res.json() \u6700\u540e\u53ef\u4ee5\u4f7f\u7528 json.dump() \u5c06json\u683c\u5f0f\u76f4\u63a5\u5199\u5165\u6570\u636e\uff0c\u6216\u8005\u4f7f\u7528 json.loads() \u8f6c\u6362\u6210python\u5bf9\u8c61\uff0c\u518d\u7528 f.write() \u5199\u5165\u6587\u4ef6\u3002 import requests header = { 'User-Agent' : \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Safari/537.36 Edg/84.0.522.44\" } def main (): # 1. \u6307\u5b9aurl url = 'https://fanyi.baidu.com/sug' # 2. \u83b7\u53d6\u67e5\u8be2\u5185\u5bb9\uff0c\u8bbe\u7f6e\u597d\u8bf7\u6c42\u53c2\u6570 query = input ( \"Enter the word you want to translate: \" ) data = { 'kw' : query } # 3. \u53d1\u9001\u8bf7\u6c42 res = requests . post ( url = url , data = data , headers = header ) # 4. \u83b7\u53d6\u8fd4\u56de\u5185\u5bb9 res_json = res . json () # 5. \u5199\u5165\u6587\u4ef6 with open ( './translation.json' , 'w' , encoding = 'utf-8' ) as f : json . dump ( res_json , fp , ensure_ascii = False ) if __name__ == '__main__' : main ()","title":"\u901a\u7528\u722c\u866b"},{"location":"Python/Crawler/Python-Crawler-1-General-Crawler/#_1","text":"\u6307\u5b9aURL UA\u4f2a\u88c5 \u53d1\u8d77\u8bf7\u6c42 \u2014\u2014 requests.get() \u6216 requests.post() \u83b7\u53d6\u54cd\u5e94\u6570\u636e \u2014\u2014 .json() \u6216 .text \u6301\u4e45\u5316\u5b58\u50a8 \u2014\u2014 f.write() \u6216 json.dump() import requests def main (): # 1. \u6307\u5b9aurl url = \"https://www.sou.com\" # 2. UA\u4f2a\u88c5 header = { \"User-Agent\" : \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Safari/537.36 Edg/84.0.522.44\" } # 3. \u53d1\u8d77\u8bf7\u6c42 response = requests . get ( url = url , headers = header ) # 4. \u83b7\u53d6\u54cd\u5e94\u6570\u636e page_text = response . text # 5. \u6301\u4e45\u5316\u5b58\u50a8 with open ( \"sogou.html\" , \"w\" , \"utf-8\" ) as f : f . wirte ( page_text ) print ( \"END\" ) if __naim__ == '__main__' : main () \u8fd9\u79cd\u5c31\u662f\u6700\u57fa\u672c\u7684\u6a21\u62df\u6d4f\u89c8\u5668\u8fdb\u884c\u722c\u53d6\u3002 \u901a\u8fc7 requests \u5c31\u53ef\u4ee5\u8fdb\u884c\u7f51\u7edc\u8bf7\u6c42\uff0c\u4ece\u8fd4\u56de\u5bf9\u8c61\u4e2d\u5f97\u5230\u6570\u636e\u3002 url\u7684\u83b7\u53d6\u65b9\u5f0f\u4e3b\u8981\u901a\u8fc7\u81ea\u5df1\u67e5\u627e\u5206\u6790 \u5982\u679c\u53ea\u662f\u666e\u901a\u7684\u6d4f\u89c8\u7f51\u9875\uff0c\u4e00\u822c\u4f7f\u7528\u7684\u662f get\u65b9\u5f0f \u5982\u679c\u643a\u5e26\u53c2\u6570\uff0c\u9700\u8981\u89c2\u5bdfurl\u4e2d \uff1f \u540e\u9762\u7684\u5b57\u6bb5\u3002","title":"\u57fa\u672c\u4f7f\u7528"},{"location":"Python/Crawler/Python-Crawler-1-General-Crawler/#_2","text":"http\u534f\u8bae\u4e2d\u7684\u8bf7\u6c42\u65b9\u5f0f\u5206\u4e3a get \u3001 post \u3001 put \u3001 patch \u3001 head \u3001 delete \u3002 \u6700\u5e38\u7528\u7684\u8bf7\u6c42\u4e3a get() \u548c post() \uff0c\u8fd9\u4e24\u79cd\u8bf7\u6c42\u65b9\u5f0f\u90fd\u53ef\u4ee5\u643a\u5e26\u53c2\u6570\u3002 \u5728\u6d4f\u89c8\u5668\u4e2d\u5206\u6790\u7684\u65f6\u5019\u53ef\u4ee5\u89c2\u5bdf ? \u540e\u9762\u7684\u5b57\u6bb5\uff0c\u6709\u7684\u662f query \uff0c\u6709\u7684\u662f q \uff0c\u53ef\u4ee5\u901a\u8fc7\u6d4f\u89c8\u5668\u4e2d\u6293\u5305\u5de5\u5177\u8fdb\u884c\u5206\u6790 \u7531\u6b64\u5c31\u53ef\u4ee5\u786e\u5b9a ? \u524d\u9762\u662f\u6211\u4eec\u8981\u7684url\uff1a https://www.sogou.com/web? \uff1burl\u4e2d\u7684\u95ee\u53f7 ? \u53ef\u5199\u53ef\u4e0d\u5199 \u63a5\u7740\u53ef\u4ee5\u786e\u5b9a\u67e5\u8be2\u5b57\u6bb5\u662f query \uff0c\u7528\u4e2a\u5b57\u5178\u5305\u88c5\u8d77\u6765\uff1a param = {'query': 'python'} \u540c\u65f6\u5728\u8bf7\u6c42url\u4e0b\u9762\u53ef\u4ee5\u770b\u5230\u8bf7\u6c42\u65b9\u5f0f\u662fget\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528get\u65b9\u6cd5\u8fdb\u884c\u8bf7\u6c42\uff1a res = requests.get(url, param, headers=header) \u89c2\u5bdf\u54cd\u5e94\u6807\u5934\u7684 Content-Type \u53d1\u73b0\uff0c\u8fd4\u56de\u683c\u5f0f\u4e3atext\uff0c\u5219\u8c03\u7528res.text\u83b7\u5f97\u8fd4\u56de\u5185\u5bb9\uff1a res_text = res.text \u5c06\u8fd4\u56de\u7684\u5185\u5bb9\u5b58\u50a8\u8d77\u6765\u3002\u641e\u5b9a\u3002 \u5b8c\u6574\u4ee3\u7801 import requests header = { 'User-Agent' : \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Safari/537.36 Edg/84.0.522.44\" } def main (): # 1. \u6307\u5b9aurl url = \"https://www.sogou.com/web?\" # 2. \u83b7\u53d6\u67e5\u8be2\u5185\u5bb9 q = input ( 'Enter the contend you want to search: ' ) # 3. \u8bbe\u7f6e\u597d\u4f20\u8f93\u53c2\u6570 param = { 'query' : q } # 4. \u53d1\u9001\u8bf7\u6c42 res = requests . get ( url = url , params = param , headers = header ) # 5. \u83b7\u53d6\u8fd4\u56de\u5185\u5bb9 res_text = res . text # 6. \u5199\u5165\u6587\u4ef6 with open ( './sogou.html' , 'w' , encoding = 'utf-8' ) as f : f . write ( res_text ) if __name__ == '__main__' : main () -------------------------------------------------- # Output: Enter the contend you want to search : Python # sogou.html <!DOCTYPE html> < html data-vtype = \"default\" > < head > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=Edge\" > < meta http-equiv = \"x-dns-prefetch-control\" content = \"on\" > < meta charset = \"utf-8\" > < meta name = \"referrer\" content = \"always\" > ...... </ script > <!-- BottomViewEnd opt --> < script crossorigin = \"anonymous\" src = \"//dlweb.sogoucdn.com/hhytrace/trace_2020072915.js\" async ></ script > </ body > <!-- bodyViewEnd --> </ html > <!-- 1596006531756 --> <!--STATUS total 14 time 1596006531756 page 0 maxEnd 1000 totalItems 8955--> <!--real_pageno:1--> <!--nodeserverinfo:rsync.doc04.web.1.gd.ted--> <!--searchhubserverinfo:doc09.web.1.gd.ted:5555--> <!--zly--> requests\u6a21\u5757\u4e2d\u7684 get() \u3001 post() \u3001 put() \u7b49\u8bf7\u6c42\u65b9\u6cd5\u5176\u5b9e\u90fd\u662f\u8c03\u7528\u4e86 request() \u65b9\u6cd5\u3002 request(method, url, **kwargs) get(url, params=None, **kwargs) post(url, data=None, json=None, **kwargs) \u8fd9\u91cc\u6ce8\u610f\u533a\u5206\uff0cget\u7684\u53c2\u6570\u662f params \uff0cpost\u7684\u53c2\u6570\u7684 data","title":"\u643a\u5e26\u53c2\u6570"},{"location":"Python/Crawler/Python-Crawler-1-General-Crawler/#_3","text":"\u7f51\u9875\u4e2d\u6709\u4e9b\u6570\u636e\u4e0d\u662f\u9759\u6001\u7684\uff0c\u800c\u662f\u52a8\u6001\u83b7\u53d6\uff0c\u901a\u8fc7Ajax\u5c40\u90e8\u5237\u65b0\u3002 \u4f8b\u5982\u767e\u5ea6\u7ffb\u8bd1 \u7ea2\u6846\u4e2d\u7684\u5185\u5bb9\u4f1a\u6839\u636e\u8f93\u5165\u6846\u4e2d\u5185\u5bb9\u7684\u53d8\u5316\u800c\u53d8\u5316\uff0c\u8fd9\u5c31\u662f**\u52a8\u6001\u83b7\u53d6** \u5f53\u5185\u5bb9\u6539\u53d8\u7684\u65f6\u5019\uff0c\u8fd4\u56de\u6765\u7684\u7ed3\u679c\u53ea\u4f1a\u6539\u53d8\u9875\u9762\u4e2d\u7ea2\u6846\u7684\u90e8\u5206\uff0c\u8fd9\u5c31\u662f**\u5c40\u90e8\u5237\u65b0** \u8fd9\u79cd\u6570\u636e\u76f4\u63a5\u6293\u53d6\u9875\u9762\u662f\u65e0\u6548\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u901a\u8fc7\u6d4f\u89c8\u5668\u6293\u5305\u5de5\u5177\u8fdb\u884c\u89c2\u5bdf \u53ef\u4ee5\u628a\u7b5b\u9009\u5668\u8bbe\u7f6e\u5230 XHR \uff0c\u8fd9\u6837\u53ef\u4ee5\u53ea\u67e5\u770b\u5237\u65b0\u65f6\u8fd4\u56de\u7684\u6570\u636e \u901a\u8fc7\u89c2\u5bdf\u53ef\u4ee5\u53d1\u73b0\u6bcf\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u5c31\u4f1a\u53d1\u9001\u4e00\u4e2asug\uff0c\u6240\u4ee5\u8bf7\u6c42url\u5e94\u8be5\u662f https://fanyi.baidu.com/sug \u624d\u5bf9 \u8bf7\u6c42\u65b9\u5f0f\u662f post \uff0c\u643a\u5e26\u53c2\u6570\u662fkw\uff0c\u6240\u4ee5\u53c2\u6570\u90e8\u5206\u5e94\u8be5\u8fd9\u6837\u5199\uff1a data = {kw: 'document'} \u63a5\u7740\u770b\u5230 Content-Type \uff0c\u8fd4\u56de\u6570\u636e\u683c\u5f0f\u662f json\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u7528 json \u6a21\u5757\u6765\u5904\u7406\u3002 res_json = res.json() \u6700\u540e\u53ef\u4ee5\u4f7f\u7528 json.dump() \u5c06json\u683c\u5f0f\u76f4\u63a5\u5199\u5165\u6570\u636e\uff0c\u6216\u8005\u4f7f\u7528 json.loads() \u8f6c\u6362\u6210python\u5bf9\u8c61\uff0c\u518d\u7528 f.write() \u5199\u5165\u6587\u4ef6\u3002 import requests header = { 'User-Agent' : \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Safari/537.36 Edg/84.0.522.44\" } def main (): # 1. \u6307\u5b9aurl url = 'https://fanyi.baidu.com/sug' # 2. \u83b7\u53d6\u67e5\u8be2\u5185\u5bb9\uff0c\u8bbe\u7f6e\u597d\u8bf7\u6c42\u53c2\u6570 query = input ( \"Enter the word you want to translate: \" ) data = { 'kw' : query } # 3. \u53d1\u9001\u8bf7\u6c42 res = requests . post ( url = url , data = data , headers = header ) # 4. \u83b7\u53d6\u8fd4\u56de\u5185\u5bb9 res_json = res . json () # 5. \u5199\u5165\u6587\u4ef6 with open ( './translation.json' , 'w' , encoding = 'utf-8' ) as f : json . dump ( res_json , fp , ensure_ascii = False ) if __name__ == '__main__' : main ()","title":"\u6293\u53d6\u52a8\u6001\u5185\u5bb9"},{"location":"Python/Crawler/Python-Crawler-2-Focued-Crawler/","text":"\u8fc7\u6ee4\u722c\u53d6\u5230\u7684\u6570\u636e\uff0c\u53d6\u51fa\u60f3\u8981\u7684\u90e8\u5206 \u805a\u7126\u722c\u866b\uff1a\u722c\u53d6\u9875\u9762\u4e2d\u6307\u5b9a\u7684\u9875\u9762\u5185\u5bb9 \u7f16\u7801\u6d41\u7a0b \u6307\u5b9aurl \u53d1\u8d77\u8bf7\u6c42 \u83b7\u53d6\u54cd\u5e94\u6570\u636e \u6570\u636e\u89e3\u6790 \u6301\u4e45\u5316\u5b58\u50a8 \u6570\u636e\u89e3\u6790\u5206\u7c7b \u6b63\u5219\u8868\u8fbe\u5f0f bs4 xpath (*) \u6570\u636e\u89e3\u6790\u539f\u7406 - \u89e3\u6790\u7684\u5c40\u90e8\u6587\u672c\u5185\u5bb9\u90fd\u4f1a\u5728\u6807\u7b7e\u4e4b\u95f4\u6216\u6807\u7b7e\u7684\u5c5e\u6027\u4e2d\u5b58\u50a8 - 1. \u8fdb\u884c\u6807\u7b7e\u7684\u5b9a\u4f4d - 2. \u6807\u7b7e\u6216\u8005\u6807\u7b7e\u5bf9\u5e94\u7684\u5c5e\u6027\u4e2d\u5b58\u50a8\u7684\u6570\u636e\u503c\u8fdb\u884c\u63d0\u53d6\uff08\u5373\u89e3\u6790 ~ ~\uff09 \u6b63\u5219\u8868\u8fbe\u5f0f\u722c\u53d6 \u00b6 import os import requests import re # UA\u4f2a\u88c5 UA = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Safari/537.36 Edg/84.0.522.44' header = { 'User-Agent' : UA } # \u5b58\u50a8\u76ee\u5f55 folder = './qiushi' if not os . path . exists ( folder ): os . mkdir ( folder ) def main (): # \u5206\u9875\u5904\u7406 for i in range ( 1 , 3 ): url = f \"https://www.qiushibaike.com/imgrank/page/ { i } /\" # 1. \u722c\u53d6\u6574\u5f20\u9875\u9762 page_text = requests . get ( url = url , headers = header ) . text # 2. \u4f7f\u7528\u805a\u7126\u722c\u866b\u8fdb\u884c\u6570\u636e\u89e3\u6790 images = data_parse ( page_text ) length = len ( images ) # \u8fdb\u5ea6\u6761\u6240\u9700 for index , image in enumerate ( images ): # 3. \u53d1\u8d77\u8bf7\u6c42\u5e76\u83b7\u5f97\u6570\u636e image_content = requests . get ( url = image , headers = header ) . content # 4. \u6301\u4e45\u5316\u5b58\u50a8 image_name = image . split ( '/' )[ - 1 ] image_path = os . path . join ( folder , image_name ) with open ( image_path , 'wb' ) as f : f . write ( image_content ) # \u8fdb\u5ea6\u6253\u5370 print ( image_name + ' \u4e0b\u8f7d\u6210\u529f\uff01' ) print ( f ' { index } / { length } ' , end = ' \\r ' ) print ( str ( i ) + \"/ 2 page\" ) def data_parse ( page_text ): \"\"\" \u89e3\u6790\u51fa\u6bcf\u5f20\u56fe\u7247\u7684url \"\"\" # \u5206\u6790\u7f51\u9875\u540e\u6574\u7406\u51fa\u6b63\u5219\u8868\u8fbe\u5f0f ex = r '<div class=\"thumb\">.*?<img src=\"(.*?)\" alt.*?></div>' images = re . findall ( ex , page_text , re . S ) images = [ 'https:' + x for x in images ] # \u89e3\u6790\u51fa\u6765\u6ca1\u6709\u534f\u8bae\u5934\uff0c\u7ed9\u589e\u52a0\u4e0a return images if __name__ == \"__main__\" : main () -------------------------------------------------- # Output: K7EUFEUIV3QY37P1 . jpg \u4e0b\u8f7d\u6210\u529f \uff01 DFIAAL32X5J35JP2 . jpg \u4e0b\u8f7d\u6210\u529f \uff01 ... NXUA4X1CMQP22UPP . jpg \u4e0b\u8f7d\u6210\u529f \uff01 FQILIKXCVMUIRXL8 . jpg \u4e0b\u8f7d\u6210\u529f \uff01 1 / 2 page 95 GRCYEUZANQ361J . jpg \u4e0b\u8f7d\u6210\u529f \uff01 2 SXBFKSSK3JD3G2M . jpg \u4e0b\u8f7d\u6210\u529f \uff01 ... 5 YTNS4JH0PLZAO58 . jpg \u4e0b\u8f7d\u6210\u529f \uff01 59 CN77YAL198SM6M . jpg \u4e0b\u8f7d\u6210\u529f \uff01 2 / 2 page \u793a\u4f8b\u7f51\u9875 \u00b6 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > \u6d4b\u8bd5bs4 </ title > </ head > < body > < div > < p > \u767e\u91cc\u5b88\u7ea6 </ p > </ div > < div class = \"song\" > < p > \u674e\u6e05\u7167 </ p > < p > \u738b\u5b89\u77f3 </ p > < p > \u82cf\u8f7c </ p > < p > \u67f3\u5b97\u5143 </ p > < a href = \"https://www.song.com\" title = \"\u8d75\u5321\u80e4\" target = \"_self\" > < span > this is span </ span > \u5b8b\u671d\u662f\u6700\u5f3a\u5927\u7684\u738b\u671d\uff0c\u4e0d\u662f\u519b\u961f\u7684\u5f3a\u5927\uff0c\u800c\u662f\u7ecf\u6d4e\u5f88\u5f3a\u5927\uff0c\u56fd\u6c11\u90fd\u5f88\u6709\u94b1 </ a > < a href = \"\" class = \"du\" > \u603b\u4e3a\u6d6e\u4e91\u80fd\u907f\u65e5\uff0c\u957f\u5b89\u4e0d\u89c1\u4f7f\u4eba\u6101 </ a > < img src = \"https://www.baidu.com/meinv.jpg\" alt = \"\" > </ div > < div class = \"tang\" > < ul > < li >< a href = \"https://www.baidu.com\" title = \"qing\" > \u6e05\u660e\u65f6\u8282\u96e8\u7eb7\u7eb7\uff0c\u8def\u4e0a\u884c\u4eba\u6b32\u65ad\u9b42\u3002\u501f\u95ee\u9152\u5bb6\u4f55\u5904\u6709\uff0c\u7267\u7ae5\u9065\u6307\u674f\u82b1\u6751\u3002 </ a ></ li > < li >< a href = \"https://www.163.com\" title = \"qin\" > \u79e6\u65f6\u660e\u6708\u6c49\u65f6\u5149\uff0c\u4e07\u91cc\u957f\u5f81\u4eba\u672a\u8fd8\u3002\u4f46\u4f7f\u9f99\u57ce\u98de\u5c06\u5728\uff0c\u4e0d\u6559\u80e1\u9a6c\u5ea6\u9634\u5c71\u3002 </ a ></ li > < li >< a href = \"https://www.126.com\" alt = \"qi\" > \u5c90\u738b\u5b85\u91cc\u5bfb\u5e38\u89c1\uff0c\u5d14\u4e45\u5802\u524d\u51e0\u5ea6\u95fb\u3002\u6b63\u662f\u6c5f\u5357\u597d\u98ce\u666f\uff0c\u843d\u82b1\u65f6\u8282\u53c8\u9022\u541b\u3002 </ a ></ li > < li >< a href = \"https://www.sina.com\" class = \"du\" > \u675c\u752b </ a ></ li > < li >< a href = \"https://www.dudu.com\" class = \"du\" > \u675c\u7267 </ a ></ li > < li >< b > \u675c\u5c0f\u6708 </ b ></ li > < li >< i > \u5ea6\u871c\u6708 </ i ></ li > < li >< a href = \"https://www.haha.com\" id = \"feng\" > \u51e4\u51f0\u53f0\u4e0a\u51e4\u51f0\u6e38\uff0c\u51e4\u53bb\u53f0\u7a7a\u6c5f\u81ea\u6d41\u3002\u5434\u5bab\u82b1\u8349\u57cb\u5e7d\u5f84\uff0c\u664b\u4ee3\u8863\u51a0\u6210\u53e4\u4e18\u3002 </ a ></ li > </ ul > </ div > </ body > </ html > \u4ee5\u4e0b\u722c\u866b\u793a\u4f8b\u5747\u4ee5\u6b64\u7f51\u9875\u793a\u4f8b\u4e3a\u57fa\u7840 \u6709\u70b9\u4e11\uff0c\u5c06\u5c31\u4e00\u4e0b\u3002 bs4\u722c\u53d6 \u00b6 \u5b89\u88c5 \u00b6 win \u4e0b\uff1a >_ pip install bs4 >_ pip install lxml Linux \u4e0b\uff1a >_ pip install Beautifulsoup4 \u5bfc\u5165 \u00b6 from bs4 import BeautifulSoup \u4f7f\u7528 \u00b6 \u521b\u5efabs\u5bf9\u8c61\u5e76\u4f20\u5165\u5f85\u89e3\u6790\u5bf9\u8c61 \u4f20\u5165\u5f85\u89e3\u6790\u5bf9\u8c61\u4e3a\u672c\u5730\u6587\u4ef6 from bs4 import BeautifulSoup with open ( './bs_test.html' , 'r' , encoding = 'utf-8' ) as f : bs = BeautifulSoup ( f , 'lxml' ) # \u521b\u5efabs\u5bf9\u8c61 \u4f20\u5165\u5f85\u89e3\u6790\u5bf9\u8c61\u4e3a\u7f51\u7edc\u8bf7\u6c42 from bs4 import BeautifulSoup import requests url = \"https://www.baidu.com\" page_text = requests . get ( url = url ) . text bs = BeautifulSoup ( page_text , 'lxml' ) # \u521b\u5efabs\u5bf9\u8c61 \u5b9a\u4f4d\u6570\u636e \u00b6 \u65b9\u6cd5 \u7528 \u8fd4\u503c tagName \u8fd4\u56de\u9996tagName\u6807\u7b7e bs4.element.Tag find('tagName') \u8fd4\u56de\u9996tagName\u6807\u7b7e bs4.element.Tag find('tagName', class_/id/attrName='value') \u8fd4\u56de\u9996\u5c5e\u6027\u4e3avalue\u7684tagName\u6807\u7b7e bs4.element.Tag find_all('tagName') \u8fd4\u56de\u6240\u7b26\u5408\u8981\u6c42\u7684\u6807\u7b7e bs4.element.ResultSet select(['selector' + ]'tagName') \u901a\u8fc7CS\u9009\u62e9\u5668+\u6807\u7b7e\u540d\u5b9a\u4f4d\u6807\u7b7e,\u8fd4\u56de\u591a\u4e2a bs4.element.ResultSet select_one(['selector' + ]'tagName') \u901a\u8fc7CS\u9009\u62e9\u5668+\u6807\u7b7e\u540d\u5b9a\u4f4d\u6807\u7b7e,\u8fd4\u56de\u4e00\u4e2a bs4.element.Tag bs.tagName \u00b6 bs.tagName \uff1a\u8fd4\u56de\u6587\u6863\u4e2d**\u7b2c\u4e00\u6b21**\u51fa\u73b0tagName\u5bf9\u5e94\u7684\u6807\u7b7e with open ( './bs_test.html' , 'r' , encoding = 'utf-8' ) as f : bs = BeautifulSoup ( f , 'lxml' ) # \u521b\u5efabs\u5bf9\u8c61 tag_a = bs . a # \u5b9a\u4f4d\u6570\u636e print ( tag_a ) print ( type ( tag_a )) # <class 'bs4.element.Tag'> -------------------------------------------------- # Output: < a href = \"https://www.song.com\" target = \"_self\" title = \"\u8d75\u5321\u80e4\" > < span > this is span </ span > \u5b8b\u671d\u662f\u6700\u5f3a\u5927\u7684\u738b\u671d \uff0c \u4e0d\u662f\u519b\u961f\u7684\u5f3a\u5927 \uff0c \u800c\u662f\u7ecf\u6d4e\u5f88\u5f3a\u5927 \uff0c \u56fd\u6c11\u90fd\u5f88\u6709\u94b1 </ a > < class ' bs4 . element . Tag '> bs.find() \u00b6 bs.find() \uff1a find('tagName') \uff1a\u7b49\u540c\u4e8e bs.tagName with open ( './bs_test.html' , 'r' , encoding = 'utf-8' ) as f : bs = BeautifulSoup ( f , 'lxml' ) # \u521b\u5efabs\u5bf9\u8c61 tag_div = bs . find ( 'div' ) # \u5b9a\u4f4d\u6570\u636e print ( tag_div ) print ( type ( tag_div )) # <class 'bs4.element.Tag'> -------------------------------------------------- # Output: < div > < p > \u767e\u91cc\u5b88\u7ea6 </ p > </ div > < class ' bs4 . element . Tag '> find('tagName', class_/is/attrName='value') \uff1a\u901a\u8fc7\u9650\u5b9a\u5c5e\u6027\u6765\u5b9a\u4f4d\u6807\u7b7e with open ( './bs_test.html' , 'r' , encoding = 'utf-8' ) as f : bs = BeautifulSoup ( f , 'lxml' ) # \u521b\u5efabs\u5bf9\u8c61 tag_a = bs . find ( 'a' , class_ = 'du' ) # \u5b9a\u4f4d\u6570\u636e print ( tag_a ) print ( type ( tag_a )) # <class 'bs4.element.Tag'> -------------------------------------------------- # Output: < a class = \"du\" href = \"\" > \u603b\u4e3a\u6d6e\u4e91\u80fd\u907f\u65e5 \uff0c \u957f\u5b89\u4e0d\u89c1\u4f7f\u4eba\u6101 </ a > < class ' bs4 . element . Tag '> bs.find_all('tagName') \uff1a\u8fd4\u56de\u590d\u5408\u8981\u6c42\u7684\u6240\u6709\u6807\u7b7e\uff08\u96c6\u5408\uff09 with open ( './bs_test.html' , 'r' , encoding = 'utf-8' ) as f : bs = BeautifulSoup ( f , 'lxml' ) # \u521b\u5efabs\u5bf9\u8c61 tag_p = bs . find_all ( 'p' ) # \u5b9a\u4f4d\u6570\u636e print ( tag_p ) print ( type ( tag_p )) # <class 'bs4.element.ResultSet'> -------------------------------------------------- # Output: [ < p > \u767e\u91cc\u5b88\u7ea6 </ p > , < p > \u674e\u6e05\u7167 </ p > , < p > \u738b\u5b89\u77f3 </ p > , < p > \u82cf\u8f7c </ p > , < p > \u67f3\u5b97\u5143 </ p > ] bs.select() \u00b6 bs.select('selector' + 'tagName') \uff1a\u53ef\u4ee5\u901a\u8fc7**CSS\u62e9\u5668+\u6807\u7b7e\u540d**\u5b9a\u4f4d\uff0c\u5305\u62ec\u5c42\u7ea7\u9009\u62e9\u5668\u3001\u6807\u7b7e\u9009\u62e9\u5668\u7b49 with open ( './bs_test.html' , 'r' , encoding = 'utf-8' ) as f : bs = BeautifulSoup ( f , 'lxml' ) # \u521b\u5efabs\u5bf9\u8c61 tag_div = bs . select ( '#feng' ) # \u5b9a\u4f4d\u6570\u636e print ( tag_div ) print ( type ( tag_div )) # <class 'bs4.element.ResultSet'> -------------------------------------------------- # Output: [ < a href = \"https://www.haha.com\" id = \"feng\" > \u51e4\u51f0\u53f0\u4e0a\u51e4\u51f0\u6e38 \uff0c \u51e4\u53bb\u53f0\u7a7a\u6c5f\u81ea\u6d41 \u3002 \u5434\u5bab\u82b1\u8349\u57cb\u5e7d\u5f84 \uff0c \u664b\u4ee3\u8863\u51a0\u6210\u53e4\u4e18 \u3002 </ a > ] < class ' bs4 . element . ResultSet '> with open ( './bs_test.html' , 'r' , encoding = 'utf-8' ) as f : bs = BeautifulSoup ( f , 'lxml' ) # \u521b\u5efabs\u5bf9\u8c61 tag1_a = bs . select ( '.tang > ul > li > a' ) # \u5b9a\u4f4d\u6570\u636e tag2_a = bs . select ( '.tang >ul a' ) # \u5b9a\u4f4d\u6570\u636e print ( tag1_a ) print ( tag2_a ) print ( type ( tag1_a )) # <class 'bs4.element.ResultSet'> -------------------------------------------------- # Output: [ < a href = \"https://www.baidu.com\" title = \"qing\" > \u6e05\u660e\u65f6\u8282\u96e8\u7eb7\u7eb7 \uff0c \u8def\u4e0a\u884c\u4eba\u6b32\u65ad\u9b42 \u3002 \u501f\u95ee\u9152\u5bb6\u4f55\u5904\u6709 \uff0c \u7267\u7ae5\u9065\u6307\u674f\u82b1\u6751 \u3002 </ a > , < a href = \"https://www.163.com\" title = \"qin\" > \u79e6\u65f6\u660e\u6708\u6c49\u65f6\u5149 \uff0c \u4e07\u91cc\u957f\u5f81\u4eba\u672a\u8fd8 \u3002 \u4f46\u4f7f\u9f99\u57ce\u98de\u5c06\u5728 \uff0c \u4e0d\u6559\u80e1\u9a6c\u5ea6\u9634\u5c71 \u3002 </ a > , < a alt = \"qi\" href = \"https://www.126.com\" > \u5c90\u738b\u5b85\u91cc\u5bfb\u5e38\u89c1 \uff0c \u5d14\u4e45\u5802\u524d\u51e0\u5ea6\u95fb \u3002 \u6b63\u662f\u6c5f\u5357\u597d\u98ce\u666f \uff0c \u843d\u82b1\u65f6\u8282\u53c8\u9022\u541b \u3002 </ a > , < a class = \"du\" href = \"https://www.sina.com\" > \u675c\u752b </ a > , < a class = \"du\" href = \"https://www.dudu.com\" > \u675c\u7267 </ a > , < a href = \"https://www.haha.com\" id = \"feng\" > \u51e4\u51f0\u53f0\u4e0a\u51e4\u51f0\u6e38 \uff0c \u51e4\u53bb\u53f0\u7a7a\u6c5f\u81ea\u6d41 \u3002 \u5434\u5bab\u82b1\u8349\u57cb\u5e7d\u5f84 \uff0c \u664b\u4ee3\u8863\u51a0\u6210\u53e4\u4e18 \u3002 </ a > ] [ < a href = \"https://www.baidu.com\" title = \"qing\" > \u6e05\u660e\u65f6\u8282\u96e8\u7eb7\u7eb7 \uff0c \u8def\u4e0a\u884c\u4eba\u6b32\u65ad\u9b42 \u3002 \u501f\u95ee\u9152\u5bb6\u4f55\u5904\u6709 \uff0c \u7267\u7ae5\u9065\u6307\u674f\u82b1\u6751 \u3002 </ a > , < a href = \"https://www.163.com\" title = \"qin\" > \u79e6\u65f6\u660e\u6708\u6c49\u65f6\u5149 \uff0c \u4e07\u91cc\u957f\u5f81\u4eba\u672a\u8fd8 \u3002 \u4f46\u4f7f\u9f99\u57ce\u98de\u5c06\u5728 \uff0c \u4e0d\u6559\u80e1\u9a6c\u5ea6\u9634\u5c71 \u3002 </ a > , < a alt = \"qi\" href = \"https://www.126.com\" > \u5c90\u738b\u5b85\u91cc\u5bfb\u5e38\u89c1 \uff0c \u5d14\u4e45\u5802\u524d\u51e0\u5ea6\u95fb \u3002 \u6b63\u662f\u6c5f\u5357\u597d\u98ce\u666f \uff0c \u843d\u82b1\u65f6\u8282\u53c8\u9022\u541b \u3002 </ a > , < a class = \"du\" href = \"https://www.sina.com\" > \u675c\u752b </ a > , < a class = \"du\" href = \"https://www.dudu.com\" > \u675c\u7267 </ a > , < a href = \"https://www.haha.com\" id = \"feng\" > \u51e4\u51f0\u53f0\u4e0a\u51e4\u51f0\u6e38 \uff0c \u51e4\u53bb\u53f0\u7a7a\u6c5f\u81ea\u6d41 \u3002 \u5434\u5bab\u82b1\u8349\u57cb\u5e7d\u5f84 \uff0c \u664b\u4ee3\u8863\u51a0\u6210\u53e4\u4e18 \u3002 </ a > ] < class ' bs4 . element . ResultSet '> with open ( './bs_test.html' , 'r' , encoding = 'utf-8' ) as f : bs = BeautifulSoup ( f , 'lxml' ) # \u521b\u5efabs\u5bf9\u8c61 tag_div = bs . select_one ( '.du' ) # \u5b9a\u4f4d\u6570\u636e print ( tag_div ) print ( type ( tag_div )) # <class 'bs4.element.Tag'> -------------------------------------------------- # Output: < a class = \"du\" href = \"\" > \u603b\u4e3a\u6d6e\u4e91\u80fd\u907f\u65e5 \uff0c \u957f\u5b89\u4e0d\u89c1\u4f7f\u4eba\u6101 </ a > < class ' bs4 . element . Tag '> \u89e3\u6790\u6570\u636e \u00b6 \u65b9\u6cd5 \u7528 \u8fd4\u503c .text \u8fd4\u56de\u6807\u7b7e\u4e0b\u6240\u6709**\u76f4\u7cfb\u548c\u975e\u76f4\u7cfb\u6807\u7b7e**\u7684\u6240\u6709\u672c str .get_text() \u8fd4\u56de\u6807\u7b7e\u4e0b\u6240\u6709**\u76f4\u7cfb\u548c\u975e\u76f4\u7cfb\u6807\u7b7e**\u7684\u6240\u6709\u672c str .string \u8fd4\u56de\u6807\u7b7e\u4e0b\u6240\u6709**\u76f4\u7cfb\u6807\u7b7e**\u7684\u6240\u6709\u672c bs4.element.NavigableString \u83b7\u53d6\u6587\u672c \u00b6 bs.tagName.text/string/get_text() \uff1a\u83b7\u53d6\u6807\u7b7e\u4e4b\u95f4\u7684*\u6240\u6709\u6587\u672c** text/get_text() \uff1a\u53ef\u4ee5\u83b7\u53d6\u6807\u7b7e\u4e0b**\u76f4\u7cfb\u548c\u975e\u76f4\u7cfb**\u7684\u6240\u6709\u6587\u672c with open ( './bs_test.html' , 'r' , encoding = 'utf-8' ) as f : bs = BeautifulSoup ( f , 'lxml' ) # \u521b\u5efabs\u5bf9\u8c61 txt_li = bs . find ( 'li' ) . text print ( txt_li ) print ( type ( txt_li )) # <class 'str'> -------------------------------------------------- # Output: \u6e05\u660e\u65f6\u8282\u96e8\u7eb7\u7eb7 \uff0c \u8def\u4e0a\u884c\u4eba\u6b32\u65ad\u9b42 \u3002 \u501f\u95ee\u9152\u5bb6\u4f55\u5904\u6709 \uff0c \u7267\u7ae5\u9065\u6307\u674f\u82b1\u6751 \u3002 < class ' str '> with open ( './bs_test.html' , 'r' , encoding = 'utf-8' ) as f : bs = BeautifulSoup ( f , 'lxml' ) # \u521b\u5efabs\u5bf9\u8c61 txt_li = bs . find ( 'li' ) . get_text () print ( txt_li ) print ( type ( txt_li )) # <class 'str'> -------------------------------------------------- # Output: \u6e05\u660e\u65f6\u8282\u96e8\u7eb7\u7eb7 \uff0c \u8def\u4e0a\u884c\u4eba\u6b32\u65ad\u9b42 \u3002 \u501f\u95ee\u9152\u5bb6\u4f55\u5904\u6709 \uff0c \u7267\u7ae5\u9065\u6307\u674f\u82b1\u6751 \u3002 < class ' str '> string \uff1a\u53ea\u80fd\u83b7\u53d6\u6807\u7b7e\u4e0b**\u76f4\u7cfb**\u7684\u6587\u672c\uff0c\u6ca1\u6709\u8fd4\u56de None with open ( './bs_test.html' , 'r' , encoding = 'utf-8' ) as f : bs = BeautifulSoup ( f , 'lxml' ) # \u521b\u5efabs\u5bf9\u8c61 txt_li = bs . find ( 'li' ) . string print ( txt_li ) print ( type ( txt_li )) # <class 'bs4.element.NavigableString'> -------------------------------------------------- # Output: \u6e05\u660e\u65f6\u8282\u96e8\u7eb7\u7eb7 \uff0c \u8def\u4e0a\u884c\u4eba\u6b32\u65ad\u9b42 \u3002 \u501f\u95ee\u9152\u5bb6\u4f55\u5904\u6709 \uff0c \u7267\u7ae5\u9065\u6307\u674f\u82b1\u6751 \u3002 < class ' bs4 . element . NavigableString '> \u83b7\u53d6\u5c5e\u6027 \u00b6 bs.tagName['attrName'] \uff1a\u83b7\u53d6\u6807\u7b7e\u4e2d\u7684**\u5c5e\u6027\u5185\u5bb9** with open ( './bs_test.html' , 'r' , encoding = 'utf-8' ) as f : bs = BeautifulSoup ( f , 'lxml' ) # \u521b\u5efabs\u5bf9\u8c61 txt_href = bs . find ( 'a' )[ 'href' ] print ( txt_href ) print ( type ( txt_href )) # <class 'str'> -------------------------------------------------- # Output: https : // www . song . com < class ' str '> \u6848\u4f8b \u00b6 \u4ece\u8bd7\u8bcd\u540d\u53e5\u7f51\u4e0b\u8f7d\u4e00\u6574\u90e8\u300a\u8bba\u8bed\u300b import time import requests import os from bs4 import BeautifulSoup UA = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Safari/537.36 Edg/84.0.522.44' header = { 'User-Agent' : UA } folder = '. \\\\ \u722c\u866b \\\\ \u8bba\u8bed' if not os . path . exists ( folder ): os . mkdir ( folder ) def req_catalog ( url ): \"\"\" \u8bf7\u6c42\u76ee\u5f55\u5217\u8868 \"\"\" return requests . get ( url = url , headers = header ) . text def catalog_parse ( res_text ): \"\"\" \u89e3\u6790\u76ee\u5f55\u5217\u8868 \"\"\" bs = BeautifulSoup ( res_text , 'lxml' ) links = bs . select ( '.book-mulu > ul > li > a' ) catalog_list = [[ x . string , x [ 'href' ]] for x in links ] return catalog_list def download_content ( catalog_list ): \"\"\" \u8bf7\u6c42\u5185\u5bb9\u9875 \"\"\" url = 'https://www.shicimingju.com' length = len ( catalog_list ) for index , elem in enumerate ( catalog_list ): # \u8bf7\u6c42\u6570\u636e content_text = requests . get ( url = url + elem [ 1 ], headers = header ) . text # \u89e3\u6790\u6570\u636e content = contents_parse ( content_text ) # \u6301\u4e45\u5316\u5b58\u50a8 filename = str ( index + 1 ) + '-' + elem [ 0 ] + '.txt' filepath = os . path . join ( folder , filename ) with open ( filepath , 'w' , encoding = 'utf-8' ) as f : f . write ( content ) print ( \"\u5df2\u4e0b\u8f7d\uff1a\" + str ( index + 1 ) + \" / \" + str ( length ), end = \" \\r \" ) return 1 def contents_parse ( page_text ): \"\"\" \u89e3\u6790\u5185\u5bb9 \"\"\" bs = BeautifulSoup ( page_text , 'lxml' ) contents = bs . select ( '.chapter_content > p' ) # \u53d6\u51fa\u6240\u6709p\u6807\u7b7e texts = [ x . string for x in contents ] # \u53d6\u51fa\u5185\u5bb9\uff0c\u8fc7\u6ee4\u6389P\u6807\u7b7e content = '' for i in texts : content += str ( i ) return content def main (): url = \"https://www.shicimingju.com/book/lunyu.html\" catalog_list = list () try : catalog_text = req_catalog ( url ) catalog_list = catalog_parse ( catalog_text ) print ( \"\u4e0b\u8f7d\u6210\u529f\uff01\" ) if download_content ( catalog_list ) else print ( \"\u4e0b\u8f7d\u5931\u8d25\" ) except TimeoutError : print ( \"TimeoutError \\n \" ) time . sleep ( 2 ) print ( \"\u4e0b\u8f7d\u6210\u529f\uff01\" ) if download_content ( catalog_list ) else print ( \"\u4e0b\u8f7d\u5931\u8d25\" ) except Exception : print ( \"Exception \\n \" ) if __name__ == '__main__' : main () xpath\u722c\u53d6 \u00b6 \u6700\u5e38\u7528\u3001\u901a\u7528\u6027\u6700\u5f3a\u7684\uff0c\u6700\u4fbf\u6377\u9ad8\u6548\u7684\u4e00\u79cd\u89e3\u6790\u65b9\u5f0f\u3002 \u89e3\u6790\u6b65\u9aa4 \u00b6 \u5b9e\u4f8b\u5316\u4e00\u4e2aetree\u5bf9\u8c61\uff0c\u5e76\u4e14\u9700\u8981\u5c06\u88ab\u89e3\u6790\u7684\u9875\u9762\u6e90\u7801\u6570\u636e\u52a0\u8f7d\u5230\u8be5\u5bf9\u8c61\u4e2d\u3002 \u901a\u8fc7\u8c03\u7528etree\u5bf9\u8c61\u4e2d\u7684xpath\u65b9\u6cd5\u7ed3\u5408\u7740xpath\u8868\u8fbe\u5f0f\u5b9e\u73b0\u6807\u7b7e\u7684\u5b9a\u4f4d\u548c\u5185\u5bb9\u7684\u6355\u83b7 xpath\u5b9a\u4f4d\u5230\u6570\u636e\u540e\u8fd4\u56de\u7684\u4e0d\u662f\u6570\u636e\u7684\u5185\u5bb9\uff0c\u800c\u5df2\u4e00\u4e2a\u5217\u8868\uff0c\u91cc\u9762\u653e\u7f6e\u4e86\u89e3\u6790\u51fa\u6765\u7684**Element\u5bf9\u8c61** \u5b89\u88c5 \u00b6 >_: pip install lxml \u5bfc\u5165 \u00b6 from lxml import etree \u4f7f\u7528 \u00b6 \u521b\u5efaetree\u5bf9\u8c61\u5e76\u4f20\u5165\u5f85\u89e3\u6790\u5bf9\u8c61 \u4f20\u5165\u5f85\u89e3\u6790\u5bf9\u8c61\u4e3a\u672c\u5730\u6587\u4ef6 tree = etree.parse(filePath) \u4f20\u5165\u5f85\u89e3\u6790\u5bf9\u8c61\u4e3a\u7f51\u7edc\u8bf7\u6c42 tree = etree.HTML('page_text') \u5b9a\u4f4d\u6570\u636e\uff1a tree.xpath(xpath\u8868\u8fbe\u5f0f) \u5728XPath\u4e2d\u67097\u79cd\u8282\u70b9\uff1a\u5143\u7d20\u3001\u5c5e\u6027\u3001\u6587\u672c\u3001\u6587\u6863\u3001\u547d\u540d\u7a7a\u95f4\u3001\u5904\u7406\u6307\u4ee4\u3001\u6ce8\u91ca\u3002 \u5143\u7d20\u3001\u5c5e\u6027\u3001\u6587\u672c \u4e3a\u5e38\u7528\u8282\u70b9\u3002 < html > \u4e3a\u6587\u6863\u8282\u70b9 < li > \u5c0f\u7c73 </ li > \u4e3a\u5143\u7d20\u8282\u70b9 class='blank' \u4e3a\u5c5e\u6027\u8282\u70b9 <!-- \u8fd9\u91cc\u662f\u6ce8\u91ca --> \u4e3a\u6ce8\u91ca\u8282\u70b9 expression description nodeName \u9009\u62e9nodeName\u8282\u70b9\u7684\u6240\u6709\u5b50\u8282\u70b9 / \u4ece\u6839\u8282\u70b9\u6216/\u524d\u7684\u8282\u70b9\u5f00\u59cb\uff0c\u4e0d\u8de8\u5c42\u7ea7\u5339\u914d // \u4ece//\u524d\u7684\u8282\u70b9\u5f00\u59cb\uff0c\u8de8\u5c42\u7ea7\u5339\u914d . \u9009\u62e9\u5f53\u524d\u8282\u70b9 .. \u9009\u62e9\u5f53\u524d\u8282\u70b9\u7684\u7236\u8282\u70b9 @ \u5339\u914d\u5143\u7d20\u5c5e\u6027 * \u5339\u914d\u6240\u6709\u8282\u70b9 @* \u5339\u914d\u8282\u70b9\u6240\u6709\u5c5e\u6027 [] \u6309\u7d22\u5f15\u5b9a\u4f4d / \uff1a\u8868\u793a\u4ece\u6839\u8282\u70b9\u5f00\u59cb\u5b9a\u4f4d > / \u653e\u5728\u6700\u524d\u9762\u7684\u65f6\u5019\u8868\u793a\u6839\u8282\u70b9\uff0c\u4e0d\u662f\u653e\u5728\u6700\u524d\u9762\u7684\u65f6\u5019\u8868\u793a from lxml import etree with open ( './test.html' , 'r' , encoding = 'utf-8' ) as f : f_content = f . read () tree = etree . HTML ( f_content ) r = tree . xpath ( '/html/body/div/p' ) print ( r ) print ( type ( r )) -------------------------------------------------- xpath \u5728\u5339\u914d\u7684\u65f6\u5019\u662f\u8d2a\u5a6a\u7684 \uff0c \u793a\u4f8b\u4e2d\u6709\u4e24\u4e2a div \u4e0b\u90fd\u6709 p \uff0c \u6240\u4ee5\u5339\u914d\u5230\u4e865\u4e2a # Output: [ < Element p at 0x252e2de8780 > , < Element p at 0x252e2de87c0 > , < Element p at 0x252e2de8800 > , < Element p at 0x252e2de8840 > , < Element p at 0x252e2de8880 > ] < class ' list '> 2. // \uff1a\u8868\u793a\u5339\u914d\u591a\u7ea7 /a/b//c\uff0c\u5c31\u8868\u793a\u5339\u914d a \u6807\u7b7e\u4e0b\u7684 b \u6807\u7b7e\u4e0b\u6240\u6709c\u6807\u7b7e from lxml import etree with open ( './test.html' , 'r' , encoding = 'utf-8' ) as f : f_content = f . read () tree = etree . HTML ( f_content ) r = tree . xpath ( '/html//a' ) # \u7b49\u4ef7\u4e8e r = tree.xpath('//a') print ( r ) print ( type ( r )) -------------------------------------------------- html\u8282\u70b9\u4e0b\u603b\u5171\u67098\u4e2aa\u6807\u7b7e \uff0c \u6240\u4ee5\u5339\u914d\u52308\u4e2aelement\u5bf9\u8c61 # Output: [ < Element a at 0x1e5f55e9680 > , < Element a at 0x1e5f55e96c0 > , < Element a at 0x1e5f55e9700 > , < Element a at 0x1e5f55e9740 > , < Element a at 0x1e5f55e9780 > , < Element a at 0x1e5f55e9800 > , < Element a at 0x1e5f55e9840 > , < Element a at 0x1e5f55e9880 > ] < class ' list '> 3. @ \uff1a\u8868\u793a\u901a\u8fc7\u5c5e\u6027\u5b9a\u4f4d tag[@attrName=\"attrValue\"] @\u540e\u9762\u52a0\u4e0a\u5c5e\u6027\u540d\uff0c\u6bd4\u5982class\u3001id\u3001href\u3001src\u7b49\u7b49 from lxml import etree with open ( './test.html' , 'r' , encoding = 'utf-8' ) as f : f_content = f . read () tree = etree . HTML ( f_content ) r = tree . xpath ( '/html//div[@class=\"song\"]' ) print ( r ) print ( type ( r )) -------------------------------------------------- html\u8282\u70b9\u4e0b\u603b\u5171\u67098\u4e2aa\u6807\u7b7e \uff0c \u6240\u4ee5\u5339\u914d\u52308\u4e2aelement\u5bf9\u8c61 # Output: [ < Element div at 0x24d64839640 > ] < class ' list '> 4. [] \uff1a\u8868\u793a\u901a\u8fc7\u7d22\u5f15\u5b9a\u4f4d tag[index] \u8fd9\u91cc\u662f\u7d22\u5f15\u662f**\u4ece1\u5f00\u59cb\u7684** from lxml import etree with open ( './test.html' , 'r' , encoding = 'utf-8' ) as f : f_content = f . read () tree = etree . HTML ( f_content ) print ( tree . xpath ( '/html//div[@class=\"song\"]/p[1]' )) print ( tree . xpath ( '/html//div[@class=\"song\"]/p[1]/text()' )) print ( tree . xpath ( '/html//div[@class=\"song\"]/p[2]' )) print ( tree . xpath ( '/html//div[@class=\"song\"]/p[3]' )) -------------------------------------------------- \u8fd9\u91cc\u7684\u4e0b\u6807\u662f\u4ece1\u5f00\u59cb\u7684 # Output: [ < Element p at 0x1df3d4395c0 > ] [ '\u674e\u6e05\u7167' ] [ < Element p at 0x1df3d439580 > ] [ < Element p at 0x1df3d439600 > ] < class ' list '> 5. /text() \uff1a\u8fd4\u56de\u6807\u7b7e\u4e4b\u95f4\u7684\u6587\u672c\uff0c \u53d6\u6587\u672c tag/text() \uff1a\u83b7\u53d6tag\u4e0b**\u76f4\u7cfb**\u7684\u6587\u672c tag//text() \uff1a\u83b7\u53d6tag\u4e0b**\u76f4\u7cfb\u548c\u975e\u76f4\u7cfb**\u7684\u6587\u672c from lxml import etree with open ( './test.html' , 'r' , encoding = 'utf-8' ) as f : f_content = f . read () tree = etree . HTML ( f_content ) r1 = tree . xpath ( '/html//div[@class=\"song\"]/p[3]' ) r2 = tree . xpath ( '/html//div[@class=\"song\"]/p[3]/text()' ) r3 = tree . xpath ( '/html//div[@class=\"song\"]/p[3]/text()' )[ 0 ] print ( r1 ) print ( r2 ) print ( r3 ) -------------------------------------------------- # Output: [ < Element p at 0x1d4e4c29540 > ] [ '\u82cf\u8f7c' ] \u82cf\u8f7c < class ' list '> 5. /@attrName \uff1a\u8fd4\u56de\u6807\u7b7e\u7684attrName\u5c5e\u6027\u7684\u503c tag/@attrName \uff1a\u83b7\u53d6tag\u6807\u7b7e\u4e2d\u7684attrName\u5c5e\u6027\u7684\u503c from lxml import etree with open ( './test.html' , 'r' , encoding = 'utf-8' ) as f : f_content = f . read () tree = etree . HTML ( f_content ) r1 = tree . xpath ( '//div[@class=\"song\"]/a/@href' ) print ( r1 ) r2 = tree . xpath ( '//div[@class=\"song\"]/img/@src' ) print ( r2 ) -------------------------------------------------- # Output: [ 'https://www.song.com' , '' ] [ 'https://www.baidu.com/meinv.jpg' ] < class ' list '> 5. /@* \uff1a\u8fd4\u56de\u6807\u7b7e\u7684\u6240\u6709\u5c5e\u6027\u7684\u503c tag/@* \uff1a\u83b7\u53d6tag\u6807\u7b7e\u4e2d\u7684\u6240\u6709\u5c5e\u6027\u7684\u503c from lxml import etree with open ( './test.html' , 'r' , encoding = 'utf-8' ) as f : f_content = f . read () tree = etree . HTML ( f_content ) r1 = tree . xpath ( '//div[@class=\"song\"]/a[@target=\"_self\"]/@*' ) print ( r1 ) -------------------------------------------------- # Output: [ 'https://www.song.com' , '\u8d75\u5321\u80e4' , '_self' ] < class ' list '> \u6848\u4f8b \u00b6 \u4ece\u5f7c\u5cb8\u56fe\u7f51\u4e0b\u8f7d4K\u56fe\u4fdd\u5b58\u81f3\u672c\u5730 import os from lxml import etree import requests UA = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Safari/537.36 Edg/84.0.522.44' header = { 'User-Agent' : UA } path = './\u722c\u866b/4k' if not os . path . exists ( path ): os . mkdir ( path ) def get_url (): \"\"\" \u83b7\u53d6\u6240\u6709\u56fe\u7247\u5730\u5740 \"\"\" url = 'http://pic.netbian.com/4kmeinv/' index_text = requests . get ( url = url , headers = header ) . text tree = etree . HTML ( index_text ) a_list = tree . xpath ( '//div[@id=\"main\"]/div[3]/ul/li/a' ) # response.encoding = 'utf-8' # \u5904\u7406\u4e2d\u6587\u4e71\u7801\u65b9\u5f0f1\uff0c\u4e0d\u4e00\u5b9a\u6709\u6548 img_list = list () for a in a_list : src : str = 'http://pic.netbian.com' + a . xpath ( './@href' )[ 0 ] title : str = a . xpath ( './b/text()' )[ 0 ] + '.jpg' title = title . encode ( 'iso-8859-1' ) . decode ( 'gbk' ) # \u5904\u7406\u4e2d\u6587\u4e71\u7801\u65b9\u5f0f2 img_list . append (( title , src )) return img_list def download_img ( img_info ): \"\"\" \u4e0b\u8f7d\u56fe\u7247 \"\"\" img_content = requests . get ( url = img_info [ 1 ], headers = header ) . content filepath = os . path . join ( path , img_info [ 0 ]) with open ( filepath , 'wb' ) as f : f . write ( img_content ) def main (): img_list = get_url () for img_info in img_list : download_img ( img_info ) if __name__ == '__main__' : main ()","title":"\u805a\u7126\u722c\u866b"},{"location":"Python/Crawler/Python-Crawler-2-Focued-Crawler/#_1","text":"import os import requests import re # UA\u4f2a\u88c5 UA = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Safari/537.36 Edg/84.0.522.44' header = { 'User-Agent' : UA } # \u5b58\u50a8\u76ee\u5f55 folder = './qiushi' if not os . path . exists ( folder ): os . mkdir ( folder ) def main (): # \u5206\u9875\u5904\u7406 for i in range ( 1 , 3 ): url = f \"https://www.qiushibaike.com/imgrank/page/ { i } /\" # 1. \u722c\u53d6\u6574\u5f20\u9875\u9762 page_text = requests . get ( url = url , headers = header ) . text # 2. \u4f7f\u7528\u805a\u7126\u722c\u866b\u8fdb\u884c\u6570\u636e\u89e3\u6790 images = data_parse ( page_text ) length = len ( images ) # \u8fdb\u5ea6\u6761\u6240\u9700 for index , image in enumerate ( images ): # 3. \u53d1\u8d77\u8bf7\u6c42\u5e76\u83b7\u5f97\u6570\u636e image_content = requests . get ( url = image , headers = header ) . content # 4. \u6301\u4e45\u5316\u5b58\u50a8 image_name = image . split ( '/' )[ - 1 ] image_path = os . path . join ( folder , image_name ) with open ( image_path , 'wb' ) as f : f . write ( image_content ) # \u8fdb\u5ea6\u6253\u5370 print ( image_name + ' \u4e0b\u8f7d\u6210\u529f\uff01' ) print ( f ' { index } / { length } ' , end = ' \\r ' ) print ( str ( i ) + \"/ 2 page\" ) def data_parse ( page_text ): \"\"\" \u89e3\u6790\u51fa\u6bcf\u5f20\u56fe\u7247\u7684url \"\"\" # \u5206\u6790\u7f51\u9875\u540e\u6574\u7406\u51fa\u6b63\u5219\u8868\u8fbe\u5f0f ex = r '<div class=\"thumb\">.*?<img src=\"(.*?)\" alt.*?></div>' images = re . findall ( ex , page_text , re . S ) images = [ 'https:' + x for x in images ] # \u89e3\u6790\u51fa\u6765\u6ca1\u6709\u534f\u8bae\u5934\uff0c\u7ed9\u589e\u52a0\u4e0a return images if __name__ == \"__main__\" : main () -------------------------------------------------- # Output: K7EUFEUIV3QY37P1 . jpg \u4e0b\u8f7d\u6210\u529f \uff01 DFIAAL32X5J35JP2 . jpg \u4e0b\u8f7d\u6210\u529f \uff01 ... NXUA4X1CMQP22UPP . jpg \u4e0b\u8f7d\u6210\u529f \uff01 FQILIKXCVMUIRXL8 . jpg \u4e0b\u8f7d\u6210\u529f \uff01 1 / 2 page 95 GRCYEUZANQ361J . jpg \u4e0b\u8f7d\u6210\u529f \uff01 2 SXBFKSSK3JD3G2M . jpg \u4e0b\u8f7d\u6210\u529f \uff01 ... 5 YTNS4JH0PLZAO58 . jpg \u4e0b\u8f7d\u6210\u529f \uff01 59 CN77YAL198SM6M . jpg \u4e0b\u8f7d\u6210\u529f \uff01 2 / 2 page","title":"\u6b63\u5219\u8868\u8fbe\u5f0f\u722c\u53d6"},{"location":"Python/Crawler/Python-Crawler-2-Focued-Crawler/#_2","text":"<!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > \u6d4b\u8bd5bs4 </ title > </ head > < body > < div > < p > \u767e\u91cc\u5b88\u7ea6 </ p > </ div > < div class = \"song\" > < p > \u674e\u6e05\u7167 </ p > < p > \u738b\u5b89\u77f3 </ p > < p > \u82cf\u8f7c </ p > < p > \u67f3\u5b97\u5143 </ p > < a href = \"https://www.song.com\" title = \"\u8d75\u5321\u80e4\" target = \"_self\" > < span > this is span </ span > \u5b8b\u671d\u662f\u6700\u5f3a\u5927\u7684\u738b\u671d\uff0c\u4e0d\u662f\u519b\u961f\u7684\u5f3a\u5927\uff0c\u800c\u662f\u7ecf\u6d4e\u5f88\u5f3a\u5927\uff0c\u56fd\u6c11\u90fd\u5f88\u6709\u94b1 </ a > < a href = \"\" class = \"du\" > \u603b\u4e3a\u6d6e\u4e91\u80fd\u907f\u65e5\uff0c\u957f\u5b89\u4e0d\u89c1\u4f7f\u4eba\u6101 </ a > < img src = \"https://www.baidu.com/meinv.jpg\" alt = \"\" > </ div > < div class = \"tang\" > < ul > < li >< a href = \"https://www.baidu.com\" title = \"qing\" > \u6e05\u660e\u65f6\u8282\u96e8\u7eb7\u7eb7\uff0c\u8def\u4e0a\u884c\u4eba\u6b32\u65ad\u9b42\u3002\u501f\u95ee\u9152\u5bb6\u4f55\u5904\u6709\uff0c\u7267\u7ae5\u9065\u6307\u674f\u82b1\u6751\u3002 </ a ></ li > < li >< a href = \"https://www.163.com\" title = \"qin\" > \u79e6\u65f6\u660e\u6708\u6c49\u65f6\u5149\uff0c\u4e07\u91cc\u957f\u5f81\u4eba\u672a\u8fd8\u3002\u4f46\u4f7f\u9f99\u57ce\u98de\u5c06\u5728\uff0c\u4e0d\u6559\u80e1\u9a6c\u5ea6\u9634\u5c71\u3002 </ a ></ li > < li >< a href = \"https://www.126.com\" alt = \"qi\" > \u5c90\u738b\u5b85\u91cc\u5bfb\u5e38\u89c1\uff0c\u5d14\u4e45\u5802\u524d\u51e0\u5ea6\u95fb\u3002\u6b63\u662f\u6c5f\u5357\u597d\u98ce\u666f\uff0c\u843d\u82b1\u65f6\u8282\u53c8\u9022\u541b\u3002 </ a ></ li > < li >< a href = \"https://www.sina.com\" class = \"du\" > \u675c\u752b </ a ></ li > < li >< a href = \"https://www.dudu.com\" class = \"du\" > \u675c\u7267 </ a ></ li > < li >< b > \u675c\u5c0f\u6708 </ b ></ li > < li >< i > \u5ea6\u871c\u6708 </ i ></ li > < li >< a href = \"https://www.haha.com\" id = \"feng\" > \u51e4\u51f0\u53f0\u4e0a\u51e4\u51f0\u6e38\uff0c\u51e4\u53bb\u53f0\u7a7a\u6c5f\u81ea\u6d41\u3002\u5434\u5bab\u82b1\u8349\u57cb\u5e7d\u5f84\uff0c\u664b\u4ee3\u8863\u51a0\u6210\u53e4\u4e18\u3002 </ a ></ li > </ ul > </ div > </ body > </ html > \u4ee5\u4e0b\u722c\u866b\u793a\u4f8b\u5747\u4ee5\u6b64\u7f51\u9875\u793a\u4f8b\u4e3a\u57fa\u7840 \u6709\u70b9\u4e11\uff0c\u5c06\u5c31\u4e00\u4e0b\u3002","title":"\u793a\u4f8b\u7f51\u9875"},{"location":"Python/Crawler/Python-Crawler-2-Focued-Crawler/#bs4","text":"","title":"bs4\u722c\u53d6"},{"location":"Python/Crawler/Python-Crawler-2-Focued-Crawler/#_3","text":"win \u4e0b\uff1a >_ pip install bs4 >_ pip install lxml Linux \u4e0b\uff1a >_ pip install Beautifulsoup4","title":"\u5b89\u88c5"},{"location":"Python/Crawler/Python-Crawler-2-Focued-Crawler/#_4","text":"from bs4 import BeautifulSoup","title":"\u5bfc\u5165"},{"location":"Python/Crawler/Python-Crawler-2-Focued-Crawler/#_5","text":"\u521b\u5efabs\u5bf9\u8c61\u5e76\u4f20\u5165\u5f85\u89e3\u6790\u5bf9\u8c61 \u4f20\u5165\u5f85\u89e3\u6790\u5bf9\u8c61\u4e3a\u672c\u5730\u6587\u4ef6 from bs4 import BeautifulSoup with open ( './bs_test.html' , 'r' , encoding = 'utf-8' ) as f : bs = BeautifulSoup ( f , 'lxml' ) # \u521b\u5efabs\u5bf9\u8c61 \u4f20\u5165\u5f85\u89e3\u6790\u5bf9\u8c61\u4e3a\u7f51\u7edc\u8bf7\u6c42 from bs4 import BeautifulSoup import requests url = \"https://www.baidu.com\" page_text = requests . get ( url = url ) . text bs = BeautifulSoup ( page_text , 'lxml' ) # \u521b\u5efabs\u5bf9\u8c61","title":"\u4f7f\u7528"},{"location":"Python/Crawler/Python-Crawler-2-Focued-Crawler/#_6","text":"\u65b9\u6cd5 \u7528 \u8fd4\u503c tagName \u8fd4\u56de\u9996tagName\u6807\u7b7e bs4.element.Tag find('tagName') \u8fd4\u56de\u9996tagName\u6807\u7b7e bs4.element.Tag find('tagName', class_/id/attrName='value') \u8fd4\u56de\u9996\u5c5e\u6027\u4e3avalue\u7684tagName\u6807\u7b7e bs4.element.Tag find_all('tagName') \u8fd4\u56de\u6240\u7b26\u5408\u8981\u6c42\u7684\u6807\u7b7e bs4.element.ResultSet select(['selector' + ]'tagName') \u901a\u8fc7CS\u9009\u62e9\u5668+\u6807\u7b7e\u540d\u5b9a\u4f4d\u6807\u7b7e,\u8fd4\u56de\u591a\u4e2a bs4.element.ResultSet select_one(['selector' + ]'tagName') \u901a\u8fc7CS\u9009\u62e9\u5668+\u6807\u7b7e\u540d\u5b9a\u4f4d\u6807\u7b7e,\u8fd4\u56de\u4e00\u4e2a bs4.element.Tag","title":"\u5b9a\u4f4d\u6570\u636e"},{"location":"Python/Crawler/Python-Crawler-2-Focued-Crawler/#bstagname","text":"bs.tagName \uff1a\u8fd4\u56de\u6587\u6863\u4e2d**\u7b2c\u4e00\u6b21**\u51fa\u73b0tagName\u5bf9\u5e94\u7684\u6807\u7b7e with open ( './bs_test.html' , 'r' , encoding = 'utf-8' ) as f : bs = BeautifulSoup ( f , 'lxml' ) # \u521b\u5efabs\u5bf9\u8c61 tag_a = bs . a # \u5b9a\u4f4d\u6570\u636e print ( tag_a ) print ( type ( tag_a )) # <class 'bs4.element.Tag'> -------------------------------------------------- # Output: < a href = \"https://www.song.com\" target = \"_self\" title = \"\u8d75\u5321\u80e4\" > < span > this is span </ span > \u5b8b\u671d\u662f\u6700\u5f3a\u5927\u7684\u738b\u671d \uff0c \u4e0d\u662f\u519b\u961f\u7684\u5f3a\u5927 \uff0c \u800c\u662f\u7ecf\u6d4e\u5f88\u5f3a\u5927 \uff0c \u56fd\u6c11\u90fd\u5f88\u6709\u94b1 </ a > < class ' bs4 . element . Tag '>","title":"bs.tagName"},{"location":"Python/Crawler/Python-Crawler-2-Focued-Crawler/#bsfind","text":"bs.find() \uff1a find('tagName') \uff1a\u7b49\u540c\u4e8e bs.tagName with open ( './bs_test.html' , 'r' , encoding = 'utf-8' ) as f : bs = BeautifulSoup ( f , 'lxml' ) # \u521b\u5efabs\u5bf9\u8c61 tag_div = bs . find ( 'div' ) # \u5b9a\u4f4d\u6570\u636e print ( tag_div ) print ( type ( tag_div )) # <class 'bs4.element.Tag'> -------------------------------------------------- # Output: < div > < p > \u767e\u91cc\u5b88\u7ea6 </ p > </ div > < class ' bs4 . element . Tag '> find('tagName', class_/is/attrName='value') \uff1a\u901a\u8fc7\u9650\u5b9a\u5c5e\u6027\u6765\u5b9a\u4f4d\u6807\u7b7e with open ( './bs_test.html' , 'r' , encoding = 'utf-8' ) as f : bs = BeautifulSoup ( f , 'lxml' ) # \u521b\u5efabs\u5bf9\u8c61 tag_a = bs . find ( 'a' , class_ = 'du' ) # \u5b9a\u4f4d\u6570\u636e print ( tag_a ) print ( type ( tag_a )) # <class 'bs4.element.Tag'> -------------------------------------------------- # Output: < a class = \"du\" href = \"\" > \u603b\u4e3a\u6d6e\u4e91\u80fd\u907f\u65e5 \uff0c \u957f\u5b89\u4e0d\u89c1\u4f7f\u4eba\u6101 </ a > < class ' bs4 . element . Tag '> bs.find_all('tagName') \uff1a\u8fd4\u56de\u590d\u5408\u8981\u6c42\u7684\u6240\u6709\u6807\u7b7e\uff08\u96c6\u5408\uff09 with open ( './bs_test.html' , 'r' , encoding = 'utf-8' ) as f : bs = BeautifulSoup ( f , 'lxml' ) # \u521b\u5efabs\u5bf9\u8c61 tag_p = bs . find_all ( 'p' ) # \u5b9a\u4f4d\u6570\u636e print ( tag_p ) print ( type ( tag_p )) # <class 'bs4.element.ResultSet'> -------------------------------------------------- # Output: [ < p > \u767e\u91cc\u5b88\u7ea6 </ p > , < p > \u674e\u6e05\u7167 </ p > , < p > \u738b\u5b89\u77f3 </ p > , < p > \u82cf\u8f7c </ p > , < p > \u67f3\u5b97\u5143 </ p > ]","title":"bs.find()"},{"location":"Python/Crawler/Python-Crawler-2-Focued-Crawler/#bsselect","text":"bs.select('selector' + 'tagName') \uff1a\u53ef\u4ee5\u901a\u8fc7**CSS\u62e9\u5668+\u6807\u7b7e\u540d**\u5b9a\u4f4d\uff0c\u5305\u62ec\u5c42\u7ea7\u9009\u62e9\u5668\u3001\u6807\u7b7e\u9009\u62e9\u5668\u7b49 with open ( './bs_test.html' , 'r' , encoding = 'utf-8' ) as f : bs = BeautifulSoup ( f , 'lxml' ) # \u521b\u5efabs\u5bf9\u8c61 tag_div = bs . select ( '#feng' ) # \u5b9a\u4f4d\u6570\u636e print ( tag_div ) print ( type ( tag_div )) # <class 'bs4.element.ResultSet'> -------------------------------------------------- # Output: [ < a href = \"https://www.haha.com\" id = \"feng\" > \u51e4\u51f0\u53f0\u4e0a\u51e4\u51f0\u6e38 \uff0c \u51e4\u53bb\u53f0\u7a7a\u6c5f\u81ea\u6d41 \u3002 \u5434\u5bab\u82b1\u8349\u57cb\u5e7d\u5f84 \uff0c \u664b\u4ee3\u8863\u51a0\u6210\u53e4\u4e18 \u3002 </ a > ] < class ' bs4 . element . ResultSet '> with open ( './bs_test.html' , 'r' , encoding = 'utf-8' ) as f : bs = BeautifulSoup ( f , 'lxml' ) # \u521b\u5efabs\u5bf9\u8c61 tag1_a = bs . select ( '.tang > ul > li > a' ) # \u5b9a\u4f4d\u6570\u636e tag2_a = bs . select ( '.tang >ul a' ) # \u5b9a\u4f4d\u6570\u636e print ( tag1_a ) print ( tag2_a ) print ( type ( tag1_a )) # <class 'bs4.element.ResultSet'> -------------------------------------------------- # Output: [ < a href = \"https://www.baidu.com\" title = \"qing\" > \u6e05\u660e\u65f6\u8282\u96e8\u7eb7\u7eb7 \uff0c \u8def\u4e0a\u884c\u4eba\u6b32\u65ad\u9b42 \u3002 \u501f\u95ee\u9152\u5bb6\u4f55\u5904\u6709 \uff0c \u7267\u7ae5\u9065\u6307\u674f\u82b1\u6751 \u3002 </ a > , < a href = \"https://www.163.com\" title = \"qin\" > \u79e6\u65f6\u660e\u6708\u6c49\u65f6\u5149 \uff0c \u4e07\u91cc\u957f\u5f81\u4eba\u672a\u8fd8 \u3002 \u4f46\u4f7f\u9f99\u57ce\u98de\u5c06\u5728 \uff0c \u4e0d\u6559\u80e1\u9a6c\u5ea6\u9634\u5c71 \u3002 </ a > , < a alt = \"qi\" href = \"https://www.126.com\" > \u5c90\u738b\u5b85\u91cc\u5bfb\u5e38\u89c1 \uff0c \u5d14\u4e45\u5802\u524d\u51e0\u5ea6\u95fb \u3002 \u6b63\u662f\u6c5f\u5357\u597d\u98ce\u666f \uff0c \u843d\u82b1\u65f6\u8282\u53c8\u9022\u541b \u3002 </ a > , < a class = \"du\" href = \"https://www.sina.com\" > \u675c\u752b </ a > , < a class = \"du\" href = \"https://www.dudu.com\" > \u675c\u7267 </ a > , < a href = \"https://www.haha.com\" id = \"feng\" > \u51e4\u51f0\u53f0\u4e0a\u51e4\u51f0\u6e38 \uff0c \u51e4\u53bb\u53f0\u7a7a\u6c5f\u81ea\u6d41 \u3002 \u5434\u5bab\u82b1\u8349\u57cb\u5e7d\u5f84 \uff0c \u664b\u4ee3\u8863\u51a0\u6210\u53e4\u4e18 \u3002 </ a > ] [ < a href = \"https://www.baidu.com\" title = \"qing\" > \u6e05\u660e\u65f6\u8282\u96e8\u7eb7\u7eb7 \uff0c \u8def\u4e0a\u884c\u4eba\u6b32\u65ad\u9b42 \u3002 \u501f\u95ee\u9152\u5bb6\u4f55\u5904\u6709 \uff0c \u7267\u7ae5\u9065\u6307\u674f\u82b1\u6751 \u3002 </ a > , < a href = \"https://www.163.com\" title = \"qin\" > \u79e6\u65f6\u660e\u6708\u6c49\u65f6\u5149 \uff0c \u4e07\u91cc\u957f\u5f81\u4eba\u672a\u8fd8 \u3002 \u4f46\u4f7f\u9f99\u57ce\u98de\u5c06\u5728 \uff0c \u4e0d\u6559\u80e1\u9a6c\u5ea6\u9634\u5c71 \u3002 </ a > , < a alt = \"qi\" href = \"https://www.126.com\" > \u5c90\u738b\u5b85\u91cc\u5bfb\u5e38\u89c1 \uff0c \u5d14\u4e45\u5802\u524d\u51e0\u5ea6\u95fb \u3002 \u6b63\u662f\u6c5f\u5357\u597d\u98ce\u666f \uff0c \u843d\u82b1\u65f6\u8282\u53c8\u9022\u541b \u3002 </ a > , < a class = \"du\" href = \"https://www.sina.com\" > \u675c\u752b </ a > , < a class = \"du\" href = \"https://www.dudu.com\" > \u675c\u7267 </ a > , < a href = \"https://www.haha.com\" id = \"feng\" > \u51e4\u51f0\u53f0\u4e0a\u51e4\u51f0\u6e38 \uff0c \u51e4\u53bb\u53f0\u7a7a\u6c5f\u81ea\u6d41 \u3002 \u5434\u5bab\u82b1\u8349\u57cb\u5e7d\u5f84 \uff0c \u664b\u4ee3\u8863\u51a0\u6210\u53e4\u4e18 \u3002 </ a > ] < class ' bs4 . element . ResultSet '> with open ( './bs_test.html' , 'r' , encoding = 'utf-8' ) as f : bs = BeautifulSoup ( f , 'lxml' ) # \u521b\u5efabs\u5bf9\u8c61 tag_div = bs . select_one ( '.du' ) # \u5b9a\u4f4d\u6570\u636e print ( tag_div ) print ( type ( tag_div )) # <class 'bs4.element.Tag'> -------------------------------------------------- # Output: < a class = \"du\" href = \"\" > \u603b\u4e3a\u6d6e\u4e91\u80fd\u907f\u65e5 \uff0c \u957f\u5b89\u4e0d\u89c1\u4f7f\u4eba\u6101 </ a > < class ' bs4 . element . Tag '>","title":"bs.select()"},{"location":"Python/Crawler/Python-Crawler-2-Focued-Crawler/#_7","text":"\u65b9\u6cd5 \u7528 \u8fd4\u503c .text \u8fd4\u56de\u6807\u7b7e\u4e0b\u6240\u6709**\u76f4\u7cfb\u548c\u975e\u76f4\u7cfb\u6807\u7b7e**\u7684\u6240\u6709\u672c str .get_text() \u8fd4\u56de\u6807\u7b7e\u4e0b\u6240\u6709**\u76f4\u7cfb\u548c\u975e\u76f4\u7cfb\u6807\u7b7e**\u7684\u6240\u6709\u672c str .string \u8fd4\u56de\u6807\u7b7e\u4e0b\u6240\u6709**\u76f4\u7cfb\u6807\u7b7e**\u7684\u6240\u6709\u672c bs4.element.NavigableString","title":"\u89e3\u6790\u6570\u636e"},{"location":"Python/Crawler/Python-Crawler-2-Focued-Crawler/#_8","text":"bs.tagName.text/string/get_text() \uff1a\u83b7\u53d6\u6807\u7b7e\u4e4b\u95f4\u7684*\u6240\u6709\u6587\u672c** text/get_text() \uff1a\u53ef\u4ee5\u83b7\u53d6\u6807\u7b7e\u4e0b**\u76f4\u7cfb\u548c\u975e\u76f4\u7cfb**\u7684\u6240\u6709\u6587\u672c with open ( './bs_test.html' , 'r' , encoding = 'utf-8' ) as f : bs = BeautifulSoup ( f , 'lxml' ) # \u521b\u5efabs\u5bf9\u8c61 txt_li = bs . find ( 'li' ) . text print ( txt_li ) print ( type ( txt_li )) # <class 'str'> -------------------------------------------------- # Output: \u6e05\u660e\u65f6\u8282\u96e8\u7eb7\u7eb7 \uff0c \u8def\u4e0a\u884c\u4eba\u6b32\u65ad\u9b42 \u3002 \u501f\u95ee\u9152\u5bb6\u4f55\u5904\u6709 \uff0c \u7267\u7ae5\u9065\u6307\u674f\u82b1\u6751 \u3002 < class ' str '> with open ( './bs_test.html' , 'r' , encoding = 'utf-8' ) as f : bs = BeautifulSoup ( f , 'lxml' ) # \u521b\u5efabs\u5bf9\u8c61 txt_li = bs . find ( 'li' ) . get_text () print ( txt_li ) print ( type ( txt_li )) # <class 'str'> -------------------------------------------------- # Output: \u6e05\u660e\u65f6\u8282\u96e8\u7eb7\u7eb7 \uff0c \u8def\u4e0a\u884c\u4eba\u6b32\u65ad\u9b42 \u3002 \u501f\u95ee\u9152\u5bb6\u4f55\u5904\u6709 \uff0c \u7267\u7ae5\u9065\u6307\u674f\u82b1\u6751 \u3002 < class ' str '> string \uff1a\u53ea\u80fd\u83b7\u53d6\u6807\u7b7e\u4e0b**\u76f4\u7cfb**\u7684\u6587\u672c\uff0c\u6ca1\u6709\u8fd4\u56de None with open ( './bs_test.html' , 'r' , encoding = 'utf-8' ) as f : bs = BeautifulSoup ( f , 'lxml' ) # \u521b\u5efabs\u5bf9\u8c61 txt_li = bs . find ( 'li' ) . string print ( txt_li ) print ( type ( txt_li )) # <class 'bs4.element.NavigableString'> -------------------------------------------------- # Output: \u6e05\u660e\u65f6\u8282\u96e8\u7eb7\u7eb7 \uff0c \u8def\u4e0a\u884c\u4eba\u6b32\u65ad\u9b42 \u3002 \u501f\u95ee\u9152\u5bb6\u4f55\u5904\u6709 \uff0c \u7267\u7ae5\u9065\u6307\u674f\u82b1\u6751 \u3002 < class ' bs4 . element . NavigableString '>","title":"\u83b7\u53d6\u6587\u672c"},{"location":"Python/Crawler/Python-Crawler-2-Focued-Crawler/#_9","text":"bs.tagName['attrName'] \uff1a\u83b7\u53d6\u6807\u7b7e\u4e2d\u7684**\u5c5e\u6027\u5185\u5bb9** with open ( './bs_test.html' , 'r' , encoding = 'utf-8' ) as f : bs = BeautifulSoup ( f , 'lxml' ) # \u521b\u5efabs\u5bf9\u8c61 txt_href = bs . find ( 'a' )[ 'href' ] print ( txt_href ) print ( type ( txt_href )) # <class 'str'> -------------------------------------------------- # Output: https : // www . song . com < class ' str '>","title":"\u83b7\u53d6\u5c5e\u6027"},{"location":"Python/Crawler/Python-Crawler-2-Focued-Crawler/#_10","text":"\u4ece\u8bd7\u8bcd\u540d\u53e5\u7f51\u4e0b\u8f7d\u4e00\u6574\u90e8\u300a\u8bba\u8bed\u300b import time import requests import os from bs4 import BeautifulSoup UA = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Safari/537.36 Edg/84.0.522.44' header = { 'User-Agent' : UA } folder = '. \\\\ \u722c\u866b \\\\ \u8bba\u8bed' if not os . path . exists ( folder ): os . mkdir ( folder ) def req_catalog ( url ): \"\"\" \u8bf7\u6c42\u76ee\u5f55\u5217\u8868 \"\"\" return requests . get ( url = url , headers = header ) . text def catalog_parse ( res_text ): \"\"\" \u89e3\u6790\u76ee\u5f55\u5217\u8868 \"\"\" bs = BeautifulSoup ( res_text , 'lxml' ) links = bs . select ( '.book-mulu > ul > li > a' ) catalog_list = [[ x . string , x [ 'href' ]] for x in links ] return catalog_list def download_content ( catalog_list ): \"\"\" \u8bf7\u6c42\u5185\u5bb9\u9875 \"\"\" url = 'https://www.shicimingju.com' length = len ( catalog_list ) for index , elem in enumerate ( catalog_list ): # \u8bf7\u6c42\u6570\u636e content_text = requests . get ( url = url + elem [ 1 ], headers = header ) . text # \u89e3\u6790\u6570\u636e content = contents_parse ( content_text ) # \u6301\u4e45\u5316\u5b58\u50a8 filename = str ( index + 1 ) + '-' + elem [ 0 ] + '.txt' filepath = os . path . join ( folder , filename ) with open ( filepath , 'w' , encoding = 'utf-8' ) as f : f . write ( content ) print ( \"\u5df2\u4e0b\u8f7d\uff1a\" + str ( index + 1 ) + \" / \" + str ( length ), end = \" \\r \" ) return 1 def contents_parse ( page_text ): \"\"\" \u89e3\u6790\u5185\u5bb9 \"\"\" bs = BeautifulSoup ( page_text , 'lxml' ) contents = bs . select ( '.chapter_content > p' ) # \u53d6\u51fa\u6240\u6709p\u6807\u7b7e texts = [ x . string for x in contents ] # \u53d6\u51fa\u5185\u5bb9\uff0c\u8fc7\u6ee4\u6389P\u6807\u7b7e content = '' for i in texts : content += str ( i ) return content def main (): url = \"https://www.shicimingju.com/book/lunyu.html\" catalog_list = list () try : catalog_text = req_catalog ( url ) catalog_list = catalog_parse ( catalog_text ) print ( \"\u4e0b\u8f7d\u6210\u529f\uff01\" ) if download_content ( catalog_list ) else print ( \"\u4e0b\u8f7d\u5931\u8d25\" ) except TimeoutError : print ( \"TimeoutError \\n \" ) time . sleep ( 2 ) print ( \"\u4e0b\u8f7d\u6210\u529f\uff01\" ) if download_content ( catalog_list ) else print ( \"\u4e0b\u8f7d\u5931\u8d25\" ) except Exception : print ( \"Exception \\n \" ) if __name__ == '__main__' : main ()","title":"\u6848\u4f8b"},{"location":"Python/Crawler/Python-Crawler-2-Focued-Crawler/#xpath","text":"\u6700\u5e38\u7528\u3001\u901a\u7528\u6027\u6700\u5f3a\u7684\uff0c\u6700\u4fbf\u6377\u9ad8\u6548\u7684\u4e00\u79cd\u89e3\u6790\u65b9\u5f0f\u3002","title":"xpath\u722c\u53d6"},{"location":"Python/Crawler/Python-Crawler-2-Focued-Crawler/#_11","text":"\u5b9e\u4f8b\u5316\u4e00\u4e2aetree\u5bf9\u8c61\uff0c\u5e76\u4e14\u9700\u8981\u5c06\u88ab\u89e3\u6790\u7684\u9875\u9762\u6e90\u7801\u6570\u636e\u52a0\u8f7d\u5230\u8be5\u5bf9\u8c61\u4e2d\u3002 \u901a\u8fc7\u8c03\u7528etree\u5bf9\u8c61\u4e2d\u7684xpath\u65b9\u6cd5\u7ed3\u5408\u7740xpath\u8868\u8fbe\u5f0f\u5b9e\u73b0\u6807\u7b7e\u7684\u5b9a\u4f4d\u548c\u5185\u5bb9\u7684\u6355\u83b7 xpath\u5b9a\u4f4d\u5230\u6570\u636e\u540e\u8fd4\u56de\u7684\u4e0d\u662f\u6570\u636e\u7684\u5185\u5bb9\uff0c\u800c\u5df2\u4e00\u4e2a\u5217\u8868\uff0c\u91cc\u9762\u653e\u7f6e\u4e86\u89e3\u6790\u51fa\u6765\u7684**Element\u5bf9\u8c61**","title":"\u89e3\u6790\u6b65\u9aa4"},{"location":"Python/Crawler/Python-Crawler-2-Focued-Crawler/#_12","text":">_: pip install lxml","title":"\u5b89\u88c5"},{"location":"Python/Crawler/Python-Crawler-2-Focued-Crawler/#_13","text":"from lxml import etree","title":"\u5bfc\u5165"},{"location":"Python/Crawler/Python-Crawler-2-Focued-Crawler/#_14","text":"\u521b\u5efaetree\u5bf9\u8c61\u5e76\u4f20\u5165\u5f85\u89e3\u6790\u5bf9\u8c61 \u4f20\u5165\u5f85\u89e3\u6790\u5bf9\u8c61\u4e3a\u672c\u5730\u6587\u4ef6 tree = etree.parse(filePath) \u4f20\u5165\u5f85\u89e3\u6790\u5bf9\u8c61\u4e3a\u7f51\u7edc\u8bf7\u6c42 tree = etree.HTML('page_text') \u5b9a\u4f4d\u6570\u636e\uff1a tree.xpath(xpath\u8868\u8fbe\u5f0f) \u5728XPath\u4e2d\u67097\u79cd\u8282\u70b9\uff1a\u5143\u7d20\u3001\u5c5e\u6027\u3001\u6587\u672c\u3001\u6587\u6863\u3001\u547d\u540d\u7a7a\u95f4\u3001\u5904\u7406\u6307\u4ee4\u3001\u6ce8\u91ca\u3002 \u5143\u7d20\u3001\u5c5e\u6027\u3001\u6587\u672c \u4e3a\u5e38\u7528\u8282\u70b9\u3002 < html > \u4e3a\u6587\u6863\u8282\u70b9 < li > \u5c0f\u7c73 </ li > \u4e3a\u5143\u7d20\u8282\u70b9 class='blank' \u4e3a\u5c5e\u6027\u8282\u70b9 <!-- \u8fd9\u91cc\u662f\u6ce8\u91ca --> \u4e3a\u6ce8\u91ca\u8282\u70b9 expression description nodeName \u9009\u62e9nodeName\u8282\u70b9\u7684\u6240\u6709\u5b50\u8282\u70b9 / \u4ece\u6839\u8282\u70b9\u6216/\u524d\u7684\u8282\u70b9\u5f00\u59cb\uff0c\u4e0d\u8de8\u5c42\u7ea7\u5339\u914d // \u4ece//\u524d\u7684\u8282\u70b9\u5f00\u59cb\uff0c\u8de8\u5c42\u7ea7\u5339\u914d . \u9009\u62e9\u5f53\u524d\u8282\u70b9 .. \u9009\u62e9\u5f53\u524d\u8282\u70b9\u7684\u7236\u8282\u70b9 @ \u5339\u914d\u5143\u7d20\u5c5e\u6027 * \u5339\u914d\u6240\u6709\u8282\u70b9 @* \u5339\u914d\u8282\u70b9\u6240\u6709\u5c5e\u6027 [] \u6309\u7d22\u5f15\u5b9a\u4f4d / \uff1a\u8868\u793a\u4ece\u6839\u8282\u70b9\u5f00\u59cb\u5b9a\u4f4d > / \u653e\u5728\u6700\u524d\u9762\u7684\u65f6\u5019\u8868\u793a\u6839\u8282\u70b9\uff0c\u4e0d\u662f\u653e\u5728\u6700\u524d\u9762\u7684\u65f6\u5019\u8868\u793a from lxml import etree with open ( './test.html' , 'r' , encoding = 'utf-8' ) as f : f_content = f . read () tree = etree . HTML ( f_content ) r = tree . xpath ( '/html/body/div/p' ) print ( r ) print ( type ( r )) -------------------------------------------------- xpath \u5728\u5339\u914d\u7684\u65f6\u5019\u662f\u8d2a\u5a6a\u7684 \uff0c \u793a\u4f8b\u4e2d\u6709\u4e24\u4e2a div \u4e0b\u90fd\u6709 p \uff0c \u6240\u4ee5\u5339\u914d\u5230\u4e865\u4e2a # Output: [ < Element p at 0x252e2de8780 > , < Element p at 0x252e2de87c0 > , < Element p at 0x252e2de8800 > , < Element p at 0x252e2de8840 > , < Element p at 0x252e2de8880 > ] < class ' list '> 2. // \uff1a\u8868\u793a\u5339\u914d\u591a\u7ea7 /a/b//c\uff0c\u5c31\u8868\u793a\u5339\u914d a \u6807\u7b7e\u4e0b\u7684 b \u6807\u7b7e\u4e0b\u6240\u6709c\u6807\u7b7e from lxml import etree with open ( './test.html' , 'r' , encoding = 'utf-8' ) as f : f_content = f . read () tree = etree . HTML ( f_content ) r = tree . xpath ( '/html//a' ) # \u7b49\u4ef7\u4e8e r = tree.xpath('//a') print ( r ) print ( type ( r )) -------------------------------------------------- html\u8282\u70b9\u4e0b\u603b\u5171\u67098\u4e2aa\u6807\u7b7e \uff0c \u6240\u4ee5\u5339\u914d\u52308\u4e2aelement\u5bf9\u8c61 # Output: [ < Element a at 0x1e5f55e9680 > , < Element a at 0x1e5f55e96c0 > , < Element a at 0x1e5f55e9700 > , < Element a at 0x1e5f55e9740 > , < Element a at 0x1e5f55e9780 > , < Element a at 0x1e5f55e9800 > , < Element a at 0x1e5f55e9840 > , < Element a at 0x1e5f55e9880 > ] < class ' list '> 3. @ \uff1a\u8868\u793a\u901a\u8fc7\u5c5e\u6027\u5b9a\u4f4d tag[@attrName=\"attrValue\"] @\u540e\u9762\u52a0\u4e0a\u5c5e\u6027\u540d\uff0c\u6bd4\u5982class\u3001id\u3001href\u3001src\u7b49\u7b49 from lxml import etree with open ( './test.html' , 'r' , encoding = 'utf-8' ) as f : f_content = f . read () tree = etree . HTML ( f_content ) r = tree . xpath ( '/html//div[@class=\"song\"]' ) print ( r ) print ( type ( r )) -------------------------------------------------- html\u8282\u70b9\u4e0b\u603b\u5171\u67098\u4e2aa\u6807\u7b7e \uff0c \u6240\u4ee5\u5339\u914d\u52308\u4e2aelement\u5bf9\u8c61 # Output: [ < Element div at 0x24d64839640 > ] < class ' list '> 4. [] \uff1a\u8868\u793a\u901a\u8fc7\u7d22\u5f15\u5b9a\u4f4d tag[index] \u8fd9\u91cc\u662f\u7d22\u5f15\u662f**\u4ece1\u5f00\u59cb\u7684** from lxml import etree with open ( './test.html' , 'r' , encoding = 'utf-8' ) as f : f_content = f . read () tree = etree . HTML ( f_content ) print ( tree . xpath ( '/html//div[@class=\"song\"]/p[1]' )) print ( tree . xpath ( '/html//div[@class=\"song\"]/p[1]/text()' )) print ( tree . xpath ( '/html//div[@class=\"song\"]/p[2]' )) print ( tree . xpath ( '/html//div[@class=\"song\"]/p[3]' )) -------------------------------------------------- \u8fd9\u91cc\u7684\u4e0b\u6807\u662f\u4ece1\u5f00\u59cb\u7684 # Output: [ < Element p at 0x1df3d4395c0 > ] [ '\u674e\u6e05\u7167' ] [ < Element p at 0x1df3d439580 > ] [ < Element p at 0x1df3d439600 > ] < class ' list '> 5. /text() \uff1a\u8fd4\u56de\u6807\u7b7e\u4e4b\u95f4\u7684\u6587\u672c\uff0c \u53d6\u6587\u672c tag/text() \uff1a\u83b7\u53d6tag\u4e0b**\u76f4\u7cfb**\u7684\u6587\u672c tag//text() \uff1a\u83b7\u53d6tag\u4e0b**\u76f4\u7cfb\u548c\u975e\u76f4\u7cfb**\u7684\u6587\u672c from lxml import etree with open ( './test.html' , 'r' , encoding = 'utf-8' ) as f : f_content = f . read () tree = etree . HTML ( f_content ) r1 = tree . xpath ( '/html//div[@class=\"song\"]/p[3]' ) r2 = tree . xpath ( '/html//div[@class=\"song\"]/p[3]/text()' ) r3 = tree . xpath ( '/html//div[@class=\"song\"]/p[3]/text()' )[ 0 ] print ( r1 ) print ( r2 ) print ( r3 ) -------------------------------------------------- # Output: [ < Element p at 0x1d4e4c29540 > ] [ '\u82cf\u8f7c' ] \u82cf\u8f7c < class ' list '> 5. /@attrName \uff1a\u8fd4\u56de\u6807\u7b7e\u7684attrName\u5c5e\u6027\u7684\u503c tag/@attrName \uff1a\u83b7\u53d6tag\u6807\u7b7e\u4e2d\u7684attrName\u5c5e\u6027\u7684\u503c from lxml import etree with open ( './test.html' , 'r' , encoding = 'utf-8' ) as f : f_content = f . read () tree = etree . HTML ( f_content ) r1 = tree . xpath ( '//div[@class=\"song\"]/a/@href' ) print ( r1 ) r2 = tree . xpath ( '//div[@class=\"song\"]/img/@src' ) print ( r2 ) -------------------------------------------------- # Output: [ 'https://www.song.com' , '' ] [ 'https://www.baidu.com/meinv.jpg' ] < class ' list '> 5. /@* \uff1a\u8fd4\u56de\u6807\u7b7e\u7684\u6240\u6709\u5c5e\u6027\u7684\u503c tag/@* \uff1a\u83b7\u53d6tag\u6807\u7b7e\u4e2d\u7684\u6240\u6709\u5c5e\u6027\u7684\u503c from lxml import etree with open ( './test.html' , 'r' , encoding = 'utf-8' ) as f : f_content = f . read () tree = etree . HTML ( f_content ) r1 = tree . xpath ( '//div[@class=\"song\"]/a[@target=\"_self\"]/@*' ) print ( r1 ) -------------------------------------------------- # Output: [ 'https://www.song.com' , '\u8d75\u5321\u80e4' , '_self' ] < class ' list '>","title":"\u4f7f\u7528"},{"location":"Python/Crawler/Python-Crawler-2-Focued-Crawler/#_15","text":"\u4ece\u5f7c\u5cb8\u56fe\u7f51\u4e0b\u8f7d4K\u56fe\u4fdd\u5b58\u81f3\u672c\u5730 import os from lxml import etree import requests UA = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Safari/537.36 Edg/84.0.522.44' header = { 'User-Agent' : UA } path = './\u722c\u866b/4k' if not os . path . exists ( path ): os . mkdir ( path ) def get_url (): \"\"\" \u83b7\u53d6\u6240\u6709\u56fe\u7247\u5730\u5740 \"\"\" url = 'http://pic.netbian.com/4kmeinv/' index_text = requests . get ( url = url , headers = header ) . text tree = etree . HTML ( index_text ) a_list = tree . xpath ( '//div[@id=\"main\"]/div[3]/ul/li/a' ) # response.encoding = 'utf-8' # \u5904\u7406\u4e2d\u6587\u4e71\u7801\u65b9\u5f0f1\uff0c\u4e0d\u4e00\u5b9a\u6709\u6548 img_list = list () for a in a_list : src : str = 'http://pic.netbian.com' + a . xpath ( './@href' )[ 0 ] title : str = a . xpath ( './b/text()' )[ 0 ] + '.jpg' title = title . encode ( 'iso-8859-1' ) . decode ( 'gbk' ) # \u5904\u7406\u4e2d\u6587\u4e71\u7801\u65b9\u5f0f2 img_list . append (( title , src )) return img_list def download_img ( img_info ): \"\"\" \u4e0b\u8f7d\u56fe\u7247 \"\"\" img_content = requests . get ( url = img_info [ 1 ], headers = header ) . content filepath = os . path . join ( path , img_info [ 0 ]) with open ( filepath , 'wb' ) as f : f . write ( img_content ) def main (): img_list = get_url () for img_info in img_list : download_img ( img_info ) if __name__ == '__main__' : main ()","title":"\u6848\u4f8b"},{"location":"Python/Type/Python-No-Type-String/","text":"\u5173\u4e8eString\u7684\u8be6\u7ec6\u7b14\u8bb0 a = 'hello' b = \"good\" c = \"\"\" \u54c8\u54c8\u54c8 \"\"\" d = ''' \u5475\u5475\u5475 ''' str1 = 'OK' # OK str2 = \"OK\" # OK str3 = '''I'm OK.''' # I'm OK. str4 = \"\"\"\u54c8\u54c8\u54c8\"\"\" # \u54c8\u54c8\u54c8 str4 = \"I'm ok.\" # I'm ok. str5 = 'I \\' m ok.' # I'm ok. str6 = \"I \\\" m ok.\" # I\"m ok. str7 = 'I\"m ok.' # I\"m ok. str8 = \"\"\"I'm \"Iron Man\".\"\"\" # I'm \"Iron Man\". str9 = r 'ab\\ncd' # ab\\ncd str0 = R 'ab\\ncd' # ab\\ncd str_1 = '''\u8fd9\u662f\u4e00\u4e2a\u6bb5\u843d\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u6362\u884c\uff0c\u4e0d\u9700\u53cd\u659c\u6760\u6765\u58f0\u660e\u8bed\u53e5\u672a\u7ed3\u675f \u76f4\u5230\u9047\u5230\u4e0b\u4e00\u4e2a\u4e09\u5355\u5f15\u53f7\uff0c\u624d\u8ba4\u4e3a\u7ed3\u675f \u4f46\u662f\u6362\u884c\u4f1a\u8ddf\u7740\u6362\u884c\uff0c\u7a7a\u683c\u4f1a\u8ddf\u7740\u7a7a\u683c''' \"\"\" str_1\u8f93\u51fa\u4e3a\uff1a \u8fd9\u662f\u4e00\u4e2a\u6bb5\u843d\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u6362\u884c\uff0c\u4e0d\u9700\u53cd\u659c\u6760\u6765\u58f0\u660e\u8bed\u53e5\u672a\u7ed3\u675f \u76f4\u5230\u9047\u5230\u4e0b\u4e00\u4e2a\u4e09\u5355\u5f15\u53f7\uff0c\u624d\u8ba4\u4e3a\u7ed3\u675f \u4f46\u662f\u6362\u884c\u4f1a\u8ddf\u7740\u6362\u884c\uff0c\u7a7a\u683c\u4f1a\u8ddf\u7740\u7a7a\u683c \"\"\" \\ n \u6362\u884c \\ t \u7f29\u8fdb # \u4f7f\u7528\u8f6c\u4e49\u5b57\u7b26 str_2 = 'ab \\n cd' ''' str_2\u8f93\u51fa\u4e3a\uff1a ab cd ''' r '\u5b57\u7b26\u4e32' \u8868\u793a\u4e0d\u8f6c\u4e49 # \u4e0d\u8f6c\u4e49 str_3 = r 'ab\\ncd' # ab\\ncd \u8f6c\u4e49\u5b57\u7b26 \u8f6c\u4e49\u5b57\u7b26 \u63cf\u8ff0 \\ \u7eed\u884c\u7b26 \\ \u53cd\u659c\u6760 \\' \u5355\u5f15\u53f7 \\\" \u53cc\u5f15\u53f7 \\a \u54cd\u94c3 \\b \u9000\u683c \\e \u8f6c\u4e49 \\000 \u7a7a \\n \u6362\u884c \\v \u7eb5\u5411\u5236\u8868\u7b26 \\t \u6a2a\u5411\u5236\u8868\u7b26 \\r \u56de\u8f66 \\f \u6362\u9875 \\o \u516b\u8fdb\u5236 \\x \u5341\u516d\u8fdb\u5236 \u4e0b\u6807 \u00b6 | P | y | t | h | o | n | 0 1 2 3 4 5 - 6 - 5 - 4 - 3 - 2 - 1 \u67e5\u627e find\u3001index\u3001rfind\u3001rindex \u00b6 s.find(sub[, start[, end]) -> int s.rfind(sub[, start[, end]) -> int s.index(sub[, start[, end]) -> int s.rindex(sub[, start[, end]) -> int \u6ca1r\u627e\u7b2c\u4e00\u4e2a\uff0c\u6709r\u627e\u6700\u540e\u4e00\u4e2a find\u627e\u4e0d\u5230\u8fd4\u56de-1\uff0cindex\u627e\u4e0d\u5230\u62a5\u9519 s = 'abcdefghijkl abundance gg' print ( s . find ( 'g' )) # \u8fd4\u56de\u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e00\u4e2a g \u7684\u4e0b\u6807\uff1a6 print ( s . find ( 'z' )) # \u627e\u4e0d\u5230\u5219\u8fd4\u56de -1 print ( s . index ( 'g' )) # \u8fd4\u56de\u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e00\u4e2a g \u7684\u4e0b\u6807\uff1a6 print ( s . index ( 'z' )) # \u627e\u4e0d\u5230\u5219\u62a5\u9519 print ( s . rfind ( 'g' )) # \u8fd4\u56de\u5b57\u7b26\u4e32\u4e2d\u6700\u540e\u4e00\u4e2a g \u7684\u4e0b\u6807\uff1a24 print ( s . rfind ( 'z' )) # \u627e\u4e0d\u5230\u5219\u8fd4\u56de -1 print ( s . rindex ( 'g' )) # \u8fd4\u56de\u5b57\u7b26\u4e32\u4e2d\u6700\u540e\u4e00\u4e2a g \u7684\u4e0b\u6807\uff1a24 print ( s . rindex ( 'z' )) # \u627e\u4e0d\u5230\u5219\u62a5\u9519 \u5224\u65ad \u00b6 \u65b9\u6cd5\u540d \u63cf\u8ff0 startswith(value) \u5224\u65ad\u662f\u5426\u4ee5 value \u5f00\u59cb endswith(value) \u5224\u65ad\u662f\u5426\u4ee5 value \u7ed3\u675f isalpha() \u5224\u65ad\u662f\u5426\u5168\u662f\u5b57\u6bcd isdigit() \u5224\u65ad\u662f\u5426\u5168\u662f\u6570\u5b57 isalnum() \u5224\u65ad\u662f\u5426\u5168\u662f\u5b57\u6bcd\u6216\u6570\u5b57\u6216\u5b57\u6bcd+\u6570\u5b57 isdecimal() \u5224\u65ad\u662f\u5426\u5168\u662f\u6d6e\u70b9\u6570 isnumeric() \u5224\u65ad\u662f\u5426\u5168\u662f\u6570\u503c islower() \u5224\u65ad\u662f\u5426\u5168\u5c0f\u5199 isupper() \u5224\u65ad\u662f\u5426\u5168\u5927\u5199 isspace() \u5224\u65ad\u662f\u5426\u5168\u7a7a\u683c\u6216\\t\u6216\\n\u6216\\r istitle() \u5224\u65ad\u662f\u5426\u6240\u6709\u5355\u8bcd\u90fd\u662f\u9996\u5b57\u6bcd\u5927\u5199 isdigit() VS isdecimal() VS isnumeric() \u00b6 isdigit() True: Unicode\u6570\u5b57\uff0cbyte\u6570\u5b57\uff08\u5355\u5b57\u8282\uff09\uff0c\u5168\u89d2\u6570\u5b57\uff08\u53cc\u5b57\u8282\uff09\uff0c\u7f57\u9a6c\u6570\u5b57 False: \u6c49\u5b57\u6570\u5b57 Error: \u65e0 isdecimal() True: Unicode\u6570\u5b57\uff0c\uff0c\u5168\u89d2\u6570\u5b57\uff08\u53cc\u5b57\u8282\uff09 False: \u7f57\u9a6c\u6570\u5b57\uff0c\u6c49\u5b57\u6570\u5b57 Error: byte\u6570\u5b57\uff08\u5355\u5b57\u8282\uff09 isnumeric() True: Unicode\u6570\u5b57\uff0c\u5168\u89d2\u6570\u5b57\uff08\u53cc\u5b57\u8282\uff09\uff0c\u7f57\u9a6c\u6570\u5b57\uff0c\u6c49\u5b57\u6570\u5b57 False: \u65e0 Error: byte\u6570\u5b57\uff08\u5355\u5b57\u8282\uff09 \u8ba1\u6570 count \u00b6 s.count(sub[, start[, end]) -> int s = 'abcdefghijkl abundance gg' print ( s . count ( 'g' )) # 3. \u5b57\u6bcd g \u4e00\u5171\u51fa\u73b0\u4e863\u6b21 \u66ff\u6362 replace \u00b6 s.replace(old, new[, count]) -> str \u66ff\u6362\u5b57\u7b26\u4e32\u4e2d\u6307\u5b9a\u7684\u5185\u5bb9\uff0c\u5982\u679c\u6307\u5b9a\u6b21\u6570count\uff0c \u5219\u66ff\u6362\u4e0d\u4f1a\u8d85\u8fc7count\u6b21\u3002 s = 'abcdefghijkl abundance gg' print ( s . replace ( 'g' , '*' )) # abcdef*hijkl abundance ** print ( s . replace ( 'g' , '*' , 2 )) # abcdef*hijkl abundance *g \u5206\u5272 split\u3001rsplit\u3001partition\u3001rpartition\u3001splitlines \u00b6 s.split(sep[, maxsplit]) -> list[str] \uff1a\u6309 sep \u5206\u5272\uff0c\u4ece\u5de6\u8fb9\u5f00\u59cb\uff0c\u53ea\u5206\u5272\u4e24\u6b21 s.rsplit(sep[, maxsplit]) -> list[str] \uff1a\u6309 sep \u5206\u5272\uff0c\u4ece\u53f3\u8fb9\u5f00\u59cb\uff0c\u53ea\u5206\u5272\u4e24\u6b21 s.patition(sep) -> tuple(str, str, str) \uff1a\u6309 sep \u5206\u5272\uff0c\u4ece\u5de6\u8fb9\u5f00\u59cb\uff0c\u5206\u6210 (\u524d\u90e8\uff0c\u5206\u5272\u7b26\u53f7\uff0c\u540e\u90e8) s.rpartition(sep) -> tuple(str, str, str) \uff1a\u6309 sep \u5206\u5272\uff0c\u4ece\u53f3\u8fb9\u5f00\u59cb\uff0c\u5206\u6210 (\u524d\u90e8\uff0c\u5206\u5272\u7b26\u53f7\uff0c\u540e\u90e8) s1 = 'Alice,Boii,Candy,Dannis,Eva,Fiona' print ( s1 . split ( ',' )) # ['Alice', 'Boii', 'Candy', 'Dannis', 'Eva', 'Fiona'] print ( s1 . split ( ',' , 2 )) # ['Alice', 'Boii', 'Candy,Dannis,Eva,Fiona'] print ( s1 . rsplit ( ',' , 2 )) # ['Alice,Boii,Candy,Dannis', 'Eva', 'Fiona'] s2 = '2020.8.8\u62cd\u6444.mp4' print ( s2 . partition ( '.' )) # ('2020', '.', '8.8\u62cd\u6444.mp4') print ( s2 . rpartition ( '.' )) # ('2020.8.8\u62cd\u6444', '.', 'mp4') s.splitlines([keepends]) -> list[str] \uff1a\u6309\u6362\u884c\u7b26\uff08\\n\uff0c\\r\uff0c\\r\\n\uff09\u5206\u5272 keepends -- \u5728\u8f93\u51fa\u7ed3\u679c\u91cc\u662f\u5426\u4fdd\u7559\u6362\u884c\u7b26('\\r', '\\r\\n', \\n')\uff0c\u9ed8\u8ba4\u4e3a False\uff0c\u4e0d\u5305\u542b\u6362\u884c\u7b26\uff0c\u5982\u679c\u4e3a True\uff0c\u5219\u4fdd\u7559\u6362\u884c\u7b26\u3002 str1 = 'ab c \\n\\n de fg \\r kl \\r\\n ' print ( str1 . splitlines ()) # ['ab c', '', 'de fg', 'kl'] str2 = 'ab c \\n\\n de fg \\r kl \\r\\n ' print ( str2 . splitlines ( True )) # ['ab c\\n', '\\n', 'de fg\\r', 'kl\\r\\n'] \u5207\u7247 \u00b6 \u4ece\u5b57\u7b26\u4e32\u91cc\u622a\u53d6\u4e00\u6bb5\u6307\u5b9a\u7684\u5185\u5bb9\uff0c\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32 \u5207\u7247\u90fd\u662f**\u5305\u5934\u4e0d\u5305\u5c3e** \u5177\u4f53\u53c2\u8003 \u9ad8\u7ea7\u7279\u6027->\u5207\u7247 \u8f6c\u6362\u5927\u5c0f\u5199 \u00b6 s = 'hello woRlD.good mornIng' # \u5c06\u7b2c\u4e00\u4e2a\u5b57\u7b26\u8f6c\u6210\u5927\u5199\uff0c\u5176\u4ed6\u5b57\u7b26\u8f6c\u6210\u5c0f\u5199 print ( s . capitalize ()) # Hello world.good morning # \u5c06\u5168\u90e8\u5b57\u7b26\u8f6c\u6210\u5927\u5199 print ( s . upper ()) # HELLO WORLD.GOOD MORNING # \u5c06\u5168\u90e8\u5b57\u7b26\u8f6c\u6210\u5c0f\u5199 print ( s . lower ()) # hello world.good morning # \u5c06\u6bcf\u4e2a\u5355\u8bcd\u9996\u5b57\u6bcd\u8f6c\u6210\u5927\u5199 print ( s . title ()) # Hello World.Good Morning \u586b\u5145 \u00b6 s.ljust(weight, fillchar='') -> str s.rjust(weight, fillchar='') -> str s.center(weight, fillchar='') -> str \u4e0d\u8db3 weight \u7684\u8bdd\uff0c\u7528 fillchar \u586b\u5145\uff0cfillchar\u9ed8\u8ba4\u7a7a\u683c print ( '|' + 'Monday' . ljust ( 10 ) + '|' ) # |Monday | print ( '|' + 'Monday' . ljust ( 10 , '^' ) + '|' ) # |Monday^^^^| print ( '|' + 'Monday' . rjust ( 10 ) + '|' ) # | Monday| print ( '|' + 'Monday' . rjust ( 10 , '#' ) + '|' ) # |####Monday| print ( '|' + 'Friday' . center ( 20 , '*' ) + '|' ) # |*******Friday*******| print ( '|' + 'Friday' . center ( 4 , '*' ) + '|' ) # |Friday| \u4fee\u526a \u00b6 s.lstrip(chars) -> str s.rstrip(chars) -> str s.strip(chars) -> str \u5220\u9664\u5b57\u7b26\u4e32 \u5de6\u8fb9 / \u53f3\u8fb9 / \u5de6\u8fb9+\u53f3\u8fb9 \u7684 chars \u5b57\u7b26 print ( '|' + ' Couldy Sunny ' . lstrip () + '|' ) # |Couldy Sunny | print ( '|' + ' Couldy Sunny ' . rstrip () + '|' ) # | Couldy Sunny| print ( '|' + ' Couldy Sunny ' . strip () + '|' ) # |Couldy Sunny| print ( '|' + ' Couldy+Sunny+++' . lstrip ( '+' ) + '|' ) # | Couldy+Sunny+++| print ( '|' + ' Couldy+Sunny+++' . rstrip ( '+' ) + '|' ) # | Couldy+Sunny| print ( '|' + ' Couldy+Sunny+++' . strip ( '+' ) + '|' ) # | Couldy+Sunny| \u62fc\u63a5 \u00b6 s.join(iterable) -> str \u5c06 s \u62fc\u63a5\u5230 iterable \u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u4e0a li = [ 'Alice' , 'Boii' , 'Candy' , 'Dannis' , 'Eva' , 'Fiona' ] print ( ' - ' . join ( li )) # Alice - Boii - Candy - Dannis - Eva - Fiona print ( '+' . join ( 'Hello' )) # H+e+l+l+o dic = { 'name1' : 'Alice' , 'name2' : 'Boii' } print ( ' - ' . join ( dic )) # name1 - name2 \u7f16\u7801 \u00b6 ASCII 0~127\u5171128\u4e2a\uff0c\u5360\u7528 1byte \u5373 8bit \u7684\u957f\u5ea6\uff0c\u5171\u4f7f\u7528\u4e867\u4f4d\u7684\u957f\u5ea6\uff0c\u4ece0000 0000 \u5230 0111 1111\u3002 48-57 -> 0-9\uff0c65-90 -> A-Z\uff0c97-122 -> a-z ISO-8859-1 0~255\u5171256\u4e2a\uff0c\u5360\u7528 1byte \u5373 8bit \u7684\u957f\u5ea6\uff0c\u5171\u4f7f\u7528\u4e868\u4f4d\u7684\u957f\u5ea6\uff0c\u4ece 0000 0000\u52301111 1111\u3002 0 127\u4e0eASCII\u5b8c\u5168\u517c\u5bb9\uff0c128 255\u662f\u4e00\u4e9b\u6b27\u6d32\u5b57\u6bcd Unicode \u4e07\u56fd\u7801\uff0c\u6c49\u5b57\u6bcf\u4e2a\u5360 3byte GBK \u56fd\u6807\u6269\uff0c\u6c49\u5b57\u6bcf\u4e2a\u5360 2byte \u957f\u5ea6 \u00b6 \u683c\u5f0f\u5316 \u00b6 \u4e0d\u53ef\u53d8\u6027 \u00b6 \u5b57\u7b26\u4e32\u662f\u4e0d\u53ef\u53d8\u5bf9\u8c61\u3002 \u5f53\u6267\u884c\u4e00\u4e2a str = 'abc' \u7684\u8bed\u53e5\u65f6\uff0c python\u5728\u5b57\u7b26\u4e32\u6c60\u4e2d\u521b\u5efa\u4e86\u4e00\u4e2a\u5b57\u7b26\u4e32 'abc' \uff0c \u7136\u540e\u5728\u5185\u5b58\u4e2d\u521b\u5efa\u4e00\u4e2a\u53d8\u91cf str \u6307\u5411\u5b57\u7b26\u4e32\u6c60\u4e2d\u7684 'abc' \u5982\u679c\u5bf9 str \u8fdb\u884c\u4fee\u6539 str = 'xyz' python\u4f1a\u5728\u5b57\u7b26\u4e32\u6c60\u4e2d\u518d\u521b\u5efa\u4e00\u4e2a\u5b57\u7b26\u4e32 'xyz' \uff0c \u7136\u540e\u8ba9\u53d8\u91cf str \u6307\u5411\u5b57\u7b26\u4e32\u6c60\u4e2d\u7684 'xyz' \u6b64\u65f6\u5b57\u7b26\u4e32\u6c60\u5176\u5b9e\u6709 'abc' \u548c 'xyz' \uff0c\u53ea\u4e0d\u8fc7 'abc' \u6ca1\u6709\u88ab\u6307\u5411\uff0c 'xyz' \u88ab str \u6307\u5411 \u6240\u4ee5\uff0c\u5bf9\u4e8e\u4e0d\u53d8\u5bf9\u8c61\u6765\u8bf4\uff0c \u8c03\u7528\u5bf9\u8c61\u81ea\u8eab\u7684\u4efb\u610f\u65b9\u6cd5\uff0c\u4e5f\u4e0d\u4f1a\u6539\u53d8\u8be5\u5bf9\u8c61\u81ea\u8eab\u7684\u5185\u5bb9\u3002 \u76f8\u53cd\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u4f1a\u521b\u5efa\u65b0\u7684\u5bf9\u8c61\u5e76\u8fd4\u56de \u8fd9\u6837\uff0c\u5c31\u4fdd\u8bc1\u4e86\u4e0d\u53ef\u53d8\u5bf9\u8c61\u672c\u8eab\u6c38\u8fdc\u662f\u4e0d\u53ef\u53d8\u7684\u3002","title":"Python\u3010Type\u3011String"},{"location":"Python/Type/Python-No-Type-String/#_1","text":"| P | y | t | h | o | n | 0 1 2 3 4 5 - 6 - 5 - 4 - 3 - 2 - 1","title":"\u4e0b\u6807"},{"location":"Python/Type/Python-No-Type-String/#findindexrfindrindex","text":"s.find(sub[, start[, end]) -> int s.rfind(sub[, start[, end]) -> int s.index(sub[, start[, end]) -> int s.rindex(sub[, start[, end]) -> int \u6ca1r\u627e\u7b2c\u4e00\u4e2a\uff0c\u6709r\u627e\u6700\u540e\u4e00\u4e2a find\u627e\u4e0d\u5230\u8fd4\u56de-1\uff0cindex\u627e\u4e0d\u5230\u62a5\u9519 s = 'abcdefghijkl abundance gg' print ( s . find ( 'g' )) # \u8fd4\u56de\u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e00\u4e2a g \u7684\u4e0b\u6807\uff1a6 print ( s . find ( 'z' )) # \u627e\u4e0d\u5230\u5219\u8fd4\u56de -1 print ( s . index ( 'g' )) # \u8fd4\u56de\u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e00\u4e2a g \u7684\u4e0b\u6807\uff1a6 print ( s . index ( 'z' )) # \u627e\u4e0d\u5230\u5219\u62a5\u9519 print ( s . rfind ( 'g' )) # \u8fd4\u56de\u5b57\u7b26\u4e32\u4e2d\u6700\u540e\u4e00\u4e2a g \u7684\u4e0b\u6807\uff1a24 print ( s . rfind ( 'z' )) # \u627e\u4e0d\u5230\u5219\u8fd4\u56de -1 print ( s . rindex ( 'g' )) # \u8fd4\u56de\u5b57\u7b26\u4e32\u4e2d\u6700\u540e\u4e00\u4e2a g \u7684\u4e0b\u6807\uff1a24 print ( s . rindex ( 'z' )) # \u627e\u4e0d\u5230\u5219\u62a5\u9519","title":"\u67e5\u627e find\u3001index\u3001rfind\u3001rindex"},{"location":"Python/Type/Python-No-Type-String/#_2","text":"\u65b9\u6cd5\u540d \u63cf\u8ff0 startswith(value) \u5224\u65ad\u662f\u5426\u4ee5 value \u5f00\u59cb endswith(value) \u5224\u65ad\u662f\u5426\u4ee5 value \u7ed3\u675f isalpha() \u5224\u65ad\u662f\u5426\u5168\u662f\u5b57\u6bcd isdigit() \u5224\u65ad\u662f\u5426\u5168\u662f\u6570\u5b57 isalnum() \u5224\u65ad\u662f\u5426\u5168\u662f\u5b57\u6bcd\u6216\u6570\u5b57\u6216\u5b57\u6bcd+\u6570\u5b57 isdecimal() \u5224\u65ad\u662f\u5426\u5168\u662f\u6d6e\u70b9\u6570 isnumeric() \u5224\u65ad\u662f\u5426\u5168\u662f\u6570\u503c islower() \u5224\u65ad\u662f\u5426\u5168\u5c0f\u5199 isupper() \u5224\u65ad\u662f\u5426\u5168\u5927\u5199 isspace() \u5224\u65ad\u662f\u5426\u5168\u7a7a\u683c\u6216\\t\u6216\\n\u6216\\r istitle() \u5224\u65ad\u662f\u5426\u6240\u6709\u5355\u8bcd\u90fd\u662f\u9996\u5b57\u6bcd\u5927\u5199","title":"\u5224\u65ad"},{"location":"Python/Type/Python-No-Type-String/#isdigit-vs-isdecimal-vs-isnumeric","text":"isdigit() True: Unicode\u6570\u5b57\uff0cbyte\u6570\u5b57\uff08\u5355\u5b57\u8282\uff09\uff0c\u5168\u89d2\u6570\u5b57\uff08\u53cc\u5b57\u8282\uff09\uff0c\u7f57\u9a6c\u6570\u5b57 False: \u6c49\u5b57\u6570\u5b57 Error: \u65e0 isdecimal() True: Unicode\u6570\u5b57\uff0c\uff0c\u5168\u89d2\u6570\u5b57\uff08\u53cc\u5b57\u8282\uff09 False: \u7f57\u9a6c\u6570\u5b57\uff0c\u6c49\u5b57\u6570\u5b57 Error: byte\u6570\u5b57\uff08\u5355\u5b57\u8282\uff09 isnumeric() True: Unicode\u6570\u5b57\uff0c\u5168\u89d2\u6570\u5b57\uff08\u53cc\u5b57\u8282\uff09\uff0c\u7f57\u9a6c\u6570\u5b57\uff0c\u6c49\u5b57\u6570\u5b57 False: \u65e0 Error: byte\u6570\u5b57\uff08\u5355\u5b57\u8282\uff09","title":"isdigit() VS isdecimal() VS isnumeric()"},{"location":"Python/Type/Python-No-Type-String/#count","text":"s.count(sub[, start[, end]) -> int s = 'abcdefghijkl abundance gg' print ( s . count ( 'g' )) # 3. \u5b57\u6bcd g \u4e00\u5171\u51fa\u73b0\u4e863\u6b21","title":"\u8ba1\u6570 count"},{"location":"Python/Type/Python-No-Type-String/#replace","text":"s.replace(old, new[, count]) -> str \u66ff\u6362\u5b57\u7b26\u4e32\u4e2d\u6307\u5b9a\u7684\u5185\u5bb9\uff0c\u5982\u679c\u6307\u5b9a\u6b21\u6570count\uff0c \u5219\u66ff\u6362\u4e0d\u4f1a\u8d85\u8fc7count\u6b21\u3002 s = 'abcdefghijkl abundance gg' print ( s . replace ( 'g' , '*' )) # abcdef*hijkl abundance ** print ( s . replace ( 'g' , '*' , 2 )) # abcdef*hijkl abundance *g","title":"\u66ff\u6362 replace"},{"location":"Python/Type/Python-No-Type-String/#splitrsplitpartitionrpartitionsplitlines","text":"s.split(sep[, maxsplit]) -> list[str] \uff1a\u6309 sep \u5206\u5272\uff0c\u4ece\u5de6\u8fb9\u5f00\u59cb\uff0c\u53ea\u5206\u5272\u4e24\u6b21 s.rsplit(sep[, maxsplit]) -> list[str] \uff1a\u6309 sep \u5206\u5272\uff0c\u4ece\u53f3\u8fb9\u5f00\u59cb\uff0c\u53ea\u5206\u5272\u4e24\u6b21 s.patition(sep) -> tuple(str, str, str) \uff1a\u6309 sep \u5206\u5272\uff0c\u4ece\u5de6\u8fb9\u5f00\u59cb\uff0c\u5206\u6210 (\u524d\u90e8\uff0c\u5206\u5272\u7b26\u53f7\uff0c\u540e\u90e8) s.rpartition(sep) -> tuple(str, str, str) \uff1a\u6309 sep \u5206\u5272\uff0c\u4ece\u53f3\u8fb9\u5f00\u59cb\uff0c\u5206\u6210 (\u524d\u90e8\uff0c\u5206\u5272\u7b26\u53f7\uff0c\u540e\u90e8) s1 = 'Alice,Boii,Candy,Dannis,Eva,Fiona' print ( s1 . split ( ',' )) # ['Alice', 'Boii', 'Candy', 'Dannis', 'Eva', 'Fiona'] print ( s1 . split ( ',' , 2 )) # ['Alice', 'Boii', 'Candy,Dannis,Eva,Fiona'] print ( s1 . rsplit ( ',' , 2 )) # ['Alice,Boii,Candy,Dannis', 'Eva', 'Fiona'] s2 = '2020.8.8\u62cd\u6444.mp4' print ( s2 . partition ( '.' )) # ('2020', '.', '8.8\u62cd\u6444.mp4') print ( s2 . rpartition ( '.' )) # ('2020.8.8\u62cd\u6444', '.', 'mp4') s.splitlines([keepends]) -> list[str] \uff1a\u6309\u6362\u884c\u7b26\uff08\\n\uff0c\\r\uff0c\\r\\n\uff09\u5206\u5272 keepends -- \u5728\u8f93\u51fa\u7ed3\u679c\u91cc\u662f\u5426\u4fdd\u7559\u6362\u884c\u7b26('\\r', '\\r\\n', \\n')\uff0c\u9ed8\u8ba4\u4e3a False\uff0c\u4e0d\u5305\u542b\u6362\u884c\u7b26\uff0c\u5982\u679c\u4e3a True\uff0c\u5219\u4fdd\u7559\u6362\u884c\u7b26\u3002 str1 = 'ab c \\n\\n de fg \\r kl \\r\\n ' print ( str1 . splitlines ()) # ['ab c', '', 'de fg', 'kl'] str2 = 'ab c \\n\\n de fg \\r kl \\r\\n ' print ( str2 . splitlines ( True )) # ['ab c\\n', '\\n', 'de fg\\r', 'kl\\r\\n']","title":"\u5206\u5272 split\u3001rsplit\u3001partition\u3001rpartition\u3001splitlines"},{"location":"Python/Type/Python-No-Type-String/#_3","text":"\u4ece\u5b57\u7b26\u4e32\u91cc\u622a\u53d6\u4e00\u6bb5\u6307\u5b9a\u7684\u5185\u5bb9\uff0c\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32 \u5207\u7247\u90fd\u662f**\u5305\u5934\u4e0d\u5305\u5c3e** \u5177\u4f53\u53c2\u8003 \u9ad8\u7ea7\u7279\u6027->\u5207\u7247","title":"\u5207\u7247"},{"location":"Python/Type/Python-No-Type-String/#_4","text":"s = 'hello woRlD.good mornIng' # \u5c06\u7b2c\u4e00\u4e2a\u5b57\u7b26\u8f6c\u6210\u5927\u5199\uff0c\u5176\u4ed6\u5b57\u7b26\u8f6c\u6210\u5c0f\u5199 print ( s . capitalize ()) # Hello world.good morning # \u5c06\u5168\u90e8\u5b57\u7b26\u8f6c\u6210\u5927\u5199 print ( s . upper ()) # HELLO WORLD.GOOD MORNING # \u5c06\u5168\u90e8\u5b57\u7b26\u8f6c\u6210\u5c0f\u5199 print ( s . lower ()) # hello world.good morning # \u5c06\u6bcf\u4e2a\u5355\u8bcd\u9996\u5b57\u6bcd\u8f6c\u6210\u5927\u5199 print ( s . title ()) # Hello World.Good Morning","title":"\u8f6c\u6362\u5927\u5c0f\u5199"},{"location":"Python/Type/Python-No-Type-String/#_5","text":"s.ljust(weight, fillchar='') -> str s.rjust(weight, fillchar='') -> str s.center(weight, fillchar='') -> str \u4e0d\u8db3 weight \u7684\u8bdd\uff0c\u7528 fillchar \u586b\u5145\uff0cfillchar\u9ed8\u8ba4\u7a7a\u683c print ( '|' + 'Monday' . ljust ( 10 ) + '|' ) # |Monday | print ( '|' + 'Monday' . ljust ( 10 , '^' ) + '|' ) # |Monday^^^^| print ( '|' + 'Monday' . rjust ( 10 ) + '|' ) # | Monday| print ( '|' + 'Monday' . rjust ( 10 , '#' ) + '|' ) # |####Monday| print ( '|' + 'Friday' . center ( 20 , '*' ) + '|' ) # |*******Friday*******| print ( '|' + 'Friday' . center ( 4 , '*' ) + '|' ) # |Friday|","title":"\u586b\u5145"},{"location":"Python/Type/Python-No-Type-String/#_6","text":"s.lstrip(chars) -> str s.rstrip(chars) -> str s.strip(chars) -> str \u5220\u9664\u5b57\u7b26\u4e32 \u5de6\u8fb9 / \u53f3\u8fb9 / \u5de6\u8fb9+\u53f3\u8fb9 \u7684 chars \u5b57\u7b26 print ( '|' + ' Couldy Sunny ' . lstrip () + '|' ) # |Couldy Sunny | print ( '|' + ' Couldy Sunny ' . rstrip () + '|' ) # | Couldy Sunny| print ( '|' + ' Couldy Sunny ' . strip () + '|' ) # |Couldy Sunny| print ( '|' + ' Couldy+Sunny+++' . lstrip ( '+' ) + '|' ) # | Couldy+Sunny+++| print ( '|' + ' Couldy+Sunny+++' . rstrip ( '+' ) + '|' ) # | Couldy+Sunny| print ( '|' + ' Couldy+Sunny+++' . strip ( '+' ) + '|' ) # | Couldy+Sunny|","title":"\u4fee\u526a"},{"location":"Python/Type/Python-No-Type-String/#_7","text":"s.join(iterable) -> str \u5c06 s \u62fc\u63a5\u5230 iterable \u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u4e0a li = [ 'Alice' , 'Boii' , 'Candy' , 'Dannis' , 'Eva' , 'Fiona' ] print ( ' - ' . join ( li )) # Alice - Boii - Candy - Dannis - Eva - Fiona print ( '+' . join ( 'Hello' )) # H+e+l+l+o dic = { 'name1' : 'Alice' , 'name2' : 'Boii' } print ( ' - ' . join ( dic )) # name1 - name2","title":"\u62fc\u63a5"},{"location":"Python/Type/Python-No-Type-String/#_8","text":"ASCII 0~127\u5171128\u4e2a\uff0c\u5360\u7528 1byte \u5373 8bit \u7684\u957f\u5ea6\uff0c\u5171\u4f7f\u7528\u4e867\u4f4d\u7684\u957f\u5ea6\uff0c\u4ece0000 0000 \u5230 0111 1111\u3002 48-57 -> 0-9\uff0c65-90 -> A-Z\uff0c97-122 -> a-z ISO-8859-1 0~255\u5171256\u4e2a\uff0c\u5360\u7528 1byte \u5373 8bit \u7684\u957f\u5ea6\uff0c\u5171\u4f7f\u7528\u4e868\u4f4d\u7684\u957f\u5ea6\uff0c\u4ece 0000 0000\u52301111 1111\u3002 0 127\u4e0eASCII\u5b8c\u5168\u517c\u5bb9\uff0c128 255\u662f\u4e00\u4e9b\u6b27\u6d32\u5b57\u6bcd Unicode \u4e07\u56fd\u7801\uff0c\u6c49\u5b57\u6bcf\u4e2a\u5360 3byte GBK \u56fd\u6807\u6269\uff0c\u6c49\u5b57\u6bcf\u4e2a\u5360 2byte","title":"\u7f16\u7801"},{"location":"Python/Type/Python-No-Type-String/#_9","text":"","title":"\u957f\u5ea6"},{"location":"Python/Type/Python-No-Type-String/#_10","text":"","title":"\u683c\u5f0f\u5316"},{"location":"Python/Type/Python-No-Type-String/#_11","text":"\u5b57\u7b26\u4e32\u662f\u4e0d\u53ef\u53d8\u5bf9\u8c61\u3002 \u5f53\u6267\u884c\u4e00\u4e2a str = 'abc' \u7684\u8bed\u53e5\u65f6\uff0c python\u5728\u5b57\u7b26\u4e32\u6c60\u4e2d\u521b\u5efa\u4e86\u4e00\u4e2a\u5b57\u7b26\u4e32 'abc' \uff0c \u7136\u540e\u5728\u5185\u5b58\u4e2d\u521b\u5efa\u4e00\u4e2a\u53d8\u91cf str \u6307\u5411\u5b57\u7b26\u4e32\u6c60\u4e2d\u7684 'abc' \u5982\u679c\u5bf9 str \u8fdb\u884c\u4fee\u6539 str = 'xyz' python\u4f1a\u5728\u5b57\u7b26\u4e32\u6c60\u4e2d\u518d\u521b\u5efa\u4e00\u4e2a\u5b57\u7b26\u4e32 'xyz' \uff0c \u7136\u540e\u8ba9\u53d8\u91cf str \u6307\u5411\u5b57\u7b26\u4e32\u6c60\u4e2d\u7684 'xyz' \u6b64\u65f6\u5b57\u7b26\u4e32\u6c60\u5176\u5b9e\u6709 'abc' \u548c 'xyz' \uff0c\u53ea\u4e0d\u8fc7 'abc' \u6ca1\u6709\u88ab\u6307\u5411\uff0c 'xyz' \u88ab str \u6307\u5411 \u6240\u4ee5\uff0c\u5bf9\u4e8e\u4e0d\u53d8\u5bf9\u8c61\u6765\u8bf4\uff0c \u8c03\u7528\u5bf9\u8c61\u81ea\u8eab\u7684\u4efb\u610f\u65b9\u6cd5\uff0c\u4e5f\u4e0d\u4f1a\u6539\u53d8\u8be5\u5bf9\u8c61\u81ea\u8eab\u7684\u5185\u5bb9\u3002 \u76f8\u53cd\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u4f1a\u521b\u5efa\u65b0\u7684\u5bf9\u8c61\u5e76\u8fd4\u56de \u8fd9\u6837\uff0c\u5c31\u4fdd\u8bc1\u4e86\u4e0d\u53ef\u53d8\u5bf9\u8c61\u672c\u8eab\u6c38\u8fdc\u662f\u4e0d\u53ef\u53d8\u7684\u3002","title":"\u4e0d\u53ef\u53d8\u6027"}]}